
L476_FreeRTOS_Snake_git.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b25c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800b3f0  0800b3f0  0001b3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b890  0800b890  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b890  0800b890  0001b890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b898  0800b898  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b898  0800b898  0001b898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b89c  0800b89c  0001b89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b8a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c3c  20000074  0800b914  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008cb0  0800b914  00028cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002012e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004055  00000000  00000000  000401d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  00044228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  00045d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005bbc  00000000  00000000  00047650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db11  00000000  00000000  0004d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103a38  00000000  00000000  0006ad1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000802c  00000000  00000000  0016e7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001767d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001767f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b3d4 	.word	0x0800b3d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800b3d4 	.word	0x0800b3d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <llist_create>:
#include <stdio.h>
#include <string.h>
#include "llist.h"

llist *llist_create(void *new_data)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    struct node *new_node;

    llist *new_list = (llist *)malloc(sizeof (llist));
 8000ea4:	2004      	movs	r0, #4
 8000ea6:	f008 fac5 	bl	8009434 <malloc>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60fb      	str	r3, [r7, #12]
    *new_list = (struct node *)malloc(sizeof (struct node));
 8000eae:	2010      	movs	r0, #16
 8000eb0:	f008 fac0 	bl	8009434 <malloc>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	601a      	str	r2, [r3, #0]


    new_node = *new_list;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60bb      	str	r3, [r7, #8]
    new_node->display = 0;
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
    new_node->x = 0;
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
    new_node->y = 4;
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	609a      	str	r2, [r3, #8]
    new_node->next = NULL;
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
    return new_list;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <llist_push>:

// Returns 0 on failure


void llist_push(llist *list, int display, int y, int x /*void *data*/)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
    struct node *head;
    struct node *new_node;
    if (list == NULL || *list == NULL) {
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <llist_push+0x1c>
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d107      	bne.n	8000f10 <llist_push+0x2c>
        fprintf(stderr, "llist_add_inorder: list is null\n");
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <llist_push+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2220      	movs	r2, #32
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4810      	ldr	r0, [pc, #64]	; (8000f4c <llist_push+0x68>)
 8000f0c:	f008 fa5c 	bl	80093c8 <fwrite>
    }

    head = *list;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	617b      	str	r3, [r7, #20]

    // Head is not empty, add new node to front



        new_node = malloc(sizeof (struct node));
 8000f16:	2010      	movs	r0, #16
 8000f18:	f008 fa8c 	bl	8009434 <malloc>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	613b      	str	r3, [r7, #16]
        new_node->display = display;
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	601a      	str	r2, [r3, #0]
        new_node->x = x;
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
        new_node->y = y;
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	609a      	str	r2, [r3, #8]
        new_node->next = head;
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	60da      	str	r2, [r3, #12]
        *list = new_node;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	601a      	str	r2, [r3, #0]

}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000010 	.word	0x20000010
 8000f4c:	0800b3f0 	.word	0x0800b3f0

08000f50 <llist_printSnake>:


void llist_printSnake(llist *list, int board[][8][8]) {
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]

	 struct node *curr = *list;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	617b      	str	r3, [r7, #20]
	 int display ;
	int x;
	int y;


	    while (curr != NULL) {
 8000f60:	e016      	b.n	8000f90 <llist_printSnake+0x40>
	    	int display = curr->display;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	613b      	str	r3, [r7, #16]
			int x = curr->x;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]
			int y = curr->y;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	60bb      	str	r3, [r7, #8]


	    	board[display][y][x] = 1;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	00d1      	lsls	r1, r2, #3
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	440a      	add	r2, r1
 8000f84:	2101      	movs	r1, #1
 8000f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	        curr = curr->next;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	617b      	str	r3, [r7, #20]
	    while (curr != NULL) {
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1e5      	bne.n	8000f62 <llist_printSnake+0x12>
	    }

}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <checkOccupiedRight>:
}




int checkOccupiedRight(llist *list, int boardState[][8][8]) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fb0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000fb4:	6018      	str	r0, [r3, #0]
 8000fb6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fba:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8000fbe:	6019      	str	r1, [r3, #0]
	struct node *head = *list;
 8000fc0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fc4:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	int nextCellState = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int display = head->display;
 8000fd6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	int x = head->x;
 8000fe0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	int y = head->y;
 8000fea:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	int temp[4][8][8];
	memcpy(temp, boardState, sizeof(temp));
 8000ff4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000ff8:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8000ffc:	f107 000c 	add.w	r0, r7, #12
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	6819      	ldr	r1, [r3, #0]
 8001006:	f008 fa25 	bl	8009454 <memcpy>
	if (x == 7){
 800100a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800100e:	2b07      	cmp	r3, #7
 8001010:	d117      	bne.n	8001042 <checkOccupiedRight+0x9e>
		 if (display == 3) return -1;// ran into wall
 8001012:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001016:	2b03      	cmp	r3, #3
 8001018:	d102      	bne.n	8001020 <checkOccupiedRight+0x7c>
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e025      	b.n	800106c <checkOccupiedRight+0xc8>


		 nextCellState = temp[display+1][y][0];
 8001020:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001024:	3301      	adds	r3, #1
 8001026:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800102a:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 800102e:	00d9      	lsls	r1, r3, #3
 8001030:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001034:	440b      	add	r3, r1
 8001036:	015b      	lsls	r3, r3, #5
 8001038:	4413      	add	r3, r2
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001040:	e012      	b.n	8001068 <checkOccupiedRight+0xc4>

	} else {
		nextCellState = temp[display][y][x+1];//todo change all to +1 and -1
 8001042:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800104c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8001050:	f8d7 1414 	ldr.w	r1, [r7, #1044]	; 0x414
 8001054:	00c8      	lsls	r0, r1, #3
 8001056:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 800105a:	4401      	add	r1, r0
 800105c:	00c9      	lsls	r1, r1, #3
 800105e:	440a      	add	r2, r1
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c


	}


	return nextCellState;
 8001068:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
}
 800106c:	4618      	mov	r0, r3
 800106e:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <checkOccupiedLeft>:

int checkOccupiedLeft(llist *list, int boardState[][8][8]) {
 8001076:	b580      	push	{r7, lr}
 8001078:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 800107c:	af00      	add	r7, sp, #0
 800107e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001082:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8001086:	6018      	str	r0, [r3, #0]
 8001088:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800108c:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001090:	6019      	str	r1, [r3, #0]
	struct node *head = *list;
 8001092:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001096:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

	int nextCellState=0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int display = head->display;
 80010a8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		int x = head->x;
 80010b2:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
		int y = head->y;
 80010bc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	int temp[4][8][8];
		memcpy(temp, boardState, sizeof(temp));
 80010c6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80010ca:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80010ce:	f107 000c 	add.w	r0, r7, #12
 80010d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	f008 f9bc 	bl	8009454 <memcpy>
	if (head->x == 0){
 80010dc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d119      	bne.n	800111a <checkOccupiedLeft+0xa4>
		 if (head->display == 0) return -1;// ran into wall
 80010e6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <checkOccupiedLeft+0x80>
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	e026      	b.n	8001144 <checkOccupiedLeft+0xce>

		 nextCellState = temp[display-1][y][7];
 80010f6:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8001100:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 8001104:	00d9      	lsls	r1, r3, #3
 8001106:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800110a:	440b      	add	r3, r1
 800110c:	015b      	lsls	r3, r3, #5
 800110e:	4413      	add	r3, r2
 8001110:	331c      	adds	r3, #28
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001118:	e012      	b.n	8001140 <checkOccupiedLeft+0xca>

	} else {

		nextCellState = temp[display][y][x-1];
 800111a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001124:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8001128:	f8d7 1414 	ldr.w	r1, [r7, #1044]	; 0x414
 800112c:	00c8      	lsls	r0, r1, #3
 800112e:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8001132:	4401      	add	r1, r0
 8001134:	00c9      	lsls	r1, r1, #3
 8001136:	440a      	add	r2, r1
 8001138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

	}


	return nextCellState;
 8001140:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
}
 8001144:	4618      	mov	r0, r3
 8001146:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <checkOccupiedUp>:

int checkOccupiedUp(llist *list, int boardState[][8][8]) {
 800114e:	b580      	push	{r7, lr}
 8001150:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8001154:	af00      	add	r7, sp, #0
 8001156:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800115a:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800115e:	6018      	str	r0, [r3, #0]
 8001160:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001164:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001168:	6019      	str	r1, [r3, #0]
	struct node *head = *list;
 800116a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800116e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int display = head->display;
 800117a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		int x = head->x;
 8001184:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		int y = head->y;
 800118e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	int nextCellState=0;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	int temp[4][8][8];
			memcpy(temp, boardState, sizeof(temp));
 800119e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80011a2:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80011a6:	f107 000c 	add.w	r0, r7, #12
 80011aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	f008 f950 	bl	8009454 <memcpy>
	if (head->y == 0) return -1;// ran into wall
 80011b4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d102      	bne.n	80011c4 <checkOccupiedUp+0x76>
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e014      	b.n	80011ee <checkOccupiedUp+0xa0>

	nextCellState = temp[display][y-1][x];
 80011c4:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80011ce:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80011d2:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 80011d6:	00c9      	lsls	r1, r1, #3
 80011d8:	440a      	add	r2, r1
 80011da:	00d1      	lsls	r1, r2, #3
 80011dc:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80011e0:	440a      	add	r2, r1
 80011e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e6:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	return nextCellState;
 80011ea:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <checkOccupiedDown>:

int checkOccupiedDown(llist *list, int boardState[][8][8]) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80011fe:	af00      	add	r7, sp, #0
 8001200:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001204:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8001208:	6018      	str	r0, [r3, #0]
 800120a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800120e:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001212:	6019      	str	r1, [r3, #0]
	struct node *head = *list;
 8001214:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001218:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int display = head->display;
 8001224:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		int x = head->x;
 800122e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		int y = head->y;
 8001238:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

	int temp[4][8][8];
				memcpy(temp, boardState, sizeof(temp));
 8001242:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001246:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800124a:	f107 000c 	add.w	r0, r7, #12
 800124e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	f008 f8fe 	bl	8009454 <memcpy>

	int nextCellState=0;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	if (head->y == 7) return -1;// ran into wall
 800125e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b07      	cmp	r3, #7
 8001266:	d102      	bne.n	800126e <checkOccupiedDown+0x76>
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	e014      	b.n	8001298 <checkOccupiedDown+0xa0>

	nextCellState = temp[display][y+1][x];
 800126e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001278:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800127c:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 8001280:	00c9      	lsls	r1, r1, #3
 8001282:	440a      	add	r2, r1
 8001284:	00d1      	lsls	r1, r2, #3
 8001286:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 800128a:	440a      	add	r2, r1
 800128c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001290:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	return nextCellState;
 8001294:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 8001298:	4618      	mov	r0, r3
 800129a:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <deleteLastNode>:

void deleteLastNode(llist *list) {
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	struct node *curr = *list;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]
	while (curr->next->next != NULL) {
 80012b0:	e002      	b.n	80012b8 <deleteLastNode+0x16>

		curr = curr->next;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	60fb      	str	r3, [r7, #12]
	while (curr->next->next != NULL) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f7      	bne.n	80012b2 <deleteLastNode+0x10>
	}
	struct node* lastNode = curr->next;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	60bb      	str	r3, [r7, #8]
	curr->next = NULL;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
	free(lastNode);
 80012ce:	68b8      	ldr	r0, [r7, #8]
 80012d0:	f008 f8b8 	bl	8009444 <free>
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <moveRight>:


void moveRight(llist *list,  int grow) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]

	struct node *head = *list;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	617b      	str	r3, [r7, #20]

	int display = head->display;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	613b      	str	r3, [r7, #16]
	int x = head->x;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	60fb      	str	r3, [r7, #12]
	int y = head->y;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	60bb      	str	r3, [r7, #8]

	if (x == 7) {
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b07      	cmp	r3, #7
 8001302:	d107      	bne.n	8001314 <moveRight+0x38>
		llist_push(list, display+1, y, 0 );
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1c59      	adds	r1, r3, #1
 8001308:	2300      	movs	r3, #0
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fde9 	bl	8000ee4 <llist_push>
 8001312:	e006      	b.n	8001322 <moveRight+0x46>
	} else {
		llist_push(list, display, y, x+1 );
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fde1 	bl	8000ee4 <llist_push>
	}


		if (grow == 0) deleteLastNode(list);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <moveRight+0x52>
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ffba 	bl	80012a2 <deleteLastNode>





}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <moveLeft>:


void moveLeft(llist *list,  int grow) {
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]

	struct node *head = *list;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	617b      	str	r3, [r7, #20]

	int display = head->display;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	613b      	str	r3, [r7, #16]
	int x = head->x;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	60fb      	str	r3, [r7, #12]
	int y = head->y;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	60bb      	str	r3, [r7, #8]

		if (head->x == 0) {
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d107      	bne.n	8001370 <moveLeft+0x3a>
			llist_push(list, display-1, y, 7 );
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1e59      	subs	r1, r3, #1
 8001364:	2307      	movs	r3, #7
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fdbb 	bl	8000ee4 <llist_push>
 800136e:	e006      	b.n	800137e <moveLeft+0x48>
		} else {
			llist_push(list, display, y, x-1 );
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3b01      	subs	r3, #1
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	6939      	ldr	r1, [r7, #16]
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fdb3 	bl	8000ee4 <llist_push>
		}

		if (grow == 0) deleteLastNode(list);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <moveLeft+0x54>
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff8c 	bl	80012a2 <deleteLastNode>
//		    free (second_last->next);
//
//		    // Change next of second last
//		    second_last->next = NULL;

}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <moveDown>:

void moveDown(llist *list,  int grow) {
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]

	struct node *head = *list;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	617b      	str	r3, [r7, #20]

	int display = head->display;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	613b      	str	r3, [r7, #16]
		int x = head->x;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	60fb      	str	r3, [r7, #12]
		int y = head->y;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	60bb      	str	r3, [r7, #8]
	llist_push(list, display, y+1, x );
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6939      	ldr	r1, [r7, #16]
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fd91 	bl	8000ee4 <llist_push>

	if (grow == 0) deleteLastNode(list);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <moveDown+0x3c>
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff6a 	bl	80012a2 <deleteLastNode>
//	free (second_last->next);
//
//	// Change next of second last
//	second_last->next = NULL;

}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <moveUp>:

void moveUp(llist *list,  int grow) {
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]


	struct node *head = *list;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	617b      	str	r3, [r7, #20]

	int display = head->display;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	613b      	str	r3, [r7, #16]
			int x = head->x;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	60fb      	str	r3, [r7, #12]
			int y = head->y;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	60bb      	str	r3, [r7, #8]

	llist_push(list, display, y-1, x );
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1e5a      	subs	r2, r3, #1
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6939      	ldr	r1, [r7, #16]
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff fd6f 	bl	8000ee4 <llist_push>

	if (grow == 0) deleteLastNode(list);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <moveUp+0x3c>
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff48 	bl	80012a2 <deleteLastNode>
//	// Delete last node
//	free (second_last->next);
//
//	// Change next of second last
//	second_last->next = NULL;
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001422:	f001 fd85 	bl	8002f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001426:	f000 f93f 	bl	80016a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142a:	f000 f9fd 	bl	8001828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800142e:	f000 f9cb 	bl	80017c8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001432:	f000 f98b 	bl	800174c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_MatrixInit(&hspi1, SPI_CS_GPIO_Port, SPI_CS_Pin);
 8001436:	2210      	movs	r2, #16
 8001438:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800143c:	4875      	ldr	r0, [pc, #468]	; (8001614 <main+0x1f8>)
 800143e:	f001 fa49 	bl	80028d4 <MAX7219_MatrixInit>
  MAX7219_MatrixUpdate();
 8001442:	f001 fadd 	bl	8002a00 <MAX7219_MatrixUpdate>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001446:	f004 feeb 	bl	8006220 <osKernelInitialize>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  xButtonPressedSem = xSemaphoreCreateBinary();
 800144a:	2203      	movs	r2, #3
 800144c:	2100      	movs	r1, #0
 800144e:	2001      	movs	r0, #1
 8001450:	f005 f9a6 	bl	80067a0 <xQueueGenericCreate>
 8001454:	4603      	mov	r3, r0
 8001456:	4a70      	ldr	r2, [pc, #448]	; (8001618 <main+0x1fc>)
 8001458:	6013      	str	r3, [r2, #0]
  xGameOverSem = xSemaphoreCreateBinary();
 800145a:	2203      	movs	r2, #3
 800145c:	2100      	movs	r1, #0
 800145e:	2001      	movs	r0, #1
 8001460:	f005 f99e 	bl	80067a0 <xQueueGenericCreate>
 8001464:	4603      	mov	r3, r0
 8001466:	4a6d      	ldr	r2, [pc, #436]	; (800161c <main+0x200>)
 8001468:	6013      	str	r3, [r2, #0]
  xCheckCollison = xSemaphoreCreateBinary();
 800146a:	2203      	movs	r2, #3
 800146c:	2100      	movs	r1, #0
 800146e:	2001      	movs	r0, #1
 8001470:	f005 f996 	bl	80067a0 <xQueueGenericCreate>
 8001474:	4603      	mov	r3, r0
 8001476:	4a6a      	ldr	r2, [pc, #424]	; (8001620 <main+0x204>)
 8001478:	6013      	str	r3, [r2, #0]
  xCollisionChecked = xSemaphoreCreateBinary();
 800147a:	2203      	movs	r2, #3
 800147c:	2100      	movs	r1, #0
 800147e:	2001      	movs	r0, #1
 8001480:	f005 f98e 	bl	80067a0 <xQueueGenericCreate>
 8001484:	4603      	mov	r3, r0
 8001486:	4a67      	ldr	r2, [pc, #412]	; (8001624 <main+0x208>)
 8001488:	6013      	str	r3, [r2, #0]
  xGenerateFood = xSemaphoreCreateBinary();
 800148a:	2203      	movs	r2, #3
 800148c:	2100      	movs	r1, #0
 800148e:	2001      	movs	r0, #1
 8001490:	f005 f986 	bl	80067a0 <xQueueGenericCreate>
 8001494:	4603      	mov	r3, r0
 8001496:	4a64      	ldr	r2, [pc, #400]	; (8001628 <main+0x20c>)
 8001498:	6013      	str	r3, [r2, #0]
  xFoodGenerated = xSemaphoreCreateBinary();
 800149a:	2203      	movs	r2, #3
 800149c:	2100      	movs	r1, #0
 800149e:	2001      	movs	r0, #1
 80014a0:	f005 f97e 	bl	80067a0 <xQueueGenericCreate>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a61      	ldr	r2, [pc, #388]	; (800162c <main+0x210>)
 80014a8:	6013      	str	r3, [r2, #0]
  xHandleButtonPressA = xSemaphoreCreateBinary();
 80014aa:	2203      	movs	r2, #3
 80014ac:	2100      	movs	r1, #0
 80014ae:	2001      	movs	r0, #1
 80014b0:	f005 f976 	bl	80067a0 <xQueueGenericCreate>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4a5e      	ldr	r2, [pc, #376]	; (8001630 <main+0x214>)
 80014b8:	6013      	str	r3, [r2, #0]
  xHandleButtonPressB = xSemaphoreCreateBinary();
 80014ba:	2203      	movs	r2, #3
 80014bc:	2100      	movs	r1, #0
 80014be:	2001      	movs	r0, #1
 80014c0:	f005 f96e 	bl	80067a0 <xQueueGenericCreate>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a5b      	ldr	r2, [pc, #364]	; (8001634 <main+0x218>)
 80014c8:	6013      	str	r3, [r2, #0]
  xHandleButtonPressC = xSemaphoreCreateBinary();
 80014ca:	2203      	movs	r2, #3
 80014cc:	2100      	movs	r1, #0
 80014ce:	2001      	movs	r0, #1
 80014d0:	f005 f966 	bl	80067a0 <xQueueGenericCreate>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a58      	ldr	r2, [pc, #352]	; (8001638 <main+0x21c>)
 80014d8:	6013      	str	r3, [r2, #0]
  xHandleButtonPressD = xSemaphoreCreateBinary();
 80014da:	2203      	movs	r2, #3
 80014dc:	2100      	movs	r1, #0
 80014de:	2001      	movs	r0, #1
 80014e0:	f005 f95e 	bl	80067a0 <xQueueGenericCreate>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a55      	ldr	r2, [pc, #340]	; (800163c <main+0x220>)
 80014e8:	6013      	str	r3, [r2, #0]
  xRepaintScreen = xSemaphoreCreateBinary();
 80014ea:	2203      	movs	r2, #3
 80014ec:	2100      	movs	r1, #0
 80014ee:	2001      	movs	r0, #1
 80014f0:	f005 f956 	bl	80067a0 <xQueueGenericCreate>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4a52      	ldr	r2, [pc, #328]	; (8001640 <main+0x224>)
 80014f8:	6013      	str	r3, [r2, #0]

  xScreenDriverMutex = xSemaphoreCreateMutex();
 80014fa:	2001      	movs	r0, #1
 80014fc:	f005 f9c7 	bl	800688e <xQueueCreateMutex>
 8001500:	4603      	mov	r3, r0
 8001502:	4a50      	ldr	r2, [pc, #320]	; (8001644 <main+0x228>)
 8001504:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

//  int test[4][8][8];
//  memset(test, 0, sizeof(test));
  xDirectionQ = xQueueCreate( 10, sizeof( char ) );
 8001506:	2200      	movs	r2, #0
 8001508:	2101      	movs	r1, #1
 800150a:	200a      	movs	r0, #10
 800150c:	f005 f948 	bl	80067a0 <xQueueGenericCreate>
 8001510:	4603      	mov	r3, r0
 8001512:	4a4d      	ldr	r2, [pc, #308]	; (8001648 <main+0x22c>)
 8001514:	6013      	str	r3, [r2, #0]
  xBoardQ = xQueueCreate( 2, sizeof( int ) *4 *8 *8 );
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800151c:	2002      	movs	r0, #2
 800151e:	f005 f93f 	bl	80067a0 <xQueueGenericCreate>
 8001522:	4603      	mov	r3, r0
 8001524:	4a49      	ldr	r2, [pc, #292]	; (800164c <main+0x230>)
 8001526:	6013      	str	r3, [r2, #0]
  xSnakeQ = xQueueCreate( 2, sizeof(  llist ) );
 8001528:	2200      	movs	r2, #0
 800152a:	2104      	movs	r1, #4
 800152c:	2002      	movs	r0, #2
 800152e:	f005 f937 	bl	80067a0 <xQueueGenericCreate>
 8001532:	4603      	mov	r3, r0
 8001534:	4a46      	ldr	r2, [pc, #280]	; (8001650 <main+0x234>)
 8001536:	6013      	str	r3, [r2, #0]
  xCellStateQ = xQueueCreate( 5, sizeof( int ));
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	2005      	movs	r0, #5
 800153e:	f005 f92f 	bl	80067a0 <xQueueGenericCreate>
 8001542:	4603      	mov	r3, r0
 8001544:	4a43      	ldr	r2, [pc, #268]	; (8001654 <main+0x238>)
 8001546:	6013      	str	r3, [r2, #0]
  xFoodPositionQ = xQueueCreate( 5, sizeof( int ) * 3);
 8001548:	2200      	movs	r2, #0
 800154a:	210c      	movs	r1, #12
 800154c:	2005      	movs	r0, #5
 800154e:	f005 f927 	bl	80067a0 <xQueueGenericCreate>
 8001552:	4603      	mov	r3, r0
 8001554:	4a40      	ldr	r2, [pc, #256]	; (8001658 <main+0x23c>)
 8001556:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001558:	4a40      	ldr	r2, [pc, #256]	; (800165c <main+0x240>)
 800155a:	2100      	movs	r1, #0
 800155c:	4840      	ldr	r0, [pc, #256]	; (8001660 <main+0x244>)
 800155e:	f004 fea9 	bl	80062b4 <osThreadNew>
 8001562:	4603      	mov	r3, r0
 8001564:	4a3f      	ldr	r2, [pc, #252]	; (8001664 <main+0x248>)
 8001566:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(GameLoop, "GameLoop", configMINIMAL_STACK_SIZE*8, NULL, 1, NULL );
 8001568:	2300      	movs	r3, #0
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	2301      	movs	r3, #1
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2300      	movs	r3, #0
 8001572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001576:	493c      	ldr	r1, [pc, #240]	; (8001668 <main+0x24c>)
 8001578:	483c      	ldr	r0, [pc, #240]	; (800166c <main+0x250>)
 800157a:	f005 ff96 	bl	80074aa <xTaskCreate>
  //xTaskCreate(ButtonHandler, "ButtonHandler", configMINIMAL_STACK_SIZE, NULL, 2, NULL );
  //xTaskCreate(CollisionCheck, "CollisionCheck", configMINIMAL_STACK_SIZE*8, NULL, 2, NULL );
  xTaskCreate(Task3, "Task3", configMINIMAL_STACK_SIZE, NULL, 5, NULL );
 800157e:	2300      	movs	r3, #0
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	2305      	movs	r3, #5
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2300      	movs	r3, #0
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	4939      	ldr	r1, [pc, #228]	; (8001670 <main+0x254>)
 800158c:	4839      	ldr	r0, [pc, #228]	; (8001674 <main+0x258>)
 800158e:	f005 ff8c 	bl	80074aa <xTaskCreate>
  xTaskCreate(FoodPositionGenerator, "FoodPositionGenerator", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8001592:	2300      	movs	r3, #0
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	2301      	movs	r3, #1
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	4936      	ldr	r1, [pc, #216]	; (8001678 <main+0x25c>)
 80015a0:	4836      	ldr	r0, [pc, #216]	; (800167c <main+0x260>)
 80015a2:	f005 ff82 	bl	80074aa <xTaskCreate>
  xTaskCreate(ButtonHandler_A, "ButtonHandler_A", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 80015a6:	2300      	movs	r3, #0
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	2303      	movs	r3, #3
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	4933      	ldr	r1, [pc, #204]	; (8001680 <main+0x264>)
 80015b4:	4833      	ldr	r0, [pc, #204]	; (8001684 <main+0x268>)
 80015b6:	f005 ff78 	bl	80074aa <xTaskCreate>
  xTaskCreate(ButtonHandler_B, "ButtonHandler_B", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 80015ba:	2300      	movs	r3, #0
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	2303      	movs	r3, #3
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2300      	movs	r3, #0
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	4930      	ldr	r1, [pc, #192]	; (8001688 <main+0x26c>)
 80015c8:	4830      	ldr	r0, [pc, #192]	; (800168c <main+0x270>)
 80015ca:	f005 ff6e 	bl	80074aa <xTaskCreate>
  xTaskCreate(ButtonHandler_C, "ButtonHandler_C", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 80015ce:	2300      	movs	r3, #0
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	2303      	movs	r3, #3
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2300      	movs	r3, #0
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	492d      	ldr	r1, [pc, #180]	; (8001690 <main+0x274>)
 80015dc:	482d      	ldr	r0, [pc, #180]	; (8001694 <main+0x278>)
 80015de:	f005 ff64 	bl	80074aa <xTaskCreate>
  xTaskCreate(ButtonHandler_D, "ButtonHandler_D", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 80015e2:	2300      	movs	r3, #0
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	2303      	movs	r3, #3
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2300      	movs	r3, #0
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	492a      	ldr	r1, [pc, #168]	; (8001698 <main+0x27c>)
 80015f0:	482a      	ldr	r0, [pc, #168]	; (800169c <main+0x280>)
 80015f2:	f005 ff5a 	bl	80074aa <xTaskCreate>
  xTaskCreate(ScreenDriver, "ScreenDriver", configMINIMAL_STACK_SIZE*8, NULL, 1, NULL );
 80015f6:	2300      	movs	r3, #0
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	2301      	movs	r3, #1
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2300      	movs	r3, #0
 8001600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001604:	4926      	ldr	r1, [pc, #152]	; (80016a0 <main+0x284>)
 8001606:	4827      	ldr	r0, [pc, #156]	; (80016a4 <main+0x288>)
 8001608:	f005 ff4f 	bl	80074aa <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800160c:	f004 fe2c 	bl	8006268 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001610:	e7fe      	b.n	8001610 <main+0x1f4>
 8001612:	bf00      	nop
 8001614:	20000090 	.word	0x20000090
 8001618:	20000190 	.word	0x20000190
 800161c:	20000194 	.word	0x20000194
 8001620:	20000198 	.word	0x20000198
 8001624:	2000019c 	.word	0x2000019c
 8001628:	200001a0 	.word	0x200001a0
 800162c:	200001a4 	.word	0x200001a4
 8001630:	200001ac 	.word	0x200001ac
 8001634:	200001b0 	.word	0x200001b0
 8001638:	200001b4 	.word	0x200001b4
 800163c:	200001b8 	.word	0x200001b8
 8001640:	200001a8 	.word	0x200001a8
 8001644:	200001bc 	.word	0x200001bc
 8001648:	2000017c 	.word	0x2000017c
 800164c:	20000180 	.word	0x20000180
 8001650:	20000184 	.word	0x20000184
 8001654:	20000188 	.word	0x20000188
 8001658:	2000018c 	.word	0x2000018c
 800165c:	0800b500 	.word	0x0800b500
 8001660:	080023c9 	.word	0x080023c9
 8001664:	20000178 	.word	0x20000178
 8001668:	0800b424 	.word	0x0800b424
 800166c:	08001cb5 	.word	0x08001cb5
 8001670:	0800b430 	.word	0x0800b430
 8001674:	080022dd 	.word	0x080022dd
 8001678:	0800b438 	.word	0x0800b438
 800167c:	080021a5 	.word	0x080021a5
 8001680:	0800b450 	.word	0x0800b450
 8001684:	08001b19 	.word	0x08001b19
 8001688:	0800b460 	.word	0x0800b460
 800168c:	08001b61 	.word	0x08001b61
 8001690:	0800b470 	.word	0x0800b470
 8001694:	08001ba9 	.word	0x08001ba9
 8001698:	0800b480 	.word	0x0800b480
 800169c:	08001bf1 	.word	0x08001bf1
 80016a0:	0800b490 	.word	0x0800b490
 80016a4:	08001c39 	.word	0x08001c39

080016a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b096      	sub	sp, #88	; 0x58
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	2244      	movs	r2, #68	; 0x44
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f007 feda 	bl	8009470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016bc:	463b      	mov	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016ce:	f001 ff21 	bl	8003514 <HAL_PWREx_ControlVoltageScaling>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016d8:	f000 fe90 	bl	80023fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016dc:	2302      	movs	r3, #2
 80016de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e6:	2310      	movs	r3, #16
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ea:	2302      	movs	r3, #2
 80016ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ee:	2302      	movs	r3, #2
 80016f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016f2:	2301      	movs	r3, #1
 80016f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016f6:	230a      	movs	r3, #10
 80016f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016fa:	2307      	movs	r3, #7
 80016fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016fe:	2302      	movs	r3, #2
 8001700:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001702:	2302      	movs	r3, #2
 8001704:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4618      	mov	r0, r3
 800170c:	f001 ff58 	bl	80035c0 <HAL_RCC_OscConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001716:	f000 fe71 	bl	80023fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171a:	230f      	movs	r3, #15
 800171c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171e:	2303      	movs	r3, #3
 8001720:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800172e:	463b      	mov	r3, r7
 8001730:	2104      	movs	r1, #4
 8001732:	4618      	mov	r0, r3
 8001734:	f002 fb20 	bl	8003d78 <HAL_RCC_ClockConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800173e:	f000 fe5d 	bl	80023fc <Error_Handler>
  }
}
 8001742:	bf00      	nop
 8001744:	3758      	adds	r7, #88	; 0x58
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_SPI1_Init+0x74>)
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <MX_SPI1_Init+0x78>)
 8001754:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_SPI1_Init+0x74>)
 8001758:	f44f 7282 	mov.w	r2, #260	; 0x104
 800175c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_SPI1_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_SPI1_Init+0x74>)
 8001766:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800176a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_SPI1_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_SPI1_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_SPI1_Init+0x74>)
 800177a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_SPI1_Init+0x74>)
 8001782:	2218      	movs	r2, #24
 8001784:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_SPI1_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_SPI1_Init+0x74>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_SPI1_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_SPI1_Init+0x74>)
 800179a:	2207      	movs	r2, #7
 800179c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_SPI1_Init+0x74>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_SPI1_Init+0x74>)
 80017a6:	2208      	movs	r2, #8
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_SPI1_Init+0x74>)
 80017ac:	f003 f9f6 	bl	8004b9c <HAL_SPI_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017b6:	f000 fe21 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000090 	.word	0x20000090
 80017c4:	40013000 	.word	0x40013000

080017c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017ce:	4a15      	ldr	r2, [pc, #84]	; (8001824 <MX_USART2_UART_Init+0x5c>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_USART2_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_USART2_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_USART2_UART_Init+0x58>)
 800180c:	f004 f80e 	bl	800582c <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001816:	f000 fdf1 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200000f4 	.word	0x200000f4
 8001824:	40004400 	.word	0x40004400

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	4b6a      	ldr	r3, [pc, #424]	; (80019e8 <MX_GPIO_Init+0x1c0>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	4a69      	ldr	r2, [pc, #420]	; (80019e8 <MX_GPIO_Init+0x1c0>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184a:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <MX_GPIO_Init+0x1c0>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001856:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <MX_GPIO_Init+0x1c0>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a63      	ldr	r2, [pc, #396]	; (80019e8 <MX_GPIO_Init+0x1c0>)
 800185c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <MX_GPIO_Init+0x1c0>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <MX_GPIO_Init+0x1c0>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a5d      	ldr	r2, [pc, #372]	; (80019e8 <MX_GPIO_Init+0x1c0>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <MX_GPIO_Init+0x1c0>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <MX_GPIO_Init+0x1c0>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a57      	ldr	r2, [pc, #348]	; (80019e8 <MX_GPIO_Init+0x1c0>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <MX_GPIO_Init+0x1c0>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2107      	movs	r1, #7
 80018a2:	4852      	ldr	r0, [pc, #328]	; (80019ec <MX_GPIO_Init+0x1c4>)
 80018a4:	f001 fe10 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2150      	movs	r1, #80	; 0x50
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f001 fe0a 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2140      	movs	r1, #64	; 0x40
 80018b8:	484d      	ldr	r0, [pc, #308]	; (80019f0 <MX_GPIO_Init+0x1c8>)
 80018ba:	f001 fe05 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4845      	ldr	r0, [pc, #276]	; (80019ec <MX_GPIO_Init+0x1c4>)
 80018d6:	f001 fc4d 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80018da:	2307      	movs	r3, #7
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	483e      	ldr	r0, [pc, #248]	; (80019ec <MX_GPIO_Init+0x1c4>)
 80018f2:	f001 fc3f 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 80018f6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80018fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190e:	f001 fc31 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin PA6 */
  GPIO_InitStruct.Pin = SPI_CS_Pin|GPIO_PIN_6;
 8001912:	2350      	movs	r3, #80	; 0x50
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f001 fc22 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_A3_Pin PB10 */
  GPIO_InitStruct.Pin = Button_A3_Pin|GPIO_PIN_10;
 8001930:	f240 4301 	movw	r3, #1025	; 0x401
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	482a      	ldr	r0, [pc, #168]	; (80019f0 <MX_GPIO_Init+0x1c8>)
 8001946:	f001 fc15 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800194a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001950:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001964:	f001 fc06 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_B_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = Button_B_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8001968:	2338      	movs	r3, #56	; 0x38
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800196c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	481c      	ldr	r0, [pc, #112]	; (80019f0 <MX_GPIO_Init+0x1c8>)
 800197e:	f001 fbf9 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001982:	2340      	movs	r3, #64	; 0x40
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4815      	ldr	r0, [pc, #84]	; (80019f0 <MX_GPIO_Init+0x1c8>)
 800199a:	f001 fbeb 	bl	8003174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2105      	movs	r1, #5
 80019a2:	2009      	movs	r0, #9
 80019a4:	f001 fbbc 	bl	8003120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80019a8:	2009      	movs	r0, #9
 80019aa:	f001 fbd5 	bl	8003158 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2105      	movs	r1, #5
 80019b2:	200a      	movs	r0, #10
 80019b4:	f001 fbb4 	bl	8003120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019b8:	200a      	movs	r0, #10
 80019ba:	f001 fbcd 	bl	8003158 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2105      	movs	r1, #5
 80019c2:	2017      	movs	r0, #23
 80019c4:	f001 fbac 	bl	8003120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019c8:	2017      	movs	r0, #23
 80019ca:	f001 fbc5 	bl	8003158 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2105      	movs	r1, #5
 80019d2:	2028      	movs	r0, #40	; 0x28
 80019d4:	f001 fba4 	bl	8003120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019d8:	2028      	movs	r0, #40	; 0x28
 80019da:	f001 fbbd 	bl	8003158 <HAL_NVIC_EnableIRQ>

}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	48000800 	.word	0x48000800
 80019f0:	48000400 	.word	0x48000400

080019f4 <EXTI3_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI3_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	static  BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <EXTI3_IRQHandler+0x38>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <EXTI3_IRQHandler+0x3c>)
 8001a00:	2208      	movs	r2, #8
 8001a02:	615a      	str	r2, [r3, #20]


	xSemaphoreGiveFromISR( xHandleButtonPressB, &xHigherPriorityTaskWoken );
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <EXTI3_IRQHandler+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4908      	ldr	r1, [pc, #32]	; (8001a2c <EXTI3_IRQHandler+0x38>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 f8f1 	bl	8006bf2 <xQueueGiveFromISR>

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <EXTI3_IRQHandler+0x38>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d007      	beq.n	8001a28 <EXTI3_IRQHandler+0x34>
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <EXTI3_IRQHandler+0x44>)
 8001a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	f3bf 8f4f 	dsb	sy
 8001a24:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI3_IRQn 0 */

  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200001c0 	.word	0x200001c0
 8001a30:	40010400 	.word	0x40010400
 8001a34:	200001b0 	.word	0x200001b0
 8001a38:	e000ed04 	.word	0xe000ed04

08001a3c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	static  BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <EXTI4_IRQHandler+0x38>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <EXTI4_IRQHandler+0x3c>)
 8001a48:	2210      	movs	r2, #16
 8001a4a:	615a      	str	r2, [r3, #20]


		xSemaphoreGiveFromISR( xHandleButtonPressD, &xHigherPriorityTaskWoken );
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <EXTI4_IRQHandler+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4908      	ldr	r1, [pc, #32]	; (8001a74 <EXTI4_IRQHandler+0x38>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f005 f8cd 	bl	8006bf2 <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <EXTI4_IRQHandler+0x38>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <EXTI4_IRQHandler+0x34>
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <EXTI4_IRQHandler+0x44>)
 8001a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f3bf 8f4f 	dsb	sy
 8001a6c:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI4_IRQn 0 */
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200001c4 	.word	0x200001c4
 8001a78:	40010400 	.word	0x40010400
 8001a7c:	200001b8 	.word	0x200001b8
 8001a80:	e000ed04 	.word	0xe000ed04

08001a84 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	static  BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <EXTI9_5_IRQHandler+0x38>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <EXTI9_5_IRQHandler+0x3c>)
 8001a90:	2220      	movs	r2, #32
 8001a92:	615a      	str	r2, [r3, #20]


		xSemaphoreGiveFromISR( xHandleButtonPressC, &xHigherPriorityTaskWoken );
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <EXTI9_5_IRQHandler+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4908      	ldr	r1, [pc, #32]	; (8001abc <EXTI9_5_IRQHandler+0x38>)
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f005 f8a9 	bl	8006bf2 <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <EXTI9_5_IRQHandler+0x38>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d007      	beq.n	8001ab8 <EXTI9_5_IRQHandler+0x34>
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <EXTI9_5_IRQHandler+0x44>)
 8001aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	f3bf 8f4f 	dsb	sy
 8001ab4:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI9_5_IRQn 0 */
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200001c8 	.word	0x200001c8
 8001ac0:	40010400 	.word	0x40010400
 8001ac4:	200001b4 	.word	0x200001b4
 8001ac8:	e000ed04 	.word	0xe000ed04

08001acc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	static  BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <EXTI15_10_IRQHandler+0x3c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <EXTI15_10_IRQHandler+0x40>)
 8001ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001adc:	615a      	str	r2, [r3, #20]


		xSemaphoreGiveFromISR( xHandleButtonPressA, &xHigherPriorityTaskWoken );
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <EXTI15_10_IRQHandler+0x44>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4909      	ldr	r1, [pc, #36]	; (8001b08 <EXTI15_10_IRQHandler+0x3c>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f005 f884 	bl	8006bf2 <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <EXTI15_10_IRQHandler+0x3c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <EXTI15_10_IRQHandler+0x36>
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <EXTI15_10_IRQHandler+0x48>)
 8001af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	f3bf 8f4f 	dsb	sy
 8001afe:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001cc 	.word	0x200001cc
 8001b0c:	40010400 	.word	0x40010400
 8001b10:	200001ac 	.word	0x200001ac
 8001b14:	e000ed04 	.word	0xe000ed04

08001b18 <ButtonHandler_A>:

void ButtonHandler_A( void *pvParameters ){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	char buttonLetter = 'a';
 8001b20:	2361      	movs	r3, #97	; 0x61
 8001b22:	73fb      	strb	r3, [r7, #15]

	for(;;)
	    {

			if( xSemaphoreTake( xHandleButtonPressA, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <ButtonHandler_A+0x3c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f005 f9cd 	bl	8006ecc <xQueueSemaphoreTake>
			xQueueSend( xDirectionQ, ( void * ) &buttonLetter,  portMAX_DELAY );
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <ButtonHandler_A+0x40>)
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	f107 010f 	add.w	r1, r7, #15
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	f004 febe 	bl	80068c0 <xQueueGenericSend>
			xSemaphoreGive( xButtonPressedSem );
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <ButtonHandler_A+0x44>)
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	f004 feb7 	bl	80068c0 <xQueueGenericSend>
			if( xSemaphoreTake( xHandleButtonPressA, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001b52:	e7e7      	b.n	8001b24 <ButtonHandler_A+0xc>
 8001b54:	200001ac 	.word	0x200001ac
 8001b58:	2000017c 	.word	0x2000017c
 8001b5c:	20000190 	.word	0x20000190

08001b60 <ButtonHandler_B>:
	    }
};
void ButtonHandler_B( void *pvParameters ){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	char buttonLetter = 'b';
 8001b68:	2362      	movs	r3, #98	; 0x62
 8001b6a:	73fb      	strb	r3, [r7, #15]
	for(;;)
		    {

				if( xSemaphoreTake( xHandleButtonPressB, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <ButtonHandler_B+0x3c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	4618      	mov	r0, r3
 8001b76:	f005 f9a9 	bl	8006ecc <xQueueSemaphoreTake>
				xQueueSend( xDirectionQ, ( void * ) &buttonLetter,  portMAX_DELAY );
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <ButtonHandler_B+0x40>)
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	f107 010f 	add.w	r1, r7, #15
 8001b82:	2300      	movs	r3, #0
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	f004 fe9a 	bl	80068c0 <xQueueGenericSend>
				xSemaphoreGive( xButtonPressedSem );
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <ButtonHandler_B+0x44>)
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	2300      	movs	r3, #0
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	f004 fe93 	bl	80068c0 <xQueueGenericSend>
				if( xSemaphoreTake( xHandleButtonPressB, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001b9a:	e7e7      	b.n	8001b6c <ButtonHandler_B+0xc>
 8001b9c:	200001b0 	.word	0x200001b0
 8001ba0:	2000017c 	.word	0x2000017c
 8001ba4:	20000190 	.word	0x20000190

08001ba8 <ButtonHandler_C>:
		    }
};
void ButtonHandler_C( void *pvParameters ){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	char buttonLetter = 'c';
 8001bb0:	2363      	movs	r3, #99	; 0x63
 8001bb2:	73fb      	strb	r3, [r7, #15]
	for(;;)
		    {

				if( xSemaphoreTake( xHandleButtonPressC, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <ButtonHandler_C+0x3c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f005 f985 	bl	8006ecc <xQueueSemaphoreTake>
				xQueueSend( xDirectionQ, ( void * ) &buttonLetter,  portMAX_DELAY );
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <ButtonHandler_C+0x40>)
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	f107 010f 	add.w	r1, r7, #15
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	f004 fe76 	bl	80068c0 <xQueueGenericSend>
				xSemaphoreGive( xButtonPressedSem );
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <ButtonHandler_C+0x44>)
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	f004 fe6f 	bl	80068c0 <xQueueGenericSend>
				if( xSemaphoreTake( xHandleButtonPressC, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001be2:	e7e7      	b.n	8001bb4 <ButtonHandler_C+0xc>
 8001be4:	200001b4 	.word	0x200001b4
 8001be8:	2000017c 	.word	0x2000017c
 8001bec:	20000190 	.word	0x20000190

08001bf0 <ButtonHandler_D>:
		    }
};
void ButtonHandler_D( void *pvParameters ){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	char buttonLetter = 'd';
 8001bf8:	2364      	movs	r3, #100	; 0x64
 8001bfa:	73fb      	strb	r3, [r7, #15]
	for(;;)
		    {

				if( xSemaphoreTake( xHandleButtonPressD, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <ButtonHandler_D+0x3c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	4618      	mov	r0, r3
 8001c06:	f005 f961 	bl	8006ecc <xQueueSemaphoreTake>
				xQueueSend( xDirectionQ, ( void * ) &buttonLetter,  portMAX_DELAY );
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <ButtonHandler_D+0x40>)
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	f107 010f 	add.w	r1, r7, #15
 8001c12:	2300      	movs	r3, #0
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	f004 fe52 	bl	80068c0 <xQueueGenericSend>
				xSemaphoreGive( xButtonPressedSem );
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <ButtonHandler_D+0x44>)
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	2300      	movs	r3, #0
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	f004 fe4b 	bl	80068c0 <xQueueGenericSend>
				if( xSemaphoreTake( xHandleButtonPressD, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001c2a:	e7e7      	b.n	8001bfc <ButtonHandler_D+0xc>
 8001c2c:	200001b8 	.word	0x200001b8
 8001c30:	2000017c 	.word	0x2000017c
 8001c34:	20000190 	.word	0x20000190

08001c38 <ScreenDriver>:
		    }

};

void ScreenDriver( void * pvParameters ){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001c44:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001c48:	6018      	str	r0, [r3, #0]
	int board[4][8][8];

	for(;;)
			    {
		if( xSemaphoreTake( xRepaintScreen, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <ScreenDriver+0x74>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c52:	4618      	mov	r0, r3
 8001c54:	f005 f93a 	bl	8006ecc <xQueueSemaphoreTake>
		xQueueReceive( xBoardQ, &board, ( TickType_t ) 10 );
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <ScreenDriver+0x78>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f107 0108 	add.w	r1, r7, #8
 8001c60:	220a      	movs	r2, #10
 8001c62:	4618      	mov	r0, r3
 8001c64:	f005 f852 	bl	8006d0c <xQueueReceive>

		MAX7219_paintPoints(0, board[0]);
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f000 fe06 	bl	8002880 <MAX7219_paintPoints>
		MAX7219_paintPoints(1, board[1]);
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f000 fdfe 	bl	8002880 <MAX7219_paintPoints>
		MAX7219_paintPoints(2, board[2]);
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f000 fdf6 	bl	8002880 <MAX7219_paintPoints>
		MAX7219_paintPoints(3, board[3]);
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	2003      	movs	r0, #3
 8001ca0:	f000 fdee 	bl	8002880 <MAX7219_paintPoints>
		MAX7219_MatrixUpdate();
 8001ca4:	f000 feac 	bl	8002a00 <MAX7219_MatrixUpdate>
		if( xSemaphoreTake( xRepaintScreen, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001ca8:	e7cf      	b.n	8001c4a <ScreenDriver+0x12>
 8001caa:	bf00      	nop
 8001cac:	200001a8 	.word	0x200001a8
 8001cb0:	20000180 	.word	0x20000180

08001cb4 <GameLoop>:
};


void GameLoop( void * pvParameters )

{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001cc0:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8001cc4:	6018      	str	r0, [r3, #0]
	int board[4][8][8];
	char direction = 'a';
 8001cc6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001cca:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001cce:	2261      	movs	r2, #97	; 0x61
 8001cd0:	701a      	strb	r2, [r3, #0]
	char previousDirection = 'a';
 8001cd2:	2361      	movs	r3, #97	; 0x61
 8001cd4:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
	int delay = 350;
 8001cd8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001cdc:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
	int cellState = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int foodTimeout = 3;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	int food[3];
	int grow = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

	memset(board, 0, sizeof(board));
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f007 fbb7 	bl	8009470 <memset>

	llist *snake = llist_create(NULL);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff f8ca 	bl	8000e9c <llist_create>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d0e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001d12:	601a      	str	r2, [r3, #0]
	llist_push(snake, 0,4,1);
 8001d14:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d18:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2204      	movs	r2, #4
 8001d22:	2100      	movs	r1, #0
 8001d24:	f7ff f8de 	bl	8000ee4 <llist_push>
	llist_push(snake, 0,4,2);
 8001d28:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d2c:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	2302      	movs	r3, #2
 8001d34:	2204      	movs	r2, #4
 8001d36:	2100      	movs	r1, #0
 8001d38:	f7ff f8d4 	bl	8000ee4 <llist_push>

	llist_printSnake(snake, board);
 8001d3c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d40:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f107 021c 	add.w	r2, r7, #28
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff f8ff 	bl	8000f50 <llist_printSnake>

	if( xSemaphoreTake( xScreenDriverMutex, ( TickType_t ) portMAX_DELAY) == pdTRUE ) ;
 8001d52:	4bc1      	ldr	r3, [pc, #772]	; (8002058 <GameLoop+0x3a4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f005 f8b6 	bl	8006ecc <xQueueSemaphoreTake>

	xQueueSend( xBoardQ, ( void * ) &board,  1 );
 8001d60:	4bbe      	ldr	r3, [pc, #760]	; (800205c <GameLoop+0x3a8>)
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	f107 011c 	add.w	r1, r7, #28
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f004 fda8 	bl	80068c0 <xQueueGenericSend>
	xSemaphoreGive( xRepaintScreen );
 8001d70:	4bbb      	ldr	r3, [pc, #748]	; (8002060 <GameLoop+0x3ac>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	2300      	movs	r3, #0
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	f004 fda1 	bl	80068c0 <xQueueGenericSend>

	xSemaphoreGive(xScreenDriverMutex);
 8001d7e:	4bb6      	ldr	r3, [pc, #728]	; (8002058 <GameLoop+0x3a4>)
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	2300      	movs	r3, #0
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	f004 fd9a 	bl	80068c0 <xQueueGenericSend>

	vTaskDelay(delay);
 8001d8c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001d90:	4618      	mov	r0, r3
 8001d92:	f005 fccf 	bl	8007734 <vTaskDelay>

    for(;;)
    {

    	if( xSemaphoreTake( xButtonPressedSem, ( TickType_t ) 1) == pdTRUE ){
 8001d96:	4bb3      	ldr	r3, [pc, #716]	; (8002064 <GameLoop+0x3b0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f005 f895 	bl	8006ecc <xQueueSemaphoreTake>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d161      	bne.n	8001e6c <GameLoop+0x1b8>
    		previousDirection = direction;
 8001da8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001dac:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
    		xQueueReceive( xDirectionQ, &direction, ( TickType_t ) 10 );
 8001db6:	4bac      	ldr	r3, [pc, #688]	; (8002068 <GameLoop+0x3b4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f107 011b 	add.w	r1, r7, #27
 8001dbe:	220a      	movs	r2, #10
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f004 ffa3 	bl	8006d0c <xQueueReceive>
    		switch (direction)
 8001dc6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001dca:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	3b61      	subs	r3, #97	; 0x61
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d83a      	bhi.n	8001e4c <GameLoop+0x198>
 8001dd6:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <GameLoop+0x128>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001e35 	.word	0x08001e35
 8001de0:	08001ded 	.word	0x08001ded
 8001de4:	08001e1d 	.word	0x08001e1d
 8001de8:	08001e05 	.word	0x08001e05
			{
				case 'b':
					if (previousDirection == 'd') direction = previousDirection;
 8001dec:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	d12d      	bne.n	8001e50 <GameLoop+0x19c>
 8001df4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001df8:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001dfc:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8001e00:	701a      	strb	r2, [r3, #0]

					break;
 8001e02:	e025      	b.n	8001e50 <GameLoop+0x19c>
				case 'd':

					if (previousDirection == 'b') direction = previousDirection;
 8001e04:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001e08:	2b62      	cmp	r3, #98	; 0x62
 8001e0a:	d123      	bne.n	8001e54 <GameLoop+0x1a0>
 8001e0c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e10:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e14:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8001e18:	701a      	strb	r2, [r3, #0]
					break;
 8001e1a:	e01b      	b.n	8001e54 <GameLoop+0x1a0>
				case 'c':

					if (previousDirection == 'a') direction = previousDirection;
 8001e1c:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001e20:	2b61      	cmp	r3, #97	; 0x61
 8001e22:	d119      	bne.n	8001e58 <GameLoop+0x1a4>
 8001e24:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e28:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e2c:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8001e30:	701a      	strb	r2, [r3, #0]
					break;
 8001e32:	e011      	b.n	8001e58 <GameLoop+0x1a4>
				case 'a':

					if (previousDirection == 'c') direction = previousDirection;
 8001e34:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001e38:	2b63      	cmp	r3, #99	; 0x63
 8001e3a:	d10f      	bne.n	8001e5c <GameLoop+0x1a8>
 8001e3c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e40:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e44:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8001e48:	701a      	strb	r2, [r3, #0]

					break;
 8001e4a:	e007      	b.n	8001e5c <GameLoop+0x1a8>
				default:
					break;
 8001e4c:	bf00      	nop
 8001e4e:	e006      	b.n	8001e5e <GameLoop+0x1aa>
					break;
 8001e50:	bf00      	nop
 8001e52:	e004      	b.n	8001e5e <GameLoop+0x1aa>
					break;
 8001e54:	bf00      	nop
 8001e56:	e002      	b.n	8001e5e <GameLoop+0x1aa>
					break;
 8001e58:	bf00      	nop
 8001e5a:	e000      	b.n	8001e5e <GameLoop+0x1aa>
					break;
 8001e5c:	bf00      	nop
			}

    		xQueueReset(xDirectionQ);
 8001e5e:	4b82      	ldr	r3, [pc, #520]	; (8002068 <GameLoop+0x3b4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 fbbb 	bl	80065e0 <xQueueGenericReset>
 8001e6a:	e794      	b.n	8001d96 <GameLoop+0xe2>
    	}else {


    		switch (direction)
 8001e6c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e70:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	3b61      	subs	r3, #97	; 0x61
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	f200 80e5 	bhi.w	8002048 <GameLoop+0x394>
 8001e7e:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <GameLoop+0x1d0>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001fdd 	.word	0x08001fdd
 8001e88:	08001e95 	.word	0x08001e95
 8001e8c:	08001f71 	.word	0x08001f71
 8001e90:	08001f03 	.word	0x08001f03
			{
			case 'b':
				cellState = checkOccupiedDown( snake, board);
 8001e94:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e98:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f107 021c 	add.w	r2, r7, #28
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f9a7 	bl	80011f8 <checkOccupiedDown>
 8001eaa:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
				if (previousDirection != 'd'){
 8001eae:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001eb2:	2b64      	cmp	r3, #100	; 0x64
 8001eb4:	f000 80ca 	beq.w	800204c <GameLoop+0x398>
					if (cellState == 1 || cellState == -1) xSemaphoreGive( xGameOverSem );
 8001eb8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d004      	beq.n	8001eca <GameLoop+0x216>
 8001ec0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d106      	bne.n	8001ed8 <GameLoop+0x224>
 8001eca:	4b68      	ldr	r3, [pc, #416]	; (800206c <GameLoop+0x3b8>)
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	f004 fcf4 	bl	80068c0 <xQueueGenericSend>
					if (cellState == 2 ) {
 8001ed8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d105      	bne.n	8001eec <GameLoop+0x238>
						foodTimeout = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
						grow = 1;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
					}
					 moveDown(snake, grow);
 8001eec:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001ef0:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fa49 	bl	8001392 <moveDown>
				}
				break;
 8001f00:	e0a4      	b.n	800204c <GameLoop+0x398>
			case 'd':
				cellState = checkOccupiedUp( snake, board);
 8001f02:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001f06:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f107 021c 	add.w	r2, r7, #28
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f91b 	bl	800114e <checkOccupiedUp>
 8001f18:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c

				if (previousDirection != 'b') {
 8001f1c:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001f20:	2b62      	cmp	r3, #98	; 0x62
 8001f22:	f000 8095 	beq.w	8002050 <GameLoop+0x39c>

					if (cellState == 1 || cellState == -1) xSemaphoreGive( xGameOverSem );
 8001f26:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d004      	beq.n	8001f38 <GameLoop+0x284>
 8001f2e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f36:	d106      	bne.n	8001f46 <GameLoop+0x292>
 8001f38:	4b4c      	ldr	r3, [pc, #304]	; (800206c <GameLoop+0x3b8>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	f004 fcbd 	bl	80068c0 <xQueueGenericSend>
					if (cellState == 2 ) {
 8001f46:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d105      	bne.n	8001f5a <GameLoop+0x2a6>
										foodTimeout = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
										grow = 1;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
									}
					moveUp(snake, grow);
 8001f5a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001f5e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fa34 	bl	80013d6 <moveUp>
				}
				break;
 8001f6e:	e06f      	b.n	8002050 <GameLoop+0x39c>
			case 'c':
				cellState = checkOccupiedLeft( snake, board);
 8001f70:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001f74:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f107 021c 	add.w	r2, r7, #28
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff f878 	bl	8001076 <checkOccupiedLeft>
 8001f86:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
				if (previousDirection != 'a'){
 8001f8a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001f8e:	2b61      	cmp	r3, #97	; 0x61
 8001f90:	d060      	beq.n	8002054 <GameLoop+0x3a0>
					if (cellState == 1 || cellState == -1) xSemaphoreGive( xGameOverSem );
 8001f92:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d004      	beq.n	8001fa4 <GameLoop+0x2f0>
 8001f9a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d106      	bne.n	8001fb2 <GameLoop+0x2fe>
 8001fa4:	4b31      	ldr	r3, [pc, #196]	; (800206c <GameLoop+0x3b8>)
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	f004 fc87 	bl	80068c0 <xQueueGenericSend>
					if (cellState == 2 ) {
 8001fb2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d105      	bne.n	8001fc6 <GameLoop+0x312>
										foodTimeout = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
										grow = 1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
									}
					 moveLeft(snake, grow);
 8001fc6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001fca:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff f9ae 	bl	8001336 <moveLeft>
				}
				break;
 8001fda:	e03b      	b.n	8002054 <GameLoop+0x3a0>
			case 'a':
				cellState = checkOccupiedRight( snake, board);
 8001fdc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001fe0:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f107 021c 	add.w	r2, r7, #28
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe ffd9 	bl	8000fa4 <checkOccupiedRight>
 8001ff2:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c


				if (previousDirection != 'c'){
 8001ff6:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001ffa:	2b63      	cmp	r3, #99	; 0x63
 8001ffc:	d038      	beq.n	8002070 <GameLoop+0x3bc>
					if (cellState == 1 || cellState == -1) xSemaphoreGive( xGameOverSem );
 8001ffe:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002002:	2b01      	cmp	r3, #1
 8002004:	d004      	beq.n	8002010 <GameLoop+0x35c>
 8002006:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800200a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200e:	d106      	bne.n	800201e <GameLoop+0x36a>
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <GameLoop+0x3b8>)
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	f004 fc51 	bl	80068c0 <xQueueGenericSend>
					if (cellState == 2 ) {
 800201e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002022:	2b02      	cmp	r3, #2
 8002024:	d105      	bne.n	8002032 <GameLoop+0x37e>
						foodTimeout = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
						grow = 1;
 800202c:	2301      	movs	r3, #1
 800202e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
					}
					moveRight(snake, grow);
 8002032:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002036:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f94b 	bl	80012dc <moveRight>
//				xQueueSend( xBoardQ, ( void * ) &board,  1 );
//				xQueueSend( xSnakeQ, ( void * ) &snake,  1 );
//				xSemaphoreGive( xCheckCollison );
//				if(xSemaphoreTake( xCollisionChecked, ( TickType_t ) portMAX_DELAY) == pdTRUE);
//				xQueueReceive( xCellStateQ, &cellState, ( TickType_t ) 10 );
				break;
 8002046:	e013      	b.n	8002070 <GameLoop+0x3bc>
			default:
				break;
 8002048:	bf00      	nop
 800204a:	e012      	b.n	8002072 <GameLoop+0x3be>
				break;
 800204c:	bf00      	nop
 800204e:	e010      	b.n	8002072 <GameLoop+0x3be>
				break;
 8002050:	bf00      	nop
 8002052:	e00e      	b.n	8002072 <GameLoop+0x3be>
				break;
 8002054:	bf00      	nop
 8002056:	e00c      	b.n	8002072 <GameLoop+0x3be>
 8002058:	200001bc 	.word	0x200001bc
 800205c:	20000180 	.word	0x20000180
 8002060:	200001a8 	.word	0x200001a8
 8002064:	20000190 	.word	0x20000190
 8002068:	2000017c 	.word	0x2000017c
 800206c:	20000194 	.word	0x20000194
				break;
 8002070:	bf00      	nop
			}
    		if (grow == 1) if (delay > 150) delay = delay - 1;
 8002072:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8002076:	2b01      	cmp	r3, #1
 8002078:	d108      	bne.n	800208c <GameLoop+0x3d8>
 800207a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800207e:	2b96      	cmp	r3, #150	; 0x96
 8002080:	dd04      	ble.n	800208c <GameLoop+0x3d8>
 8002082:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8002086:	3b01      	subs	r3, #1
 8002088:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
    		grow = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

    		memset(board, 0, sizeof(board));
 8002092:	f107 031c 	add.w	r3, r7, #28
 8002096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f007 f9e7 	bl	8009470 <memset>

    		if (foodTimeout == 4){
 80020a2:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d11d      	bne.n	80020e6 <GameLoop+0x432>
				xQueueSend( xSnakeQ, ( void * ) &snake,  1 );
 80020aa:	4b37      	ldr	r3, [pc, #220]	; (8002188 <GameLoop+0x4d4>)
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	f107 0108 	add.w	r1, r7, #8
 80020b2:	2300      	movs	r3, #0
 80020b4:	2201      	movs	r2, #1
 80020b6:	f004 fc03 	bl	80068c0 <xQueueGenericSend>
				xSemaphoreGive( xGenerateFood );
 80020ba:	4b34      	ldr	r3, [pc, #208]	; (800218c <GameLoop+0x4d8>)
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	f004 fbfc 	bl	80068c0 <xQueueGenericSend>

				if(xSemaphoreTake( xFoodGenerated, ( TickType_t ) portMAX_DELAY) == pdTRUE);
 80020c8:	4b31      	ldr	r3, [pc, #196]	; (8002190 <GameLoop+0x4dc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	4618      	mov	r0, r3
 80020d2:	f004 fefb 	bl	8006ecc <xQueueSemaphoreTake>
				xQueueReceive( xFoodPositionQ, &food, ( TickType_t ) 10 );
 80020d6:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <GameLoop+0x4e0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f107 010c 	add.w	r1, r7, #12
 80020de:	220a      	movs	r2, #10
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 fe13 	bl	8006d0c <xQueueReceive>

			}
    		if (foodTimeout >= 4) board[food[0]][food[2]][food[1]] = 2;
 80020e6:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	dd19      	ble.n	8002122 <GameLoop+0x46e>
 80020ee:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80020f2:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80020fc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8002100:	6899      	ldr	r1, [r3, #8]
 8002102:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002106:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002110:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002114:	00c0      	lsls	r0, r0, #3
 8002116:	4401      	add	r1, r0
 8002118:	00c9      	lsls	r1, r1, #3
 800211a:	440a      	add	r2, r1
 800211c:	2102      	movs	r1, #2
 800211e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        	llist_printSnake(snake, board);
 8002122:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002126:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f107 021c 	add.w	r2, r7, #28
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe ff0c 	bl	8000f50 <llist_printSnake>

//        	board[3][0][0] = 1; test code
//        	board[3][0][1] = 1;
//        	board[3][2][0] = 1;

        	if( xSemaphoreTake( xScreenDriverMutex, ( TickType_t ) portMAX_DELAY) == pdTRUE ) ;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <GameLoop+0x4e4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f04f 31ff 	mov.w	r1, #4294967295
 8002140:	4618      	mov	r0, r3
 8002142:	f004 fec3 	bl	8006ecc <xQueueSemaphoreTake>

			xQueueSend( xBoardQ, ( void * ) &board,  1 );
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <GameLoop+0x4e8>)
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	f107 011c 	add.w	r1, r7, #28
 800214e:	2300      	movs	r3, #0
 8002150:	2201      	movs	r2, #1
 8002152:	f004 fbb5 	bl	80068c0 <xQueueGenericSend>
			xSemaphoreGive( xRepaintScreen );
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <GameLoop+0x4ec>)
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	2300      	movs	r3, #0
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	f004 fbae 	bl	80068c0 <xQueueGenericSend>

			xSemaphoreGive(xScreenDriverMutex);
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <GameLoop+0x4e4>)
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	2300      	movs	r3, #0
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	f004 fba7 	bl	80068c0 <xQueueGenericSend>


    		vTaskDelay(delay);
 8002172:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8002176:	4618      	mov	r0, r3
 8002178:	f005 fadc 	bl	8007734 <vTaskDelay>
    		foodTimeout++;
 800217c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8002180:	3301      	adds	r3, #1
 8002182:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
    	if( xSemaphoreTake( xButtonPressedSem, ( TickType_t ) 1) == pdTRUE ){
 8002186:	e606      	b.n	8001d96 <GameLoop+0xe2>
 8002188:	20000184 	.word	0x20000184
 800218c:	200001a0 	.word	0x200001a0
 8002190:	200001a4 	.word	0x200001a4
 8002194:	2000018c 	.word	0x2000018c
 8002198:	200001bc 	.word	0x200001bc
 800219c:	20000180 	.word	0x20000180
 80021a0:	200001a8 	.word	0x200001a8

080021a4 <FoodPositionGenerator>:

    }

}

void FoodPositionGenerator(void *  pvParameters){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	; 0x30
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	srand((unsigned int)time(NULL));
 80021ac:	2000      	movs	r0, #0
 80021ae:	f007 fac3 	bl	8009738 <time>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4613      	mov	r3, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f007 fa41 	bl	8009640 <srand>
	llist *snakeBody;
	int display;
	int x;
	int y;
	int valid = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
	int food[3];

	for(;;) {
		if( xSemaphoreTake( xGameOverSem, ( TickType_t ) 0) == pdTRUE ) break;
 80021c2:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <FoodPositionGenerator+0x124>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f004 fe7f 	bl	8006ecc <xQueueSemaphoreTake>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d073      	beq.n	80022bc <FoodPositionGenerator+0x118>
		display = rand() % 4;
 80021d4:	f007 fa62 	bl	800969c <rand>
 80021d8:	4603      	mov	r3, r0
 80021da:	425a      	negs	r2, r3
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	f002 0203 	and.w	r2, r2, #3
 80021e4:	bf58      	it	pl
 80021e6:	4253      	negpl	r3, r2
 80021e8:	61fb      	str	r3, [r7, #28]

		if(xSemaphoreTake( xGenerateFood, ( TickType_t ) portMAX_DELAY) == pdTRUE);
 80021ea:	4b38      	ldr	r3, [pc, #224]	; (80022cc <FoodPositionGenerator+0x128>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f04f 31ff 	mov.w	r1, #4294967295
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 fe6a 	bl	8006ecc <xQueueSemaphoreTake>
		xQueueReceive( xSnakeQ, &snakeBody, ( TickType_t ) 10 );
 80021f8:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <FoodPositionGenerator+0x12c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f107 0118 	add.w	r1, r7, #24
 8002200:	220a      	movs	r2, #10
 8002202:	4618      	mov	r0, r3
 8002204:	f004 fd82 	bl	8006d0c <xQueueReceive>


		display = rand() % 4;
 8002208:	f007 fa48 	bl	800969c <rand>
 800220c:	4603      	mov	r3, r0
 800220e:	425a      	negs	r2, r3
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	f002 0203 	and.w	r2, r2, #3
 8002218:	bf58      	it	pl
 800221a:	4253      	negpl	r3, r2
 800221c:	61fb      	str	r3, [r7, #28]
		while(valid == 0 ){
 800221e:	e034      	b.n	800228a <FoodPositionGenerator+0xe6>
			struct node *curr = *snakeBody;
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	623b      	str	r3, [r7, #32]
			valid = 1;
 8002226:	2301      	movs	r3, #1
 8002228:	627b      	str	r3, [r7, #36]	; 0x24

			x = rand() % 8;
 800222a:	f007 fa37 	bl	800969c <rand>
 800222e:	4603      	mov	r3, r0
 8002230:	425a      	negs	r2, r3
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	f002 0207 	and.w	r2, r2, #7
 800223a:	bf58      	it	pl
 800223c:	4253      	negpl	r3, r2
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
			y = rand() % 8;
 8002240:	f007 fa2c 	bl	800969c <rand>
 8002244:	4603      	mov	r3, r0
 8002246:	425a      	negs	r2, r3
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	f002 0207 	and.w	r2, r2, #7
 8002250:	bf58      	it	pl
 8002252:	4253      	negpl	r3, r2
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28

			while (curr != NULL) {
 8002256:	e015      	b.n	8002284 <FoodPositionGenerator+0xe0>

				if (curr->x && curr->y == y && curr->display) {
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <FoodPositionGenerator+0xd2>
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002266:	429a      	cmp	r2, r3
 8002268:	d105      	bne.n	8002276 <FoodPositionGenerator+0xd2>
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <FoodPositionGenerator+0xd2>
					valid = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
				};

				if (valid == 0) break;
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	2b00      	cmp	r3, #0
 800227a:	d100      	bne.n	800227e <FoodPositionGenerator+0xda>
 800227c:	e005      	b.n	800228a <FoodPositionGenerator+0xe6>
				curr = curr->next;
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	623b      	str	r3, [r7, #32]
			while (curr != NULL) {
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1e6      	bne.n	8002258 <FoodPositionGenerator+0xb4>
		while(valid == 0 ){
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0c7      	beq.n	8002220 <FoodPositionGenerator+0x7c>
			}
		}

		food[0] = display;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	60fb      	str	r3, [r7, #12]
		food[1] = x;
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	613b      	str	r3, [r7, #16]
		food[2] = y;
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	617b      	str	r3, [r7, #20]

		xQueueSend( xFoodPositionQ, (void *) &food,  1 );
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <FoodPositionGenerator+0x130>)
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	f107 010c 	add.w	r1, r7, #12
 80022a4:	2300      	movs	r3, #0
 80022a6:	2201      	movs	r2, #1
 80022a8:	f004 fb0a 	bl	80068c0 <xQueueGenericSend>
		xSemaphoreGive( xFoodGenerated );
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <FoodPositionGenerator+0x134>)
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	2300      	movs	r3, #0
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	f004 fb03 	bl	80068c0 <xQueueGenericSend>
		if( xSemaphoreTake( xGameOverSem, ( TickType_t ) 0) == pdTRUE ) break;
 80022ba:	e782      	b.n	80021c2 <FoodPositionGenerator+0x1e>
 80022bc:	bf00      	nop
	}
}
 80022be:	bf00      	nop
 80022c0:	3730      	adds	r7, #48	; 0x30
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000194 	.word	0x20000194
 80022cc:	200001a0 	.word	0x200001a0
 80022d0:	20000184 	.word	0x20000184
 80022d4:	2000018c 	.word	0x2000018c
 80022d8:	200001a4 	.word	0x200001a4

080022dc <Task3>:

    }
}

void Task3( void * pvParameters )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b096      	sub	sp, #88	; 0x58
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	const uint64_t IMAGES[] = {
 80022e4:	4a34      	ldr	r2, [pc, #208]	; (80023b8 <Task3+0xdc>)
 80022e6:	f107 0308 	add.w	r3, r7, #8
 80022ea:	4611      	mov	r1, r2
 80022ec:	2248      	movs	r2, #72	; 0x48
 80022ee:	4618      	mov	r0, r3
 80022f0:	f007 f8b0 	bl	8009454 <memcpy>
	  0xff7e7e5a24180000,
	  0xff5a7e7e5a241800,
	  0xff5a5a7e7e5a2418,
	  0xff5a5a7e7e5a2418
	};
	const int IMAGES_LEN = sizeof(IMAGES)/8;
 80022f4:	2309      	movs	r3, #9
 80022f6:	653b      	str	r3, [r7, #80]	; 0x50

	if(xSemaphoreTake( xGameOverSem, ( TickType_t ) portMAX_DELAY) == pdTRUE);
 80022f8:	4b30      	ldr	r3, [pc, #192]	; (80023bc <Task3+0xe0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	4618      	mov	r0, r3
 8002302:	f004 fde3 	bl	8006ecc <xQueueSemaphoreTake>
	if( xSemaphoreTake( xScreenDriverMutex, ( TickType_t ) portMAX_DELAY) == pdTRUE ) ;
 8002306:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <Task3+0xe4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f04f 31ff 	mov.w	r1, #4294967295
 800230e:	4618      	mov	r0, r3
 8002310:	f004 fddc 	bl	8006ecc <xQueueSemaphoreTake>
	for (int i = 0; i < IMAGES_LEN; ++i) {
 8002314:	2300      	movs	r3, #0
 8002316:	657b      	str	r3, [r7, #84]	; 0x54
 8002318:	e02f      	b.n	800237a <Task3+0x9e>
		MAX7219_MatrixSetRow64(0, IMAGES[i]);
 800231a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	3358      	adds	r3, #88	; 0x58
 8002320:	443b      	add	r3, r7
 8002322:	3b50      	subs	r3, #80	; 0x50
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	2000      	movs	r0, #0
 800232a:	f000 fb37 	bl	800299c <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(1, IMAGES[i]);
 800232e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	3358      	adds	r3, #88	; 0x58
 8002334:	443b      	add	r3, r7
 8002336:	3b50      	subs	r3, #80	; 0x50
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	2001      	movs	r0, #1
 800233e:	f000 fb2d 	bl	800299c <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(2, IMAGES[i]);
 8002342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	3358      	adds	r3, #88	; 0x58
 8002348:	443b      	add	r3, r7
 800234a:	3b50      	subs	r3, #80	; 0x50
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	2002      	movs	r0, #2
 8002352:	f000 fb23 	bl	800299c <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(3, IMAGES[i]);
 8002356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	3358      	adds	r3, #88	; 0x58
 800235c:	443b      	add	r3, r7
 800235e:	3b50      	subs	r3, #80	; 0x50
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	2003      	movs	r0, #3
 8002366:	f000 fb19 	bl	800299c <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 800236a:	f000 fb49 	bl	8002a00 <MAX7219_MatrixUpdate>
		vTaskDelay(200);
 800236e:	20c8      	movs	r0, #200	; 0xc8
 8002370:	f005 f9e0 	bl	8007734 <vTaskDelay>
	for (int i = 0; i < IMAGES_LEN; ++i) {
 8002374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002376:	3301      	adds	r3, #1
 8002378:	657b      	str	r3, [r7, #84]	; 0x54
 800237a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800237c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800237e:	429a      	cmp	r2, r3
 8002380:	dbcb      	blt.n	800231a <Task3+0x3e>

	}
    for(;;)
    {

    	 MAX7219_MatrixSetRow64(0, CHR('D'));
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <Task3+0xe8>)
 8002384:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002388:	2000      	movs	r0, #0
 800238a:	f000 fb07 	bl	800299c <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(1, CHR('E'));
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <Task3+0xe8>)
 8002390:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002394:	2001      	movs	r0, #1
 8002396:	f000 fb01 	bl	800299c <MAX7219_MatrixSetRow64>
		  MAX7219_MatrixSetRow64(2, CHR('A'));
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <Task3+0xe8>)
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	2002      	movs	r0, #2
 80023a2:	f000 fafb 	bl	800299c <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(3, CHR('D'));
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <Task3+0xe8>)
 80023a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023ac:	2003      	movs	r0, #3
 80023ae:	f000 faf5 	bl	800299c <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 80023b2:	f000 fb25 	bl	8002a00 <MAX7219_MatrixUpdate>
    	 MAX7219_MatrixSetRow64(0, CHR('D'));
 80023b6:	e7e4      	b.n	8002382 <Task3+0xa6>
 80023b8:	0800b4a0 	.word	0x0800b4a0
 80023bc:	20000194 	.word	0x20000194
 80023c0:	200001bc 	.word	0x200001bc
 80023c4:	0800b528 	.word	0x0800b528

080023c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80023d0:	2001      	movs	r0, #1
 80023d2:	f004 f801 	bl	80063d8 <osDelay>
 80023d6:	e7fb      	b.n	80023d0 <StartDefaultTask+0x8>

080023d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023ea:	f000 fdc1 	bl	8002f70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40001400 	.word	0x40001400

080023fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002400:	b672      	cpsid	i
}
 8002402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002404:	e7fe      	b.n	8002404 <Error_Handler+0x8>
	...

08002408 <MAX7219_Init>:
static bool SPI_Tx(uint8_t data);
static void DelayInit(void);
static void DelayUS(uint32_t);

void MAX7219_Init(SPI_HandleTypeDef* spi, GPIO_TypeDef* ss_port, uint16_t ss_pin)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	4613      	mov	r3, r2
 8002414:	80fb      	strh	r3, [r7, #6]
	Max7219_SPI = spi;
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <MAX7219_Init+0x30>)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6013      	str	r3, [r2, #0]
	Max7219_SS_Port = ss_port;
 800241c:	4a07      	ldr	r2, [pc, #28]	; (800243c <MAX7219_Init+0x34>)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	6013      	str	r3, [r2, #0]
	Max7219_SS_Pin = ss_pin;
 8002422:	4a07      	ldr	r2, [pc, #28]	; (8002440 <MAX7219_Init+0x38>)
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	8013      	strh	r3, [r2, #0]

	/* Us delay */
	DelayInit();
 8002428:	f000 f998 	bl	800275c <DelayInit>

	/* Deselect SS */
	SS_Deselect();
 800242c:	f000 f968 	bl	8002700 <SS_Deselect>
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200001d0 	.word	0x200001d0
 800243c:	200001d4 	.word	0x200001d4
 8002440:	200001d8 	.word	0x200001d8

08002444 <MAX7219_Write>:

bool MAX7219_Write(uint8_t index, uint8_t reg, uint8_t data)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	460b      	mov	r3, r1
 8002450:	71bb      	strb	r3, [r7, #6]
 8002452:	4613      	mov	r3, r2
 8002454:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d901      	bls.n	8002460 <MAX7219_Write+0x1c>
 800245c:	2300      	movs	r3, #0
 800245e:	e05b      	b.n	8002518 <MAX7219_Write+0xd4>

	SS_Select();
 8002460:	f000 f93a 	bl	80026d8 <SS_Select>

	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e018      	b.n	800249c <MAX7219_Write+0x58>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 800246a:	2000      	movs	r0, #0
 800246c:	f000 f95c 	bl	8002728 <SPI_Tx>
 8002470:	4603      	mov	r3, r0
 8002472:	f083 0301 	eor.w	r3, r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MAX7219_Write+0x3c>
 800247c:	2300      	movs	r3, #0
 800247e:	e04b      	b.n	8002518 <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 8002480:	2000      	movs	r0, #0
 8002482:	f000 f951 	bl	8002728 <SPI_Tx>
 8002486:	4603      	mov	r3, r0
 8002488:	f083 0301 	eor.w	r3, r3, #1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MAX7219_Write+0x52>
 8002492:	2300      	movs	r3, #0
 8002494:	e040      	b.n	8002518 <MAX7219_Write+0xd4>
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	dde3      	ble.n	800246a <MAX7219_Write+0x26>
	}

	/* Write register */
	if(!SPI_Tx(reg)) return false;
 80024a2:	79bb      	ldrb	r3, [r7, #6]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f93f 	bl	8002728 <SPI_Tx>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f083 0301 	eor.w	r3, r3, #1
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MAX7219_Write+0x76>
 80024b6:	2300      	movs	r3, #0
 80024b8:	e02e      	b.n	8002518 <MAX7219_Write+0xd4>
	if(!SPI_Tx(data)) return false;
 80024ba:	797b      	ldrb	r3, [r7, #5]
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f933 	bl	8002728 <SPI_Tx>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f083 0301 	eor.w	r3, r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MAX7219_Write+0x8e>
 80024ce:	2300      	movs	r3, #0
 80024d0:	e022      	b.n	8002518 <MAX7219_Write+0xd4>

	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	e018      	b.n	800250a <MAX7219_Write+0xc6>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 80024d8:	2000      	movs	r0, #0
 80024da:	f000 f925 	bl	8002728 <SPI_Tx>
 80024de:	4603      	mov	r3, r0
 80024e0:	f083 0301 	eor.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MAX7219_Write+0xaa>
 80024ea:	2300      	movs	r3, #0
 80024ec:	e014      	b.n	8002518 <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 80024ee:	2000      	movs	r0, #0
 80024f0:	f000 f91a 	bl	8002728 <SPI_Tx>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f083 0301 	eor.w	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MAX7219_Write+0xc0>
 8002500:	2300      	movs	r3, #0
 8002502:	e009      	b.n	8002518 <MAX7219_Write+0xd4>
	for(int i = 0; i < index; i++)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	3301      	adds	r3, #1
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	429a      	cmp	r2, r3
 8002510:	dbe2      	blt.n	80024d8 <MAX7219_Write+0x94>
	}

	SS_Deselect();
 8002512:	f000 f8f5 	bl	8002700 <SS_Deselect>

	return true;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <MAX7219_Digit>:

bool MAX7219_Digit(uint8_t index, uint8_t digit, int8_t value)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
 800252a:	460b      	mov	r3, r1
 800252c:	71bb      	strb	r3, [r7, #6]
 800252e:	4613      	mov	r3, r2
 8002530:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d901      	bls.n	800253c <MAX7219_Digit+0x1c>
 8002538:	2300      	movs	r3, #0
 800253a:	e015      	b.n	8002568 <MAX7219_Digit+0x48>
	if(digit > 0x07) return false;
 800253c:	79bb      	ldrb	r3, [r7, #6]
 800253e:	2b07      	cmp	r3, #7
 8002540:	d901      	bls.n	8002546 <MAX7219_Digit+0x26>
 8002542:	2300      	movs	r3, #0
 8002544:	e010      	b.n	8002568 <MAX7219_Digit+0x48>

	if(!MAX7219_Write(index, digit+1, value)) return false;
 8002546:	79bb      	ldrb	r3, [r7, #6]
 8002548:	3301      	adds	r3, #1
 800254a:	b2d9      	uxtb	r1, r3
 800254c:	797a      	ldrb	r2, [r7, #5]
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff77 	bl	8002444 <MAX7219_Write>
 8002556:	4603      	mov	r3, r0
 8002558:	f083 0301 	eor.w	r3, r3, #1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MAX7219_Digit+0x46>
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <MAX7219_Digit+0x48>

	return true;
 8002566:	2301      	movs	r3, #1
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <MAX7219_Decode>:

bool MAX7219_Decode(uint8_t index, uint8_t value)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	460a      	mov	r2, r1
 800257a:	71fb      	strb	r3, [r7, #7]
 800257c:	4613      	mov	r3, r2
 800257e:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d901      	bls.n	800258a <MAX7219_Decode+0x1a>
 8002586:	2300      	movs	r3, #0
 8002588:	e00e      	b.n	80025a8 <MAX7219_Decode+0x38>

	if(!MAX7219_Write(index, MAX7219_REG_DECODE, value)) return false;
 800258a:	79ba      	ldrb	r2, [r7, #6]
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2109      	movs	r1, #9
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff57 	bl	8002444 <MAX7219_Write>
 8002596:	4603      	mov	r3, r0
 8002598:	f083 0301 	eor.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MAX7219_Decode+0x36>
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <MAX7219_Decode+0x38>

	return true;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <MAX7219_Intensity>:

bool MAX7219_Intensity(uint8_t index, uint8_t value)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	460a      	mov	r2, r1
 80025ba:	71fb      	strb	r3, [r7, #7]
 80025bc:	4613      	mov	r3, r2
 80025be:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d901      	bls.n	80025ca <MAX7219_Intensity+0x1a>
 80025c6:	2300      	movs	r3, #0
 80025c8:	e013      	b.n	80025f2 <MAX7219_Intensity+0x42>
	if(value > 0x0F) value = 0x0F;
 80025ca:	79bb      	ldrb	r3, [r7, #6]
 80025cc:	2b0f      	cmp	r3, #15
 80025ce:	d901      	bls.n	80025d4 <MAX7219_Intensity+0x24>
 80025d0:	230f      	movs	r3, #15
 80025d2:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_INTENSITY, value)) return false;
 80025d4:	79ba      	ldrb	r2, [r7, #6]
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	210a      	movs	r1, #10
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff32 	bl	8002444 <MAX7219_Write>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f083 0301 	eor.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MAX7219_Intensity+0x40>
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <MAX7219_Intensity+0x42>

	return true;
 80025f0:	2301      	movs	r3, #1
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <MAX7219_ScanLimit>:

bool MAX7219_ScanLimit(uint8_t index, uint8_t value)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	460a      	mov	r2, r1
 8002604:	71fb      	strb	r3, [r7, #7]
 8002606:	4613      	mov	r3, r2
 8002608:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d901      	bls.n	8002614 <MAX7219_ScanLimit+0x1a>
 8002610:	2300      	movs	r3, #0
 8002612:	e013      	b.n	800263c <MAX7219_ScanLimit+0x42>
	if(value > 0x07) value = 0x07;
 8002614:	79bb      	ldrb	r3, [r7, #6]
 8002616:	2b07      	cmp	r3, #7
 8002618:	d901      	bls.n	800261e <MAX7219_ScanLimit+0x24>
 800261a:	2307      	movs	r3, #7
 800261c:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_SCANLIMIT, value)) return false;
 800261e:	79ba      	ldrb	r2, [r7, #6]
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	210b      	movs	r1, #11
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff0d 	bl	8002444 <MAX7219_Write>
 800262a:	4603      	mov	r3, r0
 800262c:	f083 0301 	eor.w	r3, r3, #1
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MAX7219_ScanLimit+0x40>
 8002636:	2300      	movs	r3, #0
 8002638:	e000      	b.n	800263c <MAX7219_ScanLimit+0x42>

	return true;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <MAX7219_ShutDown>:

bool MAX7219_ShutDown(uint8_t index, uint8_t value)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	460a      	mov	r2, r1
 800264e:	71fb      	strb	r3, [r7, #7]
 8002650:	4613      	mov	r3, r2
 8002652:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	2b03      	cmp	r3, #3
 8002658:	d901      	bls.n	800265e <MAX7219_ShutDown+0x1a>
 800265a:	2300      	movs	r3, #0
 800265c:	e013      	b.n	8002686 <MAX7219_ShutDown+0x42>
	if(value > 0x01) value = 0x01;
 800265e:	79bb      	ldrb	r3, [r7, #6]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d901      	bls.n	8002668 <MAX7219_ShutDown+0x24>
 8002664:	2301      	movs	r3, #1
 8002666:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_SHUTDOWN, value)) return false;
 8002668:	79ba      	ldrb	r2, [r7, #6]
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	210c      	movs	r1, #12
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fee8 	bl	8002444 <MAX7219_Write>
 8002674:	4603      	mov	r3, r0
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MAX7219_ShutDown+0x40>
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <MAX7219_ShutDown+0x42>

	return true;
 8002684:	2301      	movs	r3, #1
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <MAX7219_Test>:

bool MAX7219_Test(uint8_t index, uint8_t value)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	460a      	mov	r2, r1
 8002698:	71fb      	strb	r3, [r7, #7]
 800269a:	4613      	mov	r3, r2
 800269c:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d901      	bls.n	80026a8 <MAX7219_Test+0x1a>
 80026a4:	2300      	movs	r3, #0
 80026a6:	e013      	b.n	80026d0 <MAX7219_Test+0x42>
	if(value > 0x01) value = 0x01;
 80026a8:	79bb      	ldrb	r3, [r7, #6]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d901      	bls.n	80026b2 <MAX7219_Test+0x24>
 80026ae:	2301      	movs	r3, #1
 80026b0:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_TEST, value)) return false;
 80026b2:	79ba      	ldrb	r2, [r7, #6]
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	210f      	movs	r1, #15
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fec3 	bl	8002444 <MAX7219_Write>
 80026be:	4603      	mov	r3, r0
 80026c0:	f083 0301 	eor.w	r3, r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MAX7219_Test+0x40>
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <MAX7219_Test+0x42>

	return true;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <SS_Select>:

static void SS_Select()
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_RESET);
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <SS_Select+0x20>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a06      	ldr	r2, [pc, #24]	; (80026fc <SS_Select+0x24>)
 80026e2:	8811      	ldrh	r1, [r2, #0]
 80026e4:	2200      	movs	r2, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 feee 	bl	80034c8 <HAL_GPIO_WritePin>
	DelayUS(1);
 80026ec:	2001      	movs	r0, #1
 80026ee:	f000 f85f 	bl	80027b0 <DelayUS>
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200001d4 	.word	0x200001d4
 80026fc:	200001d8 	.word	0x200001d8

08002700 <SS_Deselect>:

static void SS_Deselect()
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_SET);
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <SS_Deselect+0x20>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a06      	ldr	r2, [pc, #24]	; (8002724 <SS_Deselect+0x24>)
 800270a:	8811      	ldrh	r1, [r2, #0]
 800270c:	2201      	movs	r2, #1
 800270e:	4618      	mov	r0, r3
 8002710:	f000 feda 	bl	80034c8 <HAL_GPIO_WritePin>
	DelayUS(1);
 8002714:	2001      	movs	r0, #1
 8002716:	f000 f84b 	bl	80027b0 <DelayUS>
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200001d4 	.word	0x200001d4
 8002724:	200001d8 	.word	0x200001d8

08002728 <SPI_Tx>:

static bool SPI_Tx(uint8_t data)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_Transmit(Max7219_SPI, &data, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <SPI_Tx+0x30>)
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	1df9      	adds	r1, r7, #7
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
 800273c:	2201      	movs	r2, #1
 800273e:	f002 fad0 	bl	8004ce2 <HAL_SPI_Transmit>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <SPI_Tx+0x24>
 8002748:	2300      	movs	r3, #0
 800274a:	e000      	b.n	800274e <SPI_Tx+0x26>
	return true;
 800274c:	2301      	movs	r3, #1
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200001d0 	.word	0x200001d0

0800275c <DelayInit>:

static void DelayInit(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <DelayInit+0x4c>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <DelayInit+0x4c>)
 8002766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800276a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <DelayInit+0x4c>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <DelayInit+0x4c>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002776:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <DelayInit+0x50>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <DelayInit+0x50>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <DelayInit+0x50>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a08      	ldr	r2, [pc, #32]	; (80027ac <DelayInit+0x50>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <DelayInit+0x50>)
 8002792:	2200      	movs	r2, #0
 8002794:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8002796:	bf00      	nop
  __ASM volatile ("NOP");
 8002798:	bf00      	nop
  __ASM volatile ("NOP");
 800279a:	bf00      	nop
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000edf0 	.word	0xe000edf0
 80027ac:	e0001000 	.word	0xe0001000

080027b0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <DelayUS+0x44>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <DelayUS+0x48>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0c9a      	lsrs	r2, r3, #18
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <DelayUS+0x4c>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <DelayUS+0x4c>)
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d8f6      	bhi.n	80027d2 <DelayUS+0x22>
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000000 	.word	0x20000000
 80027f8:	431bde83 	.word	0x431bde83
 80027fc:	e0001000 	.word	0xe0001000

08002800 <MAX7219_paintPointsInRow>:
};

volatile uint8_t FrameBuffer[MAX7219_IC_NUM][8];


uint8_t MAX7219_paintPointsInRow(int rowArray[]){
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

	uint8_t row = 0x0;
 8002808:	2300      	movs	r3, #0
 800280a:	75fb      	strb	r3, [r7, #23]
	for (int i = 0;  i < 8; ++ i) {
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	e02a      	b.n	8002868 <MAX7219_paintPointsInRow+0x68>
		int colPosition = pow(2, i);
 8002812:	6938      	ldr	r0, [r7, #16]
 8002814:	f7fd fe7e 	bl	8000514 <__aeabi_i2d>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	ec43 2b11 	vmov	d1, r2, r3
 8002820:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8002878 <MAX7219_paintPointsInRow+0x78>
 8002824:	f007 feb4 	bl	800a590 <pow>
 8002828:	ec53 2b10 	vmov	r2, r3, d0
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	f7fe f98a 	bl	8000b48 <__aeabi_d2iz>
 8002834:	4603      	mov	r3, r0
 8002836:	60fb      	str	r3, [r7, #12]
		int ledActive = rowArray[i] > 0 ? 1 : 0;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4413      	add	r3, r2
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	bfcc      	ite	gt
 8002846:	2301      	movgt	r3, #1
 8002848:	2300      	movle	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	60bb      	str	r3, [r7, #8]
		row += ledActive * colPosition;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	fb12 f303 	smulbb	r3, r2, r3
 800285a:	b2da      	uxtb	r2, r3
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	4413      	add	r3, r2
 8002860:	75fb      	strb	r3, [r7, #23]
	for (int i = 0;  i < 8; ++ i) {
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	3301      	adds	r3, #1
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b07      	cmp	r3, #7
 800286c:	ddd1      	ble.n	8002812 <MAX7219_paintPointsInRow+0x12>
	}
	return row;
 800286e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	00000000 	.word	0x00000000
 800287c:	40000000 	.word	0x40000000

08002880 <MAX7219_paintPoints>:

void MAX7219_paintPoints(uint8_t displayIndex, int matrixArray[][8]){
 8002880:	b5b0      	push	{r4, r5, r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]

	for (int i = 0;  i < 8; ++ i) {
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	e015      	b.n	80028be <MAX7219_paintPoints+0x3e>

		FrameBuffer[displayIndex][7-i] = MAX7219_paintPointsInRow(matrixArray[i]);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	015b      	lsls	r3, r3, #5
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	441a      	add	r2, r3
 800289a:	79fd      	ldrb	r5, [r7, #7]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f1c3 0407 	rsb	r4, r3, #7
 80028a2:	4610      	mov	r0, r2
 80028a4:	f7ff ffac 	bl	8002800 <MAX7219_paintPointsInRow>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4619      	mov	r1, r3
 80028ac:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <MAX7219_paintPoints+0x50>)
 80028ae:	00eb      	lsls	r3, r5, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	4423      	add	r3, r4
 80028b4:	460a      	mov	r2, r1
 80028b6:	701a      	strb	r2, [r3, #0]
	for (int i = 0;  i < 8; ++ i) {
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3301      	adds	r3, #1
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b07      	cmp	r3, #7
 80028c2:	dde6      	ble.n	8002892 <MAX7219_paintPoints+0x12>

	}

}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bdb0      	pop	{r4, r5, r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200001dc 	.word	0x200001dc

080028d4 <MAX7219_MatrixInit>:

void MAX7219_MatrixInit(SPI_HandleTypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
	MAX7219_Init(spi, cs_port, cs_pin);
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	461a      	mov	r2, r3
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f7ff fd8d 	bl	8002408 <MAX7219_Init>

	for(int i = 0; i < MAX7219_IC_NUM; i++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e02a      	b.n	800294a <MAX7219_MatrixInit+0x76>
	{
		MAX7219_MatrixClear(i);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 f82f 	bl	800295c <MAX7219_MatrixClear>
		MAX7219_ShutDown(i, 1);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2101      	movs	r1, #1
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fe9d 	bl	8002644 <MAX7219_ShutDown>
		MAX7219_Test(i, 0);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff febc 	bl	800268e <MAX7219_Test>
		MAX7219_Decode(i, 0);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fe27 	bl	8002570 <MAX7219_Decode>
		MAX7219_Intensity(i, 1);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2101      	movs	r1, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fe41 	bl	80025b0 <MAX7219_Intensity>
		MAX7219_ScanLimit(i, 7);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2107      	movs	r1, #7
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fe60 	bl	80025fa <MAX7219_ScanLimit>
		MAX7219_MatrixClear(i);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f80c 	bl	800295c <MAX7219_MatrixClear>
	for(int i = 0; i < MAX7219_IC_NUM; i++)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3301      	adds	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b03      	cmp	r3, #3
 800294e:	ddd1      	ble.n	80028f4 <MAX7219_MatrixInit+0x20>
	}
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <MAX7219_MatrixClear>:

void MAX7219_MatrixClear(uint8_t index)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
	for(int i =0; i < 8; i++)
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e00a      	b.n	8002982 <MAX7219_MatrixClear+0x26>
	{
		FrameBuffer[index][i] = 0;
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <MAX7219_MatrixClear+0x3c>)
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	441a      	add	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4413      	add	r3, r2
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
	for(int i =0; i < 8; i++)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3301      	adds	r3, #1
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b07      	cmp	r3, #7
 8002986:	ddf1      	ble.n	800296c <MAX7219_MatrixClear+0x10>
	}
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	200001dc 	.word	0x200001dc

0800299c <MAX7219_MatrixSetRow64>:
		FrameBuffer[index][i] = rows[i];
	}
}

void MAX7219_MatrixSetRow64(uint8_t index,  uint64_t rows)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4601      	mov	r1, r0
 80029a4:	e9c7 2300 	strd	r2, r3, [r7]
 80029a8:	460b      	mov	r3, r1
 80029aa:	73fb      	strb	r3, [r7, #15]
	for(int i =0; i < 8; i++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e01a      	b.n	80029e8 <MAX7219_MatrixSetRow64+0x4c>
	{
		uint8_t row = rows & 0xFF;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	74fb      	strb	r3, [r7, #19]
		FrameBuffer[index][7-i] = row;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	490f      	ldr	r1, [pc, #60]	; (80029fc <MAX7219_MatrixSetRow64+0x60>)
 80029c0:	00d2      	lsls	r2, r2, #3
 80029c2:	440a      	add	r2, r1
 80029c4:	4413      	add	r3, r2
 80029c6:	7cfa      	ldrb	r2, [r7, #19]
 80029c8:	701a      	strb	r2, [r3, #0]
		rows = rows >> 8;
 80029ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	0a02      	lsrs	r2, r0, #8
 80029d8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80029dc:	0a0b      	lsrs	r3, r1, #8
 80029de:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i =0; i < 8; i++)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3301      	adds	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b07      	cmp	r3, #7
 80029ec:	dde1      	ble.n	80029b2 <MAX7219_MatrixSetRow64+0x16>
	}
}
 80029ee:	bf00      	nop
 80029f0:	bf00      	nop
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	200001dc 	.word	0x200001dc

08002a00 <MAX7219_MatrixUpdate>:
		FrameBuffer[3][i] |= lsbD0;
	}
}

bool MAX7219_MatrixUpdate()
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e024      	b.n	8002a56 <MAX7219_MatrixUpdate+0x56>
	{
		for(int digit = 0; digit < 8; digit++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	e01b      	b.n	8002a4a <MAX7219_MatrixUpdate+0x4a>
		{

			uint8_t row = FrameBuffer[index][digit];
 8002a12:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <MAX7219_MatrixUpdate+0x68>)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	441a      	add	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	71fb      	strb	r3, [r7, #7]
			if(!MAX7219_Digit(index, digit, row)) return false;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	b2d1      	uxtb	r1, r2
 8002a2a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fd76 	bl	8002520 <MAX7219_Digit>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f083 0301 	eor.w	r3, r3, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MAX7219_MatrixUpdate+0x44>
 8002a40:	2300      	movs	r3, #0
 8002a42:	e00c      	b.n	8002a5e <MAX7219_MatrixUpdate+0x5e>
		for(int digit = 0; digit < 8; digit++)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	3301      	adds	r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b07      	cmp	r3, #7
 8002a4e:	dde0      	ble.n	8002a12 <MAX7219_MatrixUpdate+0x12>
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3301      	adds	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	ddd7      	ble.n	8002a0c <MAX7219_MatrixUpdate+0xc>
		}
	}

	return true;
 8002a5c:	2301      	movs	r3, #1
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200001dc 	.word	0x200001dc

08002a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_MspInit+0x4c>)
 8002a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a76:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_MspInit+0x4c>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <HAL_MspInit+0x4c>)
 8002a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_MspInit+0x4c>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_MspInit+0x4c>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6593      	str	r3, [r2, #88]	; 0x58
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_MspInit+0x4c>)
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	210f      	movs	r1, #15
 8002aa6:	f06f 0001 	mvn.w	r0, #1
 8002aaa:	f000 fb39 	bl	8003120 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000

08002abc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_SPI_MspInit+0x7c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d128      	bne.n	8002b30 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <HAL_SPI_MspInit+0x80>)
 8002ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae2:	4a16      	ldr	r2, [pc, #88]	; (8002b3c <HAL_SPI_MspInit+0x80>)
 8002ae4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <HAL_SPI_MspInit+0x80>)
 8002aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_SPI_MspInit+0x80>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	4a10      	ldr	r2, [pc, #64]	; (8002b3c <HAL_SPI_MspInit+0x80>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <HAL_SPI_MspInit+0x80>)
 8002b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b0e:	23a0      	movs	r3, #160	; 0xa0
 8002b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b1e:	2305      	movs	r3, #5
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	f107 0314 	add.w	r3, r7, #20
 8002b26:	4619      	mov	r1, r3
 8002b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b2c:	f000 fb22 	bl	8003174 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b30:	bf00      	nop
 8002b32:	3728      	adds	r7, #40	; 0x28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40013000 	.word	0x40013000
 8002b3c:	40021000 	.word	0x40021000

08002b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b0ac      	sub	sp, #176	; 0xb0
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2288      	movs	r2, #136	; 0x88
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f006 fc85 	bl	8009470 <memset>
  if(huart->Instance==USART2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_UART_MspInit+0xb0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d13b      	bne.n	8002be8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b70:	2302      	movs	r3, #2
 8002b72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b74:	2300      	movs	r3, #0
 8002b76:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 fb51 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b88:	f7ff fc38 	bl	80023fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_UART_MspInit+0xb4>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_UART_MspInit+0xb4>)
 8002b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b96:	6593      	str	r3, [r2, #88]	; 0x58
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <HAL_UART_MspInit+0xb4>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_UART_MspInit+0xb4>)
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba8:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <HAL_UART_MspInit+0xb4>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_UART_MspInit+0xb4>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bde:	4619      	mov	r1, r3
 8002be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be4:	f000 fac6 	bl	8003174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002be8:	bf00      	nop
 8002bea:	37b0      	adds	r7, #176	; 0xb0
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40004400 	.word	0x40004400
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002c06:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_InitTick+0xe0>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0a:	4a33      	ldr	r2, [pc, #204]	; (8002cd8 <HAL_InitTick+0xe0>)
 8002c0c:	f043 0320 	orr.w	r3, r3, #32
 8002c10:	6593      	str	r3, [r2, #88]	; 0x58
 8002c12:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <HAL_InitTick+0xe0>)
 8002c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c1e:	f107 0210 	add.w	r2, r7, #16
 8002c22:	f107 0314 	add.w	r3, r7, #20
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 fa69 	bl	8004100 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d103      	bne.n	8002c40 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c38:	f001 fa36 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8002c3c:	6378      	str	r0, [r7, #52]	; 0x34
 8002c3e:	e004      	b.n	8002c4a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c40:	f001 fa32 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8002c44:	4603      	mov	r3, r0
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <HAL_InitTick+0xe4>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0c9b      	lsrs	r3, r3, #18
 8002c54:	3b01      	subs	r3, #1
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002c58:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_InitTick+0xe8>)
 8002c5a:	4a22      	ldr	r2, [pc, #136]	; (8002ce4 <HAL_InitTick+0xec>)
 8002c5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002c5e:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <HAL_InitTick+0xe8>)
 8002c60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c64:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002c66:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <HAL_InitTick+0xe8>)
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002c6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_InitTick+0xe8>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c72:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_InitTick+0xe8>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_InitTick+0xe8>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002c7e:	4818      	ldr	r0, [pc, #96]	; (8002ce0 <HAL_InitTick+0xe8>)
 8002c80:	f002 fb02 	bl	8005288 <HAL_TIM_Base_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11b      	bne.n	8002cca <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002c92:	4813      	ldr	r0, [pc, #76]	; (8002ce0 <HAL_InitTick+0xe8>)
 8002c94:	f002 fb5a 	bl	800534c <HAL_TIM_Base_Start_IT>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002c9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d111      	bne.n	8002cca <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002ca6:	2037      	movs	r0, #55	; 0x37
 8002ca8:	f000 fa56 	bl	8003158 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b0f      	cmp	r3, #15
 8002cb0:	d808      	bhi.n	8002cc4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	2037      	movs	r0, #55	; 0x37
 8002cb8:	f000 fa32 	bl	8003120 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_InitTick+0xf0>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e002      	b.n	8002cca <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002cca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3738      	adds	r7, #56	; 0x38
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	431bde83 	.word	0x431bde83
 8002ce0:	200001fc 	.word	0x200001fc
 8002ce4:	40001400 	.word	0x40001400
 8002ce8:	20000004 	.word	0x20000004

08002cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <NMI_Handler+0x4>

08002cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cf6:	e7fe      	b.n	8002cf6 <HardFault_Handler+0x4>

08002cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <MemManage_Handler+0x4>

08002cfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d02:	e7fe      	b.n	8002d02 <BusFault_Handler+0x4>

08002d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <UsageFault_Handler+0x4>

08002d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <TIM7_IRQHandler>:
/**
  * @brief This function handles EXTI line3 interrupt.
  */

void TIM7_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <TIM7_IRQHandler+0x10>)
 8002d1e:	f002 fb85 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200001fc 	.word	0x200001fc

08002d2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
	return 1;
 8002d30:	2301      	movs	r3, #1
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <_kill>:

int _kill(int pid, int sig)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d46:	f006 fad9 	bl	80092fc <__errno>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2216      	movs	r2, #22
 8002d4e:	601a      	str	r2, [r3, #0]
	return -1;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_exit>:

void _exit (int status)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ffe7 	bl	8002d3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d6e:	e7fe      	b.n	8002d6e <_exit+0x12>

08002d70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	e00a      	b.n	8002d98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d82:	f3af 8000 	nop.w
 8002d86:	4601      	mov	r1, r0
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	60ba      	str	r2, [r7, #8]
 8002d8e:	b2ca      	uxtb	r2, r1
 8002d90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3301      	adds	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	dbf0      	blt.n	8002d82 <_read+0x12>
	}

return len;
 8002da0:	687b      	ldr	r3, [r7, #4]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e009      	b.n	8002dd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	60ba      	str	r2, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	dbf1      	blt.n	8002dbc <_write+0x12>
	}
	return len;
 8002dd8:	687b      	ldr	r3, [r7, #4]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_close>:

int _close(int file)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
	return -1;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <_isatty>:

int _isatty(int file)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
	return 1;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <_sbrk+0x5c>)
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <_sbrk+0x60>)
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <_sbrk+0x64>)
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <_sbrk+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <_sbrk+0x64>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d207      	bcs.n	8002e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e7c:	f006 fa3e 	bl	80092fc <__errno>
 8002e80:	4603      	mov	r3, r0
 8002e82:	220c      	movs	r2, #12
 8002e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	e009      	b.n	8002ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <_sbrk+0x64>)
 8002e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20018000 	.word	0x20018000
 8002eac:	00000400 	.word	0x00000400
 8002eb0:	20000248 	.word	0x20000248
 8002eb4:	20008cb0 	.word	0x20008cb0

08002eb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <SystemInit+0x20>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <SystemInit+0x20>)
 8002ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ee0:	f7ff ffea 	bl	8002eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ee4:	480c      	ldr	r0, [pc, #48]	; (8002f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ee6:	490d      	ldr	r1, [pc, #52]	; (8002f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <LoopForever+0xe>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eec:	e002      	b.n	8002ef4 <LoopCopyDataInit>

08002eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ef2:	3304      	adds	r3, #4

08002ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef8:	d3f9      	bcc.n	8002eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002efa:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002efc:	4c0a      	ldr	r4, [pc, #40]	; (8002f28 <LoopForever+0x16>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f00:	e001      	b.n	8002f06 <LoopFillZerobss>

08002f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f04:	3204      	adds	r2, #4

08002f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f08:	d3fb      	bcc.n	8002f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f0a:	f006 fa6b 	bl	80093e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f0e:	f7fe fa85 	bl	800141c <main>

08002f12 <LoopForever>:

LoopForever:
    b LoopForever
 8002f12:	e7fe      	b.n	8002f12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f1c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002f20:	0800b8a0 	.word	0x0800b8a0
  ldr r2, =_sbss
 8002f24:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002f28:	20008cb0 	.word	0x20008cb0

08002f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f2c:	e7fe      	b.n	8002f2c <ADC1_2_IRQHandler>
	...

08002f30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <HAL_Init+0x3c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <HAL_Init+0x3c>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f46:	2003      	movs	r0, #3
 8002f48:	f000 f8df 	bl	800310a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f4c:	200f      	movs	r0, #15
 8002f4e:	f7ff fe53 	bl	8002bf8 <HAL_InitTick>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	71fb      	strb	r3, [r7, #7]
 8002f5c:	e001      	b.n	8002f62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f5e:	f7ff fd85 	bl	8002a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f62:	79fb      	ldrb	r3, [r7, #7]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40022000 	.word	0x40022000

08002f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_IncTick+0x20>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_IncTick+0x24>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <HAL_IncTick+0x24>)
 8002f82:	6013      	str	r3, [r2, #0]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000008 	.word	0x20000008
 8002f94:	2000024c 	.word	0x2000024c

08002f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_GetTick+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	2000024c 	.word	0x2000024c

08002fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe2:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	60d3      	str	r3, [r2, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <__NVIC_GetPriorityGrouping+0x18>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	f003 0307 	and.w	r3, r3, #7
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	2b00      	cmp	r3, #0
 8003024:	db0b      	blt.n	800303e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	4907      	ldr	r1, [pc, #28]	; (800304c <__NVIC_EnableIRQ+0x38>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2001      	movs	r0, #1
 8003036:	fa00 f202 	lsl.w	r2, r0, r2
 800303a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000e100 	.word	0xe000e100

08003050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003060:	2b00      	cmp	r3, #0
 8003062:	db0a      	blt.n	800307a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	b2da      	uxtb	r2, r3
 8003068:	490c      	ldr	r1, [pc, #48]	; (800309c <__NVIC_SetPriority+0x4c>)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	0112      	lsls	r2, r2, #4
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	440b      	add	r3, r1
 8003074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003078:	e00a      	b.n	8003090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4908      	ldr	r1, [pc, #32]	; (80030a0 <__NVIC_SetPriority+0x50>)
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	3b04      	subs	r3, #4
 8003088:	0112      	lsls	r2, r2, #4
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	440b      	add	r3, r1
 800308e:	761a      	strb	r2, [r3, #24]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000e100 	.word	0xe000e100
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f1c3 0307 	rsb	r3, r3, #7
 80030be:	2b04      	cmp	r3, #4
 80030c0:	bf28      	it	cs
 80030c2:	2304      	movcs	r3, #4
 80030c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3304      	adds	r3, #4
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d902      	bls.n	80030d4 <NVIC_EncodePriority+0x30>
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3b03      	subs	r3, #3
 80030d2:	e000      	b.n	80030d6 <NVIC_EncodePriority+0x32>
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	f04f 32ff 	mov.w	r2, #4294967295
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43da      	mvns	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	401a      	ands	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43d9      	mvns	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	4313      	orrs	r3, r2
         );
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3724      	adds	r7, #36	; 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff ff4c 	bl	8002fb0 <__NVIC_SetPriorityGrouping>
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003132:	f7ff ff61 	bl	8002ff8 <__NVIC_GetPriorityGrouping>
 8003136:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	6978      	ldr	r0, [r7, #20]
 800313e:	f7ff ffb1 	bl	80030a4 <NVIC_EncodePriority>
 8003142:	4602      	mov	r2, r0
 8003144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff80 	bl	8003050 <__NVIC_SetPriority>
}
 8003150:	bf00      	nop
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff ff54 	bl	8003014 <__NVIC_EnableIRQ>
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003182:	e17f      	b.n	8003484 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2101      	movs	r1, #1
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	fa01 f303 	lsl.w	r3, r1, r3
 8003190:	4013      	ands	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8171 	beq.w	800347e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d005      	beq.n	80031b4 <HAL_GPIO_Init+0x40>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d130      	bne.n	8003216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2203      	movs	r2, #3
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ea:	2201      	movs	r2, #1
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f003 0201 	and.w	r2, r3, #1
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b03      	cmp	r3, #3
 8003220:	d118      	bne.n	8003254 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003228:	2201      	movs	r2, #1
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	08db      	lsrs	r3, r3, #3
 800323e:	f003 0201 	and.w	r2, r3, #1
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b03      	cmp	r3, #3
 800325e:	d017      	beq.n	8003290 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d123      	bne.n	80032e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	08da      	lsrs	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3208      	adds	r2, #8
 80032a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	220f      	movs	r2, #15
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	08da      	lsrs	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3208      	adds	r2, #8
 80032de:	6939      	ldr	r1, [r7, #16]
 80032e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80ac 	beq.w	800347e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003326:	4b5f      	ldr	r3, [pc, #380]	; (80034a4 <HAL_GPIO_Init+0x330>)
 8003328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332a:	4a5e      	ldr	r2, [pc, #376]	; (80034a4 <HAL_GPIO_Init+0x330>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6613      	str	r3, [r2, #96]	; 0x60
 8003332:	4b5c      	ldr	r3, [pc, #368]	; (80034a4 <HAL_GPIO_Init+0x330>)
 8003334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800333e:	4a5a      	ldr	r2, [pc, #360]	; (80034a8 <HAL_GPIO_Init+0x334>)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	3302      	adds	r3, #2
 8003346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	220f      	movs	r2, #15
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003368:	d025      	beq.n	80033b6 <HAL_GPIO_Init+0x242>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a4f      	ldr	r2, [pc, #316]	; (80034ac <HAL_GPIO_Init+0x338>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01f      	beq.n	80033b2 <HAL_GPIO_Init+0x23e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a4e      	ldr	r2, [pc, #312]	; (80034b0 <HAL_GPIO_Init+0x33c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d019      	beq.n	80033ae <HAL_GPIO_Init+0x23a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a4d      	ldr	r2, [pc, #308]	; (80034b4 <HAL_GPIO_Init+0x340>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <HAL_GPIO_Init+0x236>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a4c      	ldr	r2, [pc, #304]	; (80034b8 <HAL_GPIO_Init+0x344>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00d      	beq.n	80033a6 <HAL_GPIO_Init+0x232>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4b      	ldr	r2, [pc, #300]	; (80034bc <HAL_GPIO_Init+0x348>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d007      	beq.n	80033a2 <HAL_GPIO_Init+0x22e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4a      	ldr	r2, [pc, #296]	; (80034c0 <HAL_GPIO_Init+0x34c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d101      	bne.n	800339e <HAL_GPIO_Init+0x22a>
 800339a:	2306      	movs	r3, #6
 800339c:	e00c      	b.n	80033b8 <HAL_GPIO_Init+0x244>
 800339e:	2307      	movs	r3, #7
 80033a0:	e00a      	b.n	80033b8 <HAL_GPIO_Init+0x244>
 80033a2:	2305      	movs	r3, #5
 80033a4:	e008      	b.n	80033b8 <HAL_GPIO_Init+0x244>
 80033a6:	2304      	movs	r3, #4
 80033a8:	e006      	b.n	80033b8 <HAL_GPIO_Init+0x244>
 80033aa:	2303      	movs	r3, #3
 80033ac:	e004      	b.n	80033b8 <HAL_GPIO_Init+0x244>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e002      	b.n	80033b8 <HAL_GPIO_Init+0x244>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_GPIO_Init+0x244>
 80033b6:	2300      	movs	r3, #0
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	f002 0203 	and.w	r2, r2, #3
 80033be:	0092      	lsls	r2, r2, #2
 80033c0:	4093      	lsls	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033c8:	4937      	ldr	r1, [pc, #220]	; (80034a8 <HAL_GPIO_Init+0x334>)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	089b      	lsrs	r3, r3, #2
 80033ce:	3302      	adds	r3, #2
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033d6:	4b3b      	ldr	r3, [pc, #236]	; (80034c4 <HAL_GPIO_Init+0x350>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033fa:	4a32      	ldr	r2, [pc, #200]	; (80034c4 <HAL_GPIO_Init+0x350>)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003400:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <HAL_GPIO_Init+0x350>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	43db      	mvns	r3, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003424:	4a27      	ldr	r2, [pc, #156]	; (80034c4 <HAL_GPIO_Init+0x350>)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800342a:	4b26      	ldr	r3, [pc, #152]	; (80034c4 <HAL_GPIO_Init+0x350>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	43db      	mvns	r3, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800344e:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <HAL_GPIO_Init+0x350>)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_GPIO_Init+0x350>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	43db      	mvns	r3, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003478:	4a12      	ldr	r2, [pc, #72]	; (80034c4 <HAL_GPIO_Init+0x350>)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	3301      	adds	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa22 f303 	lsr.w	r3, r2, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	f47f ae78 	bne.w	8003184 <HAL_GPIO_Init+0x10>
  }
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40010000 	.word	0x40010000
 80034ac:	48000400 	.word	0x48000400
 80034b0:	48000800 	.word	0x48000800
 80034b4:	48000c00 	.word	0x48000c00
 80034b8:	48001000 	.word	0x48001000
 80034bc:	48001400 	.word	0x48001400
 80034c0:	48001800 	.word	0x48001800
 80034c4:	40010400 	.word	0x40010400

080034c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
 80034d4:	4613      	mov	r3, r2
 80034d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d8:	787b      	ldrb	r3, [r7, #1]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034e4:	e002      	b.n	80034ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <HAL_PWREx_GetVoltageRange+0x18>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40007000 	.word	0x40007000

08003514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003522:	d130      	bne.n	8003586 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003524:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800352c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003530:	d038      	beq.n	80035a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800353a:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003540:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2232      	movs	r2, #50	; 0x32
 8003548:	fb02 f303 	mul.w	r3, r2, r3
 800354c:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	0c9b      	lsrs	r3, r3, #18
 8003554:	3301      	adds	r3, #1
 8003556:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003558:	e002      	b.n	8003560 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3b01      	subs	r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003560:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356c:	d102      	bne.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x60>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f2      	bne.n	800355a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003580:	d110      	bne.n	80035a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e00f      	b.n	80035a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003592:	d007      	beq.n	80035a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003594:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800359c:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40007000 	.word	0x40007000
 80035b8:	20000000 	.word	0x20000000
 80035bc:	431bde83 	.word	0x431bde83

080035c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e3ca      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035d2:	4b97      	ldr	r3, [pc, #604]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035dc:	4b94      	ldr	r3, [pc, #592]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80e4 	beq.w	80037bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <HAL_RCC_OscConfig+0x4a>
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	f040 808b 	bne.w	8003718 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b01      	cmp	r3, #1
 8003606:	f040 8087 	bne.w	8003718 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800360a:	4b89      	ldr	r3, [pc, #548]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_RCC_OscConfig+0x62>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e3a2      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1a      	ldr	r2, [r3, #32]
 8003626:	4b82      	ldr	r3, [pc, #520]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <HAL_RCC_OscConfig+0x7c>
 8003632:	4b7f      	ldr	r3, [pc, #508]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363a:	e005      	b.n	8003648 <HAL_RCC_OscConfig+0x88>
 800363c:	4b7c      	ldr	r3, [pc, #496]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 800363e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003648:	4293      	cmp	r3, r2
 800364a:	d223      	bcs.n	8003694 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fd87 	bl	8004164 <RCC_SetFlashLatencyFromMSIRange>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e383      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003660:	4b73      	ldr	r3, [pc, #460]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a72      	ldr	r2, [pc, #456]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003666:	f043 0308 	orr.w	r3, r3, #8
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4b70      	ldr	r3, [pc, #448]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	496d      	ldr	r1, [pc, #436]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800367e:	4b6c      	ldr	r3, [pc, #432]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	4968      	ldr	r1, [pc, #416]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 800368e:	4313      	orrs	r3, r2
 8003690:	604b      	str	r3, [r1, #4]
 8003692:	e025      	b.n	80036e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003694:	4b66      	ldr	r3, [pc, #408]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a65      	ldr	r2, [pc, #404]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 800369a:	f043 0308 	orr.w	r3, r3, #8
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b63      	ldr	r3, [pc, #396]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	4960      	ldr	r1, [pc, #384]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b2:	4b5f      	ldr	r3, [pc, #380]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	495b      	ldr	r1, [pc, #364]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fd47 	bl	8004164 <RCC_SetFlashLatencyFromMSIRange>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e343      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036e0:	f000 fc4a 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b52      	ldr	r3, [pc, #328]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	4950      	ldr	r1, [pc, #320]	; (8003834 <HAL_RCC_OscConfig+0x274>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
 80036fc:	4a4e      	ldr	r2, [pc, #312]	; (8003838 <HAL_RCC_OscConfig+0x278>)
 80036fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003700:	4b4e      	ldr	r3, [pc, #312]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fa77 	bl	8002bf8 <HAL_InitTick>
 800370a:	4603      	mov	r3, r0
 800370c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d052      	beq.n	80037ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	e327      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d032      	beq.n	8003786 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003720:	4b43      	ldr	r3, [pc, #268]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a42      	ldr	r2, [pc, #264]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800372c:	f7ff fc34 	bl	8002f98 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003734:	f7ff fc30 	bl	8002f98 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e310      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003746:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003752:	4b37      	ldr	r3, [pc, #220]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a36      	ldr	r2, [pc, #216]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003758:	f043 0308 	orr.w	r3, r3, #8
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b34      	ldr	r3, [pc, #208]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	4931      	ldr	r1, [pc, #196]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003770:	4b2f      	ldr	r3, [pc, #188]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	492c      	ldr	r1, [pc, #176]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
 8003784:	e01a      	b.n	80037bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003786:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a29      	ldr	r2, [pc, #164]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003792:	f7ff fc01 	bl	8002f98 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800379a:	f7ff fbfd 	bl	8002f98 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e2dd      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037ac:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f0      	bne.n	800379a <HAL_RCC_OscConfig+0x1da>
 80037b8:	e000      	b.n	80037bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d074      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d005      	beq.n	80037da <HAL_RCC_OscConfig+0x21a>
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b0c      	cmp	r3, #12
 80037d2:	d10e      	bne.n	80037f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d10b      	bne.n	80037f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d064      	beq.n	80038b0 <HAL_RCC_OscConfig+0x2f0>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d160      	bne.n	80038b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e2ba      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0x24a>
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0b      	ldr	r2, [pc, #44]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	e026      	b.n	8003858 <HAL_RCC_OscConfig+0x298>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003812:	d115      	bne.n	8003840 <HAL_RCC_OscConfig+0x280>
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a05      	ldr	r2, [pc, #20]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 800381a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a02      	ldr	r2, [pc, #8]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	e014      	b.n	8003858 <HAL_RCC_OscConfig+0x298>
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	0800b6d0 	.word	0x0800b6d0
 8003838:	20000000 	.word	0x20000000
 800383c:	20000004 	.word	0x20000004
 8003840:	4ba0      	ldr	r3, [pc, #640]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a9f      	ldr	r2, [pc, #636]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b9d      	ldr	r3, [pc, #628]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a9c      	ldr	r2, [pc, #624]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d013      	beq.n	8003888 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7ff fb9a 	bl	8002f98 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7ff fb96 	bl	8002f98 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e276      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387a:	4b92      	ldr	r3, [pc, #584]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x2a8>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7ff fb86 	bl	8002f98 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003890:	f7ff fb82 	bl	8002f98 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e262      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038a2:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x2d0>
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d060      	beq.n	8003980 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_OscConfig+0x310>
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d119      	bne.n	80038fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d116      	bne.n	80038fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d0:	4b7c      	ldr	r3, [pc, #496]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_OscConfig+0x328>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e23f      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e8:	4b76      	ldr	r3, [pc, #472]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	4973      	ldr	r1, [pc, #460]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038fc:	e040      	b.n	8003980 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d023      	beq.n	800394e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003906:	4b6f      	ldr	r3, [pc, #444]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a6e      	ldr	r2, [pc, #440]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003912:	f7ff fb41 	bl	8002f98 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391a:	f7ff fb3d 	bl	8002f98 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e21d      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800392c:	4b65      	ldr	r3, [pc, #404]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003938:	4b62      	ldr	r3, [pc, #392]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	061b      	lsls	r3, r3, #24
 8003946:	495f      	ldr	r1, [pc, #380]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003948:	4313      	orrs	r3, r2
 800394a:	604b      	str	r3, [r1, #4]
 800394c:	e018      	b.n	8003980 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394e:	4b5d      	ldr	r3, [pc, #372]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a5c      	ldr	r2, [pc, #368]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7ff fb1d 	bl	8002f98 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003962:	f7ff fb19 	bl	8002f98 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e1f9      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003974:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d03c      	beq.n	8003a06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01c      	beq.n	80039ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003994:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399a:	4a4a      	ldr	r2, [pc, #296]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7ff faf8 	bl	8002f98 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ac:	f7ff faf4 	bl	8002f98 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1d4      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039be:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 80039c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0ef      	beq.n	80039ac <HAL_RCC_OscConfig+0x3ec>
 80039cc:	e01b      	b.n	8003a06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ce:	4b3d      	ldr	r3, [pc, #244]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 80039d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d4:	4a3b      	ldr	r2, [pc, #236]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039de:	f7ff fadb 	bl	8002f98 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e6:	f7ff fad7 	bl	8002f98 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1b7      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039f8:	4b32      	ldr	r3, [pc, #200]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 80039fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1ef      	bne.n	80039e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80a6 	beq.w	8003b60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a14:	2300      	movs	r3, #0
 8003a16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a18:	4b2a      	ldr	r3, [pc, #168]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10d      	bne.n	8003a40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a24:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a30:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a40:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <HAL_RCC_OscConfig+0x508>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d118      	bne.n	8003a7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <HAL_RCC_OscConfig+0x508>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_RCC_OscConfig+0x508>)
 8003a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a58:	f7ff fa9e 	bl	8002f98 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a60:	f7ff fa9a 	bl	8002f98 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e17a      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <HAL_RCC_OscConfig+0x508>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d108      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4d8>
 8003a86:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a96:	e029      	b.n	8003aec <HAL_RCC_OscConfig+0x52c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d115      	bne.n	8003acc <HAL_RCC_OscConfig+0x50c>
 8003aa0:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003aa8:	f043 0304 	orr.w	r3, r3, #4
 8003aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab0:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	4a03      	ldr	r2, [pc, #12]	; (8003ac4 <HAL_RCC_OscConfig+0x504>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac0:	e014      	b.n	8003aec <HAL_RCC_OscConfig+0x52c>
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	4b9c      	ldr	r3, [pc, #624]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	4a9b      	ldr	r2, [pc, #620]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003ad4:	f023 0301 	bic.w	r3, r3, #1
 8003ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003adc:	4b98      	ldr	r3, [pc, #608]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	4a97      	ldr	r2, [pc, #604]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d016      	beq.n	8003b22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7ff fa50 	bl	8002f98 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afc:	f7ff fa4c 	bl	8002f98 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e12a      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b12:	4b8b      	ldr	r3, [pc, #556]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ed      	beq.n	8003afc <HAL_RCC_OscConfig+0x53c>
 8003b20:	e015      	b.n	8003b4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b22:	f7ff fa39 	bl	8002f98 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b28:	e00a      	b.n	8003b40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2a:	f7ff fa35 	bl	8002f98 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e113      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b40:	4b7f      	ldr	r3, [pc, #508]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1ed      	bne.n	8003b2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b4e:	7ffb      	ldrb	r3, [r7, #31]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d105      	bne.n	8003b60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b54:	4b7a      	ldr	r3, [pc, #488]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	4a79      	ldr	r2, [pc, #484]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80fe 	beq.w	8003d66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	f040 80d0 	bne.w	8003d14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b74:	4b72      	ldr	r3, [pc, #456]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f003 0203 	and.w	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d130      	bne.n	8003bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	3b01      	subs	r3, #1
 8003b94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d127      	bne.n	8003bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d11f      	bne.n	8003bea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bb4:	2a07      	cmp	r2, #7
 8003bb6:	bf14      	ite	ne
 8003bb8:	2201      	movne	r2, #1
 8003bba:	2200      	moveq	r2, #0
 8003bbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d113      	bne.n	8003bea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	3b01      	subs	r3, #1
 8003be4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d06e      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	d069      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bfc:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0ad      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c0c:	4b4c      	ldr	r3, [pc, #304]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a4b      	ldr	r2, [pc, #300]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c18:	f7ff f9be 	bl	8002f98 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c20:	f7ff f9ba 	bl	8002f98 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e09a      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c32:	4b43      	ldr	r3, [pc, #268]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c3e:	4b40      	ldr	r3, [pc, #256]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	4b40      	ldr	r3, [pc, #256]	; (8003d44 <HAL_RCC_OscConfig+0x784>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c4e:	3a01      	subs	r2, #1
 8003c50:	0112      	lsls	r2, r2, #4
 8003c52:	4311      	orrs	r1, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c58:	0212      	lsls	r2, r2, #8
 8003c5a:	4311      	orrs	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c60:	0852      	lsrs	r2, r2, #1
 8003c62:	3a01      	subs	r2, #1
 8003c64:	0552      	lsls	r2, r2, #21
 8003c66:	4311      	orrs	r1, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c6c:	0852      	lsrs	r2, r2, #1
 8003c6e:	3a01      	subs	r2, #1
 8003c70:	0652      	lsls	r2, r2, #25
 8003c72:	4311      	orrs	r1, r2
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c78:	0912      	lsrs	r2, r2, #4
 8003c7a:	0452      	lsls	r2, r2, #17
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	4930      	ldr	r1, [pc, #192]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c84:	4b2e      	ldr	r3, [pc, #184]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2d      	ldr	r2, [pc, #180]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c90:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a2a      	ldr	r2, [pc, #168]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c9c:	f7ff f97c 	bl	8002f98 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7ff f978 	bl	8002f98 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e058      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cc2:	e050      	b.n	8003d66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e04f      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d148      	bne.n	8003d66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ce0:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cec:	f7ff f954 	bl	8002f98 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf4:	f7ff f950 	bl	8002f98 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e030      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x734>
 8003d12:	e028      	b.n	8003d66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d023      	beq.n	8003d62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <HAL_RCC_OscConfig+0x780>)
 8003d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7ff f937 	bl	8002f98 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2c:	e00c      	b.n	8003d48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2e:	f7ff f933 	bl	8002f98 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d905      	bls.n	8003d48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e013      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
 8003d40:	40021000 	.word	0x40021000
 8003d44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_RCC_OscConfig+0x7b0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ec      	bne.n	8003d2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCC_OscConfig+0x7b0>)
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	4905      	ldr	r1, [pc, #20]	; (8003d70 <HAL_RCC_OscConfig+0x7b0>)
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_RCC_OscConfig+0x7b4>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60cb      	str	r3, [r1, #12]
 8003d60:	e001      	b.n	8003d66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3720      	adds	r7, #32
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	feeefffc 	.word	0xfeeefffc

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0e7      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b75      	ldr	r3, [pc, #468]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d910      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b72      	ldr	r3, [pc, #456]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 0207 	bic.w	r2, r3, #7
 8003da2:	4970      	ldr	r1, [pc, #448]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b6e      	ldr	r3, [pc, #440]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0cf      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d010      	beq.n	8003dea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	4b66      	ldr	r3, [pc, #408]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d908      	bls.n	8003dea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd8:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4960      	ldr	r1, [pc, #384]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d04c      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfe:	4b5a      	ldr	r3, [pc, #360]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d121      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0a6      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e16:	4b54      	ldr	r3, [pc, #336]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d115      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e09a      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d107      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e2e:	4b4e      	ldr	r3, [pc, #312]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e08e      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e3e:	4b4a      	ldr	r3, [pc, #296]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e086      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e4e:	4b46      	ldr	r3, [pc, #280]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f023 0203 	bic.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4943      	ldr	r1, [pc, #268]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e60:	f7ff f89a 	bl	8002f98 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e68:	f7ff f896 	bl	8002f98 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e06e      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 020c 	and.w	r2, r3, #12
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d1eb      	bne.n	8003e68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d010      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	4b31      	ldr	r3, [pc, #196]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d208      	bcs.n	8003ebe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eac:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	492b      	ldr	r1, [pc, #172]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebe:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d210      	bcs.n	8003eee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 0207 	bic.w	r2, r3, #7
 8003ed4:	4923      	ldr	r1, [pc, #140]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003edc:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e036      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	4918      	ldr	r1, [pc, #96]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4910      	ldr	r1, [pc, #64]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f2c:	f000 f824 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	490b      	ldr	r1, [pc, #44]	; (8003f6c <HAL_RCC_ClockConfig+0x1f4>)
 8003f3e:	5ccb      	ldrb	r3, [r1, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
 8003f48:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <HAL_RCC_ClockConfig+0x1f8>)
 8003f4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1fc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe fe51 	bl	8002bf8 <HAL_InitTick>
 8003f56:	4603      	mov	r3, r0
 8003f58:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40022000 	.word	0x40022000
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	0800b6d0 	.word	0x0800b6d0
 8003f70:	20000000 	.word	0x20000000
 8003f74:	20000004 	.word	0x20000004

08003f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f86:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f90:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x34>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d121      	bne.n	8003fea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d11e      	bne.n	8003fea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fac:	4b34      	ldr	r3, [pc, #208]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fb8:	4b31      	ldr	r3, [pc, #196]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fc8:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fd4:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10d      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d102      	bne.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ff0:	4b25      	ldr	r3, [pc, #148]	; (8004088 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e004      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ffc:	4b23      	ldr	r3, [pc, #140]	; (800408c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ffe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d134      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d003      	beq.n	800401e <HAL_RCC_GetSysClockFreq+0xa6>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b03      	cmp	r3, #3
 800401a:	d003      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0xac>
 800401c:	e005      	b.n	800402a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800401e:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <HAL_RCC_GetSysClockFreq+0x110>)
 8004020:	617b      	str	r3, [r7, #20]
      break;
 8004022:	e005      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004024:	4b19      	ldr	r3, [pc, #100]	; (800408c <HAL_RCC_GetSysClockFreq+0x114>)
 8004026:	617b      	str	r3, [r7, #20]
      break;
 8004028:	e002      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	617b      	str	r3, [r7, #20]
      break;
 800402e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	3301      	adds	r3, #1
 800403c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	fb03 f202 	mul.w	r2, r3, r2
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	0e5b      	lsrs	r3, r3, #25
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	3301      	adds	r3, #1
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004070:	69bb      	ldr	r3, [r7, #24]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3724      	adds	r7, #36	; 0x24
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	0800b6e8 	.word	0x0800b6e8
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200

08004090 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000000 	.word	0x20000000

080040a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040ac:	f7ff fff0 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4904      	ldr	r1, [pc, #16]	; (80040d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	0800b6e0 	.word	0x0800b6e0

080040d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040d8:	f7ff ffda 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	0adb      	lsrs	r3, r3, #11
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4904      	ldr	r1, [pc, #16]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	0800b6e0 	.word	0x0800b6e0

08004100 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	220f      	movs	r2, #15
 800410e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004110:	4b12      	ldr	r3, [pc, #72]	; (800415c <HAL_RCC_GetClockConfig+0x5c>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0203 	and.w	r2, r3, #3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <HAL_RCC_GetClockConfig+0x5c>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004128:	4b0c      	ldr	r3, [pc, #48]	; (800415c <HAL_RCC_GetClockConfig+0x5c>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCC_GetClockConfig+0x5c>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	08db      	lsrs	r3, r3, #3
 800413a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004142:	4b07      	ldr	r3, [pc, #28]	; (8004160 <HAL_RCC_GetClockConfig+0x60>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0207 	and.w	r2, r3, #7
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	601a      	str	r2, [r3, #0]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
 8004160:	40022000 	.word	0x40022000

08004164 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800416c:	2300      	movs	r3, #0
 800416e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800417c:	f7ff f9bc 	bl	80034f8 <HAL_PWREx_GetVoltageRange>
 8004180:	6178      	str	r0, [r7, #20]
 8004182:	e014      	b.n	80041ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	4a24      	ldr	r2, [pc, #144]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418e:	6593      	str	r3, [r2, #88]	; 0x58
 8004190:	4b22      	ldr	r3, [pc, #136]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800419c:	f7ff f9ac 	bl	80034f8 <HAL_PWREx_GetVoltageRange>
 80041a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041a2:	4b1e      	ldr	r3, [pc, #120]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	4a1d      	ldr	r2, [pc, #116]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b4:	d10b      	bne.n	80041ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b80      	cmp	r3, #128	; 0x80
 80041ba:	d919      	bls.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2ba0      	cmp	r3, #160	; 0xa0
 80041c0:	d902      	bls.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041c2:	2302      	movs	r3, #2
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	e013      	b.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041c8:	2301      	movs	r3, #1
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	e010      	b.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b80      	cmp	r3, #128	; 0x80
 80041d2:	d902      	bls.n	80041da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041d4:	2303      	movs	r3, #3
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	e00a      	b.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d102      	bne.n	80041e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041e0:	2302      	movs	r3, #2
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	e004      	b.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b70      	cmp	r3, #112	; 0x70
 80041ea:	d101      	bne.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041ec:	2301      	movs	r3, #1
 80041ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f023 0207 	bic.w	r2, r3, #7
 80041f8:	4909      	ldr	r1, [pc, #36]	; (8004220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004200:	4b07      	ldr	r3, [pc, #28]	; (8004220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	429a      	cmp	r2, r3
 800420c:	d001      	beq.n	8004212 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	40022000 	.word	0x40022000

08004224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800422c:	2300      	movs	r3, #0
 800422e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004230:	2300      	movs	r3, #0
 8004232:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423c:	2b00      	cmp	r3, #0
 800423e:	d041      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004244:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004248:	d02a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800424a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800424e:	d824      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004254:	d008      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004256:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800425a:	d81e      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004264:	d010      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004266:	e018      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004268:	4b86      	ldr	r3, [pc, #536]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4a85      	ldr	r2, [pc, #532]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004272:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004274:	e015      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fabb 	bl	80047f8 <RCCEx_PLLSAI1_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004286:	e00c      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3320      	adds	r3, #32
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fba6 	bl	80049e0 <RCCEx_PLLSAI2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004298:	e003      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	74fb      	strb	r3, [r7, #19]
      break;
 800429e:	e000      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a8:	4b76      	ldr	r3, [pc, #472]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b6:	4973      	ldr	r1, [pc, #460]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042be:	e001      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d041      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042d8:	d02a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042de:	d824      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042e4:	d008      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ea:	d81e      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042f4:	d010      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042f6:	e018      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042f8:	4b62      	ldr	r3, [pc, #392]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a61      	ldr	r2, [pc, #388]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004302:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004304:	e015      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3304      	adds	r3, #4
 800430a:	2100      	movs	r1, #0
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fa73 	bl	80047f8 <RCCEx_PLLSAI1_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004316:	e00c      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3320      	adds	r3, #32
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fb5e 	bl	80049e0 <RCCEx_PLLSAI2_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004328:	e003      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	74fb      	strb	r3, [r7, #19]
      break;
 800432e:	e000      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004338:	4b52      	ldr	r3, [pc, #328]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004346:	494f      	ldr	r1, [pc, #316]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800434e:	e001      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80a0 	beq.w	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004362:	2300      	movs	r3, #0
 8004364:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00d      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437c:	4b41      	ldr	r3, [pc, #260]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004380:	4a40      	ldr	r2, [pc, #256]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004386:	6593      	str	r3, [r2, #88]	; 0x58
 8004388:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004394:	2301      	movs	r3, #1
 8004396:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004398:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a3a      	ldr	r2, [pc, #232]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a4:	f7fe fdf8 	bl	8002f98 <HAL_GetTick>
 80043a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043aa:	e009      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ac:	f7fe fdf4 	bl	8002f98 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d902      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	74fb      	strb	r3, [r7, #19]
        break;
 80043be:	e005      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043c0:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ef      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d15c      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043d2:	4b2c      	ldr	r3, [pc, #176]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01f      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d019      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043f0:	4b24      	ldr	r3, [pc, #144]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043fc:	4b21      	ldr	r3, [pc, #132]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	4a20      	ldr	r2, [pc, #128]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800440c:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800441c:	4a19      	ldr	r2, [pc, #100]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d016      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442e:	f7fe fdb3 	bl	8002f98 <HAL_GetTick>
 8004432:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004434:	e00b      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004436:	f7fe fdaf 	bl	8002f98 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f241 3288 	movw	r2, #5000	; 0x1388
 8004444:	4293      	cmp	r3, r2
 8004446:	d902      	bls.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	74fb      	strb	r3, [r7, #19]
            break;
 800444c:	e006      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ec      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10c      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004472:	4904      	ldr	r1, [pc, #16]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800447a:	e009      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	74bb      	strb	r3, [r7, #18]
 8004480:	e006      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000
 8004488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004490:	7c7b      	ldrb	r3, [r7, #17]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d105      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004496:	4b9e      	ldr	r3, [pc, #632]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	4a9d      	ldr	r2, [pc, #628]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ae:	4b98      	ldr	r3, [pc, #608]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	f023 0203 	bic.w	r2, r3, #3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	4994      	ldr	r1, [pc, #592]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044d0:	4b8f      	ldr	r3, [pc, #572]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f023 020c 	bic.w	r2, r3, #12
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	498c      	ldr	r1, [pc, #560]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044f2:	4b87      	ldr	r3, [pc, #540]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	4983      	ldr	r1, [pc, #524]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004514:	4b7e      	ldr	r3, [pc, #504]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004522:	497b      	ldr	r1, [pc, #492]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004536:	4b76      	ldr	r3, [pc, #472]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004544:	4972      	ldr	r1, [pc, #456]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004558:	4b6d      	ldr	r3, [pc, #436]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	496a      	ldr	r1, [pc, #424]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800457a:	4b65      	ldr	r3, [pc, #404]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	4961      	ldr	r1, [pc, #388]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800459c:	4b5c      	ldr	r3, [pc, #368]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045aa:	4959      	ldr	r1, [pc, #356]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045be:	4b54      	ldr	r3, [pc, #336]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	4950      	ldr	r1, [pc, #320]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045e0:	4b4b      	ldr	r3, [pc, #300]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ee:	4948      	ldr	r1, [pc, #288]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004602:	4b43      	ldr	r3, [pc, #268]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	493f      	ldr	r1, [pc, #252]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d028      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004624:	4b3a      	ldr	r3, [pc, #232]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004632:	4937      	ldr	r1, [pc, #220]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004642:	d106      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004644:	4b32      	ldr	r3, [pc, #200]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a31      	ldr	r2, [pc, #196]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800464e:	60d3      	str	r3, [r2, #12]
 8004650:	e011      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800465a:	d10c      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	2101      	movs	r1, #1
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f8c8 	bl	80047f8 <RCCEx_PLLSAI1_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004672:	7cfb      	ldrb	r3, [r7, #19]
 8004674:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d028      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004682:	4b23      	ldr	r3, [pc, #140]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	491f      	ldr	r1, [pc, #124]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a0:	d106      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a2:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	4a1a      	ldr	r2, [pc, #104]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ac:	60d3      	str	r3, [r2, #12]
 80046ae:	e011      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3304      	adds	r3, #4
 80046be:	2101      	movs	r1, #1
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 f899 	bl	80047f8 <RCCEx_PLLSAI1_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ca:	7cfb      	ldrb	r3, [r7, #19]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d02b      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ee:	4908      	ldr	r1, [pc, #32]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fe:	d109      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a02      	ldr	r2, [pc, #8]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470a:	60d3      	str	r3, [r2, #12]
 800470c:	e014      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800471c:	d10c      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	2101      	movs	r1, #1
 8004724:	4618      	mov	r0, r3
 8004726:	f000 f867 	bl	80047f8 <RCCEx_PLLSAI1_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800472e:	7cfb      	ldrb	r3, [r7, #19]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d02f      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004744:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004752:	4928      	ldr	r1, [pc, #160]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800475e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004762:	d10d      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	2102      	movs	r1, #2
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f844 	bl	80047f8 <RCCEx_PLLSAI1_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d014      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800477a:	7cfb      	ldrb	r3, [r7, #19]
 800477c:	74bb      	strb	r3, [r7, #18]
 800477e:	e011      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004788:	d10c      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3320      	adds	r3, #32
 800478e:	2102      	movs	r1, #2
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f925 	bl	80049e0 <RCCEx_PLLSAI2_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047a0:	7cfb      	ldrb	r3, [r7, #19]
 80047a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047be:	490d      	ldr	r1, [pc, #52]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00b      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e2:	4904      	ldr	r1, [pc, #16]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40021000 	.word	0x40021000

080047f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004806:	4b75      	ldr	r3, [pc, #468]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d018      	beq.n	8004844 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004812:	4b72      	ldr	r3, [pc, #456]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0203 	and.w	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d10d      	bne.n	800483e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
       ||
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800482a:	4b6c      	ldr	r3, [pc, #432]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
       ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d047      	beq.n	80048ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
 8004842:	e044      	b.n	80048ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b03      	cmp	r3, #3
 800484a:	d018      	beq.n	800487e <RCCEx_PLLSAI1_Config+0x86>
 800484c:	2b03      	cmp	r3, #3
 800484e:	d825      	bhi.n	800489c <RCCEx_PLLSAI1_Config+0xa4>
 8004850:	2b01      	cmp	r3, #1
 8004852:	d002      	beq.n	800485a <RCCEx_PLLSAI1_Config+0x62>
 8004854:	2b02      	cmp	r3, #2
 8004856:	d009      	beq.n	800486c <RCCEx_PLLSAI1_Config+0x74>
 8004858:	e020      	b.n	800489c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800485a:	4b60      	ldr	r3, [pc, #384]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d11d      	bne.n	80048a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486a:	e01a      	b.n	80048a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800486c:	4b5b      	ldr	r3, [pc, #364]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004874:	2b00      	cmp	r3, #0
 8004876:	d116      	bne.n	80048a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800487c:	e013      	b.n	80048a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800487e:	4b57      	ldr	r3, [pc, #348]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800488a:	4b54      	ldr	r3, [pc, #336]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800489a:	e006      	b.n	80048aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      break;
 80048a0:	e004      	b.n	80048ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048a2:	bf00      	nop
 80048a4:	e002      	b.n	80048ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10d      	bne.n	80048ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048b2:	4b4a      	ldr	r3, [pc, #296]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6819      	ldr	r1, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	430b      	orrs	r3, r1
 80048c8:	4944      	ldr	r1, [pc, #272]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d17d      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048d4:	4b41      	ldr	r3, [pc, #260]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a40      	ldr	r2, [pc, #256]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e0:	f7fe fb5a 	bl	8002f98 <HAL_GetTick>
 80048e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048e6:	e009      	b.n	80048fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048e8:	f7fe fb56 	bl	8002f98 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d902      	bls.n	80048fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	73fb      	strb	r3, [r7, #15]
        break;
 80048fa:	e005      	b.n	8004908 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048fc:	4b37      	ldr	r3, [pc, #220]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1ef      	bne.n	80048e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d160      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d111      	bne.n	8004938 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004914:	4b31      	ldr	r3, [pc, #196]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800491c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6892      	ldr	r2, [r2, #8]
 8004924:	0211      	lsls	r1, r2, #8
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68d2      	ldr	r2, [r2, #12]
 800492a:	0912      	lsrs	r2, r2, #4
 800492c:	0452      	lsls	r2, r2, #17
 800492e:	430a      	orrs	r2, r1
 8004930:	492a      	ldr	r1, [pc, #168]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004932:	4313      	orrs	r3, r2
 8004934:	610b      	str	r3, [r1, #16]
 8004936:	e027      	b.n	8004988 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d112      	bne.n	8004964 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800493e:	4b27      	ldr	r3, [pc, #156]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004946:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6892      	ldr	r2, [r2, #8]
 800494e:	0211      	lsls	r1, r2, #8
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6912      	ldr	r2, [r2, #16]
 8004954:	0852      	lsrs	r2, r2, #1
 8004956:	3a01      	subs	r2, #1
 8004958:	0552      	lsls	r2, r2, #21
 800495a:	430a      	orrs	r2, r1
 800495c:	491f      	ldr	r1, [pc, #124]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800495e:	4313      	orrs	r3, r2
 8004960:	610b      	str	r3, [r1, #16]
 8004962:	e011      	b.n	8004988 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004964:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800496c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6892      	ldr	r2, [r2, #8]
 8004974:	0211      	lsls	r1, r2, #8
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6952      	ldr	r2, [r2, #20]
 800497a:	0852      	lsrs	r2, r2, #1
 800497c:	3a01      	subs	r2, #1
 800497e:	0652      	lsls	r2, r2, #25
 8004980:	430a      	orrs	r2, r1
 8004982:	4916      	ldr	r1, [pc, #88]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004984:	4313      	orrs	r3, r2
 8004986:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004988:	4b14      	ldr	r3, [pc, #80]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a13      	ldr	r2, [pc, #76]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800498e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004992:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004994:	f7fe fb00 	bl	8002f98 <HAL_GetTick>
 8004998:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800499a:	e009      	b.n	80049b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800499c:	f7fe fafc 	bl	8002f98 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d902      	bls.n	80049b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	73fb      	strb	r3, [r7, #15]
          break;
 80049ae:	e005      	b.n	80049bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0ef      	beq.n	800499c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	4904      	ldr	r1, [pc, #16]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000

080049e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ee:	4b6a      	ldr	r3, [pc, #424]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d018      	beq.n	8004a2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049fa:	4b67      	ldr	r3, [pc, #412]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0203 	and.w	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d10d      	bne.n	8004a26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a12:	4b61      	ldr	r3, [pc, #388]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
       ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d047      	beq.n	8004ab6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
 8004a2a:	e044      	b.n	8004ab6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d018      	beq.n	8004a66 <RCCEx_PLLSAI2_Config+0x86>
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d825      	bhi.n	8004a84 <RCCEx_PLLSAI2_Config+0xa4>
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d002      	beq.n	8004a42 <RCCEx_PLLSAI2_Config+0x62>
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d009      	beq.n	8004a54 <RCCEx_PLLSAI2_Config+0x74>
 8004a40:	e020      	b.n	8004a84 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a42:	4b55      	ldr	r3, [pc, #340]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11d      	bne.n	8004a8a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a52:	e01a      	b.n	8004a8a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a54:	4b50      	ldr	r3, [pc, #320]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d116      	bne.n	8004a8e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a64:	e013      	b.n	8004a8e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a66:	4b4c      	ldr	r3, [pc, #304]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10f      	bne.n	8004a92 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a72:	4b49      	ldr	r3, [pc, #292]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a82:	e006      	b.n	8004a92 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
      break;
 8004a88:	e004      	b.n	8004a94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a8a:	bf00      	nop
 8004a8c:	e002      	b.n	8004a94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a8e:	bf00      	nop
 8004a90:	e000      	b.n	8004a94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a92:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10d      	bne.n	8004ab6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a9a:	4b3f      	ldr	r3, [pc, #252]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6819      	ldr	r1, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	4939      	ldr	r1, [pc, #228]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d167      	bne.n	8004b8c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004abc:	4b36      	ldr	r3, [pc, #216]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a35      	ldr	r2, [pc, #212]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac8:	f7fe fa66 	bl	8002f98 <HAL_GetTick>
 8004acc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ace:	e009      	b.n	8004ae4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ad0:	f7fe fa62 	bl	8002f98 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d902      	bls.n	8004ae4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ae2:	e005      	b.n	8004af0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ae4:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1ef      	bne.n	8004ad0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d14a      	bne.n	8004b8c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d111      	bne.n	8004b20 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004afc:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6892      	ldr	r2, [r2, #8]
 8004b0c:	0211      	lsls	r1, r2, #8
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68d2      	ldr	r2, [r2, #12]
 8004b12:	0912      	lsrs	r2, r2, #4
 8004b14:	0452      	lsls	r2, r2, #17
 8004b16:	430a      	orrs	r2, r1
 8004b18:	491f      	ldr	r1, [pc, #124]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	614b      	str	r3, [r1, #20]
 8004b1e:	e011      	b.n	8004b44 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6892      	ldr	r2, [r2, #8]
 8004b30:	0211      	lsls	r1, r2, #8
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6912      	ldr	r2, [r2, #16]
 8004b36:	0852      	lsrs	r2, r2, #1
 8004b38:	3a01      	subs	r2, #1
 8004b3a:	0652      	lsls	r2, r2, #25
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	4916      	ldr	r1, [pc, #88]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b44:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b50:	f7fe fa22 	bl	8002f98 <HAL_GetTick>
 8004b54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b56:	e009      	b.n	8004b6c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b58:	f7fe fa1e 	bl	8002f98 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d902      	bls.n	8004b6c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	73fb      	strb	r3, [r7, #15]
          break;
 8004b6a:	e005      	b.n	8004b78 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ef      	beq.n	8004b58 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	4904      	ldr	r1, [pc, #16]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000

08004b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e095      	b.n	8004cda <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d108      	bne.n	8004bc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bbe:	d009      	beq.n	8004bd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	61da      	str	r2, [r3, #28]
 8004bc6:	e005      	b.n	8004bd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fd ff64 	bl	8002abc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c14:	d902      	bls.n	8004c1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e002      	b.n	8004c22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c2a:	d007      	beq.n	8004c3c <HAL_SPI_Init+0xa0>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c34:	d002      	beq.n	8004c3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	ea42 0103 	orr.w	r1, r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	0c1b      	lsrs	r3, r3, #16
 8004c98:	f003 0204 	and.w	r2, r3, #4
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004cb8:	ea42 0103 	orr.w	r1, r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b088      	sub	sp, #32
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_SPI_Transmit+0x22>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e158      	b.n	8004fb6 <HAL_SPI_Transmit+0x2d4>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d0c:	f7fe f944 	bl	8002f98 <HAL_GetTick>
 8004d10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d002      	beq.n	8004d28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
 8004d24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d26:	e13d      	b.n	8004fa4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_SPI_Transmit+0x52>
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d38:	e134      	b.n	8004fa4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	88fa      	ldrh	r2, [r7, #6]
 8004d52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	88fa      	ldrh	r2, [r7, #6]
 8004d58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d84:	d10f      	bne.n	8004da6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004da4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	d007      	beq.n	8004dc4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dcc:	d94b      	bls.n	8004e66 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_SPI_Transmit+0xfa>
 8004dd6:	8afb      	ldrh	r3, [r7, #22]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d13e      	bne.n	8004e5a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	881a      	ldrh	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	1c9a      	adds	r2, r3, #2
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e00:	e02b      	b.n	8004e5a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d112      	bne.n	8004e36 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	881a      	ldrh	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	1c9a      	adds	r2, r3, #2
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e34:	e011      	b.n	8004e5a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e36:	f7fe f8af 	bl	8002f98 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d803      	bhi.n	8004e4e <HAL_SPI_Transmit+0x16c>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d102      	bne.n	8004e54 <HAL_SPI_Transmit+0x172>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d102      	bne.n	8004e5a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e58:	e0a4      	b.n	8004fa4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ce      	bne.n	8004e02 <HAL_SPI_Transmit+0x120>
 8004e64:	e07c      	b.n	8004f60 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_SPI_Transmit+0x192>
 8004e6e:	8afb      	ldrh	r3, [r7, #22]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d170      	bne.n	8004f56 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d912      	bls.n	8004ea4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	881a      	ldrh	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	1c9a      	adds	r2, r3, #2
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b02      	subs	r3, #2
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ea2:	e058      	b.n	8004f56 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	330c      	adds	r3, #12
 8004eae:	7812      	ldrb	r2, [r2, #0]
 8004eb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004eca:	e044      	b.n	8004f56 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d12b      	bne.n	8004f32 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d912      	bls.n	8004f0a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	881a      	ldrh	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	1c9a      	adds	r2, r3, #2
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b02      	subs	r3, #2
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f08:	e025      	b.n	8004f56 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	330c      	adds	r3, #12
 8004f14:	7812      	ldrb	r2, [r2, #0]
 8004f16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f30:	e011      	b.n	8004f56 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f32:	f7fe f831 	bl	8002f98 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d803      	bhi.n	8004f4a <HAL_SPI_Transmit+0x268>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d102      	bne.n	8004f50 <HAL_SPI_Transmit+0x26e>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f54:	e026      	b.n	8004fa4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1b5      	bne.n	8004ecc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f949 	bl	80051fc <SPI_EndRxTxTransaction>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e000      	b.n	8004fa4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004fa2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fd0:	f7fd ffe2 	bl	8002f98 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	4413      	add	r3, r2
 8004fde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fe0:	f7fd ffda 	bl	8002f98 <HAL_GetTick>
 8004fe4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fe6:	4b39      	ldr	r3, [pc, #228]	; (80050cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	015b      	lsls	r3, r3, #5
 8004fec:	0d1b      	lsrs	r3, r3, #20
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	fb02 f303 	mul.w	r3, r2, r3
 8004ff4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ff6:	e054      	b.n	80050a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	d050      	beq.n	80050a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005000:	f7fd ffca 	bl	8002f98 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	429a      	cmp	r2, r3
 800500e:	d902      	bls.n	8005016 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d13d      	bne.n	8005092 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005024:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800502e:	d111      	bne.n	8005054 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005038:	d004      	beq.n	8005044 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005042:	d107      	bne.n	8005054 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005052:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505c:	d10f      	bne.n	800507e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800507c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e017      	b.n	80050c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	3b01      	subs	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4013      	ands	r3, r2
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	bf0c      	ite	eq
 80050b2:	2301      	moveq	r3, #1
 80050b4:	2300      	movne	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d19b      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000000 	.word	0x20000000

080050d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	; 0x28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80050e2:	f7fd ff59 	bl	8002f98 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	4413      	add	r3, r2
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80050f2:	f7fd ff51 	bl	8002f98 <HAL_GetTick>
 80050f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005100:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	00da      	lsls	r2, r3, #3
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	0d1b      	lsrs	r3, r3, #20
 8005110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005118:	e060      	b.n	80051dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005120:	d107      	bne.n	8005132 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d104      	bne.n	8005132 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005130:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d050      	beq.n	80051dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800513a:	f7fd ff2d 	bl	8002f98 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005146:	429a      	cmp	r2, r3
 8005148:	d902      	bls.n	8005150 <SPI_WaitFifoStateUntilTimeout+0x80>
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	2b00      	cmp	r3, #0
 800514e:	d13d      	bne.n	80051cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800515e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005168:	d111      	bne.n	800518e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005172:	d004      	beq.n	800517e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517c:	d107      	bne.n	800518e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005196:	d10f      	bne.n	80051b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e010      	b.n	80051ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	3b01      	subs	r3, #1
 80051da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4013      	ands	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d196      	bne.n	800511a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3728      	adds	r7, #40	; 0x28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000000 	.word	0x20000000

080051fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af02      	add	r7, sp, #8
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2200      	movs	r2, #0
 8005210:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff ff5b 	bl	80050d0 <SPI_WaitFifoStateUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005224:	f043 0220 	orr.w	r2, r3, #32
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e027      	b.n	8005280 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2200      	movs	r2, #0
 8005238:	2180      	movs	r1, #128	; 0x80
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f7ff fec0 	bl	8004fc0 <SPI_WaitFlagStateUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524a:	f043 0220 	orr.w	r2, r3, #32
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e014      	b.n	8005280 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2200      	movs	r2, #0
 800525e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff ff34 	bl	80050d0 <SPI_WaitFifoStateUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e000      	b.n	8005280 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e049      	b.n	800532e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f841 	bl	8005336 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f000 f9f8 	bl	80056bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
	...

0800534c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d001      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e04f      	b.n	8005404 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a23      	ldr	r2, [pc, #140]	; (8005410 <HAL_TIM_Base_Start_IT+0xc4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01d      	beq.n	80053c2 <HAL_TIM_Base_Start_IT+0x76>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538e:	d018      	beq.n	80053c2 <HAL_TIM_Base_Start_IT+0x76>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <HAL_TIM_Base_Start_IT+0xc8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d013      	beq.n	80053c2 <HAL_TIM_Base_Start_IT+0x76>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <HAL_TIM_Base_Start_IT+0xcc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00e      	beq.n	80053c2 <HAL_TIM_Base_Start_IT+0x76>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1c      	ldr	r2, [pc, #112]	; (800541c <HAL_TIM_Base_Start_IT+0xd0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d009      	beq.n	80053c2 <HAL_TIM_Base_Start_IT+0x76>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <HAL_TIM_Base_Start_IT+0xd4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d004      	beq.n	80053c2 <HAL_TIM_Base_Start_IT+0x76>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a19      	ldr	r2, [pc, #100]	; (8005424 <HAL_TIM_Base_Start_IT+0xd8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d115      	bne.n	80053ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	4b17      	ldr	r3, [pc, #92]	; (8005428 <HAL_TIM_Base_Start_IT+0xdc>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b06      	cmp	r3, #6
 80053d2:	d015      	beq.n	8005400 <HAL_TIM_Base_Start_IT+0xb4>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053da:	d011      	beq.n	8005400 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ec:	e008      	b.n	8005400 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0201 	orr.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e000      	b.n	8005402 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005400:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40000c00 	.word	0x40000c00
 8005420:	40013400 	.word	0x40013400
 8005424:	40014000 	.word	0x40014000
 8005428:	00010007 	.word	0x00010007

0800542c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d122      	bne.n	8005488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b02      	cmp	r3, #2
 800544e:	d11b      	bne.n	8005488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0202 	mvn.w	r2, #2
 8005458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f905 	bl	800567e <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8f7 	bl	800566a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f908 	bl	8005692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b04      	cmp	r3, #4
 8005494:	d122      	bne.n	80054dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d11b      	bne.n	80054dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0204 	mvn.w	r2, #4
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f8db 	bl	800567e <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f8cd 	bl	800566a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f8de 	bl	8005692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0208 	mvn.w	r2, #8
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2204      	movs	r2, #4
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f8b1 	bl	800567e <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f8a3 	bl	800566a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f8b4 	bl	8005692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b10      	cmp	r3, #16
 800553c:	d122      	bne.n	8005584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b10      	cmp	r3, #16
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0210 	mvn.w	r2, #16
 8005554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2208      	movs	r2, #8
 800555a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f887 	bl	800567e <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f879 	bl	800566a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f88a 	bl	8005692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b01      	cmp	r3, #1
 8005590:	d10e      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d107      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0201 	mvn.w	r2, #1
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fc ff14 	bl	80023d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d10e      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d107      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f914 	bl	8005804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ea:	d10e      	bne.n	800560a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f6:	2b80      	cmp	r3, #128	; 0x80
 80055f8:	d107      	bne.n	800560a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f907 	bl	8005818 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005614:	2b40      	cmp	r3, #64	; 0x40
 8005616:	d10e      	bne.n	8005636 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d107      	bne.n	8005636 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800562e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f838 	bl	80056a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b20      	cmp	r3, #32
 8005642:	d10e      	bne.n	8005662 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b20      	cmp	r3, #32
 8005650:	d107      	bne.n	8005662 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f06f 0220 	mvn.w	r2, #32
 800565a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f8c7 	bl	80057f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a40      	ldr	r2, [pc, #256]	; (80057d0 <TIM_Base_SetConfig+0x114>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d013      	beq.n	80056fc <TIM_Base_SetConfig+0x40>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056da:	d00f      	beq.n	80056fc <TIM_Base_SetConfig+0x40>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a3d      	ldr	r2, [pc, #244]	; (80057d4 <TIM_Base_SetConfig+0x118>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00b      	beq.n	80056fc <TIM_Base_SetConfig+0x40>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a3c      	ldr	r2, [pc, #240]	; (80057d8 <TIM_Base_SetConfig+0x11c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d007      	beq.n	80056fc <TIM_Base_SetConfig+0x40>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a3b      	ldr	r2, [pc, #236]	; (80057dc <TIM_Base_SetConfig+0x120>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d003      	beq.n	80056fc <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a3a      	ldr	r2, [pc, #232]	; (80057e0 <TIM_Base_SetConfig+0x124>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d108      	bne.n	800570e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2f      	ldr	r2, [pc, #188]	; (80057d0 <TIM_Base_SetConfig+0x114>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d01f      	beq.n	8005756 <TIM_Base_SetConfig+0x9a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571c:	d01b      	beq.n	8005756 <TIM_Base_SetConfig+0x9a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2c      	ldr	r2, [pc, #176]	; (80057d4 <TIM_Base_SetConfig+0x118>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d017      	beq.n	8005756 <TIM_Base_SetConfig+0x9a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2b      	ldr	r2, [pc, #172]	; (80057d8 <TIM_Base_SetConfig+0x11c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <TIM_Base_SetConfig+0x9a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2a      	ldr	r2, [pc, #168]	; (80057dc <TIM_Base_SetConfig+0x120>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00f      	beq.n	8005756 <TIM_Base_SetConfig+0x9a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a29      	ldr	r2, [pc, #164]	; (80057e0 <TIM_Base_SetConfig+0x124>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00b      	beq.n	8005756 <TIM_Base_SetConfig+0x9a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a28      	ldr	r2, [pc, #160]	; (80057e4 <TIM_Base_SetConfig+0x128>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d007      	beq.n	8005756 <TIM_Base_SetConfig+0x9a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a27      	ldr	r2, [pc, #156]	; (80057e8 <TIM_Base_SetConfig+0x12c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_Base_SetConfig+0x9a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a26      	ldr	r2, [pc, #152]	; (80057ec <TIM_Base_SetConfig+0x130>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d108      	bne.n	8005768 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a10      	ldr	r2, [pc, #64]	; (80057d0 <TIM_Base_SetConfig+0x114>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00f      	beq.n	80057b4 <TIM_Base_SetConfig+0xf8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <TIM_Base_SetConfig+0x124>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00b      	beq.n	80057b4 <TIM_Base_SetConfig+0xf8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a11      	ldr	r2, [pc, #68]	; (80057e4 <TIM_Base_SetConfig+0x128>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d007      	beq.n	80057b4 <TIM_Base_SetConfig+0xf8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a10      	ldr	r2, [pc, #64]	; (80057e8 <TIM_Base_SetConfig+0x12c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d003      	beq.n	80057b4 <TIM_Base_SetConfig+0xf8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a0f      	ldr	r2, [pc, #60]	; (80057ec <TIM_Base_SetConfig+0x130>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d103      	bne.n	80057bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	615a      	str	r2, [r3, #20]
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40000c00 	.word	0x40000c00
 80057e0:	40013400 	.word	0x40013400
 80057e4:	40014000 	.word	0x40014000
 80057e8:	40014400 	.word	0x40014400
 80057ec:	40014800 	.word	0x40014800

080057f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e040      	b.n	80058c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fd f976 	bl	8002b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2224      	movs	r2, #36	; 0x24
 8005858:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0201 	bic.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f82c 	bl	80058c8 <UART_SetConfig>
 8005870:	4603      	mov	r3, r0
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e022      	b.n	80058c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fad8 	bl	8005e38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005896:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fb5f 	bl	8005f7c <UART_CheckIdleState>
 80058be:	4603      	mov	r3, r0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058cc:	b08a      	sub	sp, #40	; 0x28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	431a      	orrs	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4ba4      	ldr	r3, [pc, #656]	; (8005b88 <UART_SetConfig+0x2c0>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005900:	430b      	orrs	r3, r1
 8005902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a99      	ldr	r2, [pc, #612]	; (8005b8c <UART_SetConfig+0x2c4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005930:	4313      	orrs	r3, r2
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005944:	430a      	orrs	r2, r1
 8005946:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a90      	ldr	r2, [pc, #576]	; (8005b90 <UART_SetConfig+0x2c8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d126      	bne.n	80059a0 <UART_SetConfig+0xd8>
 8005952:	4b90      	ldr	r3, [pc, #576]	; (8005b94 <UART_SetConfig+0x2cc>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	2b03      	cmp	r3, #3
 800595e:	d81b      	bhi.n	8005998 <UART_SetConfig+0xd0>
 8005960:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <UART_SetConfig+0xa0>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	08005979 	.word	0x08005979
 800596c:	08005989 	.word	0x08005989
 8005970:	08005981 	.word	0x08005981
 8005974:	08005991 	.word	0x08005991
 8005978:	2301      	movs	r3, #1
 800597a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597e:	e116      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005980:	2302      	movs	r3, #2
 8005982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005986:	e112      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005988:	2304      	movs	r3, #4
 800598a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598e:	e10e      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005990:	2308      	movs	r3, #8
 8005992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005996:	e10a      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005998:	2310      	movs	r3, #16
 800599a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599e:	e106      	b.n	8005bae <UART_SetConfig+0x2e6>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a7c      	ldr	r2, [pc, #496]	; (8005b98 <UART_SetConfig+0x2d0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d138      	bne.n	8005a1c <UART_SetConfig+0x154>
 80059aa:	4b7a      	ldr	r3, [pc, #488]	; (8005b94 <UART_SetConfig+0x2cc>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f003 030c 	and.w	r3, r3, #12
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d82d      	bhi.n	8005a14 <UART_SetConfig+0x14c>
 80059b8:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <UART_SetConfig+0xf8>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059f5 	.word	0x080059f5
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	08005a15 	.word	0x08005a15
 80059cc:	08005a15 	.word	0x08005a15
 80059d0:	08005a05 	.word	0x08005a05
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a15 	.word	0x08005a15
 80059dc:	08005a15 	.word	0x08005a15
 80059e0:	080059fd 	.word	0x080059fd
 80059e4:	08005a15 	.word	0x08005a15
 80059e8:	08005a15 	.word	0x08005a15
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a0d 	.word	0x08005a0d
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fa:	e0d8      	b.n	8005bae <UART_SetConfig+0x2e6>
 80059fc:	2302      	movs	r3, #2
 80059fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a02:	e0d4      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a04:	2304      	movs	r3, #4
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0a:	e0d0      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a12:	e0cc      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a14:	2310      	movs	r3, #16
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1a:	e0c8      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a5e      	ldr	r2, [pc, #376]	; (8005b9c <UART_SetConfig+0x2d4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d125      	bne.n	8005a72 <UART_SetConfig+0x1aa>
 8005a26:	4b5b      	ldr	r3, [pc, #364]	; (8005b94 <UART_SetConfig+0x2cc>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a30:	2b30      	cmp	r3, #48	; 0x30
 8005a32:	d016      	beq.n	8005a62 <UART_SetConfig+0x19a>
 8005a34:	2b30      	cmp	r3, #48	; 0x30
 8005a36:	d818      	bhi.n	8005a6a <UART_SetConfig+0x1a2>
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d00a      	beq.n	8005a52 <UART_SetConfig+0x18a>
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d814      	bhi.n	8005a6a <UART_SetConfig+0x1a2>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <UART_SetConfig+0x182>
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d008      	beq.n	8005a5a <UART_SetConfig+0x192>
 8005a48:	e00f      	b.n	8005a6a <UART_SetConfig+0x1a2>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a50:	e0ad      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a52:	2302      	movs	r3, #2
 8005a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a58:	e0a9      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a5a:	2304      	movs	r3, #4
 8005a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a60:	e0a5      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a62:	2308      	movs	r3, #8
 8005a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a68:	e0a1      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a6a:	2310      	movs	r3, #16
 8005a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a70:	e09d      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a4a      	ldr	r2, [pc, #296]	; (8005ba0 <UART_SetConfig+0x2d8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d125      	bne.n	8005ac8 <UART_SetConfig+0x200>
 8005a7c:	4b45      	ldr	r3, [pc, #276]	; (8005b94 <UART_SetConfig+0x2cc>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a86:	2bc0      	cmp	r3, #192	; 0xc0
 8005a88:	d016      	beq.n	8005ab8 <UART_SetConfig+0x1f0>
 8005a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a8c:	d818      	bhi.n	8005ac0 <UART_SetConfig+0x1f8>
 8005a8e:	2b80      	cmp	r3, #128	; 0x80
 8005a90:	d00a      	beq.n	8005aa8 <UART_SetConfig+0x1e0>
 8005a92:	2b80      	cmp	r3, #128	; 0x80
 8005a94:	d814      	bhi.n	8005ac0 <UART_SetConfig+0x1f8>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <UART_SetConfig+0x1d8>
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d008      	beq.n	8005ab0 <UART_SetConfig+0x1e8>
 8005a9e:	e00f      	b.n	8005ac0 <UART_SetConfig+0x1f8>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa6:	e082      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aae:	e07e      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ab6:	e07a      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005abe:	e076      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac6:	e072      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a35      	ldr	r2, [pc, #212]	; (8005ba4 <UART_SetConfig+0x2dc>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d12a      	bne.n	8005b28 <UART_SetConfig+0x260>
 8005ad2:	4b30      	ldr	r3, [pc, #192]	; (8005b94 <UART_SetConfig+0x2cc>)
 8005ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ae0:	d01a      	beq.n	8005b18 <UART_SetConfig+0x250>
 8005ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ae6:	d81b      	bhi.n	8005b20 <UART_SetConfig+0x258>
 8005ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aec:	d00c      	beq.n	8005b08 <UART_SetConfig+0x240>
 8005aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af2:	d815      	bhi.n	8005b20 <UART_SetConfig+0x258>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <UART_SetConfig+0x238>
 8005af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005afc:	d008      	beq.n	8005b10 <UART_SetConfig+0x248>
 8005afe:	e00f      	b.n	8005b20 <UART_SetConfig+0x258>
 8005b00:	2300      	movs	r3, #0
 8005b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b06:	e052      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0e:	e04e      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b10:	2304      	movs	r3, #4
 8005b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b16:	e04a      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b18:	2308      	movs	r3, #8
 8005b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b1e:	e046      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b20:	2310      	movs	r3, #16
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b26:	e042      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <UART_SetConfig+0x2c4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d13a      	bne.n	8005ba8 <UART_SetConfig+0x2e0>
 8005b32:	4b18      	ldr	r3, [pc, #96]	; (8005b94 <UART_SetConfig+0x2cc>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b40:	d01a      	beq.n	8005b78 <UART_SetConfig+0x2b0>
 8005b42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b46:	d81b      	bhi.n	8005b80 <UART_SetConfig+0x2b8>
 8005b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4c:	d00c      	beq.n	8005b68 <UART_SetConfig+0x2a0>
 8005b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b52:	d815      	bhi.n	8005b80 <UART_SetConfig+0x2b8>
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <UART_SetConfig+0x298>
 8005b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5c:	d008      	beq.n	8005b70 <UART_SetConfig+0x2a8>
 8005b5e:	e00f      	b.n	8005b80 <UART_SetConfig+0x2b8>
 8005b60:	2300      	movs	r3, #0
 8005b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b66:	e022      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b6e:	e01e      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b70:	2304      	movs	r3, #4
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b76:	e01a      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b78:	2308      	movs	r3, #8
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7e:	e016      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b80:	2310      	movs	r3, #16
 8005b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b86:	e012      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b88:	efff69f3 	.word	0xefff69f3
 8005b8c:	40008000 	.word	0x40008000
 8005b90:	40013800 	.word	0x40013800
 8005b94:	40021000 	.word	0x40021000
 8005b98:	40004400 	.word	0x40004400
 8005b9c:	40004800 	.word	0x40004800
 8005ba0:	40004c00 	.word	0x40004c00
 8005ba4:	40005000 	.word	0x40005000
 8005ba8:	2310      	movs	r3, #16
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a9f      	ldr	r2, [pc, #636]	; (8005e30 <UART_SetConfig+0x568>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d17a      	bne.n	8005cae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d824      	bhi.n	8005c0a <UART_SetConfig+0x342>
 8005bc0:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <UART_SetConfig+0x300>)
 8005bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc6:	bf00      	nop
 8005bc8:	08005bed 	.word	0x08005bed
 8005bcc:	08005c0b 	.word	0x08005c0b
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005c0b 	.word	0x08005c0b
 8005bd8:	08005bfb 	.word	0x08005bfb
 8005bdc:	08005c0b 	.word	0x08005c0b
 8005be0:	08005c0b 	.word	0x08005c0b
 8005be4:	08005c0b 	.word	0x08005c0b
 8005be8:	08005c03 	.word	0x08005c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bec:	f7fe fa5c 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8005bf0:	61f8      	str	r0, [r7, #28]
        break;
 8005bf2:	e010      	b.n	8005c16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf4:	4b8f      	ldr	r3, [pc, #572]	; (8005e34 <UART_SetConfig+0x56c>)
 8005bf6:	61fb      	str	r3, [r7, #28]
        break;
 8005bf8:	e00d      	b.n	8005c16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfa:	f7fe f9bd 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8005bfe:	61f8      	str	r0, [r7, #28]
        break;
 8005c00:	e009      	b.n	8005c16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c06:	61fb      	str	r3, [r7, #28]
        break;
 8005c08:	e005      	b.n	8005c16 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 80fb 	beq.w	8005e14 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	4413      	add	r3, r2
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d305      	bcc.n	8005c3a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c34:	69fa      	ldr	r2, [r7, #28]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d903      	bls.n	8005c42 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c40:	e0e8      	b.n	8005e14 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2200      	movs	r2, #0
 8005c46:	461c      	mov	r4, r3
 8005c48:	4615      	mov	r5, r2
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	022b      	lsls	r3, r5, #8
 8005c54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c58:	0222      	lsls	r2, r4, #8
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	6849      	ldr	r1, [r1, #4]
 8005c5e:	0849      	lsrs	r1, r1, #1
 8005c60:	2000      	movs	r0, #0
 8005c62:	4688      	mov	r8, r1
 8005c64:	4681      	mov	r9, r0
 8005c66:	eb12 0a08 	adds.w	sl, r2, r8
 8005c6a:	eb43 0b09 	adc.w	fp, r3, r9
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	4659      	mov	r1, fp
 8005c80:	f7fa ff8a 	bl	8000b98 <__aeabi_uldivmod>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4613      	mov	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c92:	d308      	bcc.n	8005ca6 <UART_SetConfig+0x3de>
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9a:	d204      	bcs.n	8005ca6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	60da      	str	r2, [r3, #12]
 8005ca4:	e0b6      	b.n	8005e14 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cac:	e0b2      	b.n	8005e14 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb6:	d15e      	bne.n	8005d76 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d828      	bhi.n	8005d12 <UART_SetConfig+0x44a>
 8005cc0:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <UART_SetConfig+0x400>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005ced 	.word	0x08005ced
 8005ccc:	08005cf5 	.word	0x08005cf5
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	08005d13 	.word	0x08005d13
 8005cd8:	08005d03 	.word	0x08005d03
 8005cdc:	08005d13 	.word	0x08005d13
 8005ce0:	08005d13 	.word	0x08005d13
 8005ce4:	08005d13 	.word	0x08005d13
 8005ce8:	08005d0b 	.word	0x08005d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cec:	f7fe f9dc 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8005cf0:	61f8      	str	r0, [r7, #28]
        break;
 8005cf2:	e014      	b.n	8005d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf4:	f7fe f9ee 	bl	80040d4 <HAL_RCC_GetPCLK2Freq>
 8005cf8:	61f8      	str	r0, [r7, #28]
        break;
 8005cfa:	e010      	b.n	8005d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cfc:	4b4d      	ldr	r3, [pc, #308]	; (8005e34 <UART_SetConfig+0x56c>)
 8005cfe:	61fb      	str	r3, [r7, #28]
        break;
 8005d00:	e00d      	b.n	8005d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d02:	f7fe f939 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8005d06:	61f8      	str	r0, [r7, #28]
        break;
 8005d08:	e009      	b.n	8005d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0e:	61fb      	str	r3, [r7, #28]
        break;
 8005d10:	e005      	b.n	8005d1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d077      	beq.n	8005e14 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	005a      	lsls	r2, r3, #1
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	085b      	lsrs	r3, r3, #1
 8005d2e:	441a      	add	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b0f      	cmp	r3, #15
 8005d3e:	d916      	bls.n	8005d6e <UART_SetConfig+0x4a6>
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d46:	d212      	bcs.n	8005d6e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f023 030f 	bic.w	r3, r3, #15
 8005d50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	8afb      	ldrh	r3, [r7, #22]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	8afa      	ldrh	r2, [r7, #22]
 8005d6a:	60da      	str	r2, [r3, #12]
 8005d6c:	e052      	b.n	8005e14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d74:	e04e      	b.n	8005e14 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d827      	bhi.n	8005dce <UART_SetConfig+0x506>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <UART_SetConfig+0x4bc>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005da9 	.word	0x08005da9
 8005d88:	08005db1 	.word	0x08005db1
 8005d8c:	08005db9 	.word	0x08005db9
 8005d90:	08005dcf 	.word	0x08005dcf
 8005d94:	08005dbf 	.word	0x08005dbf
 8005d98:	08005dcf 	.word	0x08005dcf
 8005d9c:	08005dcf 	.word	0x08005dcf
 8005da0:	08005dcf 	.word	0x08005dcf
 8005da4:	08005dc7 	.word	0x08005dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da8:	f7fe f97e 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8005dac:	61f8      	str	r0, [r7, #28]
        break;
 8005dae:	e014      	b.n	8005dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db0:	f7fe f990 	bl	80040d4 <HAL_RCC_GetPCLK2Freq>
 8005db4:	61f8      	str	r0, [r7, #28]
        break;
 8005db6:	e010      	b.n	8005dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db8:	4b1e      	ldr	r3, [pc, #120]	; (8005e34 <UART_SetConfig+0x56c>)
 8005dba:	61fb      	str	r3, [r7, #28]
        break;
 8005dbc:	e00d      	b.n	8005dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dbe:	f7fe f8db 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8005dc2:	61f8      	str	r0, [r7, #28]
        break;
 8005dc4:	e009      	b.n	8005dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dca:	61fb      	str	r3, [r7, #28]
        break;
 8005dcc:	e005      	b.n	8005dda <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005dd8:	bf00      	nop
    }

    if (pclk != 0U)
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d019      	beq.n	8005e14 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	085a      	lsrs	r2, r3, #1
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	441a      	add	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b0f      	cmp	r3, #15
 8005df8:	d909      	bls.n	8005e0e <UART_SetConfig+0x546>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e00:	d205      	bcs.n	8005e0e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60da      	str	r2, [r3, #12]
 8005e0c:	e002      	b.n	8005e14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3728      	adds	r7, #40	; 0x28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e2e:	bf00      	nop
 8005e30:	40008000 	.word	0x40008000
 8005e34:	00f42400 	.word	0x00f42400

08005e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01a      	beq.n	8005f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f36:	d10a      	bne.n	8005f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	605a      	str	r2, [r3, #4]
  }
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f8c:	f7fd f804 	bl	8002f98 <HAL_GetTick>
 8005f90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d10e      	bne.n	8005fbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f82d 	bl	800600e <UART_WaitOnFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e023      	b.n	8006006 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d10e      	bne.n	8005fea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f817 	bl	800600e <UART_WaitOnFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e00d      	b.n	8006006 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b09c      	sub	sp, #112	; 0x70
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	4613      	mov	r3, r2
 800601c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800601e:	e0a5      	b.n	800616c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	f000 80a1 	beq.w	800616c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602a:	f7fc ffb5 	bl	8002f98 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006036:	429a      	cmp	r2, r3
 8006038:	d302      	bcc.n	8006040 <UART_WaitOnFlagUntilTimeout+0x32>
 800603a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800603c:	2b00      	cmp	r3, #0
 800603e:	d13e      	bne.n	80060be <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800604e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006050:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006054:	667b      	str	r3, [r7, #100]	; 0x64
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006060:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006064:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800606c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e6      	bne.n	8006040 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3308      	adds	r3, #8
 8006078:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	f023 0301 	bic.w	r3, r3, #1
 8006088:	663b      	str	r3, [r7, #96]	; 0x60
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3308      	adds	r3, #8
 8006090:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006092:	64ba      	str	r2, [r7, #72]	; 0x48
 8006094:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e5      	bne.n	8006072 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e067      	b.n	800618e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d04f      	beq.n	800616c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060da:	d147      	bne.n	800616c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060e4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006104:	637b      	str	r3, [r7, #52]	; 0x34
 8006106:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800610a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e6      	bne.n	80060e6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3308      	adds	r3, #8
 800611e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	613b      	str	r3, [r7, #16]
   return(result);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3308      	adds	r3, #8
 8006136:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006138:	623a      	str	r2, [r7, #32]
 800613a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	69f9      	ldr	r1, [r7, #28]
 800613e:	6a3a      	ldr	r2, [r7, #32]
 8006140:	e841 2300 	strex	r3, r2, [r1]
 8006144:	61bb      	str	r3, [r7, #24]
   return(result);
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e5      	bne.n	8006118 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e010      	b.n	800618e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69da      	ldr	r2, [r3, #28]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	4013      	ands	r3, r2
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	429a      	cmp	r2, r3
 800617a:	bf0c      	ite	eq
 800617c:	2301      	moveq	r3, #1
 800617e:	2300      	movne	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	429a      	cmp	r2, r3
 8006188:	f43f af4a 	beq.w	8006020 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3770      	adds	r7, #112	; 0x70
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <__NVIC_SetPriority>:
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	6039      	str	r1, [r7, #0]
 80061a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	db0a      	blt.n	80061c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	490c      	ldr	r1, [pc, #48]	; (80061e4 <__NVIC_SetPriority+0x4c>)
 80061b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061b6:	0112      	lsls	r2, r2, #4
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	440b      	add	r3, r1
 80061bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061c0:	e00a      	b.n	80061d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	4908      	ldr	r1, [pc, #32]	; (80061e8 <__NVIC_SetPriority+0x50>)
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	3b04      	subs	r3, #4
 80061d0:	0112      	lsls	r2, r2, #4
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	440b      	add	r3, r1
 80061d6:	761a      	strb	r2, [r3, #24]
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	e000e100 	.word	0xe000e100
 80061e8:	e000ed00 	.word	0xe000ed00

080061ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80061f0:	4b05      	ldr	r3, [pc, #20]	; (8006208 <SysTick_Handler+0x1c>)
 80061f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80061f4:	f001 ff1a 	bl	800802c <xTaskGetSchedulerState>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d001      	beq.n	8006202 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80061fe:	f002 fe03 	bl	8008e08 <xPortSysTickHandler>
  }
}
 8006202:	bf00      	nop
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	e000e010 	.word	0xe000e010

0800620c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006210:	2100      	movs	r1, #0
 8006212:	f06f 0004 	mvn.w	r0, #4
 8006216:	f7ff ffbf 	bl	8006198 <__NVIC_SetPriority>
#endif
}
 800621a:	bf00      	nop
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006226:	f3ef 8305 	mrs	r3, IPSR
 800622a:	603b      	str	r3, [r7, #0]
  return(result);
 800622c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006232:	f06f 0305 	mvn.w	r3, #5
 8006236:	607b      	str	r3, [r7, #4]
 8006238:	e00c      	b.n	8006254 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800623a:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <osKernelInitialize+0x44>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d105      	bne.n	800624e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006242:	4b08      	ldr	r3, [pc, #32]	; (8006264 <osKernelInitialize+0x44>)
 8006244:	2201      	movs	r2, #1
 8006246:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006248:	2300      	movs	r3, #0
 800624a:	607b      	str	r3, [r7, #4]
 800624c:	e002      	b.n	8006254 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800624e:	f04f 33ff 	mov.w	r3, #4294967295
 8006252:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006254:	687b      	ldr	r3, [r7, #4]
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000250 	.word	0x20000250

08006268 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800626e:	f3ef 8305 	mrs	r3, IPSR
 8006272:	603b      	str	r3, [r7, #0]
  return(result);
 8006274:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <osKernelStart+0x1a>
    stat = osErrorISR;
 800627a:	f06f 0305 	mvn.w	r3, #5
 800627e:	607b      	str	r3, [r7, #4]
 8006280:	e010      	b.n	80062a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <osKernelStart+0x48>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d109      	bne.n	800629e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800628a:	f7ff ffbf 	bl	800620c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800628e:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <osKernelStart+0x48>)
 8006290:	2202      	movs	r2, #2
 8006292:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006294:	f001 fa82 	bl	800779c <vTaskStartScheduler>
      stat = osOK;
 8006298:	2300      	movs	r3, #0
 800629a:	607b      	str	r3, [r7, #4]
 800629c:	e002      	b.n	80062a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800629e:	f04f 33ff 	mov.w	r3, #4294967295
 80062a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062a4:	687b      	ldr	r3, [r7, #4]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000250 	.word	0x20000250

080062b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08e      	sub	sp, #56	; 0x38
 80062b8:	af04      	add	r7, sp, #16
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062c0:	2300      	movs	r3, #0
 80062c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c4:	f3ef 8305 	mrs	r3, IPSR
 80062c8:	617b      	str	r3, [r7, #20]
  return(result);
 80062ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d17e      	bne.n	80063ce <osThreadNew+0x11a>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d07b      	beq.n	80063ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062d6:	2380      	movs	r3, #128	; 0x80
 80062d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062da:	2318      	movs	r3, #24
 80062dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80062e2:	f04f 33ff 	mov.w	r3, #4294967295
 80062e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d045      	beq.n	800637a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <osThreadNew+0x48>
        name = attr->name;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <osThreadNew+0x6e>
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	2b38      	cmp	r3, #56	; 0x38
 8006314:	d805      	bhi.n	8006322 <osThreadNew+0x6e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <osThreadNew+0x72>
        return (NULL);
 8006322:	2300      	movs	r3, #0
 8006324:	e054      	b.n	80063d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	089b      	lsrs	r3, r3, #2
 8006334:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00e      	beq.n	800635c <osThreadNew+0xa8>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	2b5b      	cmp	r3, #91	; 0x5b
 8006344:	d90a      	bls.n	800635c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800634a:	2b00      	cmp	r3, #0
 800634c:	d006      	beq.n	800635c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <osThreadNew+0xa8>
        mem = 1;
 8006356:	2301      	movs	r3, #1
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	e010      	b.n	800637e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10c      	bne.n	800637e <osThreadNew+0xca>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d108      	bne.n	800637e <osThreadNew+0xca>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d104      	bne.n	800637e <osThreadNew+0xca>
          mem = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	e001      	b.n	800637e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d110      	bne.n	80063a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800638c:	9202      	str	r2, [sp, #8]
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6a3a      	ldr	r2, [r7, #32]
 8006398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f001 f828 	bl	80073f0 <xTaskCreateStatic>
 80063a0:	4603      	mov	r3, r0
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	e013      	b.n	80063ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d110      	bne.n	80063ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	f107 0310 	add.w	r3, r7, #16
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f001 f873 	bl	80074aa <xTaskCreate>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d001      	beq.n	80063ce <osThreadNew+0x11a>
            hTask = NULL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063ce:	693b      	ldr	r3, [r7, #16]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3728      	adds	r7, #40	; 0x28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e0:	f3ef 8305 	mrs	r3, IPSR
 80063e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80063e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <osDelay+0x1c>
    stat = osErrorISR;
 80063ec:	f06f 0305 	mvn.w	r3, #5
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	e007      	b.n	8006404 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <osDelay+0x2c>
      vTaskDelay(ticks);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 f998 	bl	8007734 <vTaskDelay>
    }
  }

  return (stat);
 8006404:	68fb      	ldr	r3, [r7, #12]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4a07      	ldr	r2, [pc, #28]	; (800643c <vApplicationGetIdleTaskMemory+0x2c>)
 8006420:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	4a06      	ldr	r2, [pc, #24]	; (8006440 <vApplicationGetIdleTaskMemory+0x30>)
 8006426:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2280      	movs	r2, #128	; 0x80
 800642c:	601a      	str	r2, [r3, #0]
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20000254 	.word	0x20000254
 8006440:	200002b0 	.word	0x200002b0

08006444 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4a07      	ldr	r2, [pc, #28]	; (8006470 <vApplicationGetTimerTaskMemory+0x2c>)
 8006454:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4a06      	ldr	r2, [pc, #24]	; (8006474 <vApplicationGetTimerTaskMemory+0x30>)
 800645a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006462:	601a      	str	r2, [r3, #0]
}
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	200004b0 	.word	0x200004b0
 8006474:	2000050c 	.word	0x2000050c

08006478 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f103 0208 	add.w	r2, r3, #8
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f04f 32ff 	mov.w	r2, #4294967295
 8006490:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f103 0208 	add.w	r2, r3, #8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f103 0208 	add.w	r2, r3, #8
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064d2:	b480      	push	{r7}
 80064d4:	b085      	sub	sp, #20
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
}
 800650e:	bf00      	nop
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d103      	bne.n	800653a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	e00c      	b.n	8006554 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3308      	adds	r3, #8
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	e002      	b.n	8006548 <vListInsert+0x2e>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	429a      	cmp	r2, r3
 8006552:	d2f6      	bcs.n	8006542 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	601a      	str	r2, [r3, #0]
}
 8006580:	bf00      	nop
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6892      	ldr	r2, [r2, #8]
 80065a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6852      	ldr	r2, [r2, #4]
 80065ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d103      	bne.n	80065c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	1e5a      	subs	r2, r3, #1
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800660a:	f002 fb6b 	bl	8008ce4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006616:	68f9      	ldr	r1, [r7, #12]
 8006618:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800661a:	fb01 f303 	mul.w	r3, r1, r3
 800661e:	441a      	add	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663a:	3b01      	subs	r3, #1
 800663c:	68f9      	ldr	r1, [r7, #12]
 800663e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	441a      	add	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	22ff      	movs	r2, #255	; 0xff
 800664e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	22ff      	movs	r2, #255	; 0xff
 8006656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d114      	bne.n	800668a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01a      	beq.n	800669e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3310      	adds	r3, #16
 800666c:	4618      	mov	r0, r3
 800666e:	f001 fb1f 	bl	8007cb0 <xTaskRemoveFromEventList>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d012      	beq.n	800669e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006678:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <xQueueGenericReset+0xcc>)
 800667a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	e009      	b.n	800669e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3310      	adds	r3, #16
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fef2 	bl	8006478 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3324      	adds	r3, #36	; 0x24
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff feed 	bl	8006478 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800669e:	f002 fb51 	bl	8008d44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066a2:	2301      	movs	r3, #1
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08e      	sub	sp, #56	; 0x38
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <xQueueGenericCreateStatic+0x52>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <xQueueGenericCreateStatic+0x56>
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <xQueueGenericCreateStatic+0x58>
 8006706:	2300      	movs	r3, #0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	623b      	str	r3, [r7, #32]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d102      	bne.n	800672e <xQueueGenericCreateStatic+0x7e>
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <xQueueGenericCreateStatic+0x82>
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <xQueueGenericCreateStatic+0x84>
 8006732:	2300      	movs	r3, #0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	61fb      	str	r3, [r7, #28]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800674e:	2350      	movs	r3, #80	; 0x50
 8006750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b50      	cmp	r3, #80	; 0x50
 8006756:	d00a      	beq.n	800676e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	61bb      	str	r3, [r7, #24]
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800676e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00d      	beq.n	8006796 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006782:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	4613      	mov	r3, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f83f 	bl	8006814 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006798:	4618      	mov	r0, r3
 800679a:	3730      	adds	r7, #48	; 0x30
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08a      	sub	sp, #40	; 0x28
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	4613      	mov	r3, r2
 80067ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	613b      	str	r3, [r7, #16]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	fb02 f303 	mul.w	r3, r2, r3
 80067d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	3350      	adds	r3, #80	; 0x50
 80067d8:	4618      	mov	r0, r3
 80067da:	f002 fba5 	bl	8008f28 <pvPortMalloc>
 80067de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d011      	beq.n	800680a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	3350      	adds	r3, #80	; 0x50
 80067ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067f8:	79fa      	ldrb	r2, [r7, #7]
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	4613      	mov	r3, r2
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 f805 	bl	8006814 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800680a:	69bb      	ldr	r3, [r7, #24]
	}
 800680c:	4618      	mov	r0, r3
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d103      	bne.n	8006830 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	e002      	b.n	8006836 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006842:	2101      	movs	r1, #1
 8006844:	69b8      	ldr	r0, [r7, #24]
 8006846:	f7ff fecb 	bl	80065e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00e      	beq.n	8006886 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800687a:	2300      	movs	r3, #0
 800687c:	2200      	movs	r2, #0
 800687e:	2100      	movs	r1, #0
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f81d 	bl	80068c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006886:	bf00      	nop
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800688e:	b580      	push	{r7, lr}
 8006890:	b086      	sub	sp, #24
 8006892:	af00      	add	r7, sp, #0
 8006894:	4603      	mov	r3, r0
 8006896:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006898:	2301      	movs	r3, #1
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	2300      	movs	r3, #0
 800689e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	461a      	mov	r2, r3
 80068a4:	6939      	ldr	r1, [r7, #16]
 80068a6:	6978      	ldr	r0, [r7, #20]
 80068a8:	f7ff ff7a 	bl	80067a0 <xQueueGenericCreate>
 80068ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff ffd3 	bl	800685a <prvInitialiseMutex>

		return xNewQueue;
 80068b4:	68fb      	ldr	r3, [r7, #12]
	}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08e      	sub	sp, #56	; 0x38
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068ce:	2300      	movs	r3, #0
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <xQueueGenericSend+0x32>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068ee:	bf00      	nop
 80068f0:	e7fe      	b.n	80068f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d103      	bne.n	8006900 <xQueueGenericSend+0x40>
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <xQueueGenericSend+0x44>
 8006900:	2301      	movs	r3, #1
 8006902:	e000      	b.n	8006906 <xQueueGenericSend+0x46>
 8006904:	2300      	movs	r3, #0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <xQueueGenericSend+0x60>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b02      	cmp	r3, #2
 8006924:	d103      	bne.n	800692e <xQueueGenericSend+0x6e>
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <xQueueGenericSend+0x72>
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <xQueueGenericSend+0x74>
 8006932:	2300      	movs	r3, #0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <xQueueGenericSend+0x8e>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	623b      	str	r3, [r7, #32]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800694e:	f001 fb6d 	bl	800802c <xTaskGetSchedulerState>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d102      	bne.n	800695e <xQueueGenericSend+0x9e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <xQueueGenericSend+0xa2>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <xQueueGenericSend+0xa4>
 8006962:	2300      	movs	r3, #0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <xQueueGenericSend+0xbe>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	61fb      	str	r3, [r7, #28]
}
 800697a:	bf00      	nop
 800697c:	e7fe      	b.n	800697c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800697e:	f002 f9b1 	bl	8008ce4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <xQueueGenericSend+0xd4>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d129      	bne.n	80069e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800699a:	f000 fbbb 	bl	8007114 <prvCopyDataToQueue>
 800699e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d010      	beq.n	80069ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	3324      	adds	r3, #36	; 0x24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 f97f 	bl	8007cb0 <xTaskRemoveFromEventList>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d013      	beq.n	80069e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069b8:	4b3f      	ldr	r3, [pc, #252]	; (8006ab8 <xQueueGenericSend+0x1f8>)
 80069ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	e00a      	b.n	80069e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d007      	beq.n	80069e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069d0:	4b39      	ldr	r3, [pc, #228]	; (8006ab8 <xQueueGenericSend+0x1f8>)
 80069d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069e0:	f002 f9b0 	bl	8008d44 <vPortExitCritical>
				return pdPASS;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e063      	b.n	8006ab0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d103      	bne.n	80069f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069ee:	f002 f9a9 	bl	8008d44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e05c      	b.n	8006ab0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	4618      	mov	r0, r3
 8006a02:	f001 f9b9 	bl	8007d78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a06:	2301      	movs	r3, #1
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a0a:	f002 f99b 	bl	8008d44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a0e:	f000 ff2b 	bl	8007868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a12:	f002 f967 	bl	8008ce4 <vPortEnterCritical>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a1c:	b25b      	sxtb	r3, r3
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a22:	d103      	bne.n	8006a2c <xQueueGenericSend+0x16c>
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a32:	b25b      	sxtb	r3, r3
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a38:	d103      	bne.n	8006a42 <xQueueGenericSend+0x182>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a42:	f002 f97f 	bl	8008d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a46:	1d3a      	adds	r2, r7, #4
 8006a48:	f107 0314 	add.w	r3, r7, #20
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f001 f9a8 	bl	8007da4 <xTaskCheckForTimeOut>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d124      	bne.n	8006aa4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a5c:	f000 fc52 	bl	8007304 <prvIsQueueFull>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d018      	beq.n	8006a98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	3310      	adds	r3, #16
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 f8ce 	bl	8007c10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a76:	f000 fbdd 	bl	8007234 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a7a:	f000 ff03 	bl	8007884 <xTaskResumeAll>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f47f af7c 	bne.w	800697e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a86:	4b0c      	ldr	r3, [pc, #48]	; (8006ab8 <xQueueGenericSend+0x1f8>)
 8006a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	e772      	b.n	800697e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9a:	f000 fbcb 	bl	8007234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a9e:	f000 fef1 	bl	8007884 <xTaskResumeAll>
 8006aa2:	e76c      	b.n	800697e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa6:	f000 fbc5 	bl	8007234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aaa:	f000 feeb 	bl	8007884 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006aae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3738      	adds	r7, #56	; 0x38
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b090      	sub	sp, #64	; 0x40
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d103      	bne.n	8006af8 <xQueueGenericSendFromISR+0x3c>
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <xQueueGenericSendFromISR+0x40>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <xQueueGenericSendFromISR+0x42>
 8006afc:	2300      	movs	r3, #0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d103      	bne.n	8006b26 <xQueueGenericSendFromISR+0x6a>
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <xQueueGenericSendFromISR+0x6e>
 8006b26:	2301      	movs	r3, #1
 8006b28:	e000      	b.n	8006b2c <xQueueGenericSendFromISR+0x70>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	623b      	str	r3, [r7, #32]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b46:	f002 f9af 	bl	8008ea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b4a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	61fa      	str	r2, [r7, #28]
 8006b60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d302      	bcc.n	8006b78 <xQueueGenericSendFromISR+0xbc>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d12f      	bne.n	8006bd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	68b9      	ldr	r1, [r7, #8]
 8006b8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b8e:	f000 fac1 	bl	8007114 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9a:	d112      	bne.n	8006bc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d016      	beq.n	8006bd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	3324      	adds	r3, #36	; 0x24
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f881 	bl	8007cb0 <xTaskRemoveFromEventList>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00e      	beq.n	8006bd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	e007      	b.n	8006bd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	b25a      	sxtb	r2, r3
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006bd6:	e001      	b.n	8006bdc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006be6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3740      	adds	r7, #64	; 0x40
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b08e      	sub	sp, #56	; 0x38
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10a      	bne.n	8006c1c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	623b      	str	r3, [r7, #32]
}
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <xQueueGiveFromISR+0x48>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	61fb      	str	r3, [r7, #28]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <xQueueGiveFromISR+0x58>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <xQueueGiveFromISR+0x5c>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <xQueueGiveFromISR+0x5e>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	61bb      	str	r3, [r7, #24]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c6a:	f002 f91d 	bl	8008ea8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c6e:	f3ef 8211 	mrs	r2, BASEPRI
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	617a      	str	r2, [r7, #20]
 8006c84:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006c86:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d22b      	bcs.n	8006cf2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb4:	d112      	bne.n	8006cdc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d016      	beq.n	8006cec <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	3324      	adds	r3, #36	; 0x24
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fff4 	bl	8007cb0 <xTaskRemoveFromEventList>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00e      	beq.n	8006cec <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e007      	b.n	8006cec <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	b25a      	sxtb	r2, r3
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cec:	2301      	movs	r3, #1
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
 8006cf0:	e001      	b.n	8006cf6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f383 8811 	msr	BASEPRI, r3
}
 8006d00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3738      	adds	r7, #56	; 0x38
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08c      	sub	sp, #48	; 0x30
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <xQueueReceive+0x30>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	623b      	str	r3, [r7, #32]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d103      	bne.n	8006d4a <xQueueReceive+0x3e>
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <xQueueReceive+0x42>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <xQueueReceive+0x44>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xQueueReceive+0x5e>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	61fb      	str	r3, [r7, #28]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d6a:	f001 f95f 	bl	800802c <xTaskGetSchedulerState>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d102      	bne.n	8006d7a <xQueueReceive+0x6e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <xQueueReceive+0x72>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e000      	b.n	8006d80 <xQueueReceive+0x74>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10a      	bne.n	8006d9a <xQueueReceive+0x8e>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	61bb      	str	r3, [r7, #24]
}
 8006d96:	bf00      	nop
 8006d98:	e7fe      	b.n	8006d98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d9a:	f001 ffa3 	bl	8008ce4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d01f      	beq.n	8006dea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dae:	f000 fa1b 	bl	80071e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	1e5a      	subs	r2, r3, #1
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00f      	beq.n	8006de2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	3310      	adds	r3, #16
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 ff72 	bl	8007cb0 <xTaskRemoveFromEventList>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d007      	beq.n	8006de2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dd2:	4b3d      	ldr	r3, [pc, #244]	; (8006ec8 <xQueueReceive+0x1bc>)
 8006dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006de2:	f001 ffaf 	bl	8008d44 <vPortExitCritical>
				return pdPASS;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e069      	b.n	8006ebe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006df0:	f001 ffa8 	bl	8008d44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006df4:	2300      	movs	r3, #0
 8006df6:	e062      	b.n	8006ebe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d106      	bne.n	8006e0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dfe:	f107 0310 	add.w	r3, r7, #16
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 ffb8 	bl	8007d78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e0c:	f001 ff9a 	bl	8008d44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e10:	f000 fd2a 	bl	8007868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e14:	f001 ff66 	bl	8008ce4 <vPortEnterCritical>
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e1e:	b25b      	sxtb	r3, r3
 8006e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e24:	d103      	bne.n	8006e2e <xQueueReceive+0x122>
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e34:	b25b      	sxtb	r3, r3
 8006e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3a:	d103      	bne.n	8006e44 <xQueueReceive+0x138>
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e44:	f001 ff7e 	bl	8008d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e48:	1d3a      	adds	r2, r7, #4
 8006e4a:	f107 0310 	add.w	r3, r7, #16
 8006e4e:	4611      	mov	r1, r2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 ffa7 	bl	8007da4 <xTaskCheckForTimeOut>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d123      	bne.n	8006ea4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e5e:	f000 fa3b 	bl	80072d8 <prvIsQueueEmpty>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d017      	beq.n	8006e98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	3324      	adds	r3, #36	; 0x24
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	4611      	mov	r1, r2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fecd 	bl	8007c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e78:	f000 f9dc 	bl	8007234 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e7c:	f000 fd02 	bl	8007884 <xTaskResumeAll>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d189      	bne.n	8006d9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e86:	4b10      	ldr	r3, [pc, #64]	; (8006ec8 <xQueueReceive+0x1bc>)
 8006e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	e780      	b.n	8006d9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e9a:	f000 f9cb 	bl	8007234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e9e:	f000 fcf1 	bl	8007884 <xTaskResumeAll>
 8006ea2:	e77a      	b.n	8006d9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea6:	f000 f9c5 	bl	8007234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eaa:	f000 fceb 	bl	8007884 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb0:	f000 fa12 	bl	80072d8 <prvIsQueueEmpty>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f43f af6f 	beq.w	8006d9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ebc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3730      	adds	r7, #48	; 0x30
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08e      	sub	sp, #56	; 0x38
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	623b      	str	r3, [r7, #32]
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	61fb      	str	r3, [r7, #28]
}
 8006f18:	bf00      	nop
 8006f1a:	e7fe      	b.n	8006f1a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f1c:	f001 f886 	bl	800802c <xTaskGetSchedulerState>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d102      	bne.n	8006f2c <xQueueSemaphoreTake+0x60>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <xQueueSemaphoreTake+0x64>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <xQueueSemaphoreTake+0x66>
 8006f30:	2300      	movs	r3, #0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	61bb      	str	r3, [r7, #24]
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f4c:	f001 feca 	bl	8008ce4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d024      	beq.n	8006fa6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	1e5a      	subs	r2, r3, #1
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f6c:	f001 f9d4 	bl	8008318 <pvTaskIncrementMutexHeldCount>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f74:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00f      	beq.n	8006f9e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	3310      	adds	r3, #16
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fe94 	bl	8007cb0 <xTaskRemoveFromEventList>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f8e:	4b54      	ldr	r3, [pc, #336]	; (80070e0 <xQueueSemaphoreTake+0x214>)
 8006f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f9e:	f001 fed1 	bl	8008d44 <vPortExitCritical>
				return pdPASS;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e097      	b.n	80070d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d111      	bne.n	8006fd0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	617b      	str	r3, [r7, #20]
}
 8006fc4:	bf00      	nop
 8006fc6:	e7fe      	b.n	8006fc6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006fc8:	f001 febc 	bl	8008d44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e082      	b.n	80070d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fd6:	f107 030c 	add.w	r3, r7, #12
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fecc 	bl	8007d78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fe4:	f001 feae 	bl	8008d44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fe8:	f000 fc3e 	bl	8007868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fec:	f001 fe7a 	bl	8008ce4 <vPortEnterCritical>
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ff6:	b25b      	sxtb	r3, r3
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d103      	bne.n	8007006 <xQueueSemaphoreTake+0x13a>
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800700c:	b25b      	sxtb	r3, r3
 800700e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007012:	d103      	bne.n	800701c <xQueueSemaphoreTake+0x150>
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800701c:	f001 fe92 	bl	8008d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007020:	463a      	mov	r2, r7
 8007022:	f107 030c 	add.w	r3, r7, #12
 8007026:	4611      	mov	r1, r2
 8007028:	4618      	mov	r0, r3
 800702a:	f000 febb 	bl	8007da4 <xTaskCheckForTimeOut>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d132      	bne.n	800709a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007036:	f000 f94f 	bl	80072d8 <prvIsQueueEmpty>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d026      	beq.n	800708e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d109      	bne.n	800705c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007048:	f001 fe4c 	bl	8008ce4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	4618      	mov	r0, r3
 8007052:	f001 f809 	bl	8008068 <xTaskPriorityInherit>
 8007056:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007058:	f001 fe74 	bl	8008d44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	3324      	adds	r3, #36	; 0x24
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	4611      	mov	r1, r2
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fdd3 	bl	8007c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800706a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800706c:	f000 f8e2 	bl	8007234 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007070:	f000 fc08 	bl	8007884 <xTaskResumeAll>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	f47f af68 	bne.w	8006f4c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800707c:	4b18      	ldr	r3, [pc, #96]	; (80070e0 <xQueueSemaphoreTake+0x214>)
 800707e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	e75e      	b.n	8006f4c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800708e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007090:	f000 f8d0 	bl	8007234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007094:	f000 fbf6 	bl	8007884 <xTaskResumeAll>
 8007098:	e758      	b.n	8006f4c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800709a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800709c:	f000 f8ca 	bl	8007234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070a0:	f000 fbf0 	bl	8007884 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a6:	f000 f917 	bl	80072d8 <prvIsQueueEmpty>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f43f af4d 	beq.w	8006f4c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00d      	beq.n	80070d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80070b8:	f001 fe14 	bl	8008ce4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070be:	f000 f811 	bl	80070e4 <prvGetDisinheritPriorityAfterTimeout>
 80070c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 f8a2 	bl	8008214 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80070d0:	f001 fe38 	bl	8008d44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3738      	adds	r7, #56	; 0x38
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	e000ed04 	.word	0xe000ed04

080070e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d006      	beq.n	8007102 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e001      	b.n	8007106 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007106:	68fb      	ldr	r3, [r7, #12]
	}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10d      	bne.n	800714e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d14d      	bne.n	80071d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fffa 	bl	8008138 <xTaskPriorityDisinherit>
 8007144:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	609a      	str	r2, [r3, #8]
 800714c:	e043      	b.n	80071d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d119      	bne.n	8007188 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6858      	ldr	r0, [r3, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	461a      	mov	r2, r3
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	f002 f978 	bl	8009454 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716c:	441a      	add	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	429a      	cmp	r2, r3
 800717c:	d32b      	bcc.n	80071d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	605a      	str	r2, [r3, #4]
 8007186:	e026      	b.n	80071d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	68d8      	ldr	r0, [r3, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	461a      	mov	r2, r3
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	f002 f95e 	bl	8009454 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	425b      	negs	r3, r3
 80071a2:	441a      	add	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d207      	bcs.n	80071c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	425b      	negs	r3, r3
 80071be:	441a      	add	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d105      	bne.n	80071d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071de:	697b      	ldr	r3, [r7, #20]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d018      	beq.n	800722c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	441a      	add	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	429a      	cmp	r2, r3
 8007212:	d303      	bcc.n	800721c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68d9      	ldr	r1, [r3, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	461a      	mov	r2, r3
 8007226:	6838      	ldr	r0, [r7, #0]
 8007228:	f002 f914 	bl	8009454 <memcpy>
	}
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800723c:	f001 fd52 	bl	8008ce4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007246:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007248:	e011      	b.n	800726e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	d012      	beq.n	8007278 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3324      	adds	r3, #36	; 0x24
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fd2a 	bl	8007cb0 <xTaskRemoveFromEventList>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007262:	f000 fe01 	bl	8007e68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	3b01      	subs	r3, #1
 800726a:	b2db      	uxtb	r3, r3
 800726c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800726e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007272:	2b00      	cmp	r3, #0
 8007274:	dce9      	bgt.n	800724a <prvUnlockQueue+0x16>
 8007276:	e000      	b.n	800727a <prvUnlockQueue+0x46>
					break;
 8007278:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	22ff      	movs	r2, #255	; 0xff
 800727e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007282:	f001 fd5f 	bl	8008d44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007286:	f001 fd2d 	bl	8008ce4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007290:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007292:	e011      	b.n	80072b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d012      	beq.n	80072c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3310      	adds	r3, #16
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fd05 	bl	8007cb0 <xTaskRemoveFromEventList>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072ac:	f000 fddc 	bl	8007e68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dce9      	bgt.n	8007294 <prvUnlockQueue+0x60>
 80072c0:	e000      	b.n	80072c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	22ff      	movs	r2, #255	; 0xff
 80072c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072cc:	f001 fd3a 	bl	8008d44 <vPortExitCritical>
}
 80072d0:	bf00      	nop
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072e0:	f001 fd00 	bl	8008ce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072ec:	2301      	movs	r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e001      	b.n	80072f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072f6:	f001 fd25 	bl	8008d44 <vPortExitCritical>

	return xReturn;
 80072fa:	68fb      	ldr	r3, [r7, #12]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800730c:	f001 fcea 	bl	8008ce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007318:	429a      	cmp	r2, r3
 800731a:	d102      	bne.n	8007322 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800731c:	2301      	movs	r3, #1
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	e001      	b.n	8007326 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007326:	f001 fd0d 	bl	8008d44 <vPortExitCritical>

	return xReturn;
 800732a:	68fb      	ldr	r3, [r7, #12]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	e014      	b.n	800736e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007344:	4a0f      	ldr	r2, [pc, #60]	; (8007384 <vQueueAddToRegistry+0x50>)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10b      	bne.n	8007368 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007350:	490c      	ldr	r1, [pc, #48]	; (8007384 <vQueueAddToRegistry+0x50>)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800735a:	4a0a      	ldr	r2, [pc, #40]	; (8007384 <vQueueAddToRegistry+0x50>)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	4413      	add	r3, r2
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007366:	e006      	b.n	8007376 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b07      	cmp	r3, #7
 8007372:	d9e7      	bls.n	8007344 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	2000090c 	.word	0x2000090c

08007388 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007398:	f001 fca4 	bl	8008ce4 <vPortEnterCritical>
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073a2:	b25b      	sxtb	r3, r3
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a8:	d103      	bne.n	80073b2 <vQueueWaitForMessageRestricted+0x2a>
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073b8:	b25b      	sxtb	r3, r3
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073be:	d103      	bne.n	80073c8 <vQueueWaitForMessageRestricted+0x40>
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073c8:	f001 fcbc 	bl	8008d44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d106      	bne.n	80073e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	3324      	adds	r3, #36	; 0x24
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fc3b 	bl	8007c58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80073e2:	6978      	ldr	r0, [r7, #20]
 80073e4:	f7ff ff26 	bl	8007234 <prvUnlockQueue>
	}
 80073e8:	bf00      	nop
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08e      	sub	sp, #56	; 0x38
 80073f4:	af04      	add	r7, sp, #16
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	623b      	str	r3, [r7, #32]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <xTaskCreateStatic+0x46>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	61fb      	str	r3, [r7, #28]
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007436:	235c      	movs	r3, #92	; 0x5c
 8007438:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	2b5c      	cmp	r3, #92	; 0x5c
 800743e:	d00a      	beq.n	8007456 <xTaskCreateStatic+0x66>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	61bb      	str	r3, [r7, #24]
}
 8007452:	bf00      	nop
 8007454:	e7fe      	b.n	8007454 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007456:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	2b00      	cmp	r3, #0
 800745c:	d01e      	beq.n	800749c <xTaskCreateStatic+0xac>
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01b      	beq.n	800749c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800746c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	2202      	movs	r2, #2
 8007472:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007476:	2300      	movs	r3, #0
 8007478:	9303      	str	r3, [sp, #12]
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	9302      	str	r3, [sp, #8]
 800747e:	f107 0314 	add.w	r3, r7, #20
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 f850 	bl	8007534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007496:	f000 f8dd 	bl	8007654 <prvAddNewTaskToReadyList>
 800749a:	e001      	b.n	80074a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800749c:	2300      	movs	r3, #0
 800749e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074a0:	697b      	ldr	r3, [r7, #20]
	}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3728      	adds	r7, #40	; 0x28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b08c      	sub	sp, #48	; 0x30
 80074ae:	af04      	add	r7, sp, #16
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	603b      	str	r3, [r7, #0]
 80074b6:	4613      	mov	r3, r2
 80074b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074ba:	88fb      	ldrh	r3, [r7, #6]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 fd32 	bl	8008f28 <pvPortMalloc>
 80074c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00e      	beq.n	80074ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074cc:	205c      	movs	r0, #92	; 0x5c
 80074ce:	f001 fd2b 	bl	8008f28 <pvPortMalloc>
 80074d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	631a      	str	r2, [r3, #48]	; 0x30
 80074e0:	e005      	b.n	80074ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074e2:	6978      	ldr	r0, [r7, #20]
 80074e4:	f001 fdec 	bl	80090c0 <vPortFree>
 80074e8:	e001      	b.n	80074ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d017      	beq.n	8007524 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074fc:	88fa      	ldrh	r2, [r7, #6]
 80074fe:	2300      	movs	r3, #0
 8007500:	9303      	str	r3, [sp, #12]
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	9302      	str	r3, [sp, #8]
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68b9      	ldr	r1, [r7, #8]
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 f80e 	bl	8007534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007518:	69f8      	ldr	r0, [r7, #28]
 800751a:	f000 f89b 	bl	8007654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800751e:	2301      	movs	r3, #1
 8007520:	61bb      	str	r3, [r7, #24]
 8007522:	e002      	b.n	800752a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007524:	f04f 33ff 	mov.w	r3, #4294967295
 8007528:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800752a:	69bb      	ldr	r3, [r7, #24]
	}
 800752c:	4618      	mov	r0, r3
 800752e:	3720      	adds	r7, #32
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	461a      	mov	r2, r3
 800754c:	21a5      	movs	r1, #165	; 0xa5
 800754e:	f001 ff8f 	bl	8009470 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800755c:	3b01      	subs	r3, #1
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	f023 0307 	bic.w	r3, r3, #7
 800756a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	f003 0307 	and.w	r3, r3, #7
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	617b      	str	r3, [r7, #20]
}
 8007588:	bf00      	nop
 800758a:	e7fe      	b.n	800758a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d01f      	beq.n	80075d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007592:	2300      	movs	r3, #0
 8007594:	61fb      	str	r3, [r7, #28]
 8007596:	e012      	b.n	80075be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	4413      	add	r3, r2
 800759e:	7819      	ldrb	r1, [r3, #0]
 80075a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	4413      	add	r3, r2
 80075a6:	3334      	adds	r3, #52	; 0x34
 80075a8:	460a      	mov	r2, r1
 80075aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	4413      	add	r3, r2
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d006      	beq.n	80075c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	3301      	adds	r3, #1
 80075bc:	61fb      	str	r3, [r7, #28]
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	2b0f      	cmp	r3, #15
 80075c2:	d9e9      	bls.n	8007598 <prvInitialiseNewTask+0x64>
 80075c4:	e000      	b.n	80075c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80075c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075d0:	e003      	b.n	80075da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	2b37      	cmp	r3, #55	; 0x37
 80075de:	d901      	bls.n	80075e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075e0:	2337      	movs	r3, #55	; 0x37
 80075e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	2200      	movs	r2, #0
 80075f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	3304      	adds	r3, #4
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe ff5c 	bl	80064b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	3318      	adds	r3, #24
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe ff57 	bl	80064b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800760e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	2200      	movs	r2, #0
 8007624:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	68f9      	ldr	r1, [r7, #12]
 8007632:	69b8      	ldr	r0, [r7, #24]
 8007634:	f001 fa26 	bl	8008a84 <pxPortInitialiseStack>
 8007638:	4602      	mov	r2, r0
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800764a:	bf00      	nop
 800764c:	3720      	adds	r7, #32
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800765c:	f001 fb42 	bl	8008ce4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007660:	4b2d      	ldr	r3, [pc, #180]	; (8007718 <prvAddNewTaskToReadyList+0xc4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3301      	adds	r3, #1
 8007666:	4a2c      	ldr	r2, [pc, #176]	; (8007718 <prvAddNewTaskToReadyList+0xc4>)
 8007668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800766a:	4b2c      	ldr	r3, [pc, #176]	; (800771c <prvAddNewTaskToReadyList+0xc8>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d109      	bne.n	8007686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007672:	4a2a      	ldr	r2, [pc, #168]	; (800771c <prvAddNewTaskToReadyList+0xc8>)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007678:	4b27      	ldr	r3, [pc, #156]	; (8007718 <prvAddNewTaskToReadyList+0xc4>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d110      	bne.n	80076a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007680:	f000 fc16 	bl	8007eb0 <prvInitialiseTaskLists>
 8007684:	e00d      	b.n	80076a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007686:	4b26      	ldr	r3, [pc, #152]	; (8007720 <prvAddNewTaskToReadyList+0xcc>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800768e:	4b23      	ldr	r3, [pc, #140]	; (800771c <prvAddNewTaskToReadyList+0xc8>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	429a      	cmp	r2, r3
 800769a:	d802      	bhi.n	80076a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800769c:	4a1f      	ldr	r2, [pc, #124]	; (800771c <prvAddNewTaskToReadyList+0xc8>)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076a2:	4b20      	ldr	r3, [pc, #128]	; (8007724 <prvAddNewTaskToReadyList+0xd0>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3301      	adds	r3, #1
 80076a8:	4a1e      	ldr	r2, [pc, #120]	; (8007724 <prvAddNewTaskToReadyList+0xd0>)
 80076aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076ac:	4b1d      	ldr	r3, [pc, #116]	; (8007724 <prvAddNewTaskToReadyList+0xd0>)
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b8:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <prvAddNewTaskToReadyList+0xd4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d903      	bls.n	80076c8 <prvAddNewTaskToReadyList+0x74>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	4a18      	ldr	r2, [pc, #96]	; (8007728 <prvAddNewTaskToReadyList+0xd4>)
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4a15      	ldr	r2, [pc, #84]	; (800772c <prvAddNewTaskToReadyList+0xd8>)
 80076d6:	441a      	add	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3304      	adds	r3, #4
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f7fe fef7 	bl	80064d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076e4:	f001 fb2e 	bl	8008d44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076e8:	4b0d      	ldr	r3, [pc, #52]	; (8007720 <prvAddNewTaskToReadyList+0xcc>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00e      	beq.n	800770e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <prvAddNewTaskToReadyList+0xc8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d207      	bcs.n	800770e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076fe:	4b0c      	ldr	r3, [pc, #48]	; (8007730 <prvAddNewTaskToReadyList+0xdc>)
 8007700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800770e:	bf00      	nop
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000e20 	.word	0x20000e20
 800771c:	2000094c 	.word	0x2000094c
 8007720:	20000e2c 	.word	0x20000e2c
 8007724:	20000e3c 	.word	0x20000e3c
 8007728:	20000e28 	.word	0x20000e28
 800772c:	20000950 	.word	0x20000950
 8007730:	e000ed04 	.word	0xe000ed04

08007734 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800773c:	2300      	movs	r3, #0
 800773e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d017      	beq.n	8007776 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007746:	4b13      	ldr	r3, [pc, #76]	; (8007794 <vTaskDelay+0x60>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <vTaskDelay+0x30>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	60bb      	str	r3, [r7, #8]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007764:	f000 f880 	bl	8007868 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007768:	2100      	movs	r1, #0
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fde8 	bl	8008340 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007770:	f000 f888 	bl	8007884 <xTaskResumeAll>
 8007774:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d107      	bne.n	800778c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800777c:	4b06      	ldr	r3, [pc, #24]	; (8007798 <vTaskDelay+0x64>)
 800777e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20000e48 	.word	0x20000e48
 8007798:	e000ed04 	.word	0xe000ed04

0800779c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	; 0x28
 80077a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077aa:	463a      	mov	r2, r7
 80077ac:	1d39      	adds	r1, r7, #4
 80077ae:	f107 0308 	add.w	r3, r7, #8
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fe2c 	bl	8006410 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	9202      	str	r2, [sp, #8]
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	2300      	movs	r3, #0
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	2300      	movs	r3, #0
 80077c8:	460a      	mov	r2, r1
 80077ca:	4921      	ldr	r1, [pc, #132]	; (8007850 <vTaskStartScheduler+0xb4>)
 80077cc:	4821      	ldr	r0, [pc, #132]	; (8007854 <vTaskStartScheduler+0xb8>)
 80077ce:	f7ff fe0f 	bl	80073f0 <xTaskCreateStatic>
 80077d2:	4603      	mov	r3, r0
 80077d4:	4a20      	ldr	r2, [pc, #128]	; (8007858 <vTaskStartScheduler+0xbc>)
 80077d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077d8:	4b1f      	ldr	r3, [pc, #124]	; (8007858 <vTaskStartScheduler+0xbc>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077e0:	2301      	movs	r3, #1
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	e001      	b.n	80077ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d102      	bne.n	80077f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80077f0:	f000 fdfa 	bl	80083e8 <xTimerCreateTimerTask>
 80077f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d116      	bne.n	800782a <vTaskStartScheduler+0x8e>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	613b      	str	r3, [r7, #16]
}
 800780e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007810:	4b12      	ldr	r3, [pc, #72]	; (800785c <vTaskStartScheduler+0xc0>)
 8007812:	f04f 32ff 	mov.w	r2, #4294967295
 8007816:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007818:	4b11      	ldr	r3, [pc, #68]	; (8007860 <vTaskStartScheduler+0xc4>)
 800781a:	2201      	movs	r2, #1
 800781c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800781e:	4b11      	ldr	r3, [pc, #68]	; (8007864 <vTaskStartScheduler+0xc8>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007824:	f001 f9bc 	bl	8008ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007828:	e00e      	b.n	8007848 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d10a      	bne.n	8007848 <vTaskStartScheduler+0xac>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60fb      	str	r3, [r7, #12]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <vTaskStartScheduler+0xaa>
}
 8007848:	bf00      	nop
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	0800b4e8 	.word	0x0800b4e8
 8007854:	08007e81 	.word	0x08007e81
 8007858:	20000e44 	.word	0x20000e44
 800785c:	20000e40 	.word	0x20000e40
 8007860:	20000e2c 	.word	0x20000e2c
 8007864:	20000e24 	.word	0x20000e24

08007868 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800786c:	4b04      	ldr	r3, [pc, #16]	; (8007880 <vTaskSuspendAll+0x18>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3301      	adds	r3, #1
 8007872:	4a03      	ldr	r2, [pc, #12]	; (8007880 <vTaskSuspendAll+0x18>)
 8007874:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007876:	bf00      	nop
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	20000e48 	.word	0x20000e48

08007884 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800788e:	2300      	movs	r3, #0
 8007890:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007892:	4b42      	ldr	r3, [pc, #264]	; (800799c <xTaskResumeAll+0x118>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10a      	bne.n	80078b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	603b      	str	r3, [r7, #0]
}
 80078ac:	bf00      	nop
 80078ae:	e7fe      	b.n	80078ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078b0:	f001 fa18 	bl	8008ce4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078b4:	4b39      	ldr	r3, [pc, #228]	; (800799c <xTaskResumeAll+0x118>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	4a38      	ldr	r2, [pc, #224]	; (800799c <xTaskResumeAll+0x118>)
 80078bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078be:	4b37      	ldr	r3, [pc, #220]	; (800799c <xTaskResumeAll+0x118>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d162      	bne.n	800798c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078c6:	4b36      	ldr	r3, [pc, #216]	; (80079a0 <xTaskResumeAll+0x11c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d05e      	beq.n	800798c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ce:	e02f      	b.n	8007930 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d0:	4b34      	ldr	r3, [pc, #208]	; (80079a4 <xTaskResumeAll+0x120>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3318      	adds	r3, #24
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fe fe55 	bl	800658c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3304      	adds	r3, #4
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fe50 	bl	800658c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f0:	4b2d      	ldr	r3, [pc, #180]	; (80079a8 <xTaskResumeAll+0x124>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d903      	bls.n	8007900 <xTaskResumeAll+0x7c>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	4a2a      	ldr	r2, [pc, #168]	; (80079a8 <xTaskResumeAll+0x124>)
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4a27      	ldr	r2, [pc, #156]	; (80079ac <xTaskResumeAll+0x128>)
 800790e:	441a      	add	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3304      	adds	r3, #4
 8007914:	4619      	mov	r1, r3
 8007916:	4610      	mov	r0, r2
 8007918:	f7fe fddb 	bl	80064d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	4b23      	ldr	r3, [pc, #140]	; (80079b0 <xTaskResumeAll+0x12c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	429a      	cmp	r2, r3
 8007928:	d302      	bcc.n	8007930 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800792a:	4b22      	ldr	r3, [pc, #136]	; (80079b4 <xTaskResumeAll+0x130>)
 800792c:	2201      	movs	r2, #1
 800792e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007930:	4b1c      	ldr	r3, [pc, #112]	; (80079a4 <xTaskResumeAll+0x120>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1cb      	bne.n	80078d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800793e:	f000 fb55 	bl	8007fec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007942:	4b1d      	ldr	r3, [pc, #116]	; (80079b8 <xTaskResumeAll+0x134>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d010      	beq.n	8007970 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800794e:	f000 f847 	bl	80079e0 <xTaskIncrementTick>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007958:	4b16      	ldr	r3, [pc, #88]	; (80079b4 <xTaskResumeAll+0x130>)
 800795a:	2201      	movs	r2, #1
 800795c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3b01      	subs	r3, #1
 8007962:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1f1      	bne.n	800794e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800796a:	4b13      	ldr	r3, [pc, #76]	; (80079b8 <xTaskResumeAll+0x134>)
 800796c:	2200      	movs	r2, #0
 800796e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007970:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <xTaskResumeAll+0x130>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d009      	beq.n	800798c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007978:	2301      	movs	r3, #1
 800797a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800797c:	4b0f      	ldr	r3, [pc, #60]	; (80079bc <xTaskResumeAll+0x138>)
 800797e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800798c:	f001 f9da 	bl	8008d44 <vPortExitCritical>

	return xAlreadyYielded;
 8007990:	68bb      	ldr	r3, [r7, #8]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20000e48 	.word	0x20000e48
 80079a0:	20000e20 	.word	0x20000e20
 80079a4:	20000de0 	.word	0x20000de0
 80079a8:	20000e28 	.word	0x20000e28
 80079ac:	20000950 	.word	0x20000950
 80079b0:	2000094c 	.word	0x2000094c
 80079b4:	20000e34 	.word	0x20000e34
 80079b8:	20000e30 	.word	0x20000e30
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079c6:	4b05      	ldr	r3, [pc, #20]	; (80079dc <xTaskGetTickCount+0x1c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079cc:	687b      	ldr	r3, [r7, #4]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	20000e24 	.word	0x20000e24

080079e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ea:	4b4f      	ldr	r3, [pc, #316]	; (8007b28 <xTaskIncrementTick+0x148>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f040 808f 	bne.w	8007b12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079f4:	4b4d      	ldr	r3, [pc, #308]	; (8007b2c <xTaskIncrementTick+0x14c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3301      	adds	r3, #1
 80079fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079fc:	4a4b      	ldr	r2, [pc, #300]	; (8007b2c <xTaskIncrementTick+0x14c>)
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d120      	bne.n	8007a4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a08:	4b49      	ldr	r3, [pc, #292]	; (8007b30 <xTaskIncrementTick+0x150>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00a      	beq.n	8007a28 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	603b      	str	r3, [r7, #0]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <xTaskIncrementTick+0x46>
 8007a28:	4b41      	ldr	r3, [pc, #260]	; (8007b30 <xTaskIncrementTick+0x150>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	4b41      	ldr	r3, [pc, #260]	; (8007b34 <xTaskIncrementTick+0x154>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a3f      	ldr	r2, [pc, #252]	; (8007b30 <xTaskIncrementTick+0x150>)
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	4a3f      	ldr	r2, [pc, #252]	; (8007b34 <xTaskIncrementTick+0x154>)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	4b3e      	ldr	r3, [pc, #248]	; (8007b38 <xTaskIncrementTick+0x158>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3301      	adds	r3, #1
 8007a42:	4a3d      	ldr	r2, [pc, #244]	; (8007b38 <xTaskIncrementTick+0x158>)
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	f000 fad1 	bl	8007fec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a4a:	4b3c      	ldr	r3, [pc, #240]	; (8007b3c <xTaskIncrementTick+0x15c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d349      	bcc.n	8007ae8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a54:	4b36      	ldr	r3, [pc, #216]	; (8007b30 <xTaskIncrementTick+0x150>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d104      	bne.n	8007a68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a5e:	4b37      	ldr	r3, [pc, #220]	; (8007b3c <xTaskIncrementTick+0x15c>)
 8007a60:	f04f 32ff 	mov.w	r2, #4294967295
 8007a64:	601a      	str	r2, [r3, #0]
					break;
 8007a66:	e03f      	b.n	8007ae8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a68:	4b31      	ldr	r3, [pc, #196]	; (8007b30 <xTaskIncrementTick+0x150>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d203      	bcs.n	8007a88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a80:	4a2e      	ldr	r2, [pc, #184]	; (8007b3c <xTaskIncrementTick+0x15c>)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a86:	e02f      	b.n	8007ae8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fe fd7d 	bl	800658c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d004      	beq.n	8007aa4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	3318      	adds	r3, #24
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fe fd74 	bl	800658c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa8:	4b25      	ldr	r3, [pc, #148]	; (8007b40 <xTaskIncrementTick+0x160>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d903      	bls.n	8007ab8 <xTaskIncrementTick+0xd8>
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	4a22      	ldr	r2, [pc, #136]	; (8007b40 <xTaskIncrementTick+0x160>)
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4a1f      	ldr	r2, [pc, #124]	; (8007b44 <xTaskIncrementTick+0x164>)
 8007ac6:	441a      	add	r2, r3
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	3304      	adds	r3, #4
 8007acc:	4619      	mov	r1, r3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	f7fe fcff 	bl	80064d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad8:	4b1b      	ldr	r3, [pc, #108]	; (8007b48 <xTaskIncrementTick+0x168>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d3b8      	bcc.n	8007a54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ae6:	e7b5      	b.n	8007a54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ae8:	4b17      	ldr	r3, [pc, #92]	; (8007b48 <xTaskIncrementTick+0x168>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aee:	4915      	ldr	r1, [pc, #84]	; (8007b44 <xTaskIncrementTick+0x164>)
 8007af0:	4613      	mov	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d901      	bls.n	8007b04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b00:	2301      	movs	r3, #1
 8007b02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b04:	4b11      	ldr	r3, [pc, #68]	; (8007b4c <xTaskIncrementTick+0x16c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d007      	beq.n	8007b1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	e004      	b.n	8007b1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b12:	4b0f      	ldr	r3, [pc, #60]	; (8007b50 <xTaskIncrementTick+0x170>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3301      	adds	r3, #1
 8007b18:	4a0d      	ldr	r2, [pc, #52]	; (8007b50 <xTaskIncrementTick+0x170>)
 8007b1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b1c:	697b      	ldr	r3, [r7, #20]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3718      	adds	r7, #24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000e48 	.word	0x20000e48
 8007b2c:	20000e24 	.word	0x20000e24
 8007b30:	20000dd8 	.word	0x20000dd8
 8007b34:	20000ddc 	.word	0x20000ddc
 8007b38:	20000e38 	.word	0x20000e38
 8007b3c:	20000e40 	.word	0x20000e40
 8007b40:	20000e28 	.word	0x20000e28
 8007b44:	20000950 	.word	0x20000950
 8007b48:	2000094c 	.word	0x2000094c
 8007b4c:	20000e34 	.word	0x20000e34
 8007b50:	20000e30 	.word	0x20000e30

08007b54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b5a:	4b28      	ldr	r3, [pc, #160]	; (8007bfc <vTaskSwitchContext+0xa8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b62:	4b27      	ldr	r3, [pc, #156]	; (8007c00 <vTaskSwitchContext+0xac>)
 8007b64:	2201      	movs	r2, #1
 8007b66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b68:	e041      	b.n	8007bee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007b6a:	4b25      	ldr	r3, [pc, #148]	; (8007c00 <vTaskSwitchContext+0xac>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b70:	4b24      	ldr	r3, [pc, #144]	; (8007c04 <vTaskSwitchContext+0xb0>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	e010      	b.n	8007b9a <vTaskSwitchContext+0x46>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <vTaskSwitchContext+0x40>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	607b      	str	r3, [r7, #4]
}
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <vTaskSwitchContext+0x3e>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	491b      	ldr	r1, [pc, #108]	; (8007c08 <vTaskSwitchContext+0xb4>)
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	440b      	add	r3, r1
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0e4      	beq.n	8007b78 <vTaskSwitchContext+0x24>
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4a13      	ldr	r2, [pc, #76]	; (8007c08 <vTaskSwitchContext+0xb4>)
 8007bba:	4413      	add	r3, r2
 8007bbc:	60bb      	str	r3, [r7, #8]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	605a      	str	r2, [r3, #4]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d104      	bne.n	8007bde <vTaskSwitchContext+0x8a>
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	605a      	str	r2, [r3, #4]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	4a09      	ldr	r2, [pc, #36]	; (8007c0c <vTaskSwitchContext+0xb8>)
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	4a06      	ldr	r2, [pc, #24]	; (8007c04 <vTaskSwitchContext+0xb0>)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6013      	str	r3, [r2, #0]
}
 8007bee:	bf00      	nop
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	20000e48 	.word	0x20000e48
 8007c00:	20000e34 	.word	0x20000e34
 8007c04:	20000e28 	.word	0x20000e28
 8007c08:	20000950 	.word	0x20000950
 8007c0c:	2000094c 	.word	0x2000094c

08007c10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	60fb      	str	r3, [r7, #12]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c36:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <vTaskPlaceOnEventList+0x44>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3318      	adds	r3, #24
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fe fc6b 	bl	800651a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c44:	2101      	movs	r1, #1
 8007c46:	6838      	ldr	r0, [r7, #0]
 8007c48:	f000 fb7a 	bl	8008340 <prvAddCurrentTaskToDelayedList>
}
 8007c4c:	bf00      	nop
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	2000094c 	.word	0x2000094c

08007c58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10a      	bne.n	8007c80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	617b      	str	r3, [r7, #20]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c80:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <vTaskPlaceOnEventListRestricted+0x54>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3318      	adds	r3, #24
 8007c86:	4619      	mov	r1, r3
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7fe fc22 	bl	80064d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007c94:	f04f 33ff 	mov.w	r3, #4294967295
 8007c98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c9a:	6879      	ldr	r1, [r7, #4]
 8007c9c:	68b8      	ldr	r0, [r7, #8]
 8007c9e:	f000 fb4f 	bl	8008340 <prvAddCurrentTaskToDelayedList>
	}
 8007ca2:	bf00      	nop
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	2000094c 	.word	0x2000094c

08007cb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60fb      	str	r3, [r7, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	3318      	adds	r3, #24
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fe fc53 	bl	800658c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ce6:	4b1e      	ldr	r3, [pc, #120]	; (8007d60 <xTaskRemoveFromEventList+0xb0>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d11d      	bne.n	8007d2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fc4a 	bl	800658c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfc:	4b19      	ldr	r3, [pc, #100]	; (8007d64 <xTaskRemoveFromEventList+0xb4>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d903      	bls.n	8007d0c <xTaskRemoveFromEventList+0x5c>
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	4a16      	ldr	r2, [pc, #88]	; (8007d64 <xTaskRemoveFromEventList+0xb4>)
 8007d0a:	6013      	str	r3, [r2, #0]
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d10:	4613      	mov	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4a13      	ldr	r2, [pc, #76]	; (8007d68 <xTaskRemoveFromEventList+0xb8>)
 8007d1a:	441a      	add	r2, r3
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	f7fe fbd5 	bl	80064d2 <vListInsertEnd>
 8007d28:	e005      	b.n	8007d36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3318      	adds	r3, #24
 8007d2e:	4619      	mov	r1, r3
 8007d30:	480e      	ldr	r0, [pc, #56]	; (8007d6c <xTaskRemoveFromEventList+0xbc>)
 8007d32:	f7fe fbce 	bl	80064d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3a:	4b0d      	ldr	r3, [pc, #52]	; (8007d70 <xTaskRemoveFromEventList+0xc0>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d905      	bls.n	8007d50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d44:	2301      	movs	r3, #1
 8007d46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d48:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <xTaskRemoveFromEventList+0xc4>)
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e001      	b.n	8007d54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d54:	697b      	ldr	r3, [r7, #20]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000e48 	.word	0x20000e48
 8007d64:	20000e28 	.word	0x20000e28
 8007d68:	20000950 	.word	0x20000950
 8007d6c:	20000de0 	.word	0x20000de0
 8007d70:	2000094c 	.word	0x2000094c
 8007d74:	20000e34 	.word	0x20000e34

08007d78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d80:	4b06      	ldr	r3, [pc, #24]	; (8007d9c <vTaskInternalSetTimeOutState+0x24>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d88:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <vTaskInternalSetTimeOutState+0x28>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	605a      	str	r2, [r3, #4]
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	20000e38 	.word	0x20000e38
 8007da0:	20000e24 	.word	0x20000e24

08007da4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	613b      	str	r3, [r7, #16]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10a      	bne.n	8007de6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	60fb      	str	r3, [r7, #12]
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007de6:	f000 ff7d 	bl	8008ce4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dea:	4b1d      	ldr	r3, [pc, #116]	; (8007e60 <xTaskCheckForTimeOut+0xbc>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e02:	d102      	bne.n	8007e0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	e023      	b.n	8007e52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	4b15      	ldr	r3, [pc, #84]	; (8007e64 <xTaskCheckForTimeOut+0xc0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d007      	beq.n	8007e26 <xTaskCheckForTimeOut+0x82>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d302      	bcc.n	8007e26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e20:	2301      	movs	r3, #1
 8007e22:	61fb      	str	r3, [r7, #28]
 8007e24:	e015      	b.n	8007e52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d20b      	bcs.n	8007e48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	1ad2      	subs	r2, r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff ff9b 	bl	8007d78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e42:	2300      	movs	r3, #0
 8007e44:	61fb      	str	r3, [r7, #28]
 8007e46:	e004      	b.n	8007e52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e52:	f000 ff77 	bl	8008d44 <vPortExitCritical>

	return xReturn;
 8007e56:	69fb      	ldr	r3, [r7, #28]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3720      	adds	r7, #32
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20000e24 	.word	0x20000e24
 8007e64:	20000e38 	.word	0x20000e38

08007e68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e6c:	4b03      	ldr	r3, [pc, #12]	; (8007e7c <vTaskMissedYield+0x14>)
 8007e6e:	2201      	movs	r2, #1
 8007e70:	601a      	str	r2, [r3, #0]
}
 8007e72:	bf00      	nop
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	20000e34 	.word	0x20000e34

08007e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e88:	f000 f852 	bl	8007f30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e8c:	4b06      	ldr	r3, [pc, #24]	; (8007ea8 <prvIdleTask+0x28>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d9f9      	bls.n	8007e88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <prvIdleTask+0x2c>)
 8007e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ea4:	e7f0      	b.n	8007e88 <prvIdleTask+0x8>
 8007ea6:	bf00      	nop
 8007ea8:	20000950 	.word	0x20000950
 8007eac:	e000ed04 	.word	0xe000ed04

08007eb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	607b      	str	r3, [r7, #4]
 8007eba:	e00c      	b.n	8007ed6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4a12      	ldr	r2, [pc, #72]	; (8007f10 <prvInitialiseTaskLists+0x60>)
 8007ec8:	4413      	add	r3, r2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fad4 	bl	8006478 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	607b      	str	r3, [r7, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b37      	cmp	r3, #55	; 0x37
 8007eda:	d9ef      	bls.n	8007ebc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007edc:	480d      	ldr	r0, [pc, #52]	; (8007f14 <prvInitialiseTaskLists+0x64>)
 8007ede:	f7fe facb 	bl	8006478 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ee2:	480d      	ldr	r0, [pc, #52]	; (8007f18 <prvInitialiseTaskLists+0x68>)
 8007ee4:	f7fe fac8 	bl	8006478 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ee8:	480c      	ldr	r0, [pc, #48]	; (8007f1c <prvInitialiseTaskLists+0x6c>)
 8007eea:	f7fe fac5 	bl	8006478 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007eee:	480c      	ldr	r0, [pc, #48]	; (8007f20 <prvInitialiseTaskLists+0x70>)
 8007ef0:	f7fe fac2 	bl	8006478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ef4:	480b      	ldr	r0, [pc, #44]	; (8007f24 <prvInitialiseTaskLists+0x74>)
 8007ef6:	f7fe fabf 	bl	8006478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007efa:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <prvInitialiseTaskLists+0x78>)
 8007efc:	4a05      	ldr	r2, [pc, #20]	; (8007f14 <prvInitialiseTaskLists+0x64>)
 8007efe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f00:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <prvInitialiseTaskLists+0x7c>)
 8007f02:	4a05      	ldr	r2, [pc, #20]	; (8007f18 <prvInitialiseTaskLists+0x68>)
 8007f04:	601a      	str	r2, [r3, #0]
}
 8007f06:	bf00      	nop
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000950 	.word	0x20000950
 8007f14:	20000db0 	.word	0x20000db0
 8007f18:	20000dc4 	.word	0x20000dc4
 8007f1c:	20000de0 	.word	0x20000de0
 8007f20:	20000df4 	.word	0x20000df4
 8007f24:	20000e0c 	.word	0x20000e0c
 8007f28:	20000dd8 	.word	0x20000dd8
 8007f2c:	20000ddc 	.word	0x20000ddc

08007f30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f36:	e019      	b.n	8007f6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f38:	f000 fed4 	bl	8008ce4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f3c:	4b10      	ldr	r3, [pc, #64]	; (8007f80 <prvCheckTasksWaitingTermination+0x50>)
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3304      	adds	r3, #4
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe fb1f 	bl	800658c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f4e:	4b0d      	ldr	r3, [pc, #52]	; (8007f84 <prvCheckTasksWaitingTermination+0x54>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	4a0b      	ldr	r2, [pc, #44]	; (8007f84 <prvCheckTasksWaitingTermination+0x54>)
 8007f56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f58:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <prvCheckTasksWaitingTermination+0x58>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	4a0a      	ldr	r2, [pc, #40]	; (8007f88 <prvCheckTasksWaitingTermination+0x58>)
 8007f60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f62:	f000 feef 	bl	8008d44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f810 	bl	8007f8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f6c:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <prvCheckTasksWaitingTermination+0x58>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e1      	bne.n	8007f38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000df4 	.word	0x20000df4
 8007f84:	20000e20 	.word	0x20000e20
 8007f88:	20000e08 	.word	0x20000e08

08007f8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d108      	bne.n	8007fb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 f88c 	bl	80090c0 <vPortFree>
				vPortFree( pxTCB );
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 f889 	bl	80090c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fae:	e018      	b.n	8007fe2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d103      	bne.n	8007fc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f001 f880 	bl	80090c0 <vPortFree>
	}
 8007fc0:	e00f      	b.n	8007fe2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d00a      	beq.n	8007fe2 <prvDeleteTCB+0x56>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	60fb      	str	r3, [r7, #12]
}
 8007fde:	bf00      	nop
 8007fe0:	e7fe      	b.n	8007fe0 <prvDeleteTCB+0x54>
	}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ff2:	4b0c      	ldr	r3, [pc, #48]	; (8008024 <prvResetNextTaskUnblockTime+0x38>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d104      	bne.n	8008006 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ffc:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <prvResetNextTaskUnblockTime+0x3c>)
 8007ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8008002:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008004:	e008      	b.n	8008018 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008006:	4b07      	ldr	r3, [pc, #28]	; (8008024 <prvResetNextTaskUnblockTime+0x38>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	4a04      	ldr	r2, [pc, #16]	; (8008028 <prvResetNextTaskUnblockTime+0x3c>)
 8008016:	6013      	str	r3, [r2, #0]
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	20000dd8 	.word	0x20000dd8
 8008028:	20000e40 	.word	0x20000e40

0800802c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008032:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <xTaskGetSchedulerState+0x34>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d102      	bne.n	8008040 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800803a:	2301      	movs	r3, #1
 800803c:	607b      	str	r3, [r7, #4]
 800803e:	e008      	b.n	8008052 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008040:	4b08      	ldr	r3, [pc, #32]	; (8008064 <xTaskGetSchedulerState+0x38>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d102      	bne.n	800804e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008048:	2302      	movs	r3, #2
 800804a:	607b      	str	r3, [r7, #4]
 800804c:	e001      	b.n	8008052 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800804e:	2300      	movs	r3, #0
 8008050:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008052:	687b      	ldr	r3, [r7, #4]
	}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	20000e2c 	.word	0x20000e2c
 8008064:	20000e48 	.word	0x20000e48

08008068 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008074:	2300      	movs	r3, #0
 8008076:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d051      	beq.n	8008122 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008082:	4b2a      	ldr	r3, [pc, #168]	; (800812c <xTaskPriorityInherit+0xc4>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	429a      	cmp	r2, r3
 800808a:	d241      	bcs.n	8008110 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	2b00      	cmp	r3, #0
 8008092:	db06      	blt.n	80080a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008094:	4b25      	ldr	r3, [pc, #148]	; (800812c <xTaskPriorityInherit+0xc4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	6959      	ldr	r1, [r3, #20]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4a1f      	ldr	r2, [pc, #124]	; (8008130 <xTaskPriorityInherit+0xc8>)
 80080b4:	4413      	add	r3, r2
 80080b6:	4299      	cmp	r1, r3
 80080b8:	d122      	bne.n	8008100 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	3304      	adds	r3, #4
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe fa64 	bl	800658c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080c4:	4b19      	ldr	r3, [pc, #100]	; (800812c <xTaskPriorityInherit+0xc4>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d2:	4b18      	ldr	r3, [pc, #96]	; (8008134 <xTaskPriorityInherit+0xcc>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d903      	bls.n	80080e2 <xTaskPriorityInherit+0x7a>
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	4a15      	ldr	r2, [pc, #84]	; (8008134 <xTaskPriorityInherit+0xcc>)
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4a10      	ldr	r2, [pc, #64]	; (8008130 <xTaskPriorityInherit+0xc8>)
 80080f0:	441a      	add	r2, r3
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4619      	mov	r1, r3
 80080f8:	4610      	mov	r0, r2
 80080fa:	f7fe f9ea 	bl	80064d2 <vListInsertEnd>
 80080fe:	e004      	b.n	800810a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008100:	4b0a      	ldr	r3, [pc, #40]	; (800812c <xTaskPriorityInherit+0xc4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800810a:	2301      	movs	r3, #1
 800810c:	60fb      	str	r3, [r7, #12]
 800810e:	e008      	b.n	8008122 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008114:	4b05      	ldr	r3, [pc, #20]	; (800812c <xTaskPriorityInherit+0xc4>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811a:	429a      	cmp	r2, r3
 800811c:	d201      	bcs.n	8008122 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800811e:	2301      	movs	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008122:	68fb      	ldr	r3, [r7, #12]
	}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	2000094c 	.word	0x2000094c
 8008130:	20000950 	.word	0x20000950
 8008134:	20000e28 	.word	0x20000e28

08008138 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008144:	2300      	movs	r3, #0
 8008146:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d056      	beq.n	80081fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800814e:	4b2e      	ldr	r3, [pc, #184]	; (8008208 <xTaskPriorityDisinherit+0xd0>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	429a      	cmp	r2, r3
 8008156:	d00a      	beq.n	800816e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	60fb      	str	r3, [r7, #12]
}
 800816a:	bf00      	nop
 800816c:	e7fe      	b.n	800816c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10a      	bne.n	800818c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60bb      	str	r3, [r7, #8]
}
 8008188:	bf00      	nop
 800818a:	e7fe      	b.n	800818a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008190:	1e5a      	subs	r2, r3, #1
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819e:	429a      	cmp	r2, r3
 80081a0:	d02c      	beq.n	80081fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d128      	bne.n	80081fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe f9ec 	bl	800658c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081cc:	4b0f      	ldr	r3, [pc, #60]	; (800820c <xTaskPriorityDisinherit+0xd4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d903      	bls.n	80081dc <xTaskPriorityDisinherit+0xa4>
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	4a0c      	ldr	r2, [pc, #48]	; (800820c <xTaskPriorityDisinherit+0xd4>)
 80081da:	6013      	str	r3, [r2, #0]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4a09      	ldr	r2, [pc, #36]	; (8008210 <xTaskPriorityDisinherit+0xd8>)
 80081ea:	441a      	add	r2, r3
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	3304      	adds	r3, #4
 80081f0:	4619      	mov	r1, r3
 80081f2:	4610      	mov	r0, r2
 80081f4:	f7fe f96d 	bl	80064d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081f8:	2301      	movs	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081fc:	697b      	ldr	r3, [r7, #20]
	}
 80081fe:	4618      	mov	r0, r3
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	2000094c 	.word	0x2000094c
 800820c:	20000e28 	.word	0x20000e28
 8008210:	20000950 	.word	0x20000950

08008214 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008222:	2301      	movs	r3, #1
 8008224:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d06a      	beq.n	8008302 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	60fb      	str	r3, [r7, #12]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d902      	bls.n	800825a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	61fb      	str	r3, [r7, #28]
 8008258:	e002      	b.n	8008260 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800825e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	69fa      	ldr	r2, [r7, #28]
 8008266:	429a      	cmp	r2, r3
 8008268:	d04b      	beq.n	8008302 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	429a      	cmp	r2, r3
 8008272:	d146      	bne.n	8008302 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008274:	4b25      	ldr	r3, [pc, #148]	; (800830c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	429a      	cmp	r2, r3
 800827c:	d10a      	bne.n	8008294 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	60bb      	str	r3, [r7, #8]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	db04      	blt.n	80082b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	6959      	ldr	r1, [r3, #20]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4613      	mov	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4a13      	ldr	r2, [pc, #76]	; (8008310 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80082c2:	4413      	add	r3, r2
 80082c4:	4299      	cmp	r1, r3
 80082c6:	d11c      	bne.n	8008302 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fe f95d 	bl	800658c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d6:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d903      	bls.n	80082e6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	4a0c      	ldr	r2, [pc, #48]	; (8008314 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4a07      	ldr	r2, [pc, #28]	; (8008310 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80082f4:	441a      	add	r2, r3
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f7fe f8e8 	bl	80064d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008302:	bf00      	nop
 8008304:	3720      	adds	r7, #32
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	2000094c 	.word	0x2000094c
 8008310:	20000950 	.word	0x20000950
 8008314:	20000e28 	.word	0x20000e28

08008318 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008318:	b480      	push	{r7}
 800831a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800831c:	4b07      	ldr	r3, [pc, #28]	; (800833c <pvTaskIncrementMutexHeldCount+0x24>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008324:	4b05      	ldr	r3, [pc, #20]	; (800833c <pvTaskIncrementMutexHeldCount+0x24>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800832a:	3201      	adds	r2, #1
 800832c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800832e:	4b03      	ldr	r3, [pc, #12]	; (800833c <pvTaskIncrementMutexHeldCount+0x24>)
 8008330:	681b      	ldr	r3, [r3, #0]
	}
 8008332:	4618      	mov	r0, r3
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	2000094c 	.word	0x2000094c

08008340 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800834a:	4b21      	ldr	r3, [pc, #132]	; (80083d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008350:	4b20      	ldr	r3, [pc, #128]	; (80083d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3304      	adds	r3, #4
 8008356:	4618      	mov	r0, r3
 8008358:	f7fe f918 	bl	800658c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d10a      	bne.n	800837a <prvAddCurrentTaskToDelayedList+0x3a>
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d007      	beq.n	800837a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800836a:	4b1a      	ldr	r3, [pc, #104]	; (80083d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3304      	adds	r3, #4
 8008370:	4619      	mov	r1, r3
 8008372:	4819      	ldr	r0, [pc, #100]	; (80083d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008374:	f7fe f8ad 	bl	80064d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008378:	e026      	b.n	80083c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4413      	add	r3, r2
 8008380:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008382:	4b14      	ldr	r3, [pc, #80]	; (80083d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	429a      	cmp	r2, r3
 8008390:	d209      	bcs.n	80083a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008392:	4b12      	ldr	r3, [pc, #72]	; (80083dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3304      	adds	r3, #4
 800839c:	4619      	mov	r1, r3
 800839e:	4610      	mov	r0, r2
 80083a0:	f7fe f8bb 	bl	800651a <vListInsert>
}
 80083a4:	e010      	b.n	80083c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083a6:	4b0e      	ldr	r3, [pc, #56]	; (80083e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f7fe f8b1 	bl	800651a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083b8:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d202      	bcs.n	80083c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80083c2:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	6013      	str	r3, [r2, #0]
}
 80083c8:	bf00      	nop
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20000e24 	.word	0x20000e24
 80083d4:	2000094c 	.word	0x2000094c
 80083d8:	20000e0c 	.word	0x20000e0c
 80083dc:	20000ddc 	.word	0x20000ddc
 80083e0:	20000dd8 	.word	0x20000dd8
 80083e4:	20000e40 	.word	0x20000e40

080083e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08a      	sub	sp, #40	; 0x28
 80083ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80083f2:	f000 fb07 	bl	8008a04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80083f6:	4b1c      	ldr	r3, [pc, #112]	; (8008468 <xTimerCreateTimerTask+0x80>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d021      	beq.n	8008442 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80083fe:	2300      	movs	r3, #0
 8008400:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008406:	1d3a      	adds	r2, r7, #4
 8008408:	f107 0108 	add.w	r1, r7, #8
 800840c:	f107 030c 	add.w	r3, r7, #12
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe f817 	bl	8006444 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	9202      	str	r2, [sp, #8]
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	2302      	movs	r3, #2
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	2300      	movs	r3, #0
 8008426:	460a      	mov	r2, r1
 8008428:	4910      	ldr	r1, [pc, #64]	; (800846c <xTimerCreateTimerTask+0x84>)
 800842a:	4811      	ldr	r0, [pc, #68]	; (8008470 <xTimerCreateTimerTask+0x88>)
 800842c:	f7fe ffe0 	bl	80073f0 <xTaskCreateStatic>
 8008430:	4603      	mov	r3, r0
 8008432:	4a10      	ldr	r2, [pc, #64]	; (8008474 <xTimerCreateTimerTask+0x8c>)
 8008434:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008436:	4b0f      	ldr	r3, [pc, #60]	; (8008474 <xTimerCreateTimerTask+0x8c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800843e:	2301      	movs	r3, #1
 8008440:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10a      	bne.n	800845e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	613b      	str	r3, [r7, #16]
}
 800845a:	bf00      	nop
 800845c:	e7fe      	b.n	800845c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800845e:	697b      	ldr	r3, [r7, #20]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	20000e7c 	.word	0x20000e7c
 800846c:	0800b4f0 	.word	0x0800b4f0
 8008470:	080085ad 	.word	0x080085ad
 8008474:	20000e80 	.word	0x20000e80

08008478 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	; 0x28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008486:	2300      	movs	r3, #0
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	623b      	str	r3, [r7, #32]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80084a6:	4b1a      	ldr	r3, [pc, #104]	; (8008510 <xTimerGenericCommand+0x98>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d02a      	beq.n	8008504 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b05      	cmp	r3, #5
 80084be:	dc18      	bgt.n	80084f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80084c0:	f7ff fdb4 	bl	800802c <xTaskGetSchedulerState>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d109      	bne.n	80084de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80084ca:	4b11      	ldr	r3, [pc, #68]	; (8008510 <xTimerGenericCommand+0x98>)
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	f107 0110 	add.w	r1, r7, #16
 80084d2:	2300      	movs	r3, #0
 80084d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084d6:	f7fe f9f3 	bl	80068c0 <xQueueGenericSend>
 80084da:	6278      	str	r0, [r7, #36]	; 0x24
 80084dc:	e012      	b.n	8008504 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <xTimerGenericCommand+0x98>)
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	f107 0110 	add.w	r1, r7, #16
 80084e6:	2300      	movs	r3, #0
 80084e8:	2200      	movs	r2, #0
 80084ea:	f7fe f9e9 	bl	80068c0 <xQueueGenericSend>
 80084ee:	6278      	str	r0, [r7, #36]	; 0x24
 80084f0:	e008      	b.n	8008504 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80084f2:	4b07      	ldr	r3, [pc, #28]	; (8008510 <xTimerGenericCommand+0x98>)
 80084f4:	6818      	ldr	r0, [r3, #0]
 80084f6:	f107 0110 	add.w	r1, r7, #16
 80084fa:	2300      	movs	r3, #0
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	f7fe fadd 	bl	8006abc <xQueueGenericSendFromISR>
 8008502:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008506:	4618      	mov	r0, r3
 8008508:	3728      	adds	r7, #40	; 0x28
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000e7c 	.word	0x20000e7c

08008514 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b088      	sub	sp, #32
 8008518:	af02      	add	r7, sp, #8
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800851e:	4b22      	ldr	r3, [pc, #136]	; (80085a8 <prvProcessExpiredTimer+0x94>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	3304      	adds	r3, #4
 800852c:	4618      	mov	r0, r3
 800852e:	f7fe f82d 	bl	800658c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d022      	beq.n	8008586 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	699a      	ldr	r2, [r3, #24]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	18d1      	adds	r1, r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	6978      	ldr	r0, [r7, #20]
 800854e:	f000 f8d1 	bl	80086f4 <prvInsertTimerInActiveList>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d01f      	beq.n	8008598 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008558:	2300      	movs	r3, #0
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	2300      	movs	r3, #0
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	2100      	movs	r1, #0
 8008562:	6978      	ldr	r0, [r7, #20]
 8008564:	f7ff ff88 	bl	8008478 <xTimerGenericCommand>
 8008568:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d113      	bne.n	8008598 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	60fb      	str	r3, [r7, #12]
}
 8008582:	bf00      	nop
 8008584:	e7fe      	b.n	8008584 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800858c:	f023 0301 	bic.w	r3, r3, #1
 8008590:	b2da      	uxtb	r2, r3
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	6978      	ldr	r0, [r7, #20]
 800859e:	4798      	blx	r3
}
 80085a0:	bf00      	nop
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20000e74 	.word	0x20000e74

080085ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085b4:	f107 0308 	add.w	r3, r7, #8
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f857 	bl	800866c <prvGetNextExpireTime>
 80085be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4619      	mov	r1, r3
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 f803 	bl	80085d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80085ca:	f000 f8d5 	bl	8008778 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085ce:	e7f1      	b.n	80085b4 <prvTimerTask+0x8>

080085d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80085da:	f7ff f945 	bl	8007868 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085de:	f107 0308 	add.w	r3, r7, #8
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f866 	bl	80086b4 <prvSampleTimeNow>
 80085e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d130      	bne.n	8008652 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10a      	bne.n	800860c <prvProcessTimerOrBlockTask+0x3c>
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d806      	bhi.n	800860c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80085fe:	f7ff f941 	bl	8007884 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008602:	68f9      	ldr	r1, [r7, #12]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7ff ff85 	bl	8008514 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800860a:	e024      	b.n	8008656 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008612:	4b13      	ldr	r3, [pc, #76]	; (8008660 <prvProcessTimerOrBlockTask+0x90>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <prvProcessTimerOrBlockTask+0x50>
 800861c:	2301      	movs	r3, #1
 800861e:	e000      	b.n	8008622 <prvProcessTimerOrBlockTask+0x52>
 8008620:	2300      	movs	r3, #0
 8008622:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008624:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <prvProcessTimerOrBlockTask+0x94>)
 8008626:	6818      	ldr	r0, [r3, #0]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	4619      	mov	r1, r3
 8008632:	f7fe fea9 	bl	8007388 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008636:	f7ff f925 	bl	8007884 <xTaskResumeAll>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10a      	bne.n	8008656 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008640:	4b09      	ldr	r3, [pc, #36]	; (8008668 <prvProcessTimerOrBlockTask+0x98>)
 8008642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	f3bf 8f6f 	isb	sy
}
 8008650:	e001      	b.n	8008656 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008652:	f7ff f917 	bl	8007884 <xTaskResumeAll>
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000e78 	.word	0x20000e78
 8008664:	20000e7c 	.word	0x20000e7c
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008674:	4b0e      	ldr	r3, [pc, #56]	; (80086b0 <prvGetNextExpireTime+0x44>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <prvGetNextExpireTime+0x16>
 800867e:	2201      	movs	r2, #1
 8008680:	e000      	b.n	8008684 <prvGetNextExpireTime+0x18>
 8008682:	2200      	movs	r2, #0
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d105      	bne.n	800869c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008690:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <prvGetNextExpireTime+0x44>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	60fb      	str	r3, [r7, #12]
 800869a:	e001      	b.n	80086a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80086a0:	68fb      	ldr	r3, [r7, #12]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	20000e74 	.word	0x20000e74

080086b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80086bc:	f7ff f980 	bl	80079c0 <xTaskGetTickCount>
 80086c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80086c2:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <prvSampleTimeNow+0x3c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d205      	bcs.n	80086d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80086cc:	f000 f936 	bl	800893c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	e002      	b.n	80086de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086de:	4a04      	ldr	r2, [pc, #16]	; (80086f0 <prvSampleTimeNow+0x3c>)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80086e4:	68fb      	ldr	r3, [r7, #12]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20000e84 	.word	0x20000e84

080086f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008702:	2300      	movs	r3, #0
 8008704:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	429a      	cmp	r2, r3
 8008718:	d812      	bhi.n	8008740 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	1ad2      	subs	r2, r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	429a      	cmp	r2, r3
 8008726:	d302      	bcc.n	800872e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008728:	2301      	movs	r3, #1
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	e01b      	b.n	8008766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800872e:	4b10      	ldr	r3, [pc, #64]	; (8008770 <prvInsertTimerInActiveList+0x7c>)
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3304      	adds	r3, #4
 8008736:	4619      	mov	r1, r3
 8008738:	4610      	mov	r0, r2
 800873a:	f7fd feee 	bl	800651a <vListInsert>
 800873e:	e012      	b.n	8008766 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	429a      	cmp	r2, r3
 8008746:	d206      	bcs.n	8008756 <prvInsertTimerInActiveList+0x62>
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	429a      	cmp	r2, r3
 800874e:	d302      	bcc.n	8008756 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008750:	2301      	movs	r3, #1
 8008752:	617b      	str	r3, [r7, #20]
 8008754:	e007      	b.n	8008766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008756:	4b07      	ldr	r3, [pc, #28]	; (8008774 <prvInsertTimerInActiveList+0x80>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3304      	adds	r3, #4
 800875e:	4619      	mov	r1, r3
 8008760:	4610      	mov	r0, r2
 8008762:	f7fd feda 	bl	800651a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008766:	697b      	ldr	r3, [r7, #20]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	20000e78 	.word	0x20000e78
 8008774:	20000e74 	.word	0x20000e74

08008778 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08e      	sub	sp, #56	; 0x38
 800877c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800877e:	e0ca      	b.n	8008916 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	da18      	bge.n	80087b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008786:	1d3b      	adds	r3, r7, #4
 8008788:	3304      	adds	r3, #4
 800878a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10a      	bne.n	80087a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	61fb      	str	r3, [r7, #28]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ae:	6850      	ldr	r0, [r2, #4]
 80087b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087b2:	6892      	ldr	r2, [r2, #8]
 80087b4:	4611      	mov	r1, r2
 80087b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f2c0 80aa 	blt.w	8008914 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80087c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d004      	beq.n	80087d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	3304      	adds	r3, #4
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fd fedb 	bl	800658c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087d6:	463b      	mov	r3, r7
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff ff6b 	bl	80086b4 <prvSampleTimeNow>
 80087de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b09      	cmp	r3, #9
 80087e4:	f200 8097 	bhi.w	8008916 <prvProcessReceivedCommands+0x19e>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <prvProcessReceivedCommands+0x78>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008819 	.word	0x08008819
 80087f4:	08008819 	.word	0x08008819
 80087f8:	08008819 	.word	0x08008819
 80087fc:	0800888d 	.word	0x0800888d
 8008800:	080088a1 	.word	0x080088a1
 8008804:	080088eb 	.word	0x080088eb
 8008808:	08008819 	.word	0x08008819
 800880c:	08008819 	.word	0x08008819
 8008810:	0800888d 	.word	0x0800888d
 8008814:	080088a1 	.word	0x080088a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800881e:	f043 0301 	orr.w	r3, r3, #1
 8008822:	b2da      	uxtb	r2, r3
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	18d1      	adds	r1, r2, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008838:	f7ff ff5c 	bl	80086f4 <prvInsertTimerInActiveList>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d069      	beq.n	8008916 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008848:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b00      	cmp	r3, #0
 8008856:	d05e      	beq.n	8008916 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	441a      	add	r2, r3
 8008860:	2300      	movs	r3, #0
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	2300      	movs	r3, #0
 8008866:	2100      	movs	r1, #0
 8008868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800886a:	f7ff fe05 	bl	8008478 <xTimerGenericCommand>
 800886e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d14f      	bne.n	8008916 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	61bb      	str	r3, [r7, #24]
}
 8008888:	bf00      	nop
 800888a:	e7fe      	b.n	800888a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008892:	f023 0301 	bic.w	r3, r3, #1
 8008896:	b2da      	uxtb	r2, r3
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800889e:	e03a      	b.n	8008916 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a6:	f043 0301 	orr.w	r3, r3, #1
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10a      	bne.n	80088d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	617b      	str	r3, [r7, #20]
}
 80088d2:	bf00      	nop
 80088d4:	e7fe      	b.n	80088d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d8:	699a      	ldr	r2, [r3, #24]
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	18d1      	adds	r1, r2, r3
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088e4:	f7ff ff06 	bl	80086f4 <prvInsertTimerInActiveList>
					break;
 80088e8:	e015      	b.n	8008916 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80088ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d103      	bne.n	8008900 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80088f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088fa:	f000 fbe1 	bl	80090c0 <vPortFree>
 80088fe:	e00a      	b.n	8008916 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008906:	f023 0301 	bic.w	r3, r3, #1
 800890a:	b2da      	uxtb	r2, r3
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008912:	e000      	b.n	8008916 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008914:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008916:	4b08      	ldr	r3, [pc, #32]	; (8008938 <prvProcessReceivedCommands+0x1c0>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	1d39      	adds	r1, r7, #4
 800891c:	2200      	movs	r2, #0
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe f9f4 	bl	8006d0c <xQueueReceive>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	f47f af2a 	bne.w	8008780 <prvProcessReceivedCommands+0x8>
	}
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	3730      	adds	r7, #48	; 0x30
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20000e7c 	.word	0x20000e7c

0800893c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008942:	e048      	b.n	80089d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008944:	4b2d      	ldr	r3, [pc, #180]	; (80089fc <prvSwitchTimerLists+0xc0>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800894e:	4b2b      	ldr	r3, [pc, #172]	; (80089fc <prvSwitchTimerLists+0xc0>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3304      	adds	r3, #4
 800895c:	4618      	mov	r0, r3
 800895e:	f7fd fe15 	bl	800658c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008970:	f003 0304 	and.w	r3, r3, #4
 8008974:	2b00      	cmp	r3, #0
 8008976:	d02e      	beq.n	80089d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	4413      	add	r3, r2
 8008980:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	429a      	cmp	r2, r3
 8008988:	d90e      	bls.n	80089a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008996:	4b19      	ldr	r3, [pc, #100]	; (80089fc <prvSwitchTimerLists+0xc0>)
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3304      	adds	r3, #4
 800899e:	4619      	mov	r1, r3
 80089a0:	4610      	mov	r0, r2
 80089a2:	f7fd fdba 	bl	800651a <vListInsert>
 80089a6:	e016      	b.n	80089d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089a8:	2300      	movs	r3, #0
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	2300      	movs	r3, #0
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	2100      	movs	r1, #0
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f7ff fd60 	bl	8008478 <xTimerGenericCommand>
 80089b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10a      	bne.n	80089d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	603b      	str	r3, [r7, #0]
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089d6:	4b09      	ldr	r3, [pc, #36]	; (80089fc <prvSwitchTimerLists+0xc0>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1b1      	bne.n	8008944 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089e0:	4b06      	ldr	r3, [pc, #24]	; (80089fc <prvSwitchTimerLists+0xc0>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80089e6:	4b06      	ldr	r3, [pc, #24]	; (8008a00 <prvSwitchTimerLists+0xc4>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a04      	ldr	r2, [pc, #16]	; (80089fc <prvSwitchTimerLists+0xc0>)
 80089ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80089ee:	4a04      	ldr	r2, [pc, #16]	; (8008a00 <prvSwitchTimerLists+0xc4>)
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	6013      	str	r3, [r2, #0]
}
 80089f4:	bf00      	nop
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	20000e74 	.word	0x20000e74
 8008a00:	20000e78 	.word	0x20000e78

08008a04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a0a:	f000 f96b 	bl	8008ce4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a0e:	4b15      	ldr	r3, [pc, #84]	; (8008a64 <prvCheckForValidListAndQueue+0x60>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d120      	bne.n	8008a58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a16:	4814      	ldr	r0, [pc, #80]	; (8008a68 <prvCheckForValidListAndQueue+0x64>)
 8008a18:	f7fd fd2e 	bl	8006478 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a1c:	4813      	ldr	r0, [pc, #76]	; (8008a6c <prvCheckForValidListAndQueue+0x68>)
 8008a1e:	f7fd fd2b 	bl	8006478 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a22:	4b13      	ldr	r3, [pc, #76]	; (8008a70 <prvCheckForValidListAndQueue+0x6c>)
 8008a24:	4a10      	ldr	r2, [pc, #64]	; (8008a68 <prvCheckForValidListAndQueue+0x64>)
 8008a26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a28:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <prvCheckForValidListAndQueue+0x70>)
 8008a2a:	4a10      	ldr	r2, [pc, #64]	; (8008a6c <prvCheckForValidListAndQueue+0x68>)
 8008a2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a2e:	2300      	movs	r3, #0
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	4b11      	ldr	r3, [pc, #68]	; (8008a78 <prvCheckForValidListAndQueue+0x74>)
 8008a34:	4a11      	ldr	r2, [pc, #68]	; (8008a7c <prvCheckForValidListAndQueue+0x78>)
 8008a36:	2110      	movs	r1, #16
 8008a38:	200a      	movs	r0, #10
 8008a3a:	f7fd fe39 	bl	80066b0 <xQueueGenericCreateStatic>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	4a08      	ldr	r2, [pc, #32]	; (8008a64 <prvCheckForValidListAndQueue+0x60>)
 8008a42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a44:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <prvCheckForValidListAndQueue+0x60>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d005      	beq.n	8008a58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a4c:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <prvCheckForValidListAndQueue+0x60>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	490b      	ldr	r1, [pc, #44]	; (8008a80 <prvCheckForValidListAndQueue+0x7c>)
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fe fc6e 	bl	8007334 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a58:	f000 f974 	bl	8008d44 <vPortExitCritical>
}
 8008a5c:	bf00      	nop
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000e7c 	.word	0x20000e7c
 8008a68:	20000e4c 	.word	0x20000e4c
 8008a6c:	20000e60 	.word	0x20000e60
 8008a70:	20000e74 	.word	0x20000e74
 8008a74:	20000e78 	.word	0x20000e78
 8008a78:	20000f28 	.word	0x20000f28
 8008a7c:	20000e88 	.word	0x20000e88
 8008a80:	0800b4f8 	.word	0x0800b4f8

08008a84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3b04      	subs	r3, #4
 8008a94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3b04      	subs	r3, #4
 8008aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f023 0201 	bic.w	r2, r3, #1
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3b04      	subs	r3, #4
 8008ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ab4:	4a0c      	ldr	r2, [pc, #48]	; (8008ae8 <pxPortInitialiseStack+0x64>)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3b14      	subs	r3, #20
 8008abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3b04      	subs	r3, #4
 8008aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f06f 0202 	mvn.w	r2, #2
 8008ad2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	3b20      	subs	r3, #32
 8008ad8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ada:	68fb      	ldr	r3, [r7, #12]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	08008aed 	.word	0x08008aed

08008aec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008af2:	2300      	movs	r3, #0
 8008af4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008af6:	4b12      	ldr	r3, [pc, #72]	; (8008b40 <prvTaskExitError+0x54>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	d00a      	beq.n	8008b16 <prvTaskExitError+0x2a>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	60fb      	str	r3, [r7, #12]
}
 8008b12:	bf00      	nop
 8008b14:	e7fe      	b.n	8008b14 <prvTaskExitError+0x28>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	60bb      	str	r3, [r7, #8]
}
 8008b28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b2a:	bf00      	nop
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d0fc      	beq.n	8008b2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b32:	bf00      	nop
 8008b34:	bf00      	nop
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	2000000c 	.word	0x2000000c
	...

08008b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b50:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <pxCurrentTCBConst2>)
 8008b52:	6819      	ldr	r1, [r3, #0]
 8008b54:	6808      	ldr	r0, [r1, #0]
 8008b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5a:	f380 8809 	msr	PSP, r0
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f04f 0000 	mov.w	r0, #0
 8008b66:	f380 8811 	msr	BASEPRI, r0
 8008b6a:	4770      	bx	lr
 8008b6c:	f3af 8000 	nop.w

08008b70 <pxCurrentTCBConst2>:
 8008b70:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop

08008b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b78:	4808      	ldr	r0, [pc, #32]	; (8008b9c <prvPortStartFirstTask+0x24>)
 8008b7a:	6800      	ldr	r0, [r0, #0]
 8008b7c:	6800      	ldr	r0, [r0, #0]
 8008b7e:	f380 8808 	msr	MSP, r0
 8008b82:	f04f 0000 	mov.w	r0, #0
 8008b86:	f380 8814 	msr	CONTROL, r0
 8008b8a:	b662      	cpsie	i
 8008b8c:	b661      	cpsie	f
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	df00      	svc	0
 8008b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b9a:	bf00      	nop
 8008b9c:	e000ed08 	.word	0xe000ed08

08008ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ba6:	4b46      	ldr	r3, [pc, #280]	; (8008cc0 <xPortStartScheduler+0x120>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a46      	ldr	r2, [pc, #280]	; (8008cc4 <xPortStartScheduler+0x124>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d10a      	bne.n	8008bc6 <xPortStartScheduler+0x26>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	613b      	str	r3, [r7, #16]
}
 8008bc2:	bf00      	nop
 8008bc4:	e7fe      	b.n	8008bc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008bc6:	4b3e      	ldr	r3, [pc, #248]	; (8008cc0 <xPortStartScheduler+0x120>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a3f      	ldr	r2, [pc, #252]	; (8008cc8 <xPortStartScheduler+0x128>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d10a      	bne.n	8008be6 <xPortStartScheduler+0x46>
	__asm volatile
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	60fb      	str	r3, [r7, #12]
}
 8008be2:	bf00      	nop
 8008be4:	e7fe      	b.n	8008be4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008be6:	4b39      	ldr	r3, [pc, #228]	; (8008ccc <xPortStartScheduler+0x12c>)
 8008be8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	22ff      	movs	r2, #255	; 0xff
 8008bf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	4b31      	ldr	r3, [pc, #196]	; (8008cd0 <xPortStartScheduler+0x130>)
 8008c0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c0e:	4b31      	ldr	r3, [pc, #196]	; (8008cd4 <xPortStartScheduler+0x134>)
 8008c10:	2207      	movs	r2, #7
 8008c12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c14:	e009      	b.n	8008c2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c16:	4b2f      	ldr	r3, [pc, #188]	; (8008cd4 <xPortStartScheduler+0x134>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	4a2d      	ldr	r2, [pc, #180]	; (8008cd4 <xPortStartScheduler+0x134>)
 8008c1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c32:	2b80      	cmp	r3, #128	; 0x80
 8008c34:	d0ef      	beq.n	8008c16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c36:	4b27      	ldr	r3, [pc, #156]	; (8008cd4 <xPortStartScheduler+0x134>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f1c3 0307 	rsb	r3, r3, #7
 8008c3e:	2b04      	cmp	r3, #4
 8008c40:	d00a      	beq.n	8008c58 <xPortStartScheduler+0xb8>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	60bb      	str	r3, [r7, #8]
}
 8008c54:	bf00      	nop
 8008c56:	e7fe      	b.n	8008c56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c58:	4b1e      	ldr	r3, [pc, #120]	; (8008cd4 <xPortStartScheduler+0x134>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	021b      	lsls	r3, r3, #8
 8008c5e:	4a1d      	ldr	r2, [pc, #116]	; (8008cd4 <xPortStartScheduler+0x134>)
 8008c60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c62:	4b1c      	ldr	r3, [pc, #112]	; (8008cd4 <xPortStartScheduler+0x134>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c6a:	4a1a      	ldr	r2, [pc, #104]	; (8008cd4 <xPortStartScheduler+0x134>)
 8008c6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c76:	4b18      	ldr	r3, [pc, #96]	; (8008cd8 <xPortStartScheduler+0x138>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a17      	ldr	r2, [pc, #92]	; (8008cd8 <xPortStartScheduler+0x138>)
 8008c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <xPortStartScheduler+0x138>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a14      	ldr	r2, [pc, #80]	; (8008cd8 <xPortStartScheduler+0x138>)
 8008c88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c8e:	f000 f8dd 	bl	8008e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c92:	4b12      	ldr	r3, [pc, #72]	; (8008cdc <xPortStartScheduler+0x13c>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c98:	f000 f8fc 	bl	8008e94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c9c:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <xPortStartScheduler+0x140>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a0f      	ldr	r2, [pc, #60]	; (8008ce0 <xPortStartScheduler+0x140>)
 8008ca2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ca6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ca8:	f7ff ff66 	bl	8008b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cac:	f7fe ff52 	bl	8007b54 <vTaskSwitchContext>
	prvTaskExitError();
 8008cb0:	f7ff ff1c 	bl	8008aec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	e000ed00 	.word	0xe000ed00
 8008cc4:	410fc271 	.word	0x410fc271
 8008cc8:	410fc270 	.word	0x410fc270
 8008ccc:	e000e400 	.word	0xe000e400
 8008cd0:	20000f78 	.word	0x20000f78
 8008cd4:	20000f7c 	.word	0x20000f7c
 8008cd8:	e000ed20 	.word	0xe000ed20
 8008cdc:	2000000c 	.word	0x2000000c
 8008ce0:	e000ef34 	.word	0xe000ef34

08008ce4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	607b      	str	r3, [r7, #4]
}
 8008cfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008cfe:	4b0f      	ldr	r3, [pc, #60]	; (8008d3c <vPortEnterCritical+0x58>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3301      	adds	r3, #1
 8008d04:	4a0d      	ldr	r2, [pc, #52]	; (8008d3c <vPortEnterCritical+0x58>)
 8008d06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d08:	4b0c      	ldr	r3, [pc, #48]	; (8008d3c <vPortEnterCritical+0x58>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d10f      	bne.n	8008d30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d10:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <vPortEnterCritical+0x5c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00a      	beq.n	8008d30 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	603b      	str	r3, [r7, #0]
}
 8008d2c:	bf00      	nop
 8008d2e:	e7fe      	b.n	8008d2e <vPortEnterCritical+0x4a>
	}
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	2000000c 	.word	0x2000000c
 8008d40:	e000ed04 	.word	0xe000ed04

08008d44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d4a:	4b12      	ldr	r3, [pc, #72]	; (8008d94 <vPortExitCritical+0x50>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10a      	bne.n	8008d68 <vPortExitCritical+0x24>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	607b      	str	r3, [r7, #4]
}
 8008d64:	bf00      	nop
 8008d66:	e7fe      	b.n	8008d66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d68:	4b0a      	ldr	r3, [pc, #40]	; (8008d94 <vPortExitCritical+0x50>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	4a09      	ldr	r2, [pc, #36]	; (8008d94 <vPortExitCritical+0x50>)
 8008d70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d72:	4b08      	ldr	r3, [pc, #32]	; (8008d94 <vPortExitCritical+0x50>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d105      	bne.n	8008d86 <vPortExitCritical+0x42>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	f383 8811 	msr	BASEPRI, r3
}
 8008d84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d86:	bf00      	nop
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	2000000c 	.word	0x2000000c
	...

08008da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008da0:	f3ef 8009 	mrs	r0, PSP
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	4b15      	ldr	r3, [pc, #84]	; (8008e00 <pxCurrentTCBConst>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	f01e 0f10 	tst.w	lr, #16
 8008db0:	bf08      	it	eq
 8008db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dba:	6010      	str	r0, [r2, #0]
 8008dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008dc4:	f380 8811 	msr	BASEPRI, r0
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f7fe fec0 	bl	8007b54 <vTaskSwitchContext>
 8008dd4:	f04f 0000 	mov.w	r0, #0
 8008dd8:	f380 8811 	msr	BASEPRI, r0
 8008ddc:	bc09      	pop	{r0, r3}
 8008dde:	6819      	ldr	r1, [r3, #0]
 8008de0:	6808      	ldr	r0, [r1, #0]
 8008de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de6:	f01e 0f10 	tst.w	lr, #16
 8008dea:	bf08      	it	eq
 8008dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008df0:	f380 8809 	msr	PSP, r0
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	f3af 8000 	nop.w

08008e00 <pxCurrentTCBConst>:
 8008e00:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop

08008e08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	607b      	str	r3, [r7, #4]
}
 8008e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e22:	f7fe fddd 	bl	80079e0 <xTaskIncrementTick>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e2c:	4b06      	ldr	r3, [pc, #24]	; (8008e48 <xPortSysTickHandler+0x40>)
 8008e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	2300      	movs	r3, #0
 8008e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	f383 8811 	msr	BASEPRI, r3
}
 8008e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e40:	bf00      	nop
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e50:	4b0b      	ldr	r3, [pc, #44]	; (8008e80 <vPortSetupTimerInterrupt+0x34>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e56:	4b0b      	ldr	r3, [pc, #44]	; (8008e84 <vPortSetupTimerInterrupt+0x38>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e5c:	4b0a      	ldr	r3, [pc, #40]	; (8008e88 <vPortSetupTimerInterrupt+0x3c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a0a      	ldr	r2, [pc, #40]	; (8008e8c <vPortSetupTimerInterrupt+0x40>)
 8008e62:	fba2 2303 	umull	r2, r3, r2, r3
 8008e66:	099b      	lsrs	r3, r3, #6
 8008e68:	4a09      	ldr	r2, [pc, #36]	; (8008e90 <vPortSetupTimerInterrupt+0x44>)
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e6e:	4b04      	ldr	r3, [pc, #16]	; (8008e80 <vPortSetupTimerInterrupt+0x34>)
 8008e70:	2207      	movs	r2, #7
 8008e72:	601a      	str	r2, [r3, #0]
}
 8008e74:	bf00      	nop
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	e000e010 	.word	0xe000e010
 8008e84:	e000e018 	.word	0xe000e018
 8008e88:	20000000 	.word	0x20000000
 8008e8c:	10624dd3 	.word	0x10624dd3
 8008e90:	e000e014 	.word	0xe000e014

08008e94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ea4 <vPortEnableVFP+0x10>
 8008e98:	6801      	ldr	r1, [r0, #0]
 8008e9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e9e:	6001      	str	r1, [r0, #0]
 8008ea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ea2:	bf00      	nop
 8008ea4:	e000ed88 	.word	0xe000ed88

08008ea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008eae:	f3ef 8305 	mrs	r3, IPSR
 8008eb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b0f      	cmp	r3, #15
 8008eb8:	d914      	bls.n	8008ee4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008eba:	4a17      	ldr	r2, [pc, #92]	; (8008f18 <vPortValidateInterruptPriority+0x70>)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ec4:	4b15      	ldr	r3, [pc, #84]	; (8008f1c <vPortValidateInterruptPriority+0x74>)
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	7afa      	ldrb	r2, [r7, #11]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d20a      	bcs.n	8008ee4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	607b      	str	r3, [r7, #4]
}
 8008ee0:	bf00      	nop
 8008ee2:	e7fe      	b.n	8008ee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ee4:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <vPortValidateInterruptPriority+0x78>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008eec:	4b0d      	ldr	r3, [pc, #52]	; (8008f24 <vPortValidateInterruptPriority+0x7c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d90a      	bls.n	8008f0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	603b      	str	r3, [r7, #0]
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <vPortValidateInterruptPriority+0x60>
	}
 8008f0a:	bf00      	nop
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	e000e3f0 	.word	0xe000e3f0
 8008f1c:	20000f78 	.word	0x20000f78
 8008f20:	e000ed0c 	.word	0xe000ed0c
 8008f24:	20000f7c 	.word	0x20000f7c

08008f28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08a      	sub	sp, #40	; 0x28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f30:	2300      	movs	r3, #0
 8008f32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f34:	f7fe fc98 	bl	8007868 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f38:	4b5b      	ldr	r3, [pc, #364]	; (80090a8 <pvPortMalloc+0x180>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f40:	f000 f920 	bl	8009184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f44:	4b59      	ldr	r3, [pc, #356]	; (80090ac <pvPortMalloc+0x184>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f040 8093 	bne.w	8009078 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d01d      	beq.n	8008f94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008f58:	2208      	movs	r2, #8
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f003 0307 	and.w	r3, r3, #7
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d014      	beq.n	8008f94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f023 0307 	bic.w	r3, r3, #7
 8008f70:	3308      	adds	r3, #8
 8008f72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <pvPortMalloc+0x6c>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	617b      	str	r3, [r7, #20]
}
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d06e      	beq.n	8009078 <pvPortMalloc+0x150>
 8008f9a:	4b45      	ldr	r3, [pc, #276]	; (80090b0 <pvPortMalloc+0x188>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d869      	bhi.n	8009078 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008fa4:	4b43      	ldr	r3, [pc, #268]	; (80090b4 <pvPortMalloc+0x18c>)
 8008fa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008fa8:	4b42      	ldr	r3, [pc, #264]	; (80090b4 <pvPortMalloc+0x18c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fae:	e004      	b.n	8008fba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d903      	bls.n	8008fcc <pvPortMalloc+0xa4>
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1f1      	bne.n	8008fb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008fcc:	4b36      	ldr	r3, [pc, #216]	; (80090a8 <pvPortMalloc+0x180>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d050      	beq.n	8009078 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2208      	movs	r2, #8
 8008fdc:	4413      	add	r3, r2
 8008fde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	1ad2      	subs	r2, r2, r3
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d91f      	bls.n	8009038 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <pvPortMalloc+0xf8>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	613b      	str	r3, [r7, #16]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	1ad2      	subs	r2, r2, r3
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009032:	69b8      	ldr	r0, [r7, #24]
 8009034:	f000 f908 	bl	8009248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009038:	4b1d      	ldr	r3, [pc, #116]	; (80090b0 <pvPortMalloc+0x188>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	4a1b      	ldr	r2, [pc, #108]	; (80090b0 <pvPortMalloc+0x188>)
 8009044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009046:	4b1a      	ldr	r3, [pc, #104]	; (80090b0 <pvPortMalloc+0x188>)
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	4b1b      	ldr	r3, [pc, #108]	; (80090b8 <pvPortMalloc+0x190>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	429a      	cmp	r2, r3
 8009050:	d203      	bcs.n	800905a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009052:	4b17      	ldr	r3, [pc, #92]	; (80090b0 <pvPortMalloc+0x188>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a18      	ldr	r2, [pc, #96]	; (80090b8 <pvPortMalloc+0x190>)
 8009058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	4b13      	ldr	r3, [pc, #76]	; (80090ac <pvPortMalloc+0x184>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	431a      	orrs	r2, r3
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800906e:	4b13      	ldr	r3, [pc, #76]	; (80090bc <pvPortMalloc+0x194>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3301      	adds	r3, #1
 8009074:	4a11      	ldr	r2, [pc, #68]	; (80090bc <pvPortMalloc+0x194>)
 8009076:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009078:	f7fe fc04 	bl	8007884 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00a      	beq.n	800909c <pvPortMalloc+0x174>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	60fb      	str	r3, [r7, #12]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <pvPortMalloc+0x172>
	return pvReturn;
 800909c:	69fb      	ldr	r3, [r7, #28]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3728      	adds	r7, #40	; 0x28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20008c88 	.word	0x20008c88
 80090ac:	20008c9c 	.word	0x20008c9c
 80090b0:	20008c8c 	.word	0x20008c8c
 80090b4:	20008c80 	.word	0x20008c80
 80090b8:	20008c90 	.word	0x20008c90
 80090bc:	20008c94 	.word	0x20008c94

080090c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d04d      	beq.n	800916e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090d2:	2308      	movs	r3, #8
 80090d4:	425b      	negs	r3, r3
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	4413      	add	r3, r2
 80090da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	4b24      	ldr	r3, [pc, #144]	; (8009178 <vPortFree+0xb8>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4013      	ands	r3, r2
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10a      	bne.n	8009104 <vPortFree+0x44>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	60fb      	str	r3, [r7, #12]
}
 8009100:	bf00      	nop
 8009102:	e7fe      	b.n	8009102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00a      	beq.n	8009122 <vPortFree+0x62>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	60bb      	str	r3, [r7, #8]
}
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	4b14      	ldr	r3, [pc, #80]	; (8009178 <vPortFree+0xb8>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4013      	ands	r3, r2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d01e      	beq.n	800916e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d11a      	bne.n	800916e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	4b0e      	ldr	r3, [pc, #56]	; (8009178 <vPortFree+0xb8>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	43db      	mvns	r3, r3
 8009142:	401a      	ands	r2, r3
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009148:	f7fe fb8e 	bl	8007868 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	4b0a      	ldr	r3, [pc, #40]	; (800917c <vPortFree+0xbc>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4413      	add	r3, r2
 8009156:	4a09      	ldr	r2, [pc, #36]	; (800917c <vPortFree+0xbc>)
 8009158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800915a:	6938      	ldr	r0, [r7, #16]
 800915c:	f000 f874 	bl	8009248 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009160:	4b07      	ldr	r3, [pc, #28]	; (8009180 <vPortFree+0xc0>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3301      	adds	r3, #1
 8009166:	4a06      	ldr	r2, [pc, #24]	; (8009180 <vPortFree+0xc0>)
 8009168:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800916a:	f7fe fb8b 	bl	8007884 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800916e:	bf00      	nop
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20008c9c 	.word	0x20008c9c
 800917c:	20008c8c 	.word	0x20008c8c
 8009180:	20008c98 	.word	0x20008c98

08009184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800918a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800918e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009190:	4b27      	ldr	r3, [pc, #156]	; (8009230 <prvHeapInit+0xac>)
 8009192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00c      	beq.n	80091b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3307      	adds	r3, #7
 80091a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f023 0307 	bic.w	r3, r3, #7
 80091aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	4a1f      	ldr	r2, [pc, #124]	; (8009230 <prvHeapInit+0xac>)
 80091b4:	4413      	add	r3, r2
 80091b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091bc:	4a1d      	ldr	r2, [pc, #116]	; (8009234 <prvHeapInit+0xb0>)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091c2:	4b1c      	ldr	r3, [pc, #112]	; (8009234 <prvHeapInit+0xb0>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	4413      	add	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091d0:	2208      	movs	r2, #8
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	1a9b      	subs	r3, r3, r2
 80091d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 0307 	bic.w	r3, r3, #7
 80091de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4a15      	ldr	r2, [pc, #84]	; (8009238 <prvHeapInit+0xb4>)
 80091e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091e6:	4b14      	ldr	r3, [pc, #80]	; (8009238 <prvHeapInit+0xb4>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2200      	movs	r2, #0
 80091ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091ee:	4b12      	ldr	r3, [pc, #72]	; (8009238 <prvHeapInit+0xb4>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2200      	movs	r2, #0
 80091f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	1ad2      	subs	r2, r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009204:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <prvHeapInit+0xb4>)
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	4a0a      	ldr	r2, [pc, #40]	; (800923c <prvHeapInit+0xb8>)
 8009212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	4a09      	ldr	r2, [pc, #36]	; (8009240 <prvHeapInit+0xbc>)
 800921a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800921c:	4b09      	ldr	r3, [pc, #36]	; (8009244 <prvHeapInit+0xc0>)
 800921e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009222:	601a      	str	r2, [r3, #0]
}
 8009224:	bf00      	nop
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	20000f80 	.word	0x20000f80
 8009234:	20008c80 	.word	0x20008c80
 8009238:	20008c88 	.word	0x20008c88
 800923c:	20008c90 	.word	0x20008c90
 8009240:	20008c8c 	.word	0x20008c8c
 8009244:	20008c9c 	.word	0x20008c9c

08009248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009250:	4b28      	ldr	r3, [pc, #160]	; (80092f4 <prvInsertBlockIntoFreeList+0xac>)
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	e002      	b.n	800925c <prvInsertBlockIntoFreeList+0x14>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	429a      	cmp	r2, r3
 8009264:	d8f7      	bhi.n	8009256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	4413      	add	r3, r2
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	429a      	cmp	r2, r3
 8009276:	d108      	bne.n	800928a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	441a      	add	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	441a      	add	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	d118      	bne.n	80092d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	4b15      	ldr	r3, [pc, #84]	; (80092f8 <prvInsertBlockIntoFreeList+0xb0>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d00d      	beq.n	80092c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	441a      	add	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	e008      	b.n	80092d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092c6:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <prvInsertBlockIntoFreeList+0xb0>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	e003      	b.n	80092d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d002      	beq.n	80092e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092e6:	bf00      	nop
 80092e8:	3714      	adds	r7, #20
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	20008c80 	.word	0x20008c80
 80092f8:	20008c88 	.word	0x20008c88

080092fc <__errno>:
 80092fc:	4b01      	ldr	r3, [pc, #4]	; (8009304 <__errno+0x8>)
 80092fe:	6818      	ldr	r0, [r3, #0]
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20000010 	.word	0x20000010

08009308 <_fwrite_r>:
 8009308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800930c:	9c08      	ldr	r4, [sp, #32]
 800930e:	468a      	mov	sl, r1
 8009310:	4690      	mov	r8, r2
 8009312:	fb02 f903 	mul.w	r9, r2, r3
 8009316:	4605      	mov	r5, r0
 8009318:	b118      	cbz	r0, 8009322 <_fwrite_r+0x1a>
 800931a:	6983      	ldr	r3, [r0, #24]
 800931c:	b90b      	cbnz	r3, 8009322 <_fwrite_r+0x1a>
 800931e:	f000 fc1d 	bl	8009b5c <__sinit>
 8009322:	4b26      	ldr	r3, [pc, #152]	; (80093bc <_fwrite_r+0xb4>)
 8009324:	429c      	cmp	r4, r3
 8009326:	d123      	bne.n	8009370 <_fwrite_r+0x68>
 8009328:	686c      	ldr	r4, [r5, #4]
 800932a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800932c:	07de      	lsls	r6, r3, #31
 800932e:	d405      	bmi.n	800933c <_fwrite_r+0x34>
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	0598      	lsls	r0, r3, #22
 8009334:	d402      	bmi.n	800933c <_fwrite_r+0x34>
 8009336:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009338:	f000 f879 	bl	800942e <__retarget_lock_acquire_recursive>
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	0719      	lsls	r1, r3, #28
 8009340:	d520      	bpl.n	8009384 <_fwrite_r+0x7c>
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	b1f3      	cbz	r3, 8009384 <_fwrite_r+0x7c>
 8009346:	2600      	movs	r6, #0
 8009348:	454e      	cmp	r6, r9
 800934a:	d029      	beq.n	80093a0 <_fwrite_r+0x98>
 800934c:	68a7      	ldr	r7, [r4, #8]
 800934e:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8009352:	3f01      	subs	r7, #1
 8009354:	2f00      	cmp	r7, #0
 8009356:	60a7      	str	r7, [r4, #8]
 8009358:	da04      	bge.n	8009364 <_fwrite_r+0x5c>
 800935a:	69a3      	ldr	r3, [r4, #24]
 800935c:	429f      	cmp	r7, r3
 800935e:	db19      	blt.n	8009394 <_fwrite_r+0x8c>
 8009360:	290a      	cmp	r1, #10
 8009362:	d017      	beq.n	8009394 <_fwrite_r+0x8c>
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	6022      	str	r2, [r4, #0]
 800936a:	7019      	strb	r1, [r3, #0]
 800936c:	3601      	adds	r6, #1
 800936e:	e7eb      	b.n	8009348 <_fwrite_r+0x40>
 8009370:	4b13      	ldr	r3, [pc, #76]	; (80093c0 <_fwrite_r+0xb8>)
 8009372:	429c      	cmp	r4, r3
 8009374:	d101      	bne.n	800937a <_fwrite_r+0x72>
 8009376:	68ac      	ldr	r4, [r5, #8]
 8009378:	e7d7      	b.n	800932a <_fwrite_r+0x22>
 800937a:	4b12      	ldr	r3, [pc, #72]	; (80093c4 <_fwrite_r+0xbc>)
 800937c:	429c      	cmp	r4, r3
 800937e:	bf08      	it	eq
 8009380:	68ec      	ldreq	r4, [r5, #12]
 8009382:	e7d2      	b.n	800932a <_fwrite_r+0x22>
 8009384:	4621      	mov	r1, r4
 8009386:	4628      	mov	r0, r5
 8009388:	f000 fa42 	bl	8009810 <__swsetup_r>
 800938c:	2800      	cmp	r0, #0
 800938e:	d0da      	beq.n	8009346 <_fwrite_r+0x3e>
 8009390:	2600      	movs	r6, #0
 8009392:	e005      	b.n	80093a0 <_fwrite_r+0x98>
 8009394:	4622      	mov	r2, r4
 8009396:	4628      	mov	r0, r5
 8009398:	f000 f9e8 	bl	800976c <__swbuf_r>
 800939c:	3001      	adds	r0, #1
 800939e:	d1e5      	bne.n	800936c <_fwrite_r+0x64>
 80093a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093a2:	07da      	lsls	r2, r3, #31
 80093a4:	d405      	bmi.n	80093b2 <_fwrite_r+0xaa>
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	059b      	lsls	r3, r3, #22
 80093aa:	d402      	bmi.n	80093b2 <_fwrite_r+0xaa>
 80093ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ae:	f000 f83f 	bl	8009430 <__retarget_lock_release_recursive>
 80093b2:	fbb6 f0f8 	udiv	r0, r6, r8
 80093b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ba:	bf00      	nop
 80093bc:	0800b7ec 	.word	0x0800b7ec
 80093c0:	0800b80c 	.word	0x0800b80c
 80093c4:	0800b7cc 	.word	0x0800b7cc

080093c8 <fwrite>:
 80093c8:	b507      	push	{r0, r1, r2, lr}
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	4613      	mov	r3, r2
 80093ce:	460a      	mov	r2, r1
 80093d0:	4601      	mov	r1, r0
 80093d2:	4803      	ldr	r0, [pc, #12]	; (80093e0 <fwrite+0x18>)
 80093d4:	6800      	ldr	r0, [r0, #0]
 80093d6:	f7ff ff97 	bl	8009308 <_fwrite_r>
 80093da:	b003      	add	sp, #12
 80093dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80093e0:	20000010 	.word	0x20000010

080093e4 <__libc_init_array>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	4d0d      	ldr	r5, [pc, #52]	; (800941c <__libc_init_array+0x38>)
 80093e8:	4c0d      	ldr	r4, [pc, #52]	; (8009420 <__libc_init_array+0x3c>)
 80093ea:	1b64      	subs	r4, r4, r5
 80093ec:	10a4      	asrs	r4, r4, #2
 80093ee:	2600      	movs	r6, #0
 80093f0:	42a6      	cmp	r6, r4
 80093f2:	d109      	bne.n	8009408 <__libc_init_array+0x24>
 80093f4:	4d0b      	ldr	r5, [pc, #44]	; (8009424 <__libc_init_array+0x40>)
 80093f6:	4c0c      	ldr	r4, [pc, #48]	; (8009428 <__libc_init_array+0x44>)
 80093f8:	f001 ffec 	bl	800b3d4 <_init>
 80093fc:	1b64      	subs	r4, r4, r5
 80093fe:	10a4      	asrs	r4, r4, #2
 8009400:	2600      	movs	r6, #0
 8009402:	42a6      	cmp	r6, r4
 8009404:	d105      	bne.n	8009412 <__libc_init_array+0x2e>
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	f855 3b04 	ldr.w	r3, [r5], #4
 800940c:	4798      	blx	r3
 800940e:	3601      	adds	r6, #1
 8009410:	e7ee      	b.n	80093f0 <__libc_init_array+0xc>
 8009412:	f855 3b04 	ldr.w	r3, [r5], #4
 8009416:	4798      	blx	r3
 8009418:	3601      	adds	r6, #1
 800941a:	e7f2      	b.n	8009402 <__libc_init_array+0x1e>
 800941c:	0800b898 	.word	0x0800b898
 8009420:	0800b898 	.word	0x0800b898
 8009424:	0800b898 	.word	0x0800b898
 8009428:	0800b89c 	.word	0x0800b89c

0800942c <__retarget_lock_init_recursive>:
 800942c:	4770      	bx	lr

0800942e <__retarget_lock_acquire_recursive>:
 800942e:	4770      	bx	lr

08009430 <__retarget_lock_release_recursive>:
 8009430:	4770      	bx	lr
	...

08009434 <malloc>:
 8009434:	4b02      	ldr	r3, [pc, #8]	; (8009440 <malloc+0xc>)
 8009436:	4601      	mov	r1, r0
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	f000 b88d 	b.w	8009558 <_malloc_r>
 800943e:	bf00      	nop
 8009440:	20000010 	.word	0x20000010

08009444 <free>:
 8009444:	4b02      	ldr	r3, [pc, #8]	; (8009450 <free+0xc>)
 8009446:	4601      	mov	r1, r0
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	f000 b819 	b.w	8009480 <_free_r>
 800944e:	bf00      	nop
 8009450:	20000010 	.word	0x20000010

08009454 <memcpy>:
 8009454:	440a      	add	r2, r1
 8009456:	4291      	cmp	r1, r2
 8009458:	f100 33ff 	add.w	r3, r0, #4294967295
 800945c:	d100      	bne.n	8009460 <memcpy+0xc>
 800945e:	4770      	bx	lr
 8009460:	b510      	push	{r4, lr}
 8009462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800946a:	4291      	cmp	r1, r2
 800946c:	d1f9      	bne.n	8009462 <memcpy+0xe>
 800946e:	bd10      	pop	{r4, pc}

08009470 <memset>:
 8009470:	4402      	add	r2, r0
 8009472:	4603      	mov	r3, r0
 8009474:	4293      	cmp	r3, r2
 8009476:	d100      	bne.n	800947a <memset+0xa>
 8009478:	4770      	bx	lr
 800947a:	f803 1b01 	strb.w	r1, [r3], #1
 800947e:	e7f9      	b.n	8009474 <memset+0x4>

08009480 <_free_r>:
 8009480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009482:	2900      	cmp	r1, #0
 8009484:	d044      	beq.n	8009510 <_free_r+0x90>
 8009486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948a:	9001      	str	r0, [sp, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f1a1 0404 	sub.w	r4, r1, #4
 8009492:	bfb8      	it	lt
 8009494:	18e4      	addlt	r4, r4, r3
 8009496:	f000 fc89 	bl	8009dac <__malloc_lock>
 800949a:	4a1e      	ldr	r2, [pc, #120]	; (8009514 <_free_r+0x94>)
 800949c:	9801      	ldr	r0, [sp, #4]
 800949e:	6813      	ldr	r3, [r2, #0]
 80094a0:	b933      	cbnz	r3, 80094b0 <_free_r+0x30>
 80094a2:	6063      	str	r3, [r4, #4]
 80094a4:	6014      	str	r4, [r2, #0]
 80094a6:	b003      	add	sp, #12
 80094a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094ac:	f000 bc84 	b.w	8009db8 <__malloc_unlock>
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	d908      	bls.n	80094c6 <_free_r+0x46>
 80094b4:	6825      	ldr	r5, [r4, #0]
 80094b6:	1961      	adds	r1, r4, r5
 80094b8:	428b      	cmp	r3, r1
 80094ba:	bf01      	itttt	eq
 80094bc:	6819      	ldreq	r1, [r3, #0]
 80094be:	685b      	ldreq	r3, [r3, #4]
 80094c0:	1949      	addeq	r1, r1, r5
 80094c2:	6021      	streq	r1, [r4, #0]
 80094c4:	e7ed      	b.n	80094a2 <_free_r+0x22>
 80094c6:	461a      	mov	r2, r3
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	b10b      	cbz	r3, 80094d0 <_free_r+0x50>
 80094cc:	42a3      	cmp	r3, r4
 80094ce:	d9fa      	bls.n	80094c6 <_free_r+0x46>
 80094d0:	6811      	ldr	r1, [r2, #0]
 80094d2:	1855      	adds	r5, r2, r1
 80094d4:	42a5      	cmp	r5, r4
 80094d6:	d10b      	bne.n	80094f0 <_free_r+0x70>
 80094d8:	6824      	ldr	r4, [r4, #0]
 80094da:	4421      	add	r1, r4
 80094dc:	1854      	adds	r4, r2, r1
 80094de:	42a3      	cmp	r3, r4
 80094e0:	6011      	str	r1, [r2, #0]
 80094e2:	d1e0      	bne.n	80094a6 <_free_r+0x26>
 80094e4:	681c      	ldr	r4, [r3, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	6053      	str	r3, [r2, #4]
 80094ea:	4421      	add	r1, r4
 80094ec:	6011      	str	r1, [r2, #0]
 80094ee:	e7da      	b.n	80094a6 <_free_r+0x26>
 80094f0:	d902      	bls.n	80094f8 <_free_r+0x78>
 80094f2:	230c      	movs	r3, #12
 80094f4:	6003      	str	r3, [r0, #0]
 80094f6:	e7d6      	b.n	80094a6 <_free_r+0x26>
 80094f8:	6825      	ldr	r5, [r4, #0]
 80094fa:	1961      	adds	r1, r4, r5
 80094fc:	428b      	cmp	r3, r1
 80094fe:	bf04      	itt	eq
 8009500:	6819      	ldreq	r1, [r3, #0]
 8009502:	685b      	ldreq	r3, [r3, #4]
 8009504:	6063      	str	r3, [r4, #4]
 8009506:	bf04      	itt	eq
 8009508:	1949      	addeq	r1, r1, r5
 800950a:	6021      	streq	r1, [r4, #0]
 800950c:	6054      	str	r4, [r2, #4]
 800950e:	e7ca      	b.n	80094a6 <_free_r+0x26>
 8009510:	b003      	add	sp, #12
 8009512:	bd30      	pop	{r4, r5, pc}
 8009514:	20008ca4 	.word	0x20008ca4

08009518 <sbrk_aligned>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	4e0e      	ldr	r6, [pc, #56]	; (8009554 <sbrk_aligned+0x3c>)
 800951c:	460c      	mov	r4, r1
 800951e:	6831      	ldr	r1, [r6, #0]
 8009520:	4605      	mov	r5, r0
 8009522:	b911      	cbnz	r1, 800952a <sbrk_aligned+0x12>
 8009524:	f000 f8f8 	bl	8009718 <_sbrk_r>
 8009528:	6030      	str	r0, [r6, #0]
 800952a:	4621      	mov	r1, r4
 800952c:	4628      	mov	r0, r5
 800952e:	f000 f8f3 	bl	8009718 <_sbrk_r>
 8009532:	1c43      	adds	r3, r0, #1
 8009534:	d00a      	beq.n	800954c <sbrk_aligned+0x34>
 8009536:	1cc4      	adds	r4, r0, #3
 8009538:	f024 0403 	bic.w	r4, r4, #3
 800953c:	42a0      	cmp	r0, r4
 800953e:	d007      	beq.n	8009550 <sbrk_aligned+0x38>
 8009540:	1a21      	subs	r1, r4, r0
 8009542:	4628      	mov	r0, r5
 8009544:	f000 f8e8 	bl	8009718 <_sbrk_r>
 8009548:	3001      	adds	r0, #1
 800954a:	d101      	bne.n	8009550 <sbrk_aligned+0x38>
 800954c:	f04f 34ff 	mov.w	r4, #4294967295
 8009550:	4620      	mov	r0, r4
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	20008ca8 	.word	0x20008ca8

08009558 <_malloc_r>:
 8009558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800955c:	1ccd      	adds	r5, r1, #3
 800955e:	f025 0503 	bic.w	r5, r5, #3
 8009562:	3508      	adds	r5, #8
 8009564:	2d0c      	cmp	r5, #12
 8009566:	bf38      	it	cc
 8009568:	250c      	movcc	r5, #12
 800956a:	2d00      	cmp	r5, #0
 800956c:	4607      	mov	r7, r0
 800956e:	db01      	blt.n	8009574 <_malloc_r+0x1c>
 8009570:	42a9      	cmp	r1, r5
 8009572:	d905      	bls.n	8009580 <_malloc_r+0x28>
 8009574:	230c      	movs	r3, #12
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	2600      	movs	r6, #0
 800957a:	4630      	mov	r0, r6
 800957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009580:	4e2e      	ldr	r6, [pc, #184]	; (800963c <_malloc_r+0xe4>)
 8009582:	f000 fc13 	bl	8009dac <__malloc_lock>
 8009586:	6833      	ldr	r3, [r6, #0]
 8009588:	461c      	mov	r4, r3
 800958a:	bb34      	cbnz	r4, 80095da <_malloc_r+0x82>
 800958c:	4629      	mov	r1, r5
 800958e:	4638      	mov	r0, r7
 8009590:	f7ff ffc2 	bl	8009518 <sbrk_aligned>
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	4604      	mov	r4, r0
 8009598:	d14d      	bne.n	8009636 <_malloc_r+0xde>
 800959a:	6834      	ldr	r4, [r6, #0]
 800959c:	4626      	mov	r6, r4
 800959e:	2e00      	cmp	r6, #0
 80095a0:	d140      	bne.n	8009624 <_malloc_r+0xcc>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	4631      	mov	r1, r6
 80095a6:	4638      	mov	r0, r7
 80095a8:	eb04 0803 	add.w	r8, r4, r3
 80095ac:	f000 f8b4 	bl	8009718 <_sbrk_r>
 80095b0:	4580      	cmp	r8, r0
 80095b2:	d13a      	bne.n	800962a <_malloc_r+0xd2>
 80095b4:	6821      	ldr	r1, [r4, #0]
 80095b6:	3503      	adds	r5, #3
 80095b8:	1a6d      	subs	r5, r5, r1
 80095ba:	f025 0503 	bic.w	r5, r5, #3
 80095be:	3508      	adds	r5, #8
 80095c0:	2d0c      	cmp	r5, #12
 80095c2:	bf38      	it	cc
 80095c4:	250c      	movcc	r5, #12
 80095c6:	4629      	mov	r1, r5
 80095c8:	4638      	mov	r0, r7
 80095ca:	f7ff ffa5 	bl	8009518 <sbrk_aligned>
 80095ce:	3001      	adds	r0, #1
 80095d0:	d02b      	beq.n	800962a <_malloc_r+0xd2>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	442b      	add	r3, r5
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	e00e      	b.n	80095f8 <_malloc_r+0xa0>
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	1b52      	subs	r2, r2, r5
 80095de:	d41e      	bmi.n	800961e <_malloc_r+0xc6>
 80095e0:	2a0b      	cmp	r2, #11
 80095e2:	d916      	bls.n	8009612 <_malloc_r+0xba>
 80095e4:	1961      	adds	r1, r4, r5
 80095e6:	42a3      	cmp	r3, r4
 80095e8:	6025      	str	r5, [r4, #0]
 80095ea:	bf18      	it	ne
 80095ec:	6059      	strne	r1, [r3, #4]
 80095ee:	6863      	ldr	r3, [r4, #4]
 80095f0:	bf08      	it	eq
 80095f2:	6031      	streq	r1, [r6, #0]
 80095f4:	5162      	str	r2, [r4, r5]
 80095f6:	604b      	str	r3, [r1, #4]
 80095f8:	4638      	mov	r0, r7
 80095fa:	f104 060b 	add.w	r6, r4, #11
 80095fe:	f000 fbdb 	bl	8009db8 <__malloc_unlock>
 8009602:	f026 0607 	bic.w	r6, r6, #7
 8009606:	1d23      	adds	r3, r4, #4
 8009608:	1af2      	subs	r2, r6, r3
 800960a:	d0b6      	beq.n	800957a <_malloc_r+0x22>
 800960c:	1b9b      	subs	r3, r3, r6
 800960e:	50a3      	str	r3, [r4, r2]
 8009610:	e7b3      	b.n	800957a <_malloc_r+0x22>
 8009612:	6862      	ldr	r2, [r4, #4]
 8009614:	42a3      	cmp	r3, r4
 8009616:	bf0c      	ite	eq
 8009618:	6032      	streq	r2, [r6, #0]
 800961a:	605a      	strne	r2, [r3, #4]
 800961c:	e7ec      	b.n	80095f8 <_malloc_r+0xa0>
 800961e:	4623      	mov	r3, r4
 8009620:	6864      	ldr	r4, [r4, #4]
 8009622:	e7b2      	b.n	800958a <_malloc_r+0x32>
 8009624:	4634      	mov	r4, r6
 8009626:	6876      	ldr	r6, [r6, #4]
 8009628:	e7b9      	b.n	800959e <_malloc_r+0x46>
 800962a:	230c      	movs	r3, #12
 800962c:	603b      	str	r3, [r7, #0]
 800962e:	4638      	mov	r0, r7
 8009630:	f000 fbc2 	bl	8009db8 <__malloc_unlock>
 8009634:	e7a1      	b.n	800957a <_malloc_r+0x22>
 8009636:	6025      	str	r5, [r4, #0]
 8009638:	e7de      	b.n	80095f8 <_malloc_r+0xa0>
 800963a:	bf00      	nop
 800963c:	20008ca4 	.word	0x20008ca4

08009640 <srand>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4b10      	ldr	r3, [pc, #64]	; (8009684 <srand+0x44>)
 8009644:	681d      	ldr	r5, [r3, #0]
 8009646:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009648:	4604      	mov	r4, r0
 800964a:	b9b3      	cbnz	r3, 800967a <srand+0x3a>
 800964c:	2018      	movs	r0, #24
 800964e:	f7ff fef1 	bl	8009434 <malloc>
 8009652:	4602      	mov	r2, r0
 8009654:	63a8      	str	r0, [r5, #56]	; 0x38
 8009656:	b920      	cbnz	r0, 8009662 <srand+0x22>
 8009658:	4b0b      	ldr	r3, [pc, #44]	; (8009688 <srand+0x48>)
 800965a:	480c      	ldr	r0, [pc, #48]	; (800968c <srand+0x4c>)
 800965c:	2142      	movs	r1, #66	; 0x42
 800965e:	f000 f945 	bl	80098ec <__assert_func>
 8009662:	490b      	ldr	r1, [pc, #44]	; (8009690 <srand+0x50>)
 8009664:	4b0b      	ldr	r3, [pc, #44]	; (8009694 <srand+0x54>)
 8009666:	e9c0 1300 	strd	r1, r3, [r0]
 800966a:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <srand+0x58>)
 800966c:	6083      	str	r3, [r0, #8]
 800966e:	230b      	movs	r3, #11
 8009670:	8183      	strh	r3, [r0, #12]
 8009672:	2100      	movs	r1, #0
 8009674:	2001      	movs	r0, #1
 8009676:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800967a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800967c:	2200      	movs	r2, #0
 800967e:	611c      	str	r4, [r3, #16]
 8009680:	615a      	str	r2, [r3, #20]
 8009682:	bd38      	pop	{r3, r4, r5, pc}
 8009684:	20000010 	.word	0x20000010
 8009688:	0800b71c 	.word	0x0800b71c
 800968c:	0800b733 	.word	0x0800b733
 8009690:	abcd330e 	.word	0xabcd330e
 8009694:	e66d1234 	.word	0xe66d1234
 8009698:	0005deec 	.word	0x0005deec

0800969c <rand>:
 800969c:	4b16      	ldr	r3, [pc, #88]	; (80096f8 <rand+0x5c>)
 800969e:	b510      	push	{r4, lr}
 80096a0:	681c      	ldr	r4, [r3, #0]
 80096a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096a4:	b9b3      	cbnz	r3, 80096d4 <rand+0x38>
 80096a6:	2018      	movs	r0, #24
 80096a8:	f7ff fec4 	bl	8009434 <malloc>
 80096ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80096ae:	b928      	cbnz	r0, 80096bc <rand+0x20>
 80096b0:	4602      	mov	r2, r0
 80096b2:	4b12      	ldr	r3, [pc, #72]	; (80096fc <rand+0x60>)
 80096b4:	4812      	ldr	r0, [pc, #72]	; (8009700 <rand+0x64>)
 80096b6:	214e      	movs	r1, #78	; 0x4e
 80096b8:	f000 f918 	bl	80098ec <__assert_func>
 80096bc:	4a11      	ldr	r2, [pc, #68]	; (8009704 <rand+0x68>)
 80096be:	4b12      	ldr	r3, [pc, #72]	; (8009708 <rand+0x6c>)
 80096c0:	e9c0 2300 	strd	r2, r3, [r0]
 80096c4:	4b11      	ldr	r3, [pc, #68]	; (800970c <rand+0x70>)
 80096c6:	6083      	str	r3, [r0, #8]
 80096c8:	230b      	movs	r3, #11
 80096ca:	8183      	strh	r3, [r0, #12]
 80096cc:	2201      	movs	r2, #1
 80096ce:	2300      	movs	r3, #0
 80096d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80096d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80096d6:	4a0e      	ldr	r2, [pc, #56]	; (8009710 <rand+0x74>)
 80096d8:	6920      	ldr	r0, [r4, #16]
 80096da:	6963      	ldr	r3, [r4, #20]
 80096dc:	490d      	ldr	r1, [pc, #52]	; (8009714 <rand+0x78>)
 80096de:	4342      	muls	r2, r0
 80096e0:	fb01 2203 	mla	r2, r1, r3, r2
 80096e4:	fba0 0101 	umull	r0, r1, r0, r1
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	eb42 0001 	adc.w	r0, r2, r1
 80096ee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80096f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80096f6:	bd10      	pop	{r4, pc}
 80096f8:	20000010 	.word	0x20000010
 80096fc:	0800b71c 	.word	0x0800b71c
 8009700:	0800b733 	.word	0x0800b733
 8009704:	abcd330e 	.word	0xabcd330e
 8009708:	e66d1234 	.word	0xe66d1234
 800970c:	0005deec 	.word	0x0005deec
 8009710:	5851f42d 	.word	0x5851f42d
 8009714:	4c957f2d 	.word	0x4c957f2d

08009718 <_sbrk_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4d06      	ldr	r5, [pc, #24]	; (8009734 <_sbrk_r+0x1c>)
 800971c:	2300      	movs	r3, #0
 800971e:	4604      	mov	r4, r0
 8009720:	4608      	mov	r0, r1
 8009722:	602b      	str	r3, [r5, #0]
 8009724:	f7f9 fb92 	bl	8002e4c <_sbrk>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	d102      	bne.n	8009732 <_sbrk_r+0x1a>
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	b103      	cbz	r3, 8009732 <_sbrk_r+0x1a>
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	bd38      	pop	{r3, r4, r5, pc}
 8009734:	20008cac 	.word	0x20008cac

08009738 <time>:
 8009738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800973a:	4b0b      	ldr	r3, [pc, #44]	; (8009768 <time+0x30>)
 800973c:	2200      	movs	r2, #0
 800973e:	4669      	mov	r1, sp
 8009740:	4604      	mov	r4, r0
 8009742:	6818      	ldr	r0, [r3, #0]
 8009744:	f000 faba 	bl	8009cbc <_gettimeofday_r>
 8009748:	2800      	cmp	r0, #0
 800974a:	bfbe      	ittt	lt
 800974c:	f04f 32ff 	movlt.w	r2, #4294967295
 8009750:	f04f 33ff 	movlt.w	r3, #4294967295
 8009754:	e9cd 2300 	strdlt	r2, r3, [sp]
 8009758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800975c:	b10c      	cbz	r4, 8009762 <time+0x2a>
 800975e:	e9c4 0100 	strd	r0, r1, [r4]
 8009762:	b004      	add	sp, #16
 8009764:	bd10      	pop	{r4, pc}
 8009766:	bf00      	nop
 8009768:	20000010 	.word	0x20000010

0800976c <__swbuf_r>:
 800976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976e:	460e      	mov	r6, r1
 8009770:	4614      	mov	r4, r2
 8009772:	4605      	mov	r5, r0
 8009774:	b118      	cbz	r0, 800977e <__swbuf_r+0x12>
 8009776:	6983      	ldr	r3, [r0, #24]
 8009778:	b90b      	cbnz	r3, 800977e <__swbuf_r+0x12>
 800977a:	f000 f9ef 	bl	8009b5c <__sinit>
 800977e:	4b21      	ldr	r3, [pc, #132]	; (8009804 <__swbuf_r+0x98>)
 8009780:	429c      	cmp	r4, r3
 8009782:	d12b      	bne.n	80097dc <__swbuf_r+0x70>
 8009784:	686c      	ldr	r4, [r5, #4]
 8009786:	69a3      	ldr	r3, [r4, #24]
 8009788:	60a3      	str	r3, [r4, #8]
 800978a:	89a3      	ldrh	r3, [r4, #12]
 800978c:	071a      	lsls	r2, r3, #28
 800978e:	d52f      	bpl.n	80097f0 <__swbuf_r+0x84>
 8009790:	6923      	ldr	r3, [r4, #16]
 8009792:	b36b      	cbz	r3, 80097f0 <__swbuf_r+0x84>
 8009794:	6923      	ldr	r3, [r4, #16]
 8009796:	6820      	ldr	r0, [r4, #0]
 8009798:	1ac0      	subs	r0, r0, r3
 800979a:	6963      	ldr	r3, [r4, #20]
 800979c:	b2f6      	uxtb	r6, r6
 800979e:	4283      	cmp	r3, r0
 80097a0:	4637      	mov	r7, r6
 80097a2:	dc04      	bgt.n	80097ae <__swbuf_r+0x42>
 80097a4:	4621      	mov	r1, r4
 80097a6:	4628      	mov	r0, r5
 80097a8:	f000 f944 	bl	8009a34 <_fflush_r>
 80097ac:	bb30      	cbnz	r0, 80097fc <__swbuf_r+0x90>
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	60a3      	str	r3, [r4, #8]
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	1c5a      	adds	r2, r3, #1
 80097b8:	6022      	str	r2, [r4, #0]
 80097ba:	701e      	strb	r6, [r3, #0]
 80097bc:	6963      	ldr	r3, [r4, #20]
 80097be:	3001      	adds	r0, #1
 80097c0:	4283      	cmp	r3, r0
 80097c2:	d004      	beq.n	80097ce <__swbuf_r+0x62>
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	07db      	lsls	r3, r3, #31
 80097c8:	d506      	bpl.n	80097d8 <__swbuf_r+0x6c>
 80097ca:	2e0a      	cmp	r6, #10
 80097cc:	d104      	bne.n	80097d8 <__swbuf_r+0x6c>
 80097ce:	4621      	mov	r1, r4
 80097d0:	4628      	mov	r0, r5
 80097d2:	f000 f92f 	bl	8009a34 <_fflush_r>
 80097d6:	b988      	cbnz	r0, 80097fc <__swbuf_r+0x90>
 80097d8:	4638      	mov	r0, r7
 80097da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097dc:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <__swbuf_r+0x9c>)
 80097de:	429c      	cmp	r4, r3
 80097e0:	d101      	bne.n	80097e6 <__swbuf_r+0x7a>
 80097e2:	68ac      	ldr	r4, [r5, #8]
 80097e4:	e7cf      	b.n	8009786 <__swbuf_r+0x1a>
 80097e6:	4b09      	ldr	r3, [pc, #36]	; (800980c <__swbuf_r+0xa0>)
 80097e8:	429c      	cmp	r4, r3
 80097ea:	bf08      	it	eq
 80097ec:	68ec      	ldreq	r4, [r5, #12]
 80097ee:	e7ca      	b.n	8009786 <__swbuf_r+0x1a>
 80097f0:	4621      	mov	r1, r4
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 f80c 	bl	8009810 <__swsetup_r>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d0cb      	beq.n	8009794 <__swbuf_r+0x28>
 80097fc:	f04f 37ff 	mov.w	r7, #4294967295
 8009800:	e7ea      	b.n	80097d8 <__swbuf_r+0x6c>
 8009802:	bf00      	nop
 8009804:	0800b7ec 	.word	0x0800b7ec
 8009808:	0800b80c 	.word	0x0800b80c
 800980c:	0800b7cc 	.word	0x0800b7cc

08009810 <__swsetup_r>:
 8009810:	4b32      	ldr	r3, [pc, #200]	; (80098dc <__swsetup_r+0xcc>)
 8009812:	b570      	push	{r4, r5, r6, lr}
 8009814:	681d      	ldr	r5, [r3, #0]
 8009816:	4606      	mov	r6, r0
 8009818:	460c      	mov	r4, r1
 800981a:	b125      	cbz	r5, 8009826 <__swsetup_r+0x16>
 800981c:	69ab      	ldr	r3, [r5, #24]
 800981e:	b913      	cbnz	r3, 8009826 <__swsetup_r+0x16>
 8009820:	4628      	mov	r0, r5
 8009822:	f000 f99b 	bl	8009b5c <__sinit>
 8009826:	4b2e      	ldr	r3, [pc, #184]	; (80098e0 <__swsetup_r+0xd0>)
 8009828:	429c      	cmp	r4, r3
 800982a:	d10f      	bne.n	800984c <__swsetup_r+0x3c>
 800982c:	686c      	ldr	r4, [r5, #4]
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009834:	0719      	lsls	r1, r3, #28
 8009836:	d42c      	bmi.n	8009892 <__swsetup_r+0x82>
 8009838:	06dd      	lsls	r5, r3, #27
 800983a:	d411      	bmi.n	8009860 <__swsetup_r+0x50>
 800983c:	2309      	movs	r3, #9
 800983e:	6033      	str	r3, [r6, #0]
 8009840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009844:	81a3      	strh	r3, [r4, #12]
 8009846:	f04f 30ff 	mov.w	r0, #4294967295
 800984a:	e03e      	b.n	80098ca <__swsetup_r+0xba>
 800984c:	4b25      	ldr	r3, [pc, #148]	; (80098e4 <__swsetup_r+0xd4>)
 800984e:	429c      	cmp	r4, r3
 8009850:	d101      	bne.n	8009856 <__swsetup_r+0x46>
 8009852:	68ac      	ldr	r4, [r5, #8]
 8009854:	e7eb      	b.n	800982e <__swsetup_r+0x1e>
 8009856:	4b24      	ldr	r3, [pc, #144]	; (80098e8 <__swsetup_r+0xd8>)
 8009858:	429c      	cmp	r4, r3
 800985a:	bf08      	it	eq
 800985c:	68ec      	ldreq	r4, [r5, #12]
 800985e:	e7e6      	b.n	800982e <__swsetup_r+0x1e>
 8009860:	0758      	lsls	r0, r3, #29
 8009862:	d512      	bpl.n	800988a <__swsetup_r+0x7a>
 8009864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009866:	b141      	cbz	r1, 800987a <__swsetup_r+0x6a>
 8009868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800986c:	4299      	cmp	r1, r3
 800986e:	d002      	beq.n	8009876 <__swsetup_r+0x66>
 8009870:	4630      	mov	r0, r6
 8009872:	f7ff fe05 	bl	8009480 <_free_r>
 8009876:	2300      	movs	r3, #0
 8009878:	6363      	str	r3, [r4, #52]	; 0x34
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	2300      	movs	r3, #0
 8009884:	6063      	str	r3, [r4, #4]
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	f043 0308 	orr.w	r3, r3, #8
 8009890:	81a3      	strh	r3, [r4, #12]
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	b94b      	cbnz	r3, 80098aa <__swsetup_r+0x9a>
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800989c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098a0:	d003      	beq.n	80098aa <__swsetup_r+0x9a>
 80098a2:	4621      	mov	r1, r4
 80098a4:	4630      	mov	r0, r6
 80098a6:	f000 fa41 	bl	8009d2c <__smakebuf_r>
 80098aa:	89a0      	ldrh	r0, [r4, #12]
 80098ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098b0:	f010 0301 	ands.w	r3, r0, #1
 80098b4:	d00a      	beq.n	80098cc <__swsetup_r+0xbc>
 80098b6:	2300      	movs	r3, #0
 80098b8:	60a3      	str	r3, [r4, #8]
 80098ba:	6963      	ldr	r3, [r4, #20]
 80098bc:	425b      	negs	r3, r3
 80098be:	61a3      	str	r3, [r4, #24]
 80098c0:	6923      	ldr	r3, [r4, #16]
 80098c2:	b943      	cbnz	r3, 80098d6 <__swsetup_r+0xc6>
 80098c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098c8:	d1ba      	bne.n	8009840 <__swsetup_r+0x30>
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	0781      	lsls	r1, r0, #30
 80098ce:	bf58      	it	pl
 80098d0:	6963      	ldrpl	r3, [r4, #20]
 80098d2:	60a3      	str	r3, [r4, #8]
 80098d4:	e7f4      	b.n	80098c0 <__swsetup_r+0xb0>
 80098d6:	2000      	movs	r0, #0
 80098d8:	e7f7      	b.n	80098ca <__swsetup_r+0xba>
 80098da:	bf00      	nop
 80098dc:	20000010 	.word	0x20000010
 80098e0:	0800b7ec 	.word	0x0800b7ec
 80098e4:	0800b80c 	.word	0x0800b80c
 80098e8:	0800b7cc 	.word	0x0800b7cc

080098ec <__assert_func>:
 80098ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098ee:	4614      	mov	r4, r2
 80098f0:	461a      	mov	r2, r3
 80098f2:	4b09      	ldr	r3, [pc, #36]	; (8009918 <__assert_func+0x2c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4605      	mov	r5, r0
 80098f8:	68d8      	ldr	r0, [r3, #12]
 80098fa:	b14c      	cbz	r4, 8009910 <__assert_func+0x24>
 80098fc:	4b07      	ldr	r3, [pc, #28]	; (800991c <__assert_func+0x30>)
 80098fe:	9100      	str	r1, [sp, #0]
 8009900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009904:	4906      	ldr	r1, [pc, #24]	; (8009920 <__assert_func+0x34>)
 8009906:	462b      	mov	r3, r5
 8009908:	f000 f9a6 	bl	8009c58 <fiprintf>
 800990c:	f000 fd9e 	bl	800a44c <abort>
 8009910:	4b04      	ldr	r3, [pc, #16]	; (8009924 <__assert_func+0x38>)
 8009912:	461c      	mov	r4, r3
 8009914:	e7f3      	b.n	80098fe <__assert_func+0x12>
 8009916:	bf00      	nop
 8009918:	20000010 	.word	0x20000010
 800991c:	0800b78e 	.word	0x0800b78e
 8009920:	0800b79b 	.word	0x0800b79b
 8009924:	0800b7c9 	.word	0x0800b7c9

08009928 <__sflush_r>:
 8009928:	898a      	ldrh	r2, [r1, #12]
 800992a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992e:	4605      	mov	r5, r0
 8009930:	0710      	lsls	r0, r2, #28
 8009932:	460c      	mov	r4, r1
 8009934:	d458      	bmi.n	80099e8 <__sflush_r+0xc0>
 8009936:	684b      	ldr	r3, [r1, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	dc05      	bgt.n	8009948 <__sflush_r+0x20>
 800993c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800993e:	2b00      	cmp	r3, #0
 8009940:	dc02      	bgt.n	8009948 <__sflush_r+0x20>
 8009942:	2000      	movs	r0, #0
 8009944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800994a:	2e00      	cmp	r6, #0
 800994c:	d0f9      	beq.n	8009942 <__sflush_r+0x1a>
 800994e:	2300      	movs	r3, #0
 8009950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009954:	682f      	ldr	r7, [r5, #0]
 8009956:	602b      	str	r3, [r5, #0]
 8009958:	d032      	beq.n	80099c0 <__sflush_r+0x98>
 800995a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	075a      	lsls	r2, r3, #29
 8009960:	d505      	bpl.n	800996e <__sflush_r+0x46>
 8009962:	6863      	ldr	r3, [r4, #4]
 8009964:	1ac0      	subs	r0, r0, r3
 8009966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009968:	b10b      	cbz	r3, 800996e <__sflush_r+0x46>
 800996a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800996c:	1ac0      	subs	r0, r0, r3
 800996e:	2300      	movs	r3, #0
 8009970:	4602      	mov	r2, r0
 8009972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009974:	6a21      	ldr	r1, [r4, #32]
 8009976:	4628      	mov	r0, r5
 8009978:	47b0      	blx	r6
 800997a:	1c43      	adds	r3, r0, #1
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	d106      	bne.n	800998e <__sflush_r+0x66>
 8009980:	6829      	ldr	r1, [r5, #0]
 8009982:	291d      	cmp	r1, #29
 8009984:	d82c      	bhi.n	80099e0 <__sflush_r+0xb8>
 8009986:	4a2a      	ldr	r2, [pc, #168]	; (8009a30 <__sflush_r+0x108>)
 8009988:	40ca      	lsrs	r2, r1
 800998a:	07d6      	lsls	r6, r2, #31
 800998c:	d528      	bpl.n	80099e0 <__sflush_r+0xb8>
 800998e:	2200      	movs	r2, #0
 8009990:	6062      	str	r2, [r4, #4]
 8009992:	04d9      	lsls	r1, r3, #19
 8009994:	6922      	ldr	r2, [r4, #16]
 8009996:	6022      	str	r2, [r4, #0]
 8009998:	d504      	bpl.n	80099a4 <__sflush_r+0x7c>
 800999a:	1c42      	adds	r2, r0, #1
 800999c:	d101      	bne.n	80099a2 <__sflush_r+0x7a>
 800999e:	682b      	ldr	r3, [r5, #0]
 80099a0:	b903      	cbnz	r3, 80099a4 <__sflush_r+0x7c>
 80099a2:	6560      	str	r0, [r4, #84]	; 0x54
 80099a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099a6:	602f      	str	r7, [r5, #0]
 80099a8:	2900      	cmp	r1, #0
 80099aa:	d0ca      	beq.n	8009942 <__sflush_r+0x1a>
 80099ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099b0:	4299      	cmp	r1, r3
 80099b2:	d002      	beq.n	80099ba <__sflush_r+0x92>
 80099b4:	4628      	mov	r0, r5
 80099b6:	f7ff fd63 	bl	8009480 <_free_r>
 80099ba:	2000      	movs	r0, #0
 80099bc:	6360      	str	r0, [r4, #52]	; 0x34
 80099be:	e7c1      	b.n	8009944 <__sflush_r+0x1c>
 80099c0:	6a21      	ldr	r1, [r4, #32]
 80099c2:	2301      	movs	r3, #1
 80099c4:	4628      	mov	r0, r5
 80099c6:	47b0      	blx	r6
 80099c8:	1c41      	adds	r1, r0, #1
 80099ca:	d1c7      	bne.n	800995c <__sflush_r+0x34>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0c4      	beq.n	800995c <__sflush_r+0x34>
 80099d2:	2b1d      	cmp	r3, #29
 80099d4:	d001      	beq.n	80099da <__sflush_r+0xb2>
 80099d6:	2b16      	cmp	r3, #22
 80099d8:	d101      	bne.n	80099de <__sflush_r+0xb6>
 80099da:	602f      	str	r7, [r5, #0]
 80099dc:	e7b1      	b.n	8009942 <__sflush_r+0x1a>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e4:	81a3      	strh	r3, [r4, #12]
 80099e6:	e7ad      	b.n	8009944 <__sflush_r+0x1c>
 80099e8:	690f      	ldr	r7, [r1, #16]
 80099ea:	2f00      	cmp	r7, #0
 80099ec:	d0a9      	beq.n	8009942 <__sflush_r+0x1a>
 80099ee:	0793      	lsls	r3, r2, #30
 80099f0:	680e      	ldr	r6, [r1, #0]
 80099f2:	bf08      	it	eq
 80099f4:	694b      	ldreq	r3, [r1, #20]
 80099f6:	600f      	str	r7, [r1, #0]
 80099f8:	bf18      	it	ne
 80099fa:	2300      	movne	r3, #0
 80099fc:	eba6 0807 	sub.w	r8, r6, r7
 8009a00:	608b      	str	r3, [r1, #8]
 8009a02:	f1b8 0f00 	cmp.w	r8, #0
 8009a06:	dd9c      	ble.n	8009942 <__sflush_r+0x1a>
 8009a08:	6a21      	ldr	r1, [r4, #32]
 8009a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a0c:	4643      	mov	r3, r8
 8009a0e:	463a      	mov	r2, r7
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b0      	blx	r6
 8009a14:	2800      	cmp	r0, #0
 8009a16:	dc06      	bgt.n	8009a26 <__sflush_r+0xfe>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a1e:	81a3      	strh	r3, [r4, #12]
 8009a20:	f04f 30ff 	mov.w	r0, #4294967295
 8009a24:	e78e      	b.n	8009944 <__sflush_r+0x1c>
 8009a26:	4407      	add	r7, r0
 8009a28:	eba8 0800 	sub.w	r8, r8, r0
 8009a2c:	e7e9      	b.n	8009a02 <__sflush_r+0xda>
 8009a2e:	bf00      	nop
 8009a30:	20400001 	.word	0x20400001

08009a34 <_fflush_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	690b      	ldr	r3, [r1, #16]
 8009a38:	4605      	mov	r5, r0
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	b913      	cbnz	r3, 8009a44 <_fflush_r+0x10>
 8009a3e:	2500      	movs	r5, #0
 8009a40:	4628      	mov	r0, r5
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	b118      	cbz	r0, 8009a4e <_fflush_r+0x1a>
 8009a46:	6983      	ldr	r3, [r0, #24]
 8009a48:	b90b      	cbnz	r3, 8009a4e <_fflush_r+0x1a>
 8009a4a:	f000 f887 	bl	8009b5c <__sinit>
 8009a4e:	4b14      	ldr	r3, [pc, #80]	; (8009aa0 <_fflush_r+0x6c>)
 8009a50:	429c      	cmp	r4, r3
 8009a52:	d11b      	bne.n	8009a8c <_fflush_r+0x58>
 8009a54:	686c      	ldr	r4, [r5, #4]
 8009a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0ef      	beq.n	8009a3e <_fflush_r+0xa>
 8009a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a60:	07d0      	lsls	r0, r2, #31
 8009a62:	d404      	bmi.n	8009a6e <_fflush_r+0x3a>
 8009a64:	0599      	lsls	r1, r3, #22
 8009a66:	d402      	bmi.n	8009a6e <_fflush_r+0x3a>
 8009a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a6a:	f7ff fce0 	bl	800942e <__retarget_lock_acquire_recursive>
 8009a6e:	4628      	mov	r0, r5
 8009a70:	4621      	mov	r1, r4
 8009a72:	f7ff ff59 	bl	8009928 <__sflush_r>
 8009a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a78:	07da      	lsls	r2, r3, #31
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	d4e0      	bmi.n	8009a40 <_fflush_r+0xc>
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	059b      	lsls	r3, r3, #22
 8009a82:	d4dd      	bmi.n	8009a40 <_fflush_r+0xc>
 8009a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a86:	f7ff fcd3 	bl	8009430 <__retarget_lock_release_recursive>
 8009a8a:	e7d9      	b.n	8009a40 <_fflush_r+0xc>
 8009a8c:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <_fflush_r+0x70>)
 8009a8e:	429c      	cmp	r4, r3
 8009a90:	d101      	bne.n	8009a96 <_fflush_r+0x62>
 8009a92:	68ac      	ldr	r4, [r5, #8]
 8009a94:	e7df      	b.n	8009a56 <_fflush_r+0x22>
 8009a96:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <_fflush_r+0x74>)
 8009a98:	429c      	cmp	r4, r3
 8009a9a:	bf08      	it	eq
 8009a9c:	68ec      	ldreq	r4, [r5, #12]
 8009a9e:	e7da      	b.n	8009a56 <_fflush_r+0x22>
 8009aa0:	0800b7ec 	.word	0x0800b7ec
 8009aa4:	0800b80c 	.word	0x0800b80c
 8009aa8:	0800b7cc 	.word	0x0800b7cc

08009aac <std>:
 8009aac:	2300      	movs	r3, #0
 8009aae:	b510      	push	{r4, lr}
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aba:	6083      	str	r3, [r0, #8]
 8009abc:	8181      	strh	r1, [r0, #12]
 8009abe:	6643      	str	r3, [r0, #100]	; 0x64
 8009ac0:	81c2      	strh	r2, [r0, #14]
 8009ac2:	6183      	str	r3, [r0, #24]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	2208      	movs	r2, #8
 8009ac8:	305c      	adds	r0, #92	; 0x5c
 8009aca:	f7ff fcd1 	bl	8009470 <memset>
 8009ace:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <std+0x38>)
 8009ad0:	6263      	str	r3, [r4, #36]	; 0x24
 8009ad2:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <std+0x3c>)
 8009ad4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ad6:	4b05      	ldr	r3, [pc, #20]	; (8009aec <std+0x40>)
 8009ad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ada:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <std+0x44>)
 8009adc:	6224      	str	r4, [r4, #32]
 8009ade:	6323      	str	r3, [r4, #48]	; 0x30
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0800a3a1 	.word	0x0800a3a1
 8009ae8:	0800a3c3 	.word	0x0800a3c3
 8009aec:	0800a3fb 	.word	0x0800a3fb
 8009af0:	0800a41f 	.word	0x0800a41f

08009af4 <_cleanup_r>:
 8009af4:	4901      	ldr	r1, [pc, #4]	; (8009afc <_cleanup_r+0x8>)
 8009af6:	f000 b8c1 	b.w	8009c7c <_fwalk_reent>
 8009afa:	bf00      	nop
 8009afc:	08009a35 	.word	0x08009a35

08009b00 <__sfmoreglue>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	2268      	movs	r2, #104	; 0x68
 8009b04:	1e4d      	subs	r5, r1, #1
 8009b06:	4355      	muls	r5, r2
 8009b08:	460e      	mov	r6, r1
 8009b0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b0e:	f7ff fd23 	bl	8009558 <_malloc_r>
 8009b12:	4604      	mov	r4, r0
 8009b14:	b140      	cbz	r0, 8009b28 <__sfmoreglue+0x28>
 8009b16:	2100      	movs	r1, #0
 8009b18:	e9c0 1600 	strd	r1, r6, [r0]
 8009b1c:	300c      	adds	r0, #12
 8009b1e:	60a0      	str	r0, [r4, #8]
 8009b20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b24:	f7ff fca4 	bl	8009470 <memset>
 8009b28:	4620      	mov	r0, r4
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}

08009b2c <__sfp_lock_acquire>:
 8009b2c:	4801      	ldr	r0, [pc, #4]	; (8009b34 <__sfp_lock_acquire+0x8>)
 8009b2e:	f7ff bc7e 	b.w	800942e <__retarget_lock_acquire_recursive>
 8009b32:	bf00      	nop
 8009b34:	20008ca1 	.word	0x20008ca1

08009b38 <__sfp_lock_release>:
 8009b38:	4801      	ldr	r0, [pc, #4]	; (8009b40 <__sfp_lock_release+0x8>)
 8009b3a:	f7ff bc79 	b.w	8009430 <__retarget_lock_release_recursive>
 8009b3e:	bf00      	nop
 8009b40:	20008ca1 	.word	0x20008ca1

08009b44 <__sinit_lock_acquire>:
 8009b44:	4801      	ldr	r0, [pc, #4]	; (8009b4c <__sinit_lock_acquire+0x8>)
 8009b46:	f7ff bc72 	b.w	800942e <__retarget_lock_acquire_recursive>
 8009b4a:	bf00      	nop
 8009b4c:	20008ca2 	.word	0x20008ca2

08009b50 <__sinit_lock_release>:
 8009b50:	4801      	ldr	r0, [pc, #4]	; (8009b58 <__sinit_lock_release+0x8>)
 8009b52:	f7ff bc6d 	b.w	8009430 <__retarget_lock_release_recursive>
 8009b56:	bf00      	nop
 8009b58:	20008ca2 	.word	0x20008ca2

08009b5c <__sinit>:
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	4604      	mov	r4, r0
 8009b60:	f7ff fff0 	bl	8009b44 <__sinit_lock_acquire>
 8009b64:	69a3      	ldr	r3, [r4, #24]
 8009b66:	b11b      	cbz	r3, 8009b70 <__sinit+0x14>
 8009b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b6c:	f7ff bff0 	b.w	8009b50 <__sinit_lock_release>
 8009b70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b74:	6523      	str	r3, [r4, #80]	; 0x50
 8009b76:	4b13      	ldr	r3, [pc, #76]	; (8009bc4 <__sinit+0x68>)
 8009b78:	4a13      	ldr	r2, [pc, #76]	; (8009bc8 <__sinit+0x6c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b7e:	42a3      	cmp	r3, r4
 8009b80:	bf04      	itt	eq
 8009b82:	2301      	moveq	r3, #1
 8009b84:	61a3      	streq	r3, [r4, #24]
 8009b86:	4620      	mov	r0, r4
 8009b88:	f000 f820 	bl	8009bcc <__sfp>
 8009b8c:	6060      	str	r0, [r4, #4]
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f000 f81c 	bl	8009bcc <__sfp>
 8009b94:	60a0      	str	r0, [r4, #8]
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 f818 	bl	8009bcc <__sfp>
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	60e0      	str	r0, [r4, #12]
 8009ba0:	2104      	movs	r1, #4
 8009ba2:	6860      	ldr	r0, [r4, #4]
 8009ba4:	f7ff ff82 	bl	8009aac <std>
 8009ba8:	68a0      	ldr	r0, [r4, #8]
 8009baa:	2201      	movs	r2, #1
 8009bac:	2109      	movs	r1, #9
 8009bae:	f7ff ff7d 	bl	8009aac <std>
 8009bb2:	68e0      	ldr	r0, [r4, #12]
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	2112      	movs	r1, #18
 8009bb8:	f7ff ff78 	bl	8009aac <std>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	61a3      	str	r3, [r4, #24]
 8009bc0:	e7d2      	b.n	8009b68 <__sinit+0xc>
 8009bc2:	bf00      	nop
 8009bc4:	0800b718 	.word	0x0800b718
 8009bc8:	08009af5 	.word	0x08009af5

08009bcc <__sfp>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	4607      	mov	r7, r0
 8009bd0:	f7ff ffac 	bl	8009b2c <__sfp_lock_acquire>
 8009bd4:	4b1e      	ldr	r3, [pc, #120]	; (8009c50 <__sfp+0x84>)
 8009bd6:	681e      	ldr	r6, [r3, #0]
 8009bd8:	69b3      	ldr	r3, [r6, #24]
 8009bda:	b913      	cbnz	r3, 8009be2 <__sfp+0x16>
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7ff ffbd 	bl	8009b5c <__sinit>
 8009be2:	3648      	adds	r6, #72	; 0x48
 8009be4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	d503      	bpl.n	8009bf4 <__sfp+0x28>
 8009bec:	6833      	ldr	r3, [r6, #0]
 8009bee:	b30b      	cbz	r3, 8009c34 <__sfp+0x68>
 8009bf0:	6836      	ldr	r6, [r6, #0]
 8009bf2:	e7f7      	b.n	8009be4 <__sfp+0x18>
 8009bf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bf8:	b9d5      	cbnz	r5, 8009c30 <__sfp+0x64>
 8009bfa:	4b16      	ldr	r3, [pc, #88]	; (8009c54 <__sfp+0x88>)
 8009bfc:	60e3      	str	r3, [r4, #12]
 8009bfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c02:	6665      	str	r5, [r4, #100]	; 0x64
 8009c04:	f7ff fc12 	bl	800942c <__retarget_lock_init_recursive>
 8009c08:	f7ff ff96 	bl	8009b38 <__sfp_lock_release>
 8009c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c14:	6025      	str	r5, [r4, #0]
 8009c16:	61a5      	str	r5, [r4, #24]
 8009c18:	2208      	movs	r2, #8
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c20:	f7ff fc26 	bl	8009470 <memset>
 8009c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c30:	3468      	adds	r4, #104	; 0x68
 8009c32:	e7d9      	b.n	8009be8 <__sfp+0x1c>
 8009c34:	2104      	movs	r1, #4
 8009c36:	4638      	mov	r0, r7
 8009c38:	f7ff ff62 	bl	8009b00 <__sfmoreglue>
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	6030      	str	r0, [r6, #0]
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d1d5      	bne.n	8009bf0 <__sfp+0x24>
 8009c44:	f7ff ff78 	bl	8009b38 <__sfp_lock_release>
 8009c48:	230c      	movs	r3, #12
 8009c4a:	603b      	str	r3, [r7, #0]
 8009c4c:	e7ee      	b.n	8009c2c <__sfp+0x60>
 8009c4e:	bf00      	nop
 8009c50:	0800b718 	.word	0x0800b718
 8009c54:	ffff0001 	.word	0xffff0001

08009c58 <fiprintf>:
 8009c58:	b40e      	push	{r1, r2, r3}
 8009c5a:	b503      	push	{r0, r1, lr}
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	ab03      	add	r3, sp, #12
 8009c60:	4805      	ldr	r0, [pc, #20]	; (8009c78 <fiprintf+0x20>)
 8009c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c66:	6800      	ldr	r0, [r0, #0]
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	f000 f8d5 	bl	8009e18 <_vfiprintf_r>
 8009c6e:	b002      	add	sp, #8
 8009c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c74:	b003      	add	sp, #12
 8009c76:	4770      	bx	lr
 8009c78:	20000010 	.word	0x20000010

08009c7c <_fwalk_reent>:
 8009c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c80:	4606      	mov	r6, r0
 8009c82:	4688      	mov	r8, r1
 8009c84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c88:	2700      	movs	r7, #0
 8009c8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c8e:	f1b9 0901 	subs.w	r9, r9, #1
 8009c92:	d505      	bpl.n	8009ca0 <_fwalk_reent+0x24>
 8009c94:	6824      	ldr	r4, [r4, #0]
 8009c96:	2c00      	cmp	r4, #0
 8009c98:	d1f7      	bne.n	8009c8a <_fwalk_reent+0xe>
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ca0:	89ab      	ldrh	r3, [r5, #12]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d907      	bls.n	8009cb6 <_fwalk_reent+0x3a>
 8009ca6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009caa:	3301      	adds	r3, #1
 8009cac:	d003      	beq.n	8009cb6 <_fwalk_reent+0x3a>
 8009cae:	4629      	mov	r1, r5
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	47c0      	blx	r8
 8009cb4:	4307      	orrs	r7, r0
 8009cb6:	3568      	adds	r5, #104	; 0x68
 8009cb8:	e7e9      	b.n	8009c8e <_fwalk_reent+0x12>
	...

08009cbc <_gettimeofday_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4d07      	ldr	r5, [pc, #28]	; (8009cdc <_gettimeofday_r+0x20>)
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	4608      	mov	r0, r1
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	f001 fb7b 	bl	800b3c4 <_gettimeofday>
 8009cce:	1c43      	adds	r3, r0, #1
 8009cd0:	d102      	bne.n	8009cd8 <_gettimeofday_r+0x1c>
 8009cd2:	682b      	ldr	r3, [r5, #0]
 8009cd4:	b103      	cbz	r3, 8009cd8 <_gettimeofday_r+0x1c>
 8009cd6:	6023      	str	r3, [r4, #0]
 8009cd8:	bd38      	pop	{r3, r4, r5, pc}
 8009cda:	bf00      	nop
 8009cdc:	20008cac 	.word	0x20008cac

08009ce0 <__swhatbuf_r>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	460e      	mov	r6, r1
 8009ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	b096      	sub	sp, #88	; 0x58
 8009cec:	4614      	mov	r4, r2
 8009cee:	461d      	mov	r5, r3
 8009cf0:	da08      	bge.n	8009d04 <__swhatbuf_r+0x24>
 8009cf2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	602a      	str	r2, [r5, #0]
 8009cfa:	061a      	lsls	r2, r3, #24
 8009cfc:	d410      	bmi.n	8009d20 <__swhatbuf_r+0x40>
 8009cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d02:	e00e      	b.n	8009d22 <__swhatbuf_r+0x42>
 8009d04:	466a      	mov	r2, sp
 8009d06:	f000 fbb9 	bl	800a47c <_fstat_r>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	dbf1      	blt.n	8009cf2 <__swhatbuf_r+0x12>
 8009d0e:	9a01      	ldr	r2, [sp, #4]
 8009d10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d18:	425a      	negs	r2, r3
 8009d1a:	415a      	adcs	r2, r3
 8009d1c:	602a      	str	r2, [r5, #0]
 8009d1e:	e7ee      	b.n	8009cfe <__swhatbuf_r+0x1e>
 8009d20:	2340      	movs	r3, #64	; 0x40
 8009d22:	2000      	movs	r0, #0
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	b016      	add	sp, #88	; 0x58
 8009d28:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d2c <__smakebuf_r>:
 8009d2c:	898b      	ldrh	r3, [r1, #12]
 8009d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d30:	079d      	lsls	r5, r3, #30
 8009d32:	4606      	mov	r6, r0
 8009d34:	460c      	mov	r4, r1
 8009d36:	d507      	bpl.n	8009d48 <__smakebuf_r+0x1c>
 8009d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	6123      	str	r3, [r4, #16]
 8009d40:	2301      	movs	r3, #1
 8009d42:	6163      	str	r3, [r4, #20]
 8009d44:	b002      	add	sp, #8
 8009d46:	bd70      	pop	{r4, r5, r6, pc}
 8009d48:	ab01      	add	r3, sp, #4
 8009d4a:	466a      	mov	r2, sp
 8009d4c:	f7ff ffc8 	bl	8009ce0 <__swhatbuf_r>
 8009d50:	9900      	ldr	r1, [sp, #0]
 8009d52:	4605      	mov	r5, r0
 8009d54:	4630      	mov	r0, r6
 8009d56:	f7ff fbff 	bl	8009558 <_malloc_r>
 8009d5a:	b948      	cbnz	r0, 8009d70 <__smakebuf_r+0x44>
 8009d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d60:	059a      	lsls	r2, r3, #22
 8009d62:	d4ef      	bmi.n	8009d44 <__smakebuf_r+0x18>
 8009d64:	f023 0303 	bic.w	r3, r3, #3
 8009d68:	f043 0302 	orr.w	r3, r3, #2
 8009d6c:	81a3      	strh	r3, [r4, #12]
 8009d6e:	e7e3      	b.n	8009d38 <__smakebuf_r+0xc>
 8009d70:	4b0d      	ldr	r3, [pc, #52]	; (8009da8 <__smakebuf_r+0x7c>)
 8009d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	6020      	str	r0, [r4, #0]
 8009d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	9b00      	ldr	r3, [sp, #0]
 8009d80:	6163      	str	r3, [r4, #20]
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	6120      	str	r0, [r4, #16]
 8009d86:	b15b      	cbz	r3, 8009da0 <__smakebuf_r+0x74>
 8009d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f000 fb87 	bl	800a4a0 <_isatty_r>
 8009d92:	b128      	cbz	r0, 8009da0 <__smakebuf_r+0x74>
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	f023 0303 	bic.w	r3, r3, #3
 8009d9a:	f043 0301 	orr.w	r3, r3, #1
 8009d9e:	81a3      	strh	r3, [r4, #12]
 8009da0:	89a0      	ldrh	r0, [r4, #12]
 8009da2:	4305      	orrs	r5, r0
 8009da4:	81a5      	strh	r5, [r4, #12]
 8009da6:	e7cd      	b.n	8009d44 <__smakebuf_r+0x18>
 8009da8:	08009af5 	.word	0x08009af5

08009dac <__malloc_lock>:
 8009dac:	4801      	ldr	r0, [pc, #4]	; (8009db4 <__malloc_lock+0x8>)
 8009dae:	f7ff bb3e 	b.w	800942e <__retarget_lock_acquire_recursive>
 8009db2:	bf00      	nop
 8009db4:	20008ca0 	.word	0x20008ca0

08009db8 <__malloc_unlock>:
 8009db8:	4801      	ldr	r0, [pc, #4]	; (8009dc0 <__malloc_unlock+0x8>)
 8009dba:	f7ff bb39 	b.w	8009430 <__retarget_lock_release_recursive>
 8009dbe:	bf00      	nop
 8009dc0:	20008ca0 	.word	0x20008ca0

08009dc4 <__sfputc_r>:
 8009dc4:	6893      	ldr	r3, [r2, #8]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	b410      	push	{r4}
 8009dcc:	6093      	str	r3, [r2, #8]
 8009dce:	da08      	bge.n	8009de2 <__sfputc_r+0x1e>
 8009dd0:	6994      	ldr	r4, [r2, #24]
 8009dd2:	42a3      	cmp	r3, r4
 8009dd4:	db01      	blt.n	8009dda <__sfputc_r+0x16>
 8009dd6:	290a      	cmp	r1, #10
 8009dd8:	d103      	bne.n	8009de2 <__sfputc_r+0x1e>
 8009dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dde:	f7ff bcc5 	b.w	800976c <__swbuf_r>
 8009de2:	6813      	ldr	r3, [r2, #0]
 8009de4:	1c58      	adds	r0, r3, #1
 8009de6:	6010      	str	r0, [r2, #0]
 8009de8:	7019      	strb	r1, [r3, #0]
 8009dea:	4608      	mov	r0, r1
 8009dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <__sfputs_r>:
 8009df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df4:	4606      	mov	r6, r0
 8009df6:	460f      	mov	r7, r1
 8009df8:	4614      	mov	r4, r2
 8009dfa:	18d5      	adds	r5, r2, r3
 8009dfc:	42ac      	cmp	r4, r5
 8009dfe:	d101      	bne.n	8009e04 <__sfputs_r+0x12>
 8009e00:	2000      	movs	r0, #0
 8009e02:	e007      	b.n	8009e14 <__sfputs_r+0x22>
 8009e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e08:	463a      	mov	r2, r7
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7ff ffda 	bl	8009dc4 <__sfputc_r>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d1f3      	bne.n	8009dfc <__sfputs_r+0xa>
 8009e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e18 <_vfiprintf_r>:
 8009e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	460d      	mov	r5, r1
 8009e1e:	b09d      	sub	sp, #116	; 0x74
 8009e20:	4614      	mov	r4, r2
 8009e22:	4698      	mov	r8, r3
 8009e24:	4606      	mov	r6, r0
 8009e26:	b118      	cbz	r0, 8009e30 <_vfiprintf_r+0x18>
 8009e28:	6983      	ldr	r3, [r0, #24]
 8009e2a:	b90b      	cbnz	r3, 8009e30 <_vfiprintf_r+0x18>
 8009e2c:	f7ff fe96 	bl	8009b5c <__sinit>
 8009e30:	4b89      	ldr	r3, [pc, #548]	; (800a058 <_vfiprintf_r+0x240>)
 8009e32:	429d      	cmp	r5, r3
 8009e34:	d11b      	bne.n	8009e6e <_vfiprintf_r+0x56>
 8009e36:	6875      	ldr	r5, [r6, #4]
 8009e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e3a:	07d9      	lsls	r1, r3, #31
 8009e3c:	d405      	bmi.n	8009e4a <_vfiprintf_r+0x32>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	059a      	lsls	r2, r3, #22
 8009e42:	d402      	bmi.n	8009e4a <_vfiprintf_r+0x32>
 8009e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e46:	f7ff faf2 	bl	800942e <__retarget_lock_acquire_recursive>
 8009e4a:	89ab      	ldrh	r3, [r5, #12]
 8009e4c:	071b      	lsls	r3, r3, #28
 8009e4e:	d501      	bpl.n	8009e54 <_vfiprintf_r+0x3c>
 8009e50:	692b      	ldr	r3, [r5, #16]
 8009e52:	b9eb      	cbnz	r3, 8009e90 <_vfiprintf_r+0x78>
 8009e54:	4629      	mov	r1, r5
 8009e56:	4630      	mov	r0, r6
 8009e58:	f7ff fcda 	bl	8009810 <__swsetup_r>
 8009e5c:	b1c0      	cbz	r0, 8009e90 <_vfiprintf_r+0x78>
 8009e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e60:	07dc      	lsls	r4, r3, #31
 8009e62:	d50e      	bpl.n	8009e82 <_vfiprintf_r+0x6a>
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295
 8009e68:	b01d      	add	sp, #116	; 0x74
 8009e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6e:	4b7b      	ldr	r3, [pc, #492]	; (800a05c <_vfiprintf_r+0x244>)
 8009e70:	429d      	cmp	r5, r3
 8009e72:	d101      	bne.n	8009e78 <_vfiprintf_r+0x60>
 8009e74:	68b5      	ldr	r5, [r6, #8]
 8009e76:	e7df      	b.n	8009e38 <_vfiprintf_r+0x20>
 8009e78:	4b79      	ldr	r3, [pc, #484]	; (800a060 <_vfiprintf_r+0x248>)
 8009e7a:	429d      	cmp	r5, r3
 8009e7c:	bf08      	it	eq
 8009e7e:	68f5      	ldreq	r5, [r6, #12]
 8009e80:	e7da      	b.n	8009e38 <_vfiprintf_r+0x20>
 8009e82:	89ab      	ldrh	r3, [r5, #12]
 8009e84:	0598      	lsls	r0, r3, #22
 8009e86:	d4ed      	bmi.n	8009e64 <_vfiprintf_r+0x4c>
 8009e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e8a:	f7ff fad1 	bl	8009430 <__retarget_lock_release_recursive>
 8009e8e:	e7e9      	b.n	8009e64 <_vfiprintf_r+0x4c>
 8009e90:	2300      	movs	r3, #0
 8009e92:	9309      	str	r3, [sp, #36]	; 0x24
 8009e94:	2320      	movs	r3, #32
 8009e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e9e:	2330      	movs	r3, #48	; 0x30
 8009ea0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a064 <_vfiprintf_r+0x24c>
 8009ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ea8:	f04f 0901 	mov.w	r9, #1
 8009eac:	4623      	mov	r3, r4
 8009eae:	469a      	mov	sl, r3
 8009eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eb4:	b10a      	cbz	r2, 8009eba <_vfiprintf_r+0xa2>
 8009eb6:	2a25      	cmp	r2, #37	; 0x25
 8009eb8:	d1f9      	bne.n	8009eae <_vfiprintf_r+0x96>
 8009eba:	ebba 0b04 	subs.w	fp, sl, r4
 8009ebe:	d00b      	beq.n	8009ed8 <_vfiprintf_r+0xc0>
 8009ec0:	465b      	mov	r3, fp
 8009ec2:	4622      	mov	r2, r4
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	f7ff ff93 	bl	8009df2 <__sfputs_r>
 8009ecc:	3001      	adds	r0, #1
 8009ece:	f000 80aa 	beq.w	800a026 <_vfiprintf_r+0x20e>
 8009ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed4:	445a      	add	r2, fp
 8009ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f000 80a2 	beq.w	800a026 <_vfiprintf_r+0x20e>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eec:	f10a 0a01 	add.w	sl, sl, #1
 8009ef0:	9304      	str	r3, [sp, #16]
 8009ef2:	9307      	str	r3, [sp, #28]
 8009ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8009efa:	4654      	mov	r4, sl
 8009efc:	2205      	movs	r2, #5
 8009efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f02:	4858      	ldr	r0, [pc, #352]	; (800a064 <_vfiprintf_r+0x24c>)
 8009f04:	f7f6 f964 	bl	80001d0 <memchr>
 8009f08:	9a04      	ldr	r2, [sp, #16]
 8009f0a:	b9d8      	cbnz	r0, 8009f44 <_vfiprintf_r+0x12c>
 8009f0c:	06d1      	lsls	r1, r2, #27
 8009f0e:	bf44      	itt	mi
 8009f10:	2320      	movmi	r3, #32
 8009f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f16:	0713      	lsls	r3, r2, #28
 8009f18:	bf44      	itt	mi
 8009f1a:	232b      	movmi	r3, #43	; 0x2b
 8009f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f20:	f89a 3000 	ldrb.w	r3, [sl]
 8009f24:	2b2a      	cmp	r3, #42	; 0x2a
 8009f26:	d015      	beq.n	8009f54 <_vfiprintf_r+0x13c>
 8009f28:	9a07      	ldr	r2, [sp, #28]
 8009f2a:	4654      	mov	r4, sl
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	f04f 0c0a 	mov.w	ip, #10
 8009f32:	4621      	mov	r1, r4
 8009f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f38:	3b30      	subs	r3, #48	; 0x30
 8009f3a:	2b09      	cmp	r3, #9
 8009f3c:	d94e      	bls.n	8009fdc <_vfiprintf_r+0x1c4>
 8009f3e:	b1b0      	cbz	r0, 8009f6e <_vfiprintf_r+0x156>
 8009f40:	9207      	str	r2, [sp, #28]
 8009f42:	e014      	b.n	8009f6e <_vfiprintf_r+0x156>
 8009f44:	eba0 0308 	sub.w	r3, r0, r8
 8009f48:	fa09 f303 	lsl.w	r3, r9, r3
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	9304      	str	r3, [sp, #16]
 8009f50:	46a2      	mov	sl, r4
 8009f52:	e7d2      	b.n	8009efa <_vfiprintf_r+0xe2>
 8009f54:	9b03      	ldr	r3, [sp, #12]
 8009f56:	1d19      	adds	r1, r3, #4
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	9103      	str	r1, [sp, #12]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	bfbb      	ittet	lt
 8009f60:	425b      	neglt	r3, r3
 8009f62:	f042 0202 	orrlt.w	r2, r2, #2
 8009f66:	9307      	strge	r3, [sp, #28]
 8009f68:	9307      	strlt	r3, [sp, #28]
 8009f6a:	bfb8      	it	lt
 8009f6c:	9204      	strlt	r2, [sp, #16]
 8009f6e:	7823      	ldrb	r3, [r4, #0]
 8009f70:	2b2e      	cmp	r3, #46	; 0x2e
 8009f72:	d10c      	bne.n	8009f8e <_vfiprintf_r+0x176>
 8009f74:	7863      	ldrb	r3, [r4, #1]
 8009f76:	2b2a      	cmp	r3, #42	; 0x2a
 8009f78:	d135      	bne.n	8009fe6 <_vfiprintf_r+0x1ce>
 8009f7a:	9b03      	ldr	r3, [sp, #12]
 8009f7c:	1d1a      	adds	r2, r3, #4
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	9203      	str	r2, [sp, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	bfb8      	it	lt
 8009f86:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f8a:	3402      	adds	r4, #2
 8009f8c:	9305      	str	r3, [sp, #20]
 8009f8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a074 <_vfiprintf_r+0x25c>
 8009f92:	7821      	ldrb	r1, [r4, #0]
 8009f94:	2203      	movs	r2, #3
 8009f96:	4650      	mov	r0, sl
 8009f98:	f7f6 f91a 	bl	80001d0 <memchr>
 8009f9c:	b140      	cbz	r0, 8009fb0 <_vfiprintf_r+0x198>
 8009f9e:	2340      	movs	r3, #64	; 0x40
 8009fa0:	eba0 000a 	sub.w	r0, r0, sl
 8009fa4:	fa03 f000 	lsl.w	r0, r3, r0
 8009fa8:	9b04      	ldr	r3, [sp, #16]
 8009faa:	4303      	orrs	r3, r0
 8009fac:	3401      	adds	r4, #1
 8009fae:	9304      	str	r3, [sp, #16]
 8009fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb4:	482c      	ldr	r0, [pc, #176]	; (800a068 <_vfiprintf_r+0x250>)
 8009fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fba:	2206      	movs	r2, #6
 8009fbc:	f7f6 f908 	bl	80001d0 <memchr>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	d03f      	beq.n	800a044 <_vfiprintf_r+0x22c>
 8009fc4:	4b29      	ldr	r3, [pc, #164]	; (800a06c <_vfiprintf_r+0x254>)
 8009fc6:	bb1b      	cbnz	r3, 800a010 <_vfiprintf_r+0x1f8>
 8009fc8:	9b03      	ldr	r3, [sp, #12]
 8009fca:	3307      	adds	r3, #7
 8009fcc:	f023 0307 	bic.w	r3, r3, #7
 8009fd0:	3308      	adds	r3, #8
 8009fd2:	9303      	str	r3, [sp, #12]
 8009fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd6:	443b      	add	r3, r7
 8009fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fda:	e767      	b.n	8009eac <_vfiprintf_r+0x94>
 8009fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	e7a5      	b.n	8009f32 <_vfiprintf_r+0x11a>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	3401      	adds	r4, #1
 8009fea:	9305      	str	r3, [sp, #20]
 8009fec:	4619      	mov	r1, r3
 8009fee:	f04f 0c0a 	mov.w	ip, #10
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ff8:	3a30      	subs	r2, #48	; 0x30
 8009ffa:	2a09      	cmp	r2, #9
 8009ffc:	d903      	bls.n	800a006 <_vfiprintf_r+0x1ee>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0c5      	beq.n	8009f8e <_vfiprintf_r+0x176>
 800a002:	9105      	str	r1, [sp, #20]
 800a004:	e7c3      	b.n	8009f8e <_vfiprintf_r+0x176>
 800a006:	fb0c 2101 	mla	r1, ip, r1, r2
 800a00a:	4604      	mov	r4, r0
 800a00c:	2301      	movs	r3, #1
 800a00e:	e7f0      	b.n	8009ff2 <_vfiprintf_r+0x1da>
 800a010:	ab03      	add	r3, sp, #12
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	462a      	mov	r2, r5
 800a016:	4b16      	ldr	r3, [pc, #88]	; (800a070 <_vfiprintf_r+0x258>)
 800a018:	a904      	add	r1, sp, #16
 800a01a:	4630      	mov	r0, r6
 800a01c:	f3af 8000 	nop.w
 800a020:	4607      	mov	r7, r0
 800a022:	1c78      	adds	r0, r7, #1
 800a024:	d1d6      	bne.n	8009fd4 <_vfiprintf_r+0x1bc>
 800a026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a028:	07d9      	lsls	r1, r3, #31
 800a02a:	d405      	bmi.n	800a038 <_vfiprintf_r+0x220>
 800a02c:	89ab      	ldrh	r3, [r5, #12]
 800a02e:	059a      	lsls	r2, r3, #22
 800a030:	d402      	bmi.n	800a038 <_vfiprintf_r+0x220>
 800a032:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a034:	f7ff f9fc 	bl	8009430 <__retarget_lock_release_recursive>
 800a038:	89ab      	ldrh	r3, [r5, #12]
 800a03a:	065b      	lsls	r3, r3, #25
 800a03c:	f53f af12 	bmi.w	8009e64 <_vfiprintf_r+0x4c>
 800a040:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a042:	e711      	b.n	8009e68 <_vfiprintf_r+0x50>
 800a044:	ab03      	add	r3, sp, #12
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	462a      	mov	r2, r5
 800a04a:	4b09      	ldr	r3, [pc, #36]	; (800a070 <_vfiprintf_r+0x258>)
 800a04c:	a904      	add	r1, sp, #16
 800a04e:	4630      	mov	r0, r6
 800a050:	f000 f880 	bl	800a154 <_printf_i>
 800a054:	e7e4      	b.n	800a020 <_vfiprintf_r+0x208>
 800a056:	bf00      	nop
 800a058:	0800b7ec 	.word	0x0800b7ec
 800a05c:	0800b80c 	.word	0x0800b80c
 800a060:	0800b7cc 	.word	0x0800b7cc
 800a064:	0800b82c 	.word	0x0800b82c
 800a068:	0800b836 	.word	0x0800b836
 800a06c:	00000000 	.word	0x00000000
 800a070:	08009df3 	.word	0x08009df3
 800a074:	0800b832 	.word	0x0800b832

0800a078 <_printf_common>:
 800a078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a07c:	4616      	mov	r6, r2
 800a07e:	4699      	mov	r9, r3
 800a080:	688a      	ldr	r2, [r1, #8]
 800a082:	690b      	ldr	r3, [r1, #16]
 800a084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a088:	4293      	cmp	r3, r2
 800a08a:	bfb8      	it	lt
 800a08c:	4613      	movlt	r3, r2
 800a08e:	6033      	str	r3, [r6, #0]
 800a090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a094:	4607      	mov	r7, r0
 800a096:	460c      	mov	r4, r1
 800a098:	b10a      	cbz	r2, 800a09e <_printf_common+0x26>
 800a09a:	3301      	adds	r3, #1
 800a09c:	6033      	str	r3, [r6, #0]
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	0699      	lsls	r1, r3, #26
 800a0a2:	bf42      	ittt	mi
 800a0a4:	6833      	ldrmi	r3, [r6, #0]
 800a0a6:	3302      	addmi	r3, #2
 800a0a8:	6033      	strmi	r3, [r6, #0]
 800a0aa:	6825      	ldr	r5, [r4, #0]
 800a0ac:	f015 0506 	ands.w	r5, r5, #6
 800a0b0:	d106      	bne.n	800a0c0 <_printf_common+0x48>
 800a0b2:	f104 0a19 	add.w	sl, r4, #25
 800a0b6:	68e3      	ldr	r3, [r4, #12]
 800a0b8:	6832      	ldr	r2, [r6, #0]
 800a0ba:	1a9b      	subs	r3, r3, r2
 800a0bc:	42ab      	cmp	r3, r5
 800a0be:	dc26      	bgt.n	800a10e <_printf_common+0x96>
 800a0c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0c4:	1e13      	subs	r3, r2, #0
 800a0c6:	6822      	ldr	r2, [r4, #0]
 800a0c8:	bf18      	it	ne
 800a0ca:	2301      	movne	r3, #1
 800a0cc:	0692      	lsls	r2, r2, #26
 800a0ce:	d42b      	bmi.n	800a128 <_printf_common+0xb0>
 800a0d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	4638      	mov	r0, r7
 800a0d8:	47c0      	blx	r8
 800a0da:	3001      	adds	r0, #1
 800a0dc:	d01e      	beq.n	800a11c <_printf_common+0xa4>
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	68e5      	ldr	r5, [r4, #12]
 800a0e2:	6832      	ldr	r2, [r6, #0]
 800a0e4:	f003 0306 	and.w	r3, r3, #6
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	bf08      	it	eq
 800a0ec:	1aad      	subeq	r5, r5, r2
 800a0ee:	68a3      	ldr	r3, [r4, #8]
 800a0f0:	6922      	ldr	r2, [r4, #16]
 800a0f2:	bf0c      	ite	eq
 800a0f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0f8:	2500      	movne	r5, #0
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	bfc4      	itt	gt
 800a0fe:	1a9b      	subgt	r3, r3, r2
 800a100:	18ed      	addgt	r5, r5, r3
 800a102:	2600      	movs	r6, #0
 800a104:	341a      	adds	r4, #26
 800a106:	42b5      	cmp	r5, r6
 800a108:	d11a      	bne.n	800a140 <_printf_common+0xc8>
 800a10a:	2000      	movs	r0, #0
 800a10c:	e008      	b.n	800a120 <_printf_common+0xa8>
 800a10e:	2301      	movs	r3, #1
 800a110:	4652      	mov	r2, sl
 800a112:	4649      	mov	r1, r9
 800a114:	4638      	mov	r0, r7
 800a116:	47c0      	blx	r8
 800a118:	3001      	adds	r0, #1
 800a11a:	d103      	bne.n	800a124 <_printf_common+0xac>
 800a11c:	f04f 30ff 	mov.w	r0, #4294967295
 800a120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a124:	3501      	adds	r5, #1
 800a126:	e7c6      	b.n	800a0b6 <_printf_common+0x3e>
 800a128:	18e1      	adds	r1, r4, r3
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	2030      	movs	r0, #48	; 0x30
 800a12e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a132:	4422      	add	r2, r4
 800a134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a13c:	3302      	adds	r3, #2
 800a13e:	e7c7      	b.n	800a0d0 <_printf_common+0x58>
 800a140:	2301      	movs	r3, #1
 800a142:	4622      	mov	r2, r4
 800a144:	4649      	mov	r1, r9
 800a146:	4638      	mov	r0, r7
 800a148:	47c0      	blx	r8
 800a14a:	3001      	adds	r0, #1
 800a14c:	d0e6      	beq.n	800a11c <_printf_common+0xa4>
 800a14e:	3601      	adds	r6, #1
 800a150:	e7d9      	b.n	800a106 <_printf_common+0x8e>
	...

0800a154 <_printf_i>:
 800a154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a158:	7e0f      	ldrb	r7, [r1, #24]
 800a15a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a15c:	2f78      	cmp	r7, #120	; 0x78
 800a15e:	4691      	mov	r9, r2
 800a160:	4680      	mov	r8, r0
 800a162:	460c      	mov	r4, r1
 800a164:	469a      	mov	sl, r3
 800a166:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a16a:	d807      	bhi.n	800a17c <_printf_i+0x28>
 800a16c:	2f62      	cmp	r7, #98	; 0x62
 800a16e:	d80a      	bhi.n	800a186 <_printf_i+0x32>
 800a170:	2f00      	cmp	r7, #0
 800a172:	f000 80d8 	beq.w	800a326 <_printf_i+0x1d2>
 800a176:	2f58      	cmp	r7, #88	; 0x58
 800a178:	f000 80a3 	beq.w	800a2c2 <_printf_i+0x16e>
 800a17c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a184:	e03a      	b.n	800a1fc <_printf_i+0xa8>
 800a186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a18a:	2b15      	cmp	r3, #21
 800a18c:	d8f6      	bhi.n	800a17c <_printf_i+0x28>
 800a18e:	a101      	add	r1, pc, #4	; (adr r1, 800a194 <_printf_i+0x40>)
 800a190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a194:	0800a1ed 	.word	0x0800a1ed
 800a198:	0800a201 	.word	0x0800a201
 800a19c:	0800a17d 	.word	0x0800a17d
 800a1a0:	0800a17d 	.word	0x0800a17d
 800a1a4:	0800a17d 	.word	0x0800a17d
 800a1a8:	0800a17d 	.word	0x0800a17d
 800a1ac:	0800a201 	.word	0x0800a201
 800a1b0:	0800a17d 	.word	0x0800a17d
 800a1b4:	0800a17d 	.word	0x0800a17d
 800a1b8:	0800a17d 	.word	0x0800a17d
 800a1bc:	0800a17d 	.word	0x0800a17d
 800a1c0:	0800a30d 	.word	0x0800a30d
 800a1c4:	0800a231 	.word	0x0800a231
 800a1c8:	0800a2ef 	.word	0x0800a2ef
 800a1cc:	0800a17d 	.word	0x0800a17d
 800a1d0:	0800a17d 	.word	0x0800a17d
 800a1d4:	0800a32f 	.word	0x0800a32f
 800a1d8:	0800a17d 	.word	0x0800a17d
 800a1dc:	0800a231 	.word	0x0800a231
 800a1e0:	0800a17d 	.word	0x0800a17d
 800a1e4:	0800a17d 	.word	0x0800a17d
 800a1e8:	0800a2f7 	.word	0x0800a2f7
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	1d1a      	adds	r2, r3, #4
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	602a      	str	r2, [r5, #0]
 800a1f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e0a3      	b.n	800a348 <_printf_i+0x1f4>
 800a200:	6820      	ldr	r0, [r4, #0]
 800a202:	6829      	ldr	r1, [r5, #0]
 800a204:	0606      	lsls	r6, r0, #24
 800a206:	f101 0304 	add.w	r3, r1, #4
 800a20a:	d50a      	bpl.n	800a222 <_printf_i+0xce>
 800a20c:	680e      	ldr	r6, [r1, #0]
 800a20e:	602b      	str	r3, [r5, #0]
 800a210:	2e00      	cmp	r6, #0
 800a212:	da03      	bge.n	800a21c <_printf_i+0xc8>
 800a214:	232d      	movs	r3, #45	; 0x2d
 800a216:	4276      	negs	r6, r6
 800a218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a21c:	485e      	ldr	r0, [pc, #376]	; (800a398 <_printf_i+0x244>)
 800a21e:	230a      	movs	r3, #10
 800a220:	e019      	b.n	800a256 <_printf_i+0x102>
 800a222:	680e      	ldr	r6, [r1, #0]
 800a224:	602b      	str	r3, [r5, #0]
 800a226:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a22a:	bf18      	it	ne
 800a22c:	b236      	sxthne	r6, r6
 800a22e:	e7ef      	b.n	800a210 <_printf_i+0xbc>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	6820      	ldr	r0, [r4, #0]
 800a234:	1d19      	adds	r1, r3, #4
 800a236:	6029      	str	r1, [r5, #0]
 800a238:	0601      	lsls	r1, r0, #24
 800a23a:	d501      	bpl.n	800a240 <_printf_i+0xec>
 800a23c:	681e      	ldr	r6, [r3, #0]
 800a23e:	e002      	b.n	800a246 <_printf_i+0xf2>
 800a240:	0646      	lsls	r6, r0, #25
 800a242:	d5fb      	bpl.n	800a23c <_printf_i+0xe8>
 800a244:	881e      	ldrh	r6, [r3, #0]
 800a246:	4854      	ldr	r0, [pc, #336]	; (800a398 <_printf_i+0x244>)
 800a248:	2f6f      	cmp	r7, #111	; 0x6f
 800a24a:	bf0c      	ite	eq
 800a24c:	2308      	moveq	r3, #8
 800a24e:	230a      	movne	r3, #10
 800a250:	2100      	movs	r1, #0
 800a252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a256:	6865      	ldr	r5, [r4, #4]
 800a258:	60a5      	str	r5, [r4, #8]
 800a25a:	2d00      	cmp	r5, #0
 800a25c:	bfa2      	ittt	ge
 800a25e:	6821      	ldrge	r1, [r4, #0]
 800a260:	f021 0104 	bicge.w	r1, r1, #4
 800a264:	6021      	strge	r1, [r4, #0]
 800a266:	b90e      	cbnz	r6, 800a26c <_printf_i+0x118>
 800a268:	2d00      	cmp	r5, #0
 800a26a:	d04d      	beq.n	800a308 <_printf_i+0x1b4>
 800a26c:	4615      	mov	r5, r2
 800a26e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a272:	fb03 6711 	mls	r7, r3, r1, r6
 800a276:	5dc7      	ldrb	r7, [r0, r7]
 800a278:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a27c:	4637      	mov	r7, r6
 800a27e:	42bb      	cmp	r3, r7
 800a280:	460e      	mov	r6, r1
 800a282:	d9f4      	bls.n	800a26e <_printf_i+0x11a>
 800a284:	2b08      	cmp	r3, #8
 800a286:	d10b      	bne.n	800a2a0 <_printf_i+0x14c>
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	07de      	lsls	r6, r3, #31
 800a28c:	d508      	bpl.n	800a2a0 <_printf_i+0x14c>
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	6861      	ldr	r1, [r4, #4]
 800a292:	4299      	cmp	r1, r3
 800a294:	bfde      	ittt	le
 800a296:	2330      	movle	r3, #48	; 0x30
 800a298:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a29c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a2a0:	1b52      	subs	r2, r2, r5
 800a2a2:	6122      	str	r2, [r4, #16]
 800a2a4:	f8cd a000 	str.w	sl, [sp]
 800a2a8:	464b      	mov	r3, r9
 800a2aa:	aa03      	add	r2, sp, #12
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	f7ff fee2 	bl	800a078 <_printf_common>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d14c      	bne.n	800a352 <_printf_i+0x1fe>
 800a2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2bc:	b004      	add	sp, #16
 800a2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c2:	4835      	ldr	r0, [pc, #212]	; (800a398 <_printf_i+0x244>)
 800a2c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a2c8:	6829      	ldr	r1, [r5, #0]
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2d0:	6029      	str	r1, [r5, #0]
 800a2d2:	061d      	lsls	r5, r3, #24
 800a2d4:	d514      	bpl.n	800a300 <_printf_i+0x1ac>
 800a2d6:	07df      	lsls	r7, r3, #31
 800a2d8:	bf44      	itt	mi
 800a2da:	f043 0320 	orrmi.w	r3, r3, #32
 800a2de:	6023      	strmi	r3, [r4, #0]
 800a2e0:	b91e      	cbnz	r6, 800a2ea <_printf_i+0x196>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	f023 0320 	bic.w	r3, r3, #32
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	2310      	movs	r3, #16
 800a2ec:	e7b0      	b.n	800a250 <_printf_i+0xfc>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	f043 0320 	orr.w	r3, r3, #32
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	2378      	movs	r3, #120	; 0x78
 800a2f8:	4828      	ldr	r0, [pc, #160]	; (800a39c <_printf_i+0x248>)
 800a2fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2fe:	e7e3      	b.n	800a2c8 <_printf_i+0x174>
 800a300:	0659      	lsls	r1, r3, #25
 800a302:	bf48      	it	mi
 800a304:	b2b6      	uxthmi	r6, r6
 800a306:	e7e6      	b.n	800a2d6 <_printf_i+0x182>
 800a308:	4615      	mov	r5, r2
 800a30a:	e7bb      	b.n	800a284 <_printf_i+0x130>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	6826      	ldr	r6, [r4, #0]
 800a310:	6961      	ldr	r1, [r4, #20]
 800a312:	1d18      	adds	r0, r3, #4
 800a314:	6028      	str	r0, [r5, #0]
 800a316:	0635      	lsls	r5, r6, #24
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	d501      	bpl.n	800a320 <_printf_i+0x1cc>
 800a31c:	6019      	str	r1, [r3, #0]
 800a31e:	e002      	b.n	800a326 <_printf_i+0x1d2>
 800a320:	0670      	lsls	r0, r6, #25
 800a322:	d5fb      	bpl.n	800a31c <_printf_i+0x1c8>
 800a324:	8019      	strh	r1, [r3, #0]
 800a326:	2300      	movs	r3, #0
 800a328:	6123      	str	r3, [r4, #16]
 800a32a:	4615      	mov	r5, r2
 800a32c:	e7ba      	b.n	800a2a4 <_printf_i+0x150>
 800a32e:	682b      	ldr	r3, [r5, #0]
 800a330:	1d1a      	adds	r2, r3, #4
 800a332:	602a      	str	r2, [r5, #0]
 800a334:	681d      	ldr	r5, [r3, #0]
 800a336:	6862      	ldr	r2, [r4, #4]
 800a338:	2100      	movs	r1, #0
 800a33a:	4628      	mov	r0, r5
 800a33c:	f7f5 ff48 	bl	80001d0 <memchr>
 800a340:	b108      	cbz	r0, 800a346 <_printf_i+0x1f2>
 800a342:	1b40      	subs	r0, r0, r5
 800a344:	6060      	str	r0, [r4, #4]
 800a346:	6863      	ldr	r3, [r4, #4]
 800a348:	6123      	str	r3, [r4, #16]
 800a34a:	2300      	movs	r3, #0
 800a34c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a350:	e7a8      	b.n	800a2a4 <_printf_i+0x150>
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	462a      	mov	r2, r5
 800a356:	4649      	mov	r1, r9
 800a358:	4640      	mov	r0, r8
 800a35a:	47d0      	blx	sl
 800a35c:	3001      	adds	r0, #1
 800a35e:	d0ab      	beq.n	800a2b8 <_printf_i+0x164>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	079b      	lsls	r3, r3, #30
 800a364:	d413      	bmi.n	800a38e <_printf_i+0x23a>
 800a366:	68e0      	ldr	r0, [r4, #12]
 800a368:	9b03      	ldr	r3, [sp, #12]
 800a36a:	4298      	cmp	r0, r3
 800a36c:	bfb8      	it	lt
 800a36e:	4618      	movlt	r0, r3
 800a370:	e7a4      	b.n	800a2bc <_printf_i+0x168>
 800a372:	2301      	movs	r3, #1
 800a374:	4632      	mov	r2, r6
 800a376:	4649      	mov	r1, r9
 800a378:	4640      	mov	r0, r8
 800a37a:	47d0      	blx	sl
 800a37c:	3001      	adds	r0, #1
 800a37e:	d09b      	beq.n	800a2b8 <_printf_i+0x164>
 800a380:	3501      	adds	r5, #1
 800a382:	68e3      	ldr	r3, [r4, #12]
 800a384:	9903      	ldr	r1, [sp, #12]
 800a386:	1a5b      	subs	r3, r3, r1
 800a388:	42ab      	cmp	r3, r5
 800a38a:	dcf2      	bgt.n	800a372 <_printf_i+0x21e>
 800a38c:	e7eb      	b.n	800a366 <_printf_i+0x212>
 800a38e:	2500      	movs	r5, #0
 800a390:	f104 0619 	add.w	r6, r4, #25
 800a394:	e7f5      	b.n	800a382 <_printf_i+0x22e>
 800a396:	bf00      	nop
 800a398:	0800b83d 	.word	0x0800b83d
 800a39c:	0800b84e 	.word	0x0800b84e

0800a3a0 <__sread>:
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a8:	f000 f89c 	bl	800a4e4 <_read_r>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	bfab      	itete	ge
 800a3b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3b2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3b4:	181b      	addge	r3, r3, r0
 800a3b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3ba:	bfac      	ite	ge
 800a3bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3be:	81a3      	strhlt	r3, [r4, #12]
 800a3c0:	bd10      	pop	{r4, pc}

0800a3c2 <__swrite>:
 800a3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c6:	461f      	mov	r7, r3
 800a3c8:	898b      	ldrh	r3, [r1, #12]
 800a3ca:	05db      	lsls	r3, r3, #23
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	4616      	mov	r6, r2
 800a3d2:	d505      	bpl.n	800a3e0 <__swrite+0x1e>
 800a3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d8:	2302      	movs	r3, #2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f000 f870 	bl	800a4c0 <_lseek_r>
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3ea:	81a3      	strh	r3, [r4, #12]
 800a3ec:	4632      	mov	r2, r6
 800a3ee:	463b      	mov	r3, r7
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f6:	f000 b817 	b.w	800a428 <_write_r>

0800a3fa <__sseek>:
 800a3fa:	b510      	push	{r4, lr}
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a402:	f000 f85d 	bl	800a4c0 <_lseek_r>
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	bf15      	itete	ne
 800a40c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a40e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a416:	81a3      	strheq	r3, [r4, #12]
 800a418:	bf18      	it	ne
 800a41a:	81a3      	strhne	r3, [r4, #12]
 800a41c:	bd10      	pop	{r4, pc}

0800a41e <__sclose>:
 800a41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a422:	f000 b81b 	b.w	800a45c <_close_r>
	...

0800a428 <_write_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d07      	ldr	r5, [pc, #28]	; (800a448 <_write_r+0x20>)
 800a42c:	4604      	mov	r4, r0
 800a42e:	4608      	mov	r0, r1
 800a430:	4611      	mov	r1, r2
 800a432:	2200      	movs	r2, #0
 800a434:	602a      	str	r2, [r5, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	f7f8 fcb7 	bl	8002daa <_write>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d102      	bne.n	800a446 <_write_r+0x1e>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	b103      	cbz	r3, 800a446 <_write_r+0x1e>
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	20008cac 	.word	0x20008cac

0800a44c <abort>:
 800a44c:	b508      	push	{r3, lr}
 800a44e:	2006      	movs	r0, #6
 800a450:	f000 f882 	bl	800a558 <raise>
 800a454:	2001      	movs	r0, #1
 800a456:	f7f8 fc81 	bl	8002d5c <_exit>
	...

0800a45c <_close_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d06      	ldr	r5, [pc, #24]	; (800a478 <_close_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f8 fcbb 	bl	8002de2 <_close>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_close_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_close_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20008cac 	.word	0x20008cac

0800a47c <_fstat_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d07      	ldr	r5, [pc, #28]	; (800a49c <_fstat_r+0x20>)
 800a480:	2300      	movs	r3, #0
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	4611      	mov	r1, r2
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	f7f8 fcb6 	bl	8002dfa <_fstat>
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	d102      	bne.n	800a498 <_fstat_r+0x1c>
 800a492:	682b      	ldr	r3, [r5, #0]
 800a494:	b103      	cbz	r3, 800a498 <_fstat_r+0x1c>
 800a496:	6023      	str	r3, [r4, #0]
 800a498:	bd38      	pop	{r3, r4, r5, pc}
 800a49a:	bf00      	nop
 800a49c:	20008cac 	.word	0x20008cac

0800a4a0 <_isatty_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d06      	ldr	r5, [pc, #24]	; (800a4bc <_isatty_r+0x1c>)
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	602b      	str	r3, [r5, #0]
 800a4ac:	f7f8 fcb5 	bl	8002e1a <_isatty>
 800a4b0:	1c43      	adds	r3, r0, #1
 800a4b2:	d102      	bne.n	800a4ba <_isatty_r+0x1a>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	b103      	cbz	r3, 800a4ba <_isatty_r+0x1a>
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	20008cac 	.word	0x20008cac

0800a4c0 <_lseek_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d07      	ldr	r5, [pc, #28]	; (800a4e0 <_lseek_r+0x20>)
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	4608      	mov	r0, r1
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	602a      	str	r2, [r5, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f7f8 fcae 	bl	8002e30 <_lseek>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_lseek_r+0x1e>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_lseek_r+0x1e>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	20008cac 	.word	0x20008cac

0800a4e4 <_read_r>:
 800a4e4:	b538      	push	{r3, r4, r5, lr}
 800a4e6:	4d07      	ldr	r5, [pc, #28]	; (800a504 <_read_r+0x20>)
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	4608      	mov	r0, r1
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	602a      	str	r2, [r5, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f7f8 fc3c 	bl	8002d70 <_read>
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	d102      	bne.n	800a502 <_read_r+0x1e>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	b103      	cbz	r3, 800a502 <_read_r+0x1e>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	20008cac 	.word	0x20008cac

0800a508 <_raise_r>:
 800a508:	291f      	cmp	r1, #31
 800a50a:	b538      	push	{r3, r4, r5, lr}
 800a50c:	4604      	mov	r4, r0
 800a50e:	460d      	mov	r5, r1
 800a510:	d904      	bls.n	800a51c <_raise_r+0x14>
 800a512:	2316      	movs	r3, #22
 800a514:	6003      	str	r3, [r0, #0]
 800a516:	f04f 30ff 	mov.w	r0, #4294967295
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a51e:	b112      	cbz	r2, 800a526 <_raise_r+0x1e>
 800a520:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a524:	b94b      	cbnz	r3, 800a53a <_raise_r+0x32>
 800a526:	4620      	mov	r0, r4
 800a528:	f000 f830 	bl	800a58c <_getpid_r>
 800a52c:	462a      	mov	r2, r5
 800a52e:	4601      	mov	r1, r0
 800a530:	4620      	mov	r0, r4
 800a532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a536:	f000 b817 	b.w	800a568 <_kill_r>
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d00a      	beq.n	800a554 <_raise_r+0x4c>
 800a53e:	1c59      	adds	r1, r3, #1
 800a540:	d103      	bne.n	800a54a <_raise_r+0x42>
 800a542:	2316      	movs	r3, #22
 800a544:	6003      	str	r3, [r0, #0]
 800a546:	2001      	movs	r0, #1
 800a548:	e7e7      	b.n	800a51a <_raise_r+0x12>
 800a54a:	2400      	movs	r4, #0
 800a54c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a550:	4628      	mov	r0, r5
 800a552:	4798      	blx	r3
 800a554:	2000      	movs	r0, #0
 800a556:	e7e0      	b.n	800a51a <_raise_r+0x12>

0800a558 <raise>:
 800a558:	4b02      	ldr	r3, [pc, #8]	; (800a564 <raise+0xc>)
 800a55a:	4601      	mov	r1, r0
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	f7ff bfd3 	b.w	800a508 <_raise_r>
 800a562:	bf00      	nop
 800a564:	20000010 	.word	0x20000010

0800a568 <_kill_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	4d07      	ldr	r5, [pc, #28]	; (800a588 <_kill_r+0x20>)
 800a56c:	2300      	movs	r3, #0
 800a56e:	4604      	mov	r4, r0
 800a570:	4608      	mov	r0, r1
 800a572:	4611      	mov	r1, r2
 800a574:	602b      	str	r3, [r5, #0]
 800a576:	f7f8 fbe1 	bl	8002d3c <_kill>
 800a57a:	1c43      	adds	r3, r0, #1
 800a57c:	d102      	bne.n	800a584 <_kill_r+0x1c>
 800a57e:	682b      	ldr	r3, [r5, #0]
 800a580:	b103      	cbz	r3, 800a584 <_kill_r+0x1c>
 800a582:	6023      	str	r3, [r4, #0]
 800a584:	bd38      	pop	{r3, r4, r5, pc}
 800a586:	bf00      	nop
 800a588:	20008cac 	.word	0x20008cac

0800a58c <_getpid_r>:
 800a58c:	f7f8 bbce 	b.w	8002d2c <_getpid>

0800a590 <pow>:
 800a590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a592:	ed2d 8b02 	vpush	{d8}
 800a596:	eeb0 8a40 	vmov.f32	s16, s0
 800a59a:	eef0 8a60 	vmov.f32	s17, s1
 800a59e:	ec55 4b11 	vmov	r4, r5, d1
 800a5a2:	f000 f865 	bl	800a670 <__ieee754_pow>
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	462b      	mov	r3, r5
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	ec57 6b10 	vmov	r6, r7, d0
 800a5b2:	f7f6 fab3 	bl	8000b1c <__aeabi_dcmpun>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d13b      	bne.n	800a632 <pow+0xa2>
 800a5ba:	ec51 0b18 	vmov	r0, r1, d8
 800a5be:	2200      	movs	r2, #0
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f7f6 fa79 	bl	8000ab8 <__aeabi_dcmpeq>
 800a5c6:	b1b8      	cbz	r0, 800a5f8 <pow+0x68>
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	f7f6 fa72 	bl	8000ab8 <__aeabi_dcmpeq>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d146      	bne.n	800a666 <pow+0xd6>
 800a5d8:	ec45 4b10 	vmov	d0, r4, r5
 800a5dc:	f000 fe61 	bl	800b2a2 <finite>
 800a5e0:	b338      	cbz	r0, 800a632 <pow+0xa2>
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	f7f6 fa6f 	bl	8000acc <__aeabi_dcmplt>
 800a5ee:	b300      	cbz	r0, 800a632 <pow+0xa2>
 800a5f0:	f7fe fe84 	bl	80092fc <__errno>
 800a5f4:	2322      	movs	r3, #34	; 0x22
 800a5f6:	e01b      	b.n	800a630 <pow+0xa0>
 800a5f8:	ec47 6b10 	vmov	d0, r6, r7
 800a5fc:	f000 fe51 	bl	800b2a2 <finite>
 800a600:	b9e0      	cbnz	r0, 800a63c <pow+0xac>
 800a602:	eeb0 0a48 	vmov.f32	s0, s16
 800a606:	eef0 0a68 	vmov.f32	s1, s17
 800a60a:	f000 fe4a 	bl	800b2a2 <finite>
 800a60e:	b1a8      	cbz	r0, 800a63c <pow+0xac>
 800a610:	ec45 4b10 	vmov	d0, r4, r5
 800a614:	f000 fe45 	bl	800b2a2 <finite>
 800a618:	b180      	cbz	r0, 800a63c <pow+0xac>
 800a61a:	4632      	mov	r2, r6
 800a61c:	463b      	mov	r3, r7
 800a61e:	4630      	mov	r0, r6
 800a620:	4639      	mov	r1, r7
 800a622:	f7f6 fa7b 	bl	8000b1c <__aeabi_dcmpun>
 800a626:	2800      	cmp	r0, #0
 800a628:	d0e2      	beq.n	800a5f0 <pow+0x60>
 800a62a:	f7fe fe67 	bl	80092fc <__errno>
 800a62e:	2321      	movs	r3, #33	; 0x21
 800a630:	6003      	str	r3, [r0, #0]
 800a632:	ecbd 8b02 	vpop	{d8}
 800a636:	ec47 6b10 	vmov	d0, r6, r7
 800a63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a63c:	2200      	movs	r2, #0
 800a63e:	2300      	movs	r3, #0
 800a640:	4630      	mov	r0, r6
 800a642:	4639      	mov	r1, r7
 800a644:	f7f6 fa38 	bl	8000ab8 <__aeabi_dcmpeq>
 800a648:	2800      	cmp	r0, #0
 800a64a:	d0f2      	beq.n	800a632 <pow+0xa2>
 800a64c:	eeb0 0a48 	vmov.f32	s0, s16
 800a650:	eef0 0a68 	vmov.f32	s1, s17
 800a654:	f000 fe25 	bl	800b2a2 <finite>
 800a658:	2800      	cmp	r0, #0
 800a65a:	d0ea      	beq.n	800a632 <pow+0xa2>
 800a65c:	ec45 4b10 	vmov	d0, r4, r5
 800a660:	f000 fe1f 	bl	800b2a2 <finite>
 800a664:	e7c3      	b.n	800a5ee <pow+0x5e>
 800a666:	4f01      	ldr	r7, [pc, #4]	; (800a66c <pow+0xdc>)
 800a668:	2600      	movs	r6, #0
 800a66a:	e7e2      	b.n	800a632 <pow+0xa2>
 800a66c:	3ff00000 	.word	0x3ff00000

0800a670 <__ieee754_pow>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	ed2d 8b06 	vpush	{d8-d10}
 800a678:	b089      	sub	sp, #36	; 0x24
 800a67a:	ed8d 1b00 	vstr	d1, [sp]
 800a67e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a682:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a686:	ea58 0102 	orrs.w	r1, r8, r2
 800a68a:	ec57 6b10 	vmov	r6, r7, d0
 800a68e:	d115      	bne.n	800a6bc <__ieee754_pow+0x4c>
 800a690:	19b3      	adds	r3, r6, r6
 800a692:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a696:	4152      	adcs	r2, r2
 800a698:	4299      	cmp	r1, r3
 800a69a:	4b89      	ldr	r3, [pc, #548]	; (800a8c0 <__ieee754_pow+0x250>)
 800a69c:	4193      	sbcs	r3, r2
 800a69e:	f080 84d2 	bcs.w	800b046 <__ieee754_pow+0x9d6>
 800a6a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	f7f5 fde7 	bl	800027c <__adddf3>
 800a6ae:	ec41 0b10 	vmov	d0, r0, r1
 800a6b2:	b009      	add	sp, #36	; 0x24
 800a6b4:	ecbd 8b06 	vpop	{d8-d10}
 800a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6bc:	4b81      	ldr	r3, [pc, #516]	; (800a8c4 <__ieee754_pow+0x254>)
 800a6be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a6c2:	429c      	cmp	r4, r3
 800a6c4:	ee10 aa10 	vmov	sl, s0
 800a6c8:	463d      	mov	r5, r7
 800a6ca:	dc06      	bgt.n	800a6da <__ieee754_pow+0x6a>
 800a6cc:	d101      	bne.n	800a6d2 <__ieee754_pow+0x62>
 800a6ce:	2e00      	cmp	r6, #0
 800a6d0:	d1e7      	bne.n	800a6a2 <__ieee754_pow+0x32>
 800a6d2:	4598      	cmp	r8, r3
 800a6d4:	dc01      	bgt.n	800a6da <__ieee754_pow+0x6a>
 800a6d6:	d10f      	bne.n	800a6f8 <__ieee754_pow+0x88>
 800a6d8:	b172      	cbz	r2, 800a6f8 <__ieee754_pow+0x88>
 800a6da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a6de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a6e2:	ea55 050a 	orrs.w	r5, r5, sl
 800a6e6:	d1dc      	bne.n	800a6a2 <__ieee754_pow+0x32>
 800a6e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6ec:	18db      	adds	r3, r3, r3
 800a6ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a6f2:	4152      	adcs	r2, r2
 800a6f4:	429d      	cmp	r5, r3
 800a6f6:	e7d0      	b.n	800a69a <__ieee754_pow+0x2a>
 800a6f8:	2d00      	cmp	r5, #0
 800a6fa:	da3b      	bge.n	800a774 <__ieee754_pow+0x104>
 800a6fc:	4b72      	ldr	r3, [pc, #456]	; (800a8c8 <__ieee754_pow+0x258>)
 800a6fe:	4598      	cmp	r8, r3
 800a700:	dc51      	bgt.n	800a7a6 <__ieee754_pow+0x136>
 800a702:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a706:	4598      	cmp	r8, r3
 800a708:	f340 84ac 	ble.w	800b064 <__ieee754_pow+0x9f4>
 800a70c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a710:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a714:	2b14      	cmp	r3, #20
 800a716:	dd0f      	ble.n	800a738 <__ieee754_pow+0xc8>
 800a718:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a71c:	fa22 f103 	lsr.w	r1, r2, r3
 800a720:	fa01 f303 	lsl.w	r3, r1, r3
 800a724:	4293      	cmp	r3, r2
 800a726:	f040 849d 	bne.w	800b064 <__ieee754_pow+0x9f4>
 800a72a:	f001 0101 	and.w	r1, r1, #1
 800a72e:	f1c1 0302 	rsb	r3, r1, #2
 800a732:	9304      	str	r3, [sp, #16]
 800a734:	b182      	cbz	r2, 800a758 <__ieee754_pow+0xe8>
 800a736:	e05f      	b.n	800a7f8 <__ieee754_pow+0x188>
 800a738:	2a00      	cmp	r2, #0
 800a73a:	d15b      	bne.n	800a7f4 <__ieee754_pow+0x184>
 800a73c:	f1c3 0314 	rsb	r3, r3, #20
 800a740:	fa48 f103 	asr.w	r1, r8, r3
 800a744:	fa01 f303 	lsl.w	r3, r1, r3
 800a748:	4543      	cmp	r3, r8
 800a74a:	f040 8488 	bne.w	800b05e <__ieee754_pow+0x9ee>
 800a74e:	f001 0101 	and.w	r1, r1, #1
 800a752:	f1c1 0302 	rsb	r3, r1, #2
 800a756:	9304      	str	r3, [sp, #16]
 800a758:	4b5c      	ldr	r3, [pc, #368]	; (800a8cc <__ieee754_pow+0x25c>)
 800a75a:	4598      	cmp	r8, r3
 800a75c:	d132      	bne.n	800a7c4 <__ieee754_pow+0x154>
 800a75e:	f1b9 0f00 	cmp.w	r9, #0
 800a762:	f280 8478 	bge.w	800b056 <__ieee754_pow+0x9e6>
 800a766:	4959      	ldr	r1, [pc, #356]	; (800a8cc <__ieee754_pow+0x25c>)
 800a768:	4632      	mov	r2, r6
 800a76a:	463b      	mov	r3, r7
 800a76c:	2000      	movs	r0, #0
 800a76e:	f7f6 f865 	bl	800083c <__aeabi_ddiv>
 800a772:	e79c      	b.n	800a6ae <__ieee754_pow+0x3e>
 800a774:	2300      	movs	r3, #0
 800a776:	9304      	str	r3, [sp, #16]
 800a778:	2a00      	cmp	r2, #0
 800a77a:	d13d      	bne.n	800a7f8 <__ieee754_pow+0x188>
 800a77c:	4b51      	ldr	r3, [pc, #324]	; (800a8c4 <__ieee754_pow+0x254>)
 800a77e:	4598      	cmp	r8, r3
 800a780:	d1ea      	bne.n	800a758 <__ieee754_pow+0xe8>
 800a782:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a786:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a78a:	ea53 030a 	orrs.w	r3, r3, sl
 800a78e:	f000 845a 	beq.w	800b046 <__ieee754_pow+0x9d6>
 800a792:	4b4f      	ldr	r3, [pc, #316]	; (800a8d0 <__ieee754_pow+0x260>)
 800a794:	429c      	cmp	r4, r3
 800a796:	dd08      	ble.n	800a7aa <__ieee754_pow+0x13a>
 800a798:	f1b9 0f00 	cmp.w	r9, #0
 800a79c:	f2c0 8457 	blt.w	800b04e <__ieee754_pow+0x9de>
 800a7a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7a4:	e783      	b.n	800a6ae <__ieee754_pow+0x3e>
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	e7e5      	b.n	800a776 <__ieee754_pow+0x106>
 800a7aa:	f1b9 0f00 	cmp.w	r9, #0
 800a7ae:	f04f 0000 	mov.w	r0, #0
 800a7b2:	f04f 0100 	mov.w	r1, #0
 800a7b6:	f6bf af7a 	bge.w	800a6ae <__ieee754_pow+0x3e>
 800a7ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a7be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a7c2:	e774      	b.n	800a6ae <__ieee754_pow+0x3e>
 800a7c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a7c8:	d106      	bne.n	800a7d8 <__ieee754_pow+0x168>
 800a7ca:	4632      	mov	r2, r6
 800a7cc:	463b      	mov	r3, r7
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	4639      	mov	r1, r7
 800a7d2:	f7f5 ff09 	bl	80005e8 <__aeabi_dmul>
 800a7d6:	e76a      	b.n	800a6ae <__ieee754_pow+0x3e>
 800a7d8:	4b3e      	ldr	r3, [pc, #248]	; (800a8d4 <__ieee754_pow+0x264>)
 800a7da:	4599      	cmp	r9, r3
 800a7dc:	d10c      	bne.n	800a7f8 <__ieee754_pow+0x188>
 800a7de:	2d00      	cmp	r5, #0
 800a7e0:	db0a      	blt.n	800a7f8 <__ieee754_pow+0x188>
 800a7e2:	ec47 6b10 	vmov	d0, r6, r7
 800a7e6:	b009      	add	sp, #36	; 0x24
 800a7e8:	ecbd 8b06 	vpop	{d8-d10}
 800a7ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	f000 bc6c 	b.w	800b0cc <__ieee754_sqrt>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	ec47 6b10 	vmov	d0, r6, r7
 800a7fc:	f000 fd48 	bl	800b290 <fabs>
 800a800:	ec51 0b10 	vmov	r0, r1, d0
 800a804:	f1ba 0f00 	cmp.w	sl, #0
 800a808:	d129      	bne.n	800a85e <__ieee754_pow+0x1ee>
 800a80a:	b124      	cbz	r4, 800a816 <__ieee754_pow+0x1a6>
 800a80c:	4b2f      	ldr	r3, [pc, #188]	; (800a8cc <__ieee754_pow+0x25c>)
 800a80e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a812:	429a      	cmp	r2, r3
 800a814:	d123      	bne.n	800a85e <__ieee754_pow+0x1ee>
 800a816:	f1b9 0f00 	cmp.w	r9, #0
 800a81a:	da05      	bge.n	800a828 <__ieee754_pow+0x1b8>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	2000      	movs	r0, #0
 800a822:	492a      	ldr	r1, [pc, #168]	; (800a8cc <__ieee754_pow+0x25c>)
 800a824:	f7f6 f80a 	bl	800083c <__aeabi_ddiv>
 800a828:	2d00      	cmp	r5, #0
 800a82a:	f6bf af40 	bge.w	800a6ae <__ieee754_pow+0x3e>
 800a82e:	9b04      	ldr	r3, [sp, #16]
 800a830:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a834:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a838:	4323      	orrs	r3, r4
 800a83a:	d108      	bne.n	800a84e <__ieee754_pow+0x1de>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4610      	mov	r0, r2
 800a842:	4619      	mov	r1, r3
 800a844:	f7f5 fd18 	bl	8000278 <__aeabi_dsub>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	e78f      	b.n	800a76e <__ieee754_pow+0xfe>
 800a84e:	9b04      	ldr	r3, [sp, #16]
 800a850:	2b01      	cmp	r3, #1
 800a852:	f47f af2c 	bne.w	800a6ae <__ieee754_pow+0x3e>
 800a856:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a85a:	4619      	mov	r1, r3
 800a85c:	e727      	b.n	800a6ae <__ieee754_pow+0x3e>
 800a85e:	0feb      	lsrs	r3, r5, #31
 800a860:	3b01      	subs	r3, #1
 800a862:	9306      	str	r3, [sp, #24]
 800a864:	9a06      	ldr	r2, [sp, #24]
 800a866:	9b04      	ldr	r3, [sp, #16]
 800a868:	4313      	orrs	r3, r2
 800a86a:	d102      	bne.n	800a872 <__ieee754_pow+0x202>
 800a86c:	4632      	mov	r2, r6
 800a86e:	463b      	mov	r3, r7
 800a870:	e7e6      	b.n	800a840 <__ieee754_pow+0x1d0>
 800a872:	4b19      	ldr	r3, [pc, #100]	; (800a8d8 <__ieee754_pow+0x268>)
 800a874:	4598      	cmp	r8, r3
 800a876:	f340 80fb 	ble.w	800aa70 <__ieee754_pow+0x400>
 800a87a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a87e:	4598      	cmp	r8, r3
 800a880:	4b13      	ldr	r3, [pc, #76]	; (800a8d0 <__ieee754_pow+0x260>)
 800a882:	dd0c      	ble.n	800a89e <__ieee754_pow+0x22e>
 800a884:	429c      	cmp	r4, r3
 800a886:	dc0f      	bgt.n	800a8a8 <__ieee754_pow+0x238>
 800a888:	f1b9 0f00 	cmp.w	r9, #0
 800a88c:	da0f      	bge.n	800a8ae <__ieee754_pow+0x23e>
 800a88e:	2000      	movs	r0, #0
 800a890:	b009      	add	sp, #36	; 0x24
 800a892:	ecbd 8b06 	vpop	{d8-d10}
 800a896:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89a:	f000 bcf0 	b.w	800b27e <__math_oflow>
 800a89e:	429c      	cmp	r4, r3
 800a8a0:	dbf2      	blt.n	800a888 <__ieee754_pow+0x218>
 800a8a2:	4b0a      	ldr	r3, [pc, #40]	; (800a8cc <__ieee754_pow+0x25c>)
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	dd19      	ble.n	800a8dc <__ieee754_pow+0x26c>
 800a8a8:	f1b9 0f00 	cmp.w	r9, #0
 800a8ac:	dcef      	bgt.n	800a88e <__ieee754_pow+0x21e>
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	b009      	add	sp, #36	; 0x24
 800a8b2:	ecbd 8b06 	vpop	{d8-d10}
 800a8b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ba:	f000 bcd7 	b.w	800b26c <__math_uflow>
 800a8be:	bf00      	nop
 800a8c0:	fff00000 	.word	0xfff00000
 800a8c4:	7ff00000 	.word	0x7ff00000
 800a8c8:	433fffff 	.word	0x433fffff
 800a8cc:	3ff00000 	.word	0x3ff00000
 800a8d0:	3fefffff 	.word	0x3fefffff
 800a8d4:	3fe00000 	.word	0x3fe00000
 800a8d8:	41e00000 	.word	0x41e00000
 800a8dc:	4b60      	ldr	r3, [pc, #384]	; (800aa60 <__ieee754_pow+0x3f0>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f7f5 fcca 	bl	8000278 <__aeabi_dsub>
 800a8e4:	a354      	add	r3, pc, #336	; (adr r3, 800aa38 <__ieee754_pow+0x3c8>)
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	460d      	mov	r5, r1
 800a8ee:	f7f5 fe7b 	bl	80005e8 <__aeabi_dmul>
 800a8f2:	a353      	add	r3, pc, #332	; (adr r3, 800aa40 <__ieee754_pow+0x3d0>)
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	460f      	mov	r7, r1
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	4629      	mov	r1, r5
 800a900:	f7f5 fe72 	bl	80005e8 <__aeabi_dmul>
 800a904:	4b57      	ldr	r3, [pc, #348]	; (800aa64 <__ieee754_pow+0x3f4>)
 800a906:	4682      	mov	sl, r0
 800a908:	468b      	mov	fp, r1
 800a90a:	2200      	movs	r2, #0
 800a90c:	4620      	mov	r0, r4
 800a90e:	4629      	mov	r1, r5
 800a910:	f7f5 fe6a 	bl	80005e8 <__aeabi_dmul>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	a14b      	add	r1, pc, #300	; (adr r1, 800aa48 <__ieee754_pow+0x3d8>)
 800a91a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a91e:	f7f5 fcab 	bl	8000278 <__aeabi_dsub>
 800a922:	4622      	mov	r2, r4
 800a924:	462b      	mov	r3, r5
 800a926:	f7f5 fe5f 	bl	80005e8 <__aeabi_dmul>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	2000      	movs	r0, #0
 800a930:	494d      	ldr	r1, [pc, #308]	; (800aa68 <__ieee754_pow+0x3f8>)
 800a932:	f7f5 fca1 	bl	8000278 <__aeabi_dsub>
 800a936:	4622      	mov	r2, r4
 800a938:	4680      	mov	r8, r0
 800a93a:	4689      	mov	r9, r1
 800a93c:	462b      	mov	r3, r5
 800a93e:	4620      	mov	r0, r4
 800a940:	4629      	mov	r1, r5
 800a942:	f7f5 fe51 	bl	80005e8 <__aeabi_dmul>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	4640      	mov	r0, r8
 800a94c:	4649      	mov	r1, r9
 800a94e:	f7f5 fe4b 	bl	80005e8 <__aeabi_dmul>
 800a952:	a33f      	add	r3, pc, #252	; (adr r3, 800aa50 <__ieee754_pow+0x3e0>)
 800a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a958:	f7f5 fe46 	bl	80005e8 <__aeabi_dmul>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	4650      	mov	r0, sl
 800a962:	4659      	mov	r1, fp
 800a964:	f7f5 fc88 	bl	8000278 <__aeabi_dsub>
 800a968:	4602      	mov	r2, r0
 800a96a:	460b      	mov	r3, r1
 800a96c:	4680      	mov	r8, r0
 800a96e:	4689      	mov	r9, r1
 800a970:	4630      	mov	r0, r6
 800a972:	4639      	mov	r1, r7
 800a974:	f7f5 fc82 	bl	800027c <__adddf3>
 800a978:	2000      	movs	r0, #0
 800a97a:	4632      	mov	r2, r6
 800a97c:	463b      	mov	r3, r7
 800a97e:	4604      	mov	r4, r0
 800a980:	460d      	mov	r5, r1
 800a982:	f7f5 fc79 	bl	8000278 <__aeabi_dsub>
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	4640      	mov	r0, r8
 800a98c:	4649      	mov	r1, r9
 800a98e:	f7f5 fc73 	bl	8000278 <__aeabi_dsub>
 800a992:	9b04      	ldr	r3, [sp, #16]
 800a994:	9a06      	ldr	r2, [sp, #24]
 800a996:	3b01      	subs	r3, #1
 800a998:	4313      	orrs	r3, r2
 800a99a:	4682      	mov	sl, r0
 800a99c:	468b      	mov	fp, r1
 800a99e:	f040 81e7 	bne.w	800ad70 <__ieee754_pow+0x700>
 800a9a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800aa58 <__ieee754_pow+0x3e8>
 800a9a6:	eeb0 8a47 	vmov.f32	s16, s14
 800a9aa:	eef0 8a67 	vmov.f32	s17, s15
 800a9ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a9b2:	2600      	movs	r6, #0
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	463b      	mov	r3, r7
 800a9b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9bc:	f7f5 fc5c 	bl	8000278 <__aeabi_dsub>
 800a9c0:	4622      	mov	r2, r4
 800a9c2:	462b      	mov	r3, r5
 800a9c4:	f7f5 fe10 	bl	80005e8 <__aeabi_dmul>
 800a9c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9cc:	4680      	mov	r8, r0
 800a9ce:	4689      	mov	r9, r1
 800a9d0:	4650      	mov	r0, sl
 800a9d2:	4659      	mov	r1, fp
 800a9d4:	f7f5 fe08 	bl	80005e8 <__aeabi_dmul>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4640      	mov	r0, r8
 800a9de:	4649      	mov	r1, r9
 800a9e0:	f7f5 fc4c 	bl	800027c <__adddf3>
 800a9e4:	4632      	mov	r2, r6
 800a9e6:	463b      	mov	r3, r7
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	4689      	mov	r9, r1
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	f7f5 fdfa 	bl	80005e8 <__aeabi_dmul>
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	460d      	mov	r5, r1
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	4649      	mov	r1, r9
 800a9fe:	4640      	mov	r0, r8
 800aa00:	f7f5 fc3c 	bl	800027c <__adddf3>
 800aa04:	4b19      	ldr	r3, [pc, #100]	; (800aa6c <__ieee754_pow+0x3fc>)
 800aa06:	4299      	cmp	r1, r3
 800aa08:	ec45 4b19 	vmov	d9, r4, r5
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	460f      	mov	r7, r1
 800aa10:	468b      	mov	fp, r1
 800aa12:	f340 82f1 	ble.w	800aff8 <__ieee754_pow+0x988>
 800aa16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aa1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aa1e:	4303      	orrs	r3, r0
 800aa20:	f000 81e4 	beq.w	800adec <__ieee754_pow+0x77c>
 800aa24:	ec51 0b18 	vmov	r0, r1, d8
 800aa28:	2200      	movs	r2, #0
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f7f6 f84e 	bl	8000acc <__aeabi_dcmplt>
 800aa30:	3800      	subs	r0, #0
 800aa32:	bf18      	it	ne
 800aa34:	2001      	movne	r0, #1
 800aa36:	e72b      	b.n	800a890 <__ieee754_pow+0x220>
 800aa38:	60000000 	.word	0x60000000
 800aa3c:	3ff71547 	.word	0x3ff71547
 800aa40:	f85ddf44 	.word	0xf85ddf44
 800aa44:	3e54ae0b 	.word	0x3e54ae0b
 800aa48:	55555555 	.word	0x55555555
 800aa4c:	3fd55555 	.word	0x3fd55555
 800aa50:	652b82fe 	.word	0x652b82fe
 800aa54:	3ff71547 	.word	0x3ff71547
 800aa58:	00000000 	.word	0x00000000
 800aa5c:	bff00000 	.word	0xbff00000
 800aa60:	3ff00000 	.word	0x3ff00000
 800aa64:	3fd00000 	.word	0x3fd00000
 800aa68:	3fe00000 	.word	0x3fe00000
 800aa6c:	408fffff 	.word	0x408fffff
 800aa70:	4bd5      	ldr	r3, [pc, #852]	; (800adc8 <__ieee754_pow+0x758>)
 800aa72:	402b      	ands	r3, r5
 800aa74:	2200      	movs	r2, #0
 800aa76:	b92b      	cbnz	r3, 800aa84 <__ieee754_pow+0x414>
 800aa78:	4bd4      	ldr	r3, [pc, #848]	; (800adcc <__ieee754_pow+0x75c>)
 800aa7a:	f7f5 fdb5 	bl	80005e8 <__aeabi_dmul>
 800aa7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aa82:	460c      	mov	r4, r1
 800aa84:	1523      	asrs	r3, r4, #20
 800aa86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa8a:	4413      	add	r3, r2
 800aa8c:	9305      	str	r3, [sp, #20]
 800aa8e:	4bd0      	ldr	r3, [pc, #832]	; (800add0 <__ieee754_pow+0x760>)
 800aa90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aa94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aa98:	429c      	cmp	r4, r3
 800aa9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa9e:	dd08      	ble.n	800aab2 <__ieee754_pow+0x442>
 800aaa0:	4bcc      	ldr	r3, [pc, #816]	; (800add4 <__ieee754_pow+0x764>)
 800aaa2:	429c      	cmp	r4, r3
 800aaa4:	f340 8162 	ble.w	800ad6c <__ieee754_pow+0x6fc>
 800aaa8:	9b05      	ldr	r3, [sp, #20]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	9305      	str	r3, [sp, #20]
 800aaae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aab2:	2400      	movs	r4, #0
 800aab4:	00e3      	lsls	r3, r4, #3
 800aab6:	9307      	str	r3, [sp, #28]
 800aab8:	4bc7      	ldr	r3, [pc, #796]	; (800add8 <__ieee754_pow+0x768>)
 800aaba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aabe:	ed93 7b00 	vldr	d7, [r3]
 800aac2:	4629      	mov	r1, r5
 800aac4:	ec53 2b17 	vmov	r2, r3, d7
 800aac8:	eeb0 9a47 	vmov.f32	s18, s14
 800aacc:	eef0 9a67 	vmov.f32	s19, s15
 800aad0:	4682      	mov	sl, r0
 800aad2:	f7f5 fbd1 	bl	8000278 <__aeabi_dsub>
 800aad6:	4652      	mov	r2, sl
 800aad8:	4606      	mov	r6, r0
 800aada:	460f      	mov	r7, r1
 800aadc:	462b      	mov	r3, r5
 800aade:	ec51 0b19 	vmov	r0, r1, d9
 800aae2:	f7f5 fbcb 	bl	800027c <__adddf3>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	2000      	movs	r0, #0
 800aaec:	49bb      	ldr	r1, [pc, #748]	; (800addc <__ieee754_pow+0x76c>)
 800aaee:	f7f5 fea5 	bl	800083c <__aeabi_ddiv>
 800aaf2:	ec41 0b1a 	vmov	d10, r0, r1
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4630      	mov	r0, r6
 800aafc:	4639      	mov	r1, r7
 800aafe:	f7f5 fd73 	bl	80005e8 <__aeabi_dmul>
 800ab02:	2300      	movs	r3, #0
 800ab04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab08:	9302      	str	r3, [sp, #8]
 800ab0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab0e:	46ab      	mov	fp, r5
 800ab10:	106d      	asrs	r5, r5, #1
 800ab12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ab16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ab1a:	ec41 0b18 	vmov	d8, r0, r1
 800ab1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ab22:	2200      	movs	r2, #0
 800ab24:	4640      	mov	r0, r8
 800ab26:	4649      	mov	r1, r9
 800ab28:	4614      	mov	r4, r2
 800ab2a:	461d      	mov	r5, r3
 800ab2c:	f7f5 fd5c 	bl	80005e8 <__aeabi_dmul>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4630      	mov	r0, r6
 800ab36:	4639      	mov	r1, r7
 800ab38:	f7f5 fb9e 	bl	8000278 <__aeabi_dsub>
 800ab3c:	ec53 2b19 	vmov	r2, r3, d9
 800ab40:	4606      	mov	r6, r0
 800ab42:	460f      	mov	r7, r1
 800ab44:	4620      	mov	r0, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f5 fb96 	bl	8000278 <__aeabi_dsub>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4650      	mov	r0, sl
 800ab52:	4659      	mov	r1, fp
 800ab54:	f7f5 fb90 	bl	8000278 <__aeabi_dsub>
 800ab58:	4642      	mov	r2, r8
 800ab5a:	464b      	mov	r3, r9
 800ab5c:	f7f5 fd44 	bl	80005e8 <__aeabi_dmul>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4630      	mov	r0, r6
 800ab66:	4639      	mov	r1, r7
 800ab68:	f7f5 fb86 	bl	8000278 <__aeabi_dsub>
 800ab6c:	ec53 2b1a 	vmov	r2, r3, d10
 800ab70:	f7f5 fd3a 	bl	80005e8 <__aeabi_dmul>
 800ab74:	ec53 2b18 	vmov	r2, r3, d8
 800ab78:	ec41 0b19 	vmov	d9, r0, r1
 800ab7c:	ec51 0b18 	vmov	r0, r1, d8
 800ab80:	f7f5 fd32 	bl	80005e8 <__aeabi_dmul>
 800ab84:	a37c      	add	r3, pc, #496	; (adr r3, 800ad78 <__ieee754_pow+0x708>)
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	460d      	mov	r5, r1
 800ab8e:	f7f5 fd2b 	bl	80005e8 <__aeabi_dmul>
 800ab92:	a37b      	add	r3, pc, #492	; (adr r3, 800ad80 <__ieee754_pow+0x710>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fb70 	bl	800027c <__adddf3>
 800ab9c:	4622      	mov	r2, r4
 800ab9e:	462b      	mov	r3, r5
 800aba0:	f7f5 fd22 	bl	80005e8 <__aeabi_dmul>
 800aba4:	a378      	add	r3, pc, #480	; (adr r3, 800ad88 <__ieee754_pow+0x718>)
 800aba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abaa:	f7f5 fb67 	bl	800027c <__adddf3>
 800abae:	4622      	mov	r2, r4
 800abb0:	462b      	mov	r3, r5
 800abb2:	f7f5 fd19 	bl	80005e8 <__aeabi_dmul>
 800abb6:	a376      	add	r3, pc, #472	; (adr r3, 800ad90 <__ieee754_pow+0x720>)
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	f7f5 fb5e 	bl	800027c <__adddf3>
 800abc0:	4622      	mov	r2, r4
 800abc2:	462b      	mov	r3, r5
 800abc4:	f7f5 fd10 	bl	80005e8 <__aeabi_dmul>
 800abc8:	a373      	add	r3, pc, #460	; (adr r3, 800ad98 <__ieee754_pow+0x728>)
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	f7f5 fb55 	bl	800027c <__adddf3>
 800abd2:	4622      	mov	r2, r4
 800abd4:	462b      	mov	r3, r5
 800abd6:	f7f5 fd07 	bl	80005e8 <__aeabi_dmul>
 800abda:	a371      	add	r3, pc, #452	; (adr r3, 800ada0 <__ieee754_pow+0x730>)
 800abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe0:	f7f5 fb4c 	bl	800027c <__adddf3>
 800abe4:	4622      	mov	r2, r4
 800abe6:	4606      	mov	r6, r0
 800abe8:	460f      	mov	r7, r1
 800abea:	462b      	mov	r3, r5
 800abec:	4620      	mov	r0, r4
 800abee:	4629      	mov	r1, r5
 800abf0:	f7f5 fcfa 	bl	80005e8 <__aeabi_dmul>
 800abf4:	4602      	mov	r2, r0
 800abf6:	460b      	mov	r3, r1
 800abf8:	4630      	mov	r0, r6
 800abfa:	4639      	mov	r1, r7
 800abfc:	f7f5 fcf4 	bl	80005e8 <__aeabi_dmul>
 800ac00:	4642      	mov	r2, r8
 800ac02:	4604      	mov	r4, r0
 800ac04:	460d      	mov	r5, r1
 800ac06:	464b      	mov	r3, r9
 800ac08:	ec51 0b18 	vmov	r0, r1, d8
 800ac0c:	f7f5 fb36 	bl	800027c <__adddf3>
 800ac10:	ec53 2b19 	vmov	r2, r3, d9
 800ac14:	f7f5 fce8 	bl	80005e8 <__aeabi_dmul>
 800ac18:	4622      	mov	r2, r4
 800ac1a:	462b      	mov	r3, r5
 800ac1c:	f7f5 fb2e 	bl	800027c <__adddf3>
 800ac20:	4642      	mov	r2, r8
 800ac22:	4682      	mov	sl, r0
 800ac24:	468b      	mov	fp, r1
 800ac26:	464b      	mov	r3, r9
 800ac28:	4640      	mov	r0, r8
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	f7f5 fcdc 	bl	80005e8 <__aeabi_dmul>
 800ac30:	4b6b      	ldr	r3, [pc, #428]	; (800ade0 <__ieee754_pow+0x770>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	4606      	mov	r6, r0
 800ac36:	460f      	mov	r7, r1
 800ac38:	f7f5 fb20 	bl	800027c <__adddf3>
 800ac3c:	4652      	mov	r2, sl
 800ac3e:	465b      	mov	r3, fp
 800ac40:	f7f5 fb1c 	bl	800027c <__adddf3>
 800ac44:	2000      	movs	r0, #0
 800ac46:	4604      	mov	r4, r0
 800ac48:	460d      	mov	r5, r1
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4640      	mov	r0, r8
 800ac50:	4649      	mov	r1, r9
 800ac52:	f7f5 fcc9 	bl	80005e8 <__aeabi_dmul>
 800ac56:	4b62      	ldr	r3, [pc, #392]	; (800ade0 <__ieee754_pow+0x770>)
 800ac58:	4680      	mov	r8, r0
 800ac5a:	4689      	mov	r9, r1
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	4620      	mov	r0, r4
 800ac60:	4629      	mov	r1, r5
 800ac62:	f7f5 fb09 	bl	8000278 <__aeabi_dsub>
 800ac66:	4632      	mov	r2, r6
 800ac68:	463b      	mov	r3, r7
 800ac6a:	f7f5 fb05 	bl	8000278 <__aeabi_dsub>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	4650      	mov	r0, sl
 800ac74:	4659      	mov	r1, fp
 800ac76:	f7f5 faff 	bl	8000278 <__aeabi_dsub>
 800ac7a:	ec53 2b18 	vmov	r2, r3, d8
 800ac7e:	f7f5 fcb3 	bl	80005e8 <__aeabi_dmul>
 800ac82:	4622      	mov	r2, r4
 800ac84:	4606      	mov	r6, r0
 800ac86:	460f      	mov	r7, r1
 800ac88:	462b      	mov	r3, r5
 800ac8a:	ec51 0b19 	vmov	r0, r1, d9
 800ac8e:	f7f5 fcab 	bl	80005e8 <__aeabi_dmul>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	4630      	mov	r0, r6
 800ac98:	4639      	mov	r1, r7
 800ac9a:	f7f5 faef 	bl	800027c <__adddf3>
 800ac9e:	4606      	mov	r6, r0
 800aca0:	460f      	mov	r7, r1
 800aca2:	4602      	mov	r2, r0
 800aca4:	460b      	mov	r3, r1
 800aca6:	4640      	mov	r0, r8
 800aca8:	4649      	mov	r1, r9
 800acaa:	f7f5 fae7 	bl	800027c <__adddf3>
 800acae:	a33e      	add	r3, pc, #248	; (adr r3, 800ada8 <__ieee754_pow+0x738>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	2000      	movs	r0, #0
 800acb6:	4604      	mov	r4, r0
 800acb8:	460d      	mov	r5, r1
 800acba:	f7f5 fc95 	bl	80005e8 <__aeabi_dmul>
 800acbe:	4642      	mov	r2, r8
 800acc0:	ec41 0b18 	vmov	d8, r0, r1
 800acc4:	464b      	mov	r3, r9
 800acc6:	4620      	mov	r0, r4
 800acc8:	4629      	mov	r1, r5
 800acca:	f7f5 fad5 	bl	8000278 <__aeabi_dsub>
 800acce:	4602      	mov	r2, r0
 800acd0:	460b      	mov	r3, r1
 800acd2:	4630      	mov	r0, r6
 800acd4:	4639      	mov	r1, r7
 800acd6:	f7f5 facf 	bl	8000278 <__aeabi_dsub>
 800acda:	a335      	add	r3, pc, #212	; (adr r3, 800adb0 <__ieee754_pow+0x740>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	f7f5 fc82 	bl	80005e8 <__aeabi_dmul>
 800ace4:	a334      	add	r3, pc, #208	; (adr r3, 800adb8 <__ieee754_pow+0x748>)
 800ace6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acea:	4606      	mov	r6, r0
 800acec:	460f      	mov	r7, r1
 800acee:	4620      	mov	r0, r4
 800acf0:	4629      	mov	r1, r5
 800acf2:	f7f5 fc79 	bl	80005e8 <__aeabi_dmul>
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	4630      	mov	r0, r6
 800acfc:	4639      	mov	r1, r7
 800acfe:	f7f5 fabd 	bl	800027c <__adddf3>
 800ad02:	9a07      	ldr	r2, [sp, #28]
 800ad04:	4b37      	ldr	r3, [pc, #220]	; (800ade4 <__ieee754_pow+0x774>)
 800ad06:	4413      	add	r3, r2
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	f7f5 fab6 	bl	800027c <__adddf3>
 800ad10:	4682      	mov	sl, r0
 800ad12:	9805      	ldr	r0, [sp, #20]
 800ad14:	468b      	mov	fp, r1
 800ad16:	f7f5 fbfd 	bl	8000514 <__aeabi_i2d>
 800ad1a:	9a07      	ldr	r2, [sp, #28]
 800ad1c:	4b32      	ldr	r3, [pc, #200]	; (800ade8 <__ieee754_pow+0x778>)
 800ad1e:	4413      	add	r3, r2
 800ad20:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad24:	4606      	mov	r6, r0
 800ad26:	460f      	mov	r7, r1
 800ad28:	4652      	mov	r2, sl
 800ad2a:	465b      	mov	r3, fp
 800ad2c:	ec51 0b18 	vmov	r0, r1, d8
 800ad30:	f7f5 faa4 	bl	800027c <__adddf3>
 800ad34:	4642      	mov	r2, r8
 800ad36:	464b      	mov	r3, r9
 800ad38:	f7f5 faa0 	bl	800027c <__adddf3>
 800ad3c:	4632      	mov	r2, r6
 800ad3e:	463b      	mov	r3, r7
 800ad40:	f7f5 fa9c 	bl	800027c <__adddf3>
 800ad44:	2000      	movs	r0, #0
 800ad46:	4632      	mov	r2, r6
 800ad48:	463b      	mov	r3, r7
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	460d      	mov	r5, r1
 800ad4e:	f7f5 fa93 	bl	8000278 <__aeabi_dsub>
 800ad52:	4642      	mov	r2, r8
 800ad54:	464b      	mov	r3, r9
 800ad56:	f7f5 fa8f 	bl	8000278 <__aeabi_dsub>
 800ad5a:	ec53 2b18 	vmov	r2, r3, d8
 800ad5e:	f7f5 fa8b 	bl	8000278 <__aeabi_dsub>
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	4650      	mov	r0, sl
 800ad68:	4659      	mov	r1, fp
 800ad6a:	e610      	b.n	800a98e <__ieee754_pow+0x31e>
 800ad6c:	2401      	movs	r4, #1
 800ad6e:	e6a1      	b.n	800aab4 <__ieee754_pow+0x444>
 800ad70:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800adc0 <__ieee754_pow+0x750>
 800ad74:	e617      	b.n	800a9a6 <__ieee754_pow+0x336>
 800ad76:	bf00      	nop
 800ad78:	4a454eef 	.word	0x4a454eef
 800ad7c:	3fca7e28 	.word	0x3fca7e28
 800ad80:	93c9db65 	.word	0x93c9db65
 800ad84:	3fcd864a 	.word	0x3fcd864a
 800ad88:	a91d4101 	.word	0xa91d4101
 800ad8c:	3fd17460 	.word	0x3fd17460
 800ad90:	518f264d 	.word	0x518f264d
 800ad94:	3fd55555 	.word	0x3fd55555
 800ad98:	db6fabff 	.word	0xdb6fabff
 800ad9c:	3fdb6db6 	.word	0x3fdb6db6
 800ada0:	33333303 	.word	0x33333303
 800ada4:	3fe33333 	.word	0x3fe33333
 800ada8:	e0000000 	.word	0xe0000000
 800adac:	3feec709 	.word	0x3feec709
 800adb0:	dc3a03fd 	.word	0xdc3a03fd
 800adb4:	3feec709 	.word	0x3feec709
 800adb8:	145b01f5 	.word	0x145b01f5
 800adbc:	be3e2fe0 	.word	0xbe3e2fe0
 800adc0:	00000000 	.word	0x00000000
 800adc4:	3ff00000 	.word	0x3ff00000
 800adc8:	7ff00000 	.word	0x7ff00000
 800adcc:	43400000 	.word	0x43400000
 800add0:	0003988e 	.word	0x0003988e
 800add4:	000bb679 	.word	0x000bb679
 800add8:	0800b860 	.word	0x0800b860
 800addc:	3ff00000 	.word	0x3ff00000
 800ade0:	40080000 	.word	0x40080000
 800ade4:	0800b880 	.word	0x0800b880
 800ade8:	0800b870 	.word	0x0800b870
 800adec:	a3b5      	add	r3, pc, #724	; (adr r3, 800b0c4 <__ieee754_pow+0xa54>)
 800adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf2:	4640      	mov	r0, r8
 800adf4:	4649      	mov	r1, r9
 800adf6:	f7f5 fa41 	bl	800027c <__adddf3>
 800adfa:	4622      	mov	r2, r4
 800adfc:	ec41 0b1a 	vmov	d10, r0, r1
 800ae00:	462b      	mov	r3, r5
 800ae02:	4630      	mov	r0, r6
 800ae04:	4639      	mov	r1, r7
 800ae06:	f7f5 fa37 	bl	8000278 <__aeabi_dsub>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	ec51 0b1a 	vmov	r0, r1, d10
 800ae12:	f7f5 fe79 	bl	8000b08 <__aeabi_dcmpgt>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	f47f ae04 	bne.w	800aa24 <__ieee754_pow+0x3b4>
 800ae1c:	4aa4      	ldr	r2, [pc, #656]	; (800b0b0 <__ieee754_pow+0xa40>)
 800ae1e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae22:	4293      	cmp	r3, r2
 800ae24:	f340 8108 	ble.w	800b038 <__ieee754_pow+0x9c8>
 800ae28:	151b      	asrs	r3, r3, #20
 800ae2a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ae2e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ae32:	fa4a f303 	asr.w	r3, sl, r3
 800ae36:	445b      	add	r3, fp
 800ae38:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ae3c:	4e9d      	ldr	r6, [pc, #628]	; (800b0b4 <__ieee754_pow+0xa44>)
 800ae3e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ae42:	4116      	asrs	r6, r2
 800ae44:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ae48:	2000      	movs	r0, #0
 800ae4a:	ea23 0106 	bic.w	r1, r3, r6
 800ae4e:	f1c2 0214 	rsb	r2, r2, #20
 800ae52:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ae56:	fa4a fa02 	asr.w	sl, sl, r2
 800ae5a:	f1bb 0f00 	cmp.w	fp, #0
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	4620      	mov	r0, r4
 800ae64:	4629      	mov	r1, r5
 800ae66:	bfb8      	it	lt
 800ae68:	f1ca 0a00 	rsblt	sl, sl, #0
 800ae6c:	f7f5 fa04 	bl	8000278 <__aeabi_dsub>
 800ae70:	ec41 0b19 	vmov	d9, r0, r1
 800ae74:	4642      	mov	r2, r8
 800ae76:	464b      	mov	r3, r9
 800ae78:	ec51 0b19 	vmov	r0, r1, d9
 800ae7c:	f7f5 f9fe 	bl	800027c <__adddf3>
 800ae80:	a37b      	add	r3, pc, #492	; (adr r3, 800b070 <__ieee754_pow+0xa00>)
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	2000      	movs	r0, #0
 800ae88:	4604      	mov	r4, r0
 800ae8a:	460d      	mov	r5, r1
 800ae8c:	f7f5 fbac 	bl	80005e8 <__aeabi_dmul>
 800ae90:	ec53 2b19 	vmov	r2, r3, d9
 800ae94:	4606      	mov	r6, r0
 800ae96:	460f      	mov	r7, r1
 800ae98:	4620      	mov	r0, r4
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	f7f5 f9ec 	bl	8000278 <__aeabi_dsub>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4640      	mov	r0, r8
 800aea6:	4649      	mov	r1, r9
 800aea8:	f7f5 f9e6 	bl	8000278 <__aeabi_dsub>
 800aeac:	a372      	add	r3, pc, #456	; (adr r3, 800b078 <__ieee754_pow+0xa08>)
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	f7f5 fb99 	bl	80005e8 <__aeabi_dmul>
 800aeb6:	a372      	add	r3, pc, #456	; (adr r3, 800b080 <__ieee754_pow+0xa10>)
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	4680      	mov	r8, r0
 800aebe:	4689      	mov	r9, r1
 800aec0:	4620      	mov	r0, r4
 800aec2:	4629      	mov	r1, r5
 800aec4:	f7f5 fb90 	bl	80005e8 <__aeabi_dmul>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	4640      	mov	r0, r8
 800aece:	4649      	mov	r1, r9
 800aed0:	f7f5 f9d4 	bl	800027c <__adddf3>
 800aed4:	4604      	mov	r4, r0
 800aed6:	460d      	mov	r5, r1
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	4630      	mov	r0, r6
 800aede:	4639      	mov	r1, r7
 800aee0:	f7f5 f9cc 	bl	800027c <__adddf3>
 800aee4:	4632      	mov	r2, r6
 800aee6:	463b      	mov	r3, r7
 800aee8:	4680      	mov	r8, r0
 800aeea:	4689      	mov	r9, r1
 800aeec:	f7f5 f9c4 	bl	8000278 <__aeabi_dsub>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4620      	mov	r0, r4
 800aef6:	4629      	mov	r1, r5
 800aef8:	f7f5 f9be 	bl	8000278 <__aeabi_dsub>
 800aefc:	4642      	mov	r2, r8
 800aefe:	4606      	mov	r6, r0
 800af00:	460f      	mov	r7, r1
 800af02:	464b      	mov	r3, r9
 800af04:	4640      	mov	r0, r8
 800af06:	4649      	mov	r1, r9
 800af08:	f7f5 fb6e 	bl	80005e8 <__aeabi_dmul>
 800af0c:	a35e      	add	r3, pc, #376	; (adr r3, 800b088 <__ieee754_pow+0xa18>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	4604      	mov	r4, r0
 800af14:	460d      	mov	r5, r1
 800af16:	f7f5 fb67 	bl	80005e8 <__aeabi_dmul>
 800af1a:	a35d      	add	r3, pc, #372	; (adr r3, 800b090 <__ieee754_pow+0xa20>)
 800af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af20:	f7f5 f9aa 	bl	8000278 <__aeabi_dsub>
 800af24:	4622      	mov	r2, r4
 800af26:	462b      	mov	r3, r5
 800af28:	f7f5 fb5e 	bl	80005e8 <__aeabi_dmul>
 800af2c:	a35a      	add	r3, pc, #360	; (adr r3, 800b098 <__ieee754_pow+0xa28>)
 800af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af32:	f7f5 f9a3 	bl	800027c <__adddf3>
 800af36:	4622      	mov	r2, r4
 800af38:	462b      	mov	r3, r5
 800af3a:	f7f5 fb55 	bl	80005e8 <__aeabi_dmul>
 800af3e:	a358      	add	r3, pc, #352	; (adr r3, 800b0a0 <__ieee754_pow+0xa30>)
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	f7f5 f998 	bl	8000278 <__aeabi_dsub>
 800af48:	4622      	mov	r2, r4
 800af4a:	462b      	mov	r3, r5
 800af4c:	f7f5 fb4c 	bl	80005e8 <__aeabi_dmul>
 800af50:	a355      	add	r3, pc, #340	; (adr r3, 800b0a8 <__ieee754_pow+0xa38>)
 800af52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af56:	f7f5 f991 	bl	800027c <__adddf3>
 800af5a:	4622      	mov	r2, r4
 800af5c:	462b      	mov	r3, r5
 800af5e:	f7f5 fb43 	bl	80005e8 <__aeabi_dmul>
 800af62:	4602      	mov	r2, r0
 800af64:	460b      	mov	r3, r1
 800af66:	4640      	mov	r0, r8
 800af68:	4649      	mov	r1, r9
 800af6a:	f7f5 f985 	bl	8000278 <__aeabi_dsub>
 800af6e:	4604      	mov	r4, r0
 800af70:	460d      	mov	r5, r1
 800af72:	4602      	mov	r2, r0
 800af74:	460b      	mov	r3, r1
 800af76:	4640      	mov	r0, r8
 800af78:	4649      	mov	r1, r9
 800af7a:	f7f5 fb35 	bl	80005e8 <__aeabi_dmul>
 800af7e:	2200      	movs	r2, #0
 800af80:	ec41 0b19 	vmov	d9, r0, r1
 800af84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af88:	4620      	mov	r0, r4
 800af8a:	4629      	mov	r1, r5
 800af8c:	f7f5 f974 	bl	8000278 <__aeabi_dsub>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
 800af94:	ec51 0b19 	vmov	r0, r1, d9
 800af98:	f7f5 fc50 	bl	800083c <__aeabi_ddiv>
 800af9c:	4632      	mov	r2, r6
 800af9e:	4604      	mov	r4, r0
 800afa0:	460d      	mov	r5, r1
 800afa2:	463b      	mov	r3, r7
 800afa4:	4640      	mov	r0, r8
 800afa6:	4649      	mov	r1, r9
 800afa8:	f7f5 fb1e 	bl	80005e8 <__aeabi_dmul>
 800afac:	4632      	mov	r2, r6
 800afae:	463b      	mov	r3, r7
 800afb0:	f7f5 f964 	bl	800027c <__adddf3>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4620      	mov	r0, r4
 800afba:	4629      	mov	r1, r5
 800afbc:	f7f5 f95c 	bl	8000278 <__aeabi_dsub>
 800afc0:	4642      	mov	r2, r8
 800afc2:	464b      	mov	r3, r9
 800afc4:	f7f5 f958 	bl	8000278 <__aeabi_dsub>
 800afc8:	460b      	mov	r3, r1
 800afca:	4602      	mov	r2, r0
 800afcc:	493a      	ldr	r1, [pc, #232]	; (800b0b8 <__ieee754_pow+0xa48>)
 800afce:	2000      	movs	r0, #0
 800afd0:	f7f5 f952 	bl	8000278 <__aeabi_dsub>
 800afd4:	ec41 0b10 	vmov	d0, r0, r1
 800afd8:	ee10 3a90 	vmov	r3, s1
 800afdc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800afe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afe4:	da2b      	bge.n	800b03e <__ieee754_pow+0x9ce>
 800afe6:	4650      	mov	r0, sl
 800afe8:	f000 f966 	bl	800b2b8 <scalbn>
 800afec:	ec51 0b10 	vmov	r0, r1, d0
 800aff0:	ec53 2b18 	vmov	r2, r3, d8
 800aff4:	f7ff bbed 	b.w	800a7d2 <__ieee754_pow+0x162>
 800aff8:	4b30      	ldr	r3, [pc, #192]	; (800b0bc <__ieee754_pow+0xa4c>)
 800affa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800affe:	429e      	cmp	r6, r3
 800b000:	f77f af0c 	ble.w	800ae1c <__ieee754_pow+0x7ac>
 800b004:	4b2e      	ldr	r3, [pc, #184]	; (800b0c0 <__ieee754_pow+0xa50>)
 800b006:	440b      	add	r3, r1
 800b008:	4303      	orrs	r3, r0
 800b00a:	d009      	beq.n	800b020 <__ieee754_pow+0x9b0>
 800b00c:	ec51 0b18 	vmov	r0, r1, d8
 800b010:	2200      	movs	r2, #0
 800b012:	2300      	movs	r3, #0
 800b014:	f7f5 fd5a 	bl	8000acc <__aeabi_dcmplt>
 800b018:	3800      	subs	r0, #0
 800b01a:	bf18      	it	ne
 800b01c:	2001      	movne	r0, #1
 800b01e:	e447      	b.n	800a8b0 <__ieee754_pow+0x240>
 800b020:	4622      	mov	r2, r4
 800b022:	462b      	mov	r3, r5
 800b024:	f7f5 f928 	bl	8000278 <__aeabi_dsub>
 800b028:	4642      	mov	r2, r8
 800b02a:	464b      	mov	r3, r9
 800b02c:	f7f5 fd62 	bl	8000af4 <__aeabi_dcmpge>
 800b030:	2800      	cmp	r0, #0
 800b032:	f43f aef3 	beq.w	800ae1c <__ieee754_pow+0x7ac>
 800b036:	e7e9      	b.n	800b00c <__ieee754_pow+0x99c>
 800b038:	f04f 0a00 	mov.w	sl, #0
 800b03c:	e71a      	b.n	800ae74 <__ieee754_pow+0x804>
 800b03e:	ec51 0b10 	vmov	r0, r1, d0
 800b042:	4619      	mov	r1, r3
 800b044:	e7d4      	b.n	800aff0 <__ieee754_pow+0x980>
 800b046:	491c      	ldr	r1, [pc, #112]	; (800b0b8 <__ieee754_pow+0xa48>)
 800b048:	2000      	movs	r0, #0
 800b04a:	f7ff bb30 	b.w	800a6ae <__ieee754_pow+0x3e>
 800b04e:	2000      	movs	r0, #0
 800b050:	2100      	movs	r1, #0
 800b052:	f7ff bb2c 	b.w	800a6ae <__ieee754_pow+0x3e>
 800b056:	4630      	mov	r0, r6
 800b058:	4639      	mov	r1, r7
 800b05a:	f7ff bb28 	b.w	800a6ae <__ieee754_pow+0x3e>
 800b05e:	9204      	str	r2, [sp, #16]
 800b060:	f7ff bb7a 	b.w	800a758 <__ieee754_pow+0xe8>
 800b064:	2300      	movs	r3, #0
 800b066:	f7ff bb64 	b.w	800a732 <__ieee754_pow+0xc2>
 800b06a:	bf00      	nop
 800b06c:	f3af 8000 	nop.w
 800b070:	00000000 	.word	0x00000000
 800b074:	3fe62e43 	.word	0x3fe62e43
 800b078:	fefa39ef 	.word	0xfefa39ef
 800b07c:	3fe62e42 	.word	0x3fe62e42
 800b080:	0ca86c39 	.word	0x0ca86c39
 800b084:	be205c61 	.word	0xbe205c61
 800b088:	72bea4d0 	.word	0x72bea4d0
 800b08c:	3e663769 	.word	0x3e663769
 800b090:	c5d26bf1 	.word	0xc5d26bf1
 800b094:	3ebbbd41 	.word	0x3ebbbd41
 800b098:	af25de2c 	.word	0xaf25de2c
 800b09c:	3f11566a 	.word	0x3f11566a
 800b0a0:	16bebd93 	.word	0x16bebd93
 800b0a4:	3f66c16c 	.word	0x3f66c16c
 800b0a8:	5555553e 	.word	0x5555553e
 800b0ac:	3fc55555 	.word	0x3fc55555
 800b0b0:	3fe00000 	.word	0x3fe00000
 800b0b4:	000fffff 	.word	0x000fffff
 800b0b8:	3ff00000 	.word	0x3ff00000
 800b0bc:	4090cbff 	.word	0x4090cbff
 800b0c0:	3f6f3400 	.word	0x3f6f3400
 800b0c4:	652b82fe 	.word	0x652b82fe
 800b0c8:	3c971547 	.word	0x3c971547

0800b0cc <__ieee754_sqrt>:
 800b0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d0:	ec55 4b10 	vmov	r4, r5, d0
 800b0d4:	4e55      	ldr	r6, [pc, #340]	; (800b22c <__ieee754_sqrt+0x160>)
 800b0d6:	43ae      	bics	r6, r5
 800b0d8:	ee10 0a10 	vmov	r0, s0
 800b0dc:	ee10 3a10 	vmov	r3, s0
 800b0e0:	462a      	mov	r2, r5
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	d110      	bne.n	800b108 <__ieee754_sqrt+0x3c>
 800b0e6:	ee10 2a10 	vmov	r2, s0
 800b0ea:	462b      	mov	r3, r5
 800b0ec:	f7f5 fa7c 	bl	80005e8 <__aeabi_dmul>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	f7f5 f8c0 	bl	800027c <__adddf3>
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	460d      	mov	r5, r1
 800b100:	ec45 4b10 	vmov	d0, r4, r5
 800b104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b108:	2d00      	cmp	r5, #0
 800b10a:	dc10      	bgt.n	800b12e <__ieee754_sqrt+0x62>
 800b10c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b110:	4330      	orrs	r0, r6
 800b112:	d0f5      	beq.n	800b100 <__ieee754_sqrt+0x34>
 800b114:	b15d      	cbz	r5, 800b12e <__ieee754_sqrt+0x62>
 800b116:	ee10 2a10 	vmov	r2, s0
 800b11a:	462b      	mov	r3, r5
 800b11c:	ee10 0a10 	vmov	r0, s0
 800b120:	f7f5 f8aa 	bl	8000278 <__aeabi_dsub>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	f7f5 fb88 	bl	800083c <__aeabi_ddiv>
 800b12c:	e7e6      	b.n	800b0fc <__ieee754_sqrt+0x30>
 800b12e:	1512      	asrs	r2, r2, #20
 800b130:	d074      	beq.n	800b21c <__ieee754_sqrt+0x150>
 800b132:	07d4      	lsls	r4, r2, #31
 800b134:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b138:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b13c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b140:	bf5e      	ittt	pl
 800b142:	0fda      	lsrpl	r2, r3, #31
 800b144:	005b      	lslpl	r3, r3, #1
 800b146:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b14a:	2400      	movs	r4, #0
 800b14c:	0fda      	lsrs	r2, r3, #31
 800b14e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b152:	107f      	asrs	r7, r7, #1
 800b154:	005b      	lsls	r3, r3, #1
 800b156:	2516      	movs	r5, #22
 800b158:	4620      	mov	r0, r4
 800b15a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b15e:	1886      	adds	r6, r0, r2
 800b160:	428e      	cmp	r6, r1
 800b162:	bfde      	ittt	le
 800b164:	1b89      	suble	r1, r1, r6
 800b166:	18b0      	addle	r0, r6, r2
 800b168:	18a4      	addle	r4, r4, r2
 800b16a:	0049      	lsls	r1, r1, #1
 800b16c:	3d01      	subs	r5, #1
 800b16e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b172:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b176:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b17a:	d1f0      	bne.n	800b15e <__ieee754_sqrt+0x92>
 800b17c:	462a      	mov	r2, r5
 800b17e:	f04f 0e20 	mov.w	lr, #32
 800b182:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b186:	4281      	cmp	r1, r0
 800b188:	eb06 0c05 	add.w	ip, r6, r5
 800b18c:	dc02      	bgt.n	800b194 <__ieee754_sqrt+0xc8>
 800b18e:	d113      	bne.n	800b1b8 <__ieee754_sqrt+0xec>
 800b190:	459c      	cmp	ip, r3
 800b192:	d811      	bhi.n	800b1b8 <__ieee754_sqrt+0xec>
 800b194:	f1bc 0f00 	cmp.w	ip, #0
 800b198:	eb0c 0506 	add.w	r5, ip, r6
 800b19c:	da43      	bge.n	800b226 <__ieee754_sqrt+0x15a>
 800b19e:	2d00      	cmp	r5, #0
 800b1a0:	db41      	blt.n	800b226 <__ieee754_sqrt+0x15a>
 800b1a2:	f100 0801 	add.w	r8, r0, #1
 800b1a6:	1a09      	subs	r1, r1, r0
 800b1a8:	459c      	cmp	ip, r3
 800b1aa:	bf88      	it	hi
 800b1ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b1b0:	eba3 030c 	sub.w	r3, r3, ip
 800b1b4:	4432      	add	r2, r6
 800b1b6:	4640      	mov	r0, r8
 800b1b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b1bc:	f1be 0e01 	subs.w	lr, lr, #1
 800b1c0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b1c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b1c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b1cc:	d1db      	bne.n	800b186 <__ieee754_sqrt+0xba>
 800b1ce:	430b      	orrs	r3, r1
 800b1d0:	d006      	beq.n	800b1e0 <__ieee754_sqrt+0x114>
 800b1d2:	1c50      	adds	r0, r2, #1
 800b1d4:	bf13      	iteet	ne
 800b1d6:	3201      	addne	r2, #1
 800b1d8:	3401      	addeq	r4, #1
 800b1da:	4672      	moveq	r2, lr
 800b1dc:	f022 0201 	bicne.w	r2, r2, #1
 800b1e0:	1063      	asrs	r3, r4, #1
 800b1e2:	0852      	lsrs	r2, r2, #1
 800b1e4:	07e1      	lsls	r1, r4, #31
 800b1e6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b1ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b1ee:	bf48      	it	mi
 800b1f0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b1f4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b1f8:	4614      	mov	r4, r2
 800b1fa:	e781      	b.n	800b100 <__ieee754_sqrt+0x34>
 800b1fc:	0ad9      	lsrs	r1, r3, #11
 800b1fe:	3815      	subs	r0, #21
 800b200:	055b      	lsls	r3, r3, #21
 800b202:	2900      	cmp	r1, #0
 800b204:	d0fa      	beq.n	800b1fc <__ieee754_sqrt+0x130>
 800b206:	02cd      	lsls	r5, r1, #11
 800b208:	d50a      	bpl.n	800b220 <__ieee754_sqrt+0x154>
 800b20a:	f1c2 0420 	rsb	r4, r2, #32
 800b20e:	fa23 f404 	lsr.w	r4, r3, r4
 800b212:	1e55      	subs	r5, r2, #1
 800b214:	4093      	lsls	r3, r2
 800b216:	4321      	orrs	r1, r4
 800b218:	1b42      	subs	r2, r0, r5
 800b21a:	e78a      	b.n	800b132 <__ieee754_sqrt+0x66>
 800b21c:	4610      	mov	r0, r2
 800b21e:	e7f0      	b.n	800b202 <__ieee754_sqrt+0x136>
 800b220:	0049      	lsls	r1, r1, #1
 800b222:	3201      	adds	r2, #1
 800b224:	e7ef      	b.n	800b206 <__ieee754_sqrt+0x13a>
 800b226:	4680      	mov	r8, r0
 800b228:	e7bd      	b.n	800b1a6 <__ieee754_sqrt+0xda>
 800b22a:	bf00      	nop
 800b22c:	7ff00000 	.word	0x7ff00000

0800b230 <with_errno>:
 800b230:	b570      	push	{r4, r5, r6, lr}
 800b232:	4604      	mov	r4, r0
 800b234:	460d      	mov	r5, r1
 800b236:	4616      	mov	r6, r2
 800b238:	f7fe f860 	bl	80092fc <__errno>
 800b23c:	4629      	mov	r1, r5
 800b23e:	6006      	str	r6, [r0, #0]
 800b240:	4620      	mov	r0, r4
 800b242:	bd70      	pop	{r4, r5, r6, pc}

0800b244 <xflow>:
 800b244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b246:	4614      	mov	r4, r2
 800b248:	461d      	mov	r5, r3
 800b24a:	b108      	cbz	r0, 800b250 <xflow+0xc>
 800b24c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b250:	e9cd 2300 	strd	r2, r3, [sp]
 800b254:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b258:	4620      	mov	r0, r4
 800b25a:	4629      	mov	r1, r5
 800b25c:	f7f5 f9c4 	bl	80005e8 <__aeabi_dmul>
 800b260:	2222      	movs	r2, #34	; 0x22
 800b262:	b003      	add	sp, #12
 800b264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b268:	f7ff bfe2 	b.w	800b230 <with_errno>

0800b26c <__math_uflow>:
 800b26c:	b508      	push	{r3, lr}
 800b26e:	2200      	movs	r2, #0
 800b270:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b274:	f7ff ffe6 	bl	800b244 <xflow>
 800b278:	ec41 0b10 	vmov	d0, r0, r1
 800b27c:	bd08      	pop	{r3, pc}

0800b27e <__math_oflow>:
 800b27e:	b508      	push	{r3, lr}
 800b280:	2200      	movs	r2, #0
 800b282:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b286:	f7ff ffdd 	bl	800b244 <xflow>
 800b28a:	ec41 0b10 	vmov	d0, r0, r1
 800b28e:	bd08      	pop	{r3, pc}

0800b290 <fabs>:
 800b290:	ec51 0b10 	vmov	r0, r1, d0
 800b294:	ee10 2a10 	vmov	r2, s0
 800b298:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b29c:	ec43 2b10 	vmov	d0, r2, r3
 800b2a0:	4770      	bx	lr

0800b2a2 <finite>:
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	ed8d 0b00 	vstr	d0, [sp]
 800b2a8:	9801      	ldr	r0, [sp, #4]
 800b2aa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b2ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b2b2:	0fc0      	lsrs	r0, r0, #31
 800b2b4:	b002      	add	sp, #8
 800b2b6:	4770      	bx	lr

0800b2b8 <scalbn>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	ec55 4b10 	vmov	r4, r5, d0
 800b2be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b2c2:	4606      	mov	r6, r0
 800b2c4:	462b      	mov	r3, r5
 800b2c6:	b99a      	cbnz	r2, 800b2f0 <scalbn+0x38>
 800b2c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b2cc:	4323      	orrs	r3, r4
 800b2ce:	d036      	beq.n	800b33e <scalbn+0x86>
 800b2d0:	4b39      	ldr	r3, [pc, #228]	; (800b3b8 <scalbn+0x100>)
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	ee10 0a10 	vmov	r0, s0
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f7f5 f985 	bl	80005e8 <__aeabi_dmul>
 800b2de:	4b37      	ldr	r3, [pc, #220]	; (800b3bc <scalbn+0x104>)
 800b2e0:	429e      	cmp	r6, r3
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	460d      	mov	r5, r1
 800b2e6:	da10      	bge.n	800b30a <scalbn+0x52>
 800b2e8:	a32b      	add	r3, pc, #172	; (adr r3, 800b398 <scalbn+0xe0>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	e03a      	b.n	800b366 <scalbn+0xae>
 800b2f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b2f4:	428a      	cmp	r2, r1
 800b2f6:	d10c      	bne.n	800b312 <scalbn+0x5a>
 800b2f8:	ee10 2a10 	vmov	r2, s0
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	4629      	mov	r1, r5
 800b300:	f7f4 ffbc 	bl	800027c <__adddf3>
 800b304:	4604      	mov	r4, r0
 800b306:	460d      	mov	r5, r1
 800b308:	e019      	b.n	800b33e <scalbn+0x86>
 800b30a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b30e:	460b      	mov	r3, r1
 800b310:	3a36      	subs	r2, #54	; 0x36
 800b312:	4432      	add	r2, r6
 800b314:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b318:	428a      	cmp	r2, r1
 800b31a:	dd08      	ble.n	800b32e <scalbn+0x76>
 800b31c:	2d00      	cmp	r5, #0
 800b31e:	a120      	add	r1, pc, #128	; (adr r1, 800b3a0 <scalbn+0xe8>)
 800b320:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b324:	da1c      	bge.n	800b360 <scalbn+0xa8>
 800b326:	a120      	add	r1, pc, #128	; (adr r1, 800b3a8 <scalbn+0xf0>)
 800b328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b32c:	e018      	b.n	800b360 <scalbn+0xa8>
 800b32e:	2a00      	cmp	r2, #0
 800b330:	dd08      	ble.n	800b344 <scalbn+0x8c>
 800b332:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b336:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b33a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b33e:	ec45 4b10 	vmov	d0, r4, r5
 800b342:	bd70      	pop	{r4, r5, r6, pc}
 800b344:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b348:	da19      	bge.n	800b37e <scalbn+0xc6>
 800b34a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b34e:	429e      	cmp	r6, r3
 800b350:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b354:	dd0a      	ble.n	800b36c <scalbn+0xb4>
 800b356:	a112      	add	r1, pc, #72	; (adr r1, 800b3a0 <scalbn+0xe8>)
 800b358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1e2      	bne.n	800b326 <scalbn+0x6e>
 800b360:	a30f      	add	r3, pc, #60	; (adr r3, 800b3a0 <scalbn+0xe8>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	f7f5 f93f 	bl	80005e8 <__aeabi_dmul>
 800b36a:	e7cb      	b.n	800b304 <scalbn+0x4c>
 800b36c:	a10a      	add	r1, pc, #40	; (adr r1, 800b398 <scalbn+0xe0>)
 800b36e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d0b8      	beq.n	800b2e8 <scalbn+0x30>
 800b376:	a10e      	add	r1, pc, #56	; (adr r1, 800b3b0 <scalbn+0xf8>)
 800b378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b37c:	e7b4      	b.n	800b2e8 <scalbn+0x30>
 800b37e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b382:	3236      	adds	r2, #54	; 0x36
 800b384:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b388:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b38c:	4620      	mov	r0, r4
 800b38e:	4b0c      	ldr	r3, [pc, #48]	; (800b3c0 <scalbn+0x108>)
 800b390:	2200      	movs	r2, #0
 800b392:	e7e8      	b.n	800b366 <scalbn+0xae>
 800b394:	f3af 8000 	nop.w
 800b398:	c2f8f359 	.word	0xc2f8f359
 800b39c:	01a56e1f 	.word	0x01a56e1f
 800b3a0:	8800759c 	.word	0x8800759c
 800b3a4:	7e37e43c 	.word	0x7e37e43c
 800b3a8:	8800759c 	.word	0x8800759c
 800b3ac:	fe37e43c 	.word	0xfe37e43c
 800b3b0:	c2f8f359 	.word	0xc2f8f359
 800b3b4:	81a56e1f 	.word	0x81a56e1f
 800b3b8:	43500000 	.word	0x43500000
 800b3bc:	ffff3cb0 	.word	0xffff3cb0
 800b3c0:	3c900000 	.word	0x3c900000

0800b3c4 <_gettimeofday>:
 800b3c4:	4b02      	ldr	r3, [pc, #8]	; (800b3d0 <_gettimeofday+0xc>)
 800b3c6:	2258      	movs	r2, #88	; 0x58
 800b3c8:	601a      	str	r2, [r3, #0]
 800b3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ce:	4770      	bx	lr
 800b3d0:	20008cac 	.word	0x20008cac

0800b3d4 <_init>:
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d6:	bf00      	nop
 800b3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3da:	bc08      	pop	{r3}
 800b3dc:	469e      	mov	lr, r3
 800b3de:	4770      	bx	lr

0800b3e0 <_fini>:
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	bf00      	nop
 800b3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e6:	bc08      	pop	{r3}
 800b3e8:	469e      	mov	lr, r3
 800b3ea:	4770      	bx	lr
