
L476_FreeRTOS_Snake_git.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b204  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800b398  0800b398  0001b398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b838  0800b838  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b838  0800b838  0001b838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b840  0800b840  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b840  0800b840  0001b840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b844  0800b844  0001b844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c3c  20000074  0800b8bc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008cb0  0800b8bc  00028cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000200fa  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004055  00000000  00000000  0004019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  000441f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  00045cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005bbc  00000000  00000000  00047620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db0a  00000000  00000000  0004d1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103a38  00000000  00000000  0006ace6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e71e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fb0  00000000  00000000  0016e770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b37c 	.word	0x0800b37c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800b37c 	.word	0x0800b37c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <llist_create>:
#include <stdio.h>
#include <string.h>
#include "llist.h"

llist *llist_create(void *new_data)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    struct node *new_node;

    llist *new_list = (llist *)malloc(sizeof (llist));
 8000ea4:	2004      	movs	r0, #4
 8000ea6:	f008 facd 	bl	8009444 <malloc>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60fb      	str	r3, [r7, #12]
    *new_list = (struct node *)malloc(sizeof (struct node));
 8000eae:	2010      	movs	r0, #16
 8000eb0:	f008 fac8 	bl	8009444 <malloc>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	601a      	str	r2, [r3, #0]


    new_node = *new_list;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60bb      	str	r3, [r7, #8]
    new_node->display = 0;
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
    new_node->x = 0;
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
    new_node->y = 4;
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	609a      	str	r2, [r3, #8]
    new_node->next = NULL;
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
    return new_list;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <llist_push>:

// Returns 0 on failure


void llist_push(llist *list, int display, int y, int x /*void *data*/)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
    struct node *head;
    struct node *new_node;
    if (list == NULL || *list == NULL) {
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <llist_push+0x1c>
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d107      	bne.n	8000f10 <llist_push+0x2c>
        fprintf(stderr, "llist_add_inorder: list is null\n");
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <llist_push+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2220      	movs	r2, #32
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4810      	ldr	r0, [pc, #64]	; (8000f4c <llist_push+0x68>)
 8000f0c:	f008 fa64 	bl	80093d8 <fwrite>
    }

    head = *list;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	617b      	str	r3, [r7, #20]

    // Head is not empty, add new node to front



        new_node = malloc(sizeof (struct node));
 8000f16:	2010      	movs	r0, #16
 8000f18:	f008 fa94 	bl	8009444 <malloc>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	613b      	str	r3, [r7, #16]
        new_node->display = display;
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	601a      	str	r2, [r3, #0]
        new_node->x = x;
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
        new_node->y = y;
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	609a      	str	r2, [r3, #8]
        new_node->next = head;
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	60da      	str	r2, [r3, #12]
        *list = new_node;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	601a      	str	r2, [r3, #0]

}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000010 	.word	0x20000010
 8000f4c:	0800b398 	.word	0x0800b398

08000f50 <llist_printSnake>:


void llist_printSnake(llist *list, int board[][8][8]) {
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]

	 struct node *curr = *list;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	617b      	str	r3, [r7, #20]
	 int display ;
	int x;
	int y;


	    while (curr != NULL) {
 8000f60:	e016      	b.n	8000f90 <llist_printSnake+0x40>
	    	int display = curr->display;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	613b      	str	r3, [r7, #16]
			int x = curr->x;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]
			int y = curr->y;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	60bb      	str	r3, [r7, #8]


	    	board[display][y][x] = 1;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	00d1      	lsls	r1, r2, #3
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	440a      	add	r2, r1
 8000f84:	2101      	movs	r1, #1
 8000f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	        curr = curr->next;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	617b      	str	r3, [r7, #20]
	    while (curr != NULL) {
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1e5      	bne.n	8000f62 <llist_printSnake+0x12>
	    }

}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <checkOccupiedRight>:
}




int checkOccupiedRight(llist *list, int boardState[][8][8]) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fb0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000fb4:	6018      	str	r0, [r3, #0]
 8000fb6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fba:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8000fbe:	6019      	str	r1, [r3, #0]
	struct node *head = *list;
 8000fc0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fc4:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	int nextCellState = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int display = head->display;
 8000fd6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	int x = head->x;
 8000fe0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	int y = head->y;
 8000fea:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	int temp[4][8][8];
	memcpy(temp, boardState, sizeof(temp));
 8000ff4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000ff8:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8000ffc:	f107 000c 	add.w	r0, r7, #12
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	6819      	ldr	r1, [r3, #0]
 8001006:	f008 fa2d 	bl	8009464 <memcpy>
	if (x == 7){
 800100a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800100e:	2b07      	cmp	r3, #7
 8001010:	d117      	bne.n	8001042 <checkOccupiedRight+0x9e>
		 if (display == 3) return -1;// ran into wall
 8001012:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001016:	2b03      	cmp	r3, #3
 8001018:	d102      	bne.n	8001020 <checkOccupiedRight+0x7c>
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e025      	b.n	800106c <checkOccupiedRight+0xc8>


		 nextCellState = temp[display+1][y][0];
 8001020:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001024:	3301      	adds	r3, #1
 8001026:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800102a:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 800102e:	00d9      	lsls	r1, r3, #3
 8001030:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001034:	440b      	add	r3, r1
 8001036:	015b      	lsls	r3, r3, #5
 8001038:	4413      	add	r3, r2
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001040:	e012      	b.n	8001068 <checkOccupiedRight+0xc4>

	} else {
		nextCellState = temp[display][y][x+1];//todo change all to +1 and -1
 8001042:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800104c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8001050:	f8d7 1414 	ldr.w	r1, [r7, #1044]	; 0x414
 8001054:	00c8      	lsls	r0, r1, #3
 8001056:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 800105a:	4401      	add	r1, r0
 800105c:	00c9      	lsls	r1, r1, #3
 800105e:	440a      	add	r2, r1
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c


	}


	return nextCellState;
 8001068:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
}
 800106c:	4618      	mov	r0, r3
 800106e:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <checkOccupiedLeft>:

int checkOccupiedLeft(llist *list, int boardState[][8][8]) {
 8001076:	b580      	push	{r7, lr}
 8001078:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 800107c:	af00      	add	r7, sp, #0
 800107e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001082:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8001086:	6018      	str	r0, [r3, #0]
 8001088:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800108c:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001090:	6019      	str	r1, [r3, #0]
	struct node *head = *list;
 8001092:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001096:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

	int nextCellState=0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int display = head->display;
 80010a8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		int x = head->x;
 80010b2:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
		int y = head->y;
 80010bc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	int temp[4][8][8];
		memcpy(temp, boardState, sizeof(temp));
 80010c6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80010ca:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80010ce:	f107 000c 	add.w	r0, r7, #12
 80010d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	f008 f9c4 	bl	8009464 <memcpy>
	if (head->x == 0){
 80010dc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d119      	bne.n	800111a <checkOccupiedLeft+0xa4>
		 if (head->display == 0) return -1;// ran into wall
 80010e6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <checkOccupiedLeft+0x80>
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	e026      	b.n	8001144 <checkOccupiedLeft+0xce>

		 nextCellState = temp[display-1][y][7];
 80010f6:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8001100:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 8001104:	00d9      	lsls	r1, r3, #3
 8001106:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800110a:	440b      	add	r3, r1
 800110c:	015b      	lsls	r3, r3, #5
 800110e:	4413      	add	r3, r2
 8001110:	331c      	adds	r3, #28
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001118:	e012      	b.n	8001140 <checkOccupiedLeft+0xca>

	} else {

		nextCellState = temp[display][y][x-1];
 800111a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001124:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8001128:	f8d7 1414 	ldr.w	r1, [r7, #1044]	; 0x414
 800112c:	00c8      	lsls	r0, r1, #3
 800112e:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8001132:	4401      	add	r1, r0
 8001134:	00c9      	lsls	r1, r1, #3
 8001136:	440a      	add	r2, r1
 8001138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

	}


	return nextCellState;
 8001140:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
}
 8001144:	4618      	mov	r0, r3
 8001146:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <checkOccupiedUp>:

int checkOccupiedUp(llist *list, int boardState[][8][8]) {
 800114e:	b580      	push	{r7, lr}
 8001150:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8001154:	af00      	add	r7, sp, #0
 8001156:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800115a:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800115e:	6018      	str	r0, [r3, #0]
 8001160:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001164:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001168:	6019      	str	r1, [r3, #0]
	struct node *head = *list;
 800116a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800116e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int display = head->display;
 800117a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		int x = head->x;
 8001184:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		int y = head->y;
 800118e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	int nextCellState=0;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	int temp[4][8][8];
			memcpy(temp, boardState, sizeof(temp));
 800119e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80011a2:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80011a6:	f107 000c 	add.w	r0, r7, #12
 80011aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	f008 f958 	bl	8009464 <memcpy>
	if (head->y == 0) return -1;// ran into wall
 80011b4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d102      	bne.n	80011c4 <checkOccupiedUp+0x76>
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e014      	b.n	80011ee <checkOccupiedUp+0xa0>

	nextCellState = temp[display][y-1][x];
 80011c4:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80011ce:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80011d2:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 80011d6:	00c9      	lsls	r1, r1, #3
 80011d8:	440a      	add	r2, r1
 80011da:	00d1      	lsls	r1, r2, #3
 80011dc:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80011e0:	440a      	add	r2, r1
 80011e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e6:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	return nextCellState;
 80011ea:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <checkOccupiedDown>:

int checkOccupiedDown(llist *list, int boardState[][8][8]) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80011fe:	af00      	add	r7, sp, #0
 8001200:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001204:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8001208:	6018      	str	r0, [r3, #0]
 800120a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800120e:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001212:	6019      	str	r1, [r3, #0]
	struct node *head = *list;
 8001214:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001218:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int display = head->display;
 8001224:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		int x = head->x;
 800122e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		int y = head->y;
 8001238:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

	int temp[4][8][8];
				memcpy(temp, boardState, sizeof(temp));
 8001242:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001246:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800124a:	f107 000c 	add.w	r0, r7, #12
 800124e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	f008 f906 	bl	8009464 <memcpy>

	int nextCellState=0;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	if (head->y == 7) return -1;// ran into wall
 800125e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b07      	cmp	r3, #7
 8001266:	d102      	bne.n	800126e <checkOccupiedDown+0x76>
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	e014      	b.n	8001298 <checkOccupiedDown+0xa0>

	nextCellState = temp[display][y+1][x];
 800126e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001278:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800127c:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 8001280:	00c9      	lsls	r1, r1, #3
 8001282:	440a      	add	r2, r1
 8001284:	00d1      	lsls	r1, r2, #3
 8001286:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 800128a:	440a      	add	r2, r1
 800128c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001290:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	return nextCellState;
 8001294:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 8001298:	4618      	mov	r0, r3
 800129a:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <deleteLastNode>:

void deleteLastNode(llist *list) {
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	struct node *curr = *list;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]
	while (curr->next->next != NULL) {
 80012b0:	e002      	b.n	80012b8 <deleteLastNode+0x16>

		curr = curr->next;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	60fb      	str	r3, [r7, #12]
	while (curr->next->next != NULL) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f7      	bne.n	80012b2 <deleteLastNode+0x10>
	}
	struct node* lastNode = curr->next;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	60bb      	str	r3, [r7, #8]
	curr->next = NULL;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
	free(lastNode);
 80012ce:	68b8      	ldr	r0, [r7, #8]
 80012d0:	f008 f8c0 	bl	8009454 <free>
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <moveRight>:


void moveRight(llist *list,  int grow) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]

	struct node *head = *list;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	617b      	str	r3, [r7, #20]

	int display = head->display;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	613b      	str	r3, [r7, #16]
	int x = head->x;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	60fb      	str	r3, [r7, #12]
	int y = head->y;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	60bb      	str	r3, [r7, #8]

	if (x == 7) {
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b07      	cmp	r3, #7
 8001302:	d107      	bne.n	8001314 <moveRight+0x38>
		llist_push(list, display+1, y, 0 );
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1c59      	adds	r1, r3, #1
 8001308:	2300      	movs	r3, #0
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fde9 	bl	8000ee4 <llist_push>
 8001312:	e006      	b.n	8001322 <moveRight+0x46>
	} else {
		llist_push(list, display, y, x+1 );
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fde1 	bl	8000ee4 <llist_push>
	}


		if (grow == 0) deleteLastNode(list);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <moveRight+0x52>
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ffba 	bl	80012a2 <deleteLastNode>





}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <moveLeft>:


void moveLeft(llist *list,  int grow) {
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]

	struct node *head = *list;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	617b      	str	r3, [r7, #20]

	int display = head->display;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	613b      	str	r3, [r7, #16]
	int x = head->x;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	60fb      	str	r3, [r7, #12]
	int y = head->y;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	60bb      	str	r3, [r7, #8]

		if (head->x == 0) {
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d107      	bne.n	8001370 <moveLeft+0x3a>
			llist_push(list, display-1, y, 7 );
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1e59      	subs	r1, r3, #1
 8001364:	2307      	movs	r3, #7
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fdbb 	bl	8000ee4 <llist_push>
 800136e:	e006      	b.n	800137e <moveLeft+0x48>
		} else {
			llist_push(list, display, y, x-1 );
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3b01      	subs	r3, #1
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	6939      	ldr	r1, [r7, #16]
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fdb3 	bl	8000ee4 <llist_push>
		}

		if (grow == 0) deleteLastNode(list);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <moveLeft+0x54>
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff8c 	bl	80012a2 <deleteLastNode>
//		    free (second_last->next);
//
//		    // Change next of second last
//		    second_last->next = NULL;

}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <moveDown>:

void moveDown(llist *list,  int grow) {
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]

	struct node *head = *list;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	617b      	str	r3, [r7, #20]

	int display = head->display;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	613b      	str	r3, [r7, #16]
		int x = head->x;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	60fb      	str	r3, [r7, #12]
		int y = head->y;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	60bb      	str	r3, [r7, #8]
	llist_push(list, display, y+1, x );
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6939      	ldr	r1, [r7, #16]
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fd91 	bl	8000ee4 <llist_push>

	if (grow == 0) deleteLastNode(list);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <moveDown+0x3c>
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff6a 	bl	80012a2 <deleteLastNode>
//	free (second_last->next);
//
//	// Change next of second last
//	second_last->next = NULL;

}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <moveUp>:

void moveUp(llist *list,  int grow) {
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]


	struct node *head = *list;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	617b      	str	r3, [r7, #20]

	int display = head->display;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	613b      	str	r3, [r7, #16]
			int x = head->x;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	60fb      	str	r3, [r7, #12]
			int y = head->y;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	60bb      	str	r3, [r7, #8]

	llist_push(list, display, y-1, x );
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1e5a      	subs	r2, r3, #1
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6939      	ldr	r1, [r7, #16]
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff fd6f 	bl	8000ee4 <llist_push>

	if (grow == 0) deleteLastNode(list);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <moveUp+0x3c>
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff48 	bl	80012a2 <deleteLastNode>
//	// Delete last node
//	free (second_last->next);
//
//	// Change next of second last
//	second_last->next = NULL;
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	srand(212321);
 8001422:	487d      	ldr	r0, [pc, #500]	; (8001618 <main+0x1fc>)
 8001424:	f008 f914 	bl	8009650 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001428:	f001 fd8a 	bl	8002f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142c:	f000 f940 	bl	80016b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001430:	f000 f9fe 	bl	8001830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001434:	f000 f9cc 	bl	80017d0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001438:	f000 f98c 	bl	8001754 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_MatrixInit(&hspi1, SPI_CS_GPIO_Port, SPI_CS_Pin);
 800143c:	2210      	movs	r2, #16
 800143e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001442:	4876      	ldr	r0, [pc, #472]	; (800161c <main+0x200>)
 8001444:	f001 fa4e 	bl	80028e4 <MAX7219_MatrixInit>
  MAX7219_MatrixUpdate();
 8001448:	f001 fae2 	bl	8002a10 <MAX7219_MatrixUpdate>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800144c:	f004 fef0 	bl	8006230 <osKernelInitialize>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  xButtonPressedSem = xSemaphoreCreateBinary();
 8001450:	2203      	movs	r2, #3
 8001452:	2100      	movs	r1, #0
 8001454:	2001      	movs	r0, #1
 8001456:	f005 f9ab 	bl	80067b0 <xQueueGenericCreate>
 800145a:	4603      	mov	r3, r0
 800145c:	4a70      	ldr	r2, [pc, #448]	; (8001620 <main+0x204>)
 800145e:	6013      	str	r3, [r2, #0]
  xGameOverSem = xSemaphoreCreateBinary();
 8001460:	2203      	movs	r2, #3
 8001462:	2100      	movs	r1, #0
 8001464:	2001      	movs	r0, #1
 8001466:	f005 f9a3 	bl	80067b0 <xQueueGenericCreate>
 800146a:	4603      	mov	r3, r0
 800146c:	4a6d      	ldr	r2, [pc, #436]	; (8001624 <main+0x208>)
 800146e:	6013      	str	r3, [r2, #0]
  xCheckCollison = xSemaphoreCreateBinary();
 8001470:	2203      	movs	r2, #3
 8001472:	2100      	movs	r1, #0
 8001474:	2001      	movs	r0, #1
 8001476:	f005 f99b 	bl	80067b0 <xQueueGenericCreate>
 800147a:	4603      	mov	r3, r0
 800147c:	4a6a      	ldr	r2, [pc, #424]	; (8001628 <main+0x20c>)
 800147e:	6013      	str	r3, [r2, #0]
  xCollisionChecked = xSemaphoreCreateBinary();
 8001480:	2203      	movs	r2, #3
 8001482:	2100      	movs	r1, #0
 8001484:	2001      	movs	r0, #1
 8001486:	f005 f993 	bl	80067b0 <xQueueGenericCreate>
 800148a:	4603      	mov	r3, r0
 800148c:	4a67      	ldr	r2, [pc, #412]	; (800162c <main+0x210>)
 800148e:	6013      	str	r3, [r2, #0]
  xGenerateFood = xSemaphoreCreateBinary();
 8001490:	2203      	movs	r2, #3
 8001492:	2100      	movs	r1, #0
 8001494:	2001      	movs	r0, #1
 8001496:	f005 f98b 	bl	80067b0 <xQueueGenericCreate>
 800149a:	4603      	mov	r3, r0
 800149c:	4a64      	ldr	r2, [pc, #400]	; (8001630 <main+0x214>)
 800149e:	6013      	str	r3, [r2, #0]
  xFoodGenerated = xSemaphoreCreateBinary();
 80014a0:	2203      	movs	r2, #3
 80014a2:	2100      	movs	r1, #0
 80014a4:	2001      	movs	r0, #1
 80014a6:	f005 f983 	bl	80067b0 <xQueueGenericCreate>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a61      	ldr	r2, [pc, #388]	; (8001634 <main+0x218>)
 80014ae:	6013      	str	r3, [r2, #0]
  xHandleButtonPressA = xSemaphoreCreateBinary();
 80014b0:	2203      	movs	r2, #3
 80014b2:	2100      	movs	r1, #0
 80014b4:	2001      	movs	r0, #1
 80014b6:	f005 f97b 	bl	80067b0 <xQueueGenericCreate>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a5e      	ldr	r2, [pc, #376]	; (8001638 <main+0x21c>)
 80014be:	6013      	str	r3, [r2, #0]
  xHandleButtonPressB = xSemaphoreCreateBinary();
 80014c0:	2203      	movs	r2, #3
 80014c2:	2100      	movs	r1, #0
 80014c4:	2001      	movs	r0, #1
 80014c6:	f005 f973 	bl	80067b0 <xQueueGenericCreate>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4a5b      	ldr	r2, [pc, #364]	; (800163c <main+0x220>)
 80014ce:	6013      	str	r3, [r2, #0]
  xHandleButtonPressC = xSemaphoreCreateBinary();
 80014d0:	2203      	movs	r2, #3
 80014d2:	2100      	movs	r1, #0
 80014d4:	2001      	movs	r0, #1
 80014d6:	f005 f96b 	bl	80067b0 <xQueueGenericCreate>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a58      	ldr	r2, [pc, #352]	; (8001640 <main+0x224>)
 80014de:	6013      	str	r3, [r2, #0]
  xHandleButtonPressD = xSemaphoreCreateBinary();
 80014e0:	2203      	movs	r2, #3
 80014e2:	2100      	movs	r1, #0
 80014e4:	2001      	movs	r0, #1
 80014e6:	f005 f963 	bl	80067b0 <xQueueGenericCreate>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a55      	ldr	r2, [pc, #340]	; (8001644 <main+0x228>)
 80014ee:	6013      	str	r3, [r2, #0]
  xRepaintScreen = xSemaphoreCreateBinary();
 80014f0:	2203      	movs	r2, #3
 80014f2:	2100      	movs	r1, #0
 80014f4:	2001      	movs	r0, #1
 80014f6:	f005 f95b 	bl	80067b0 <xQueueGenericCreate>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a52      	ldr	r2, [pc, #328]	; (8001648 <main+0x22c>)
 80014fe:	6013      	str	r3, [r2, #0]

  xScreenDriverMutex = xSemaphoreCreateMutex();
 8001500:	2001      	movs	r0, #1
 8001502:	f005 f9cc 	bl	800689e <xQueueCreateMutex>
 8001506:	4603      	mov	r3, r0
 8001508:	4a50      	ldr	r2, [pc, #320]	; (800164c <main+0x230>)
 800150a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

//  int test[4][8][8];
//  memset(test, 0, sizeof(test));
  xDirectionQ = xQueueCreate( 10, sizeof( char ) );
 800150c:	2200      	movs	r2, #0
 800150e:	2101      	movs	r1, #1
 8001510:	200a      	movs	r0, #10
 8001512:	f005 f94d 	bl	80067b0 <xQueueGenericCreate>
 8001516:	4603      	mov	r3, r0
 8001518:	4a4d      	ldr	r2, [pc, #308]	; (8001650 <main+0x234>)
 800151a:	6013      	str	r3, [r2, #0]
  xBoardQ = xQueueCreate( 2, sizeof( int ) *4 *8 *8 );
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001522:	2002      	movs	r0, #2
 8001524:	f005 f944 	bl	80067b0 <xQueueGenericCreate>
 8001528:	4603      	mov	r3, r0
 800152a:	4a4a      	ldr	r2, [pc, #296]	; (8001654 <main+0x238>)
 800152c:	6013      	str	r3, [r2, #0]
  xSnakeQ = xQueueCreate( 2, sizeof(  llist ) );
 800152e:	2200      	movs	r2, #0
 8001530:	2104      	movs	r1, #4
 8001532:	2002      	movs	r0, #2
 8001534:	f005 f93c 	bl	80067b0 <xQueueGenericCreate>
 8001538:	4603      	mov	r3, r0
 800153a:	4a47      	ldr	r2, [pc, #284]	; (8001658 <main+0x23c>)
 800153c:	6013      	str	r3, [r2, #0]
  xCellStateQ = xQueueCreate( 5, sizeof( int ));
 800153e:	2200      	movs	r2, #0
 8001540:	2104      	movs	r1, #4
 8001542:	2005      	movs	r0, #5
 8001544:	f005 f934 	bl	80067b0 <xQueueGenericCreate>
 8001548:	4603      	mov	r3, r0
 800154a:	4a44      	ldr	r2, [pc, #272]	; (800165c <main+0x240>)
 800154c:	6013      	str	r3, [r2, #0]
  xFoodPositionQ = xQueueCreate( 5, sizeof( int ) * 3);
 800154e:	2200      	movs	r2, #0
 8001550:	210c      	movs	r1, #12
 8001552:	2005      	movs	r0, #5
 8001554:	f005 f92c 	bl	80067b0 <xQueueGenericCreate>
 8001558:	4603      	mov	r3, r0
 800155a:	4a41      	ldr	r2, [pc, #260]	; (8001660 <main+0x244>)
 800155c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800155e:	4a41      	ldr	r2, [pc, #260]	; (8001664 <main+0x248>)
 8001560:	2100      	movs	r1, #0
 8001562:	4841      	ldr	r0, [pc, #260]	; (8001668 <main+0x24c>)
 8001564:	f004 feae 	bl	80062c4 <osThreadNew>
 8001568:	4603      	mov	r3, r0
 800156a:	4a40      	ldr	r2, [pc, #256]	; (800166c <main+0x250>)
 800156c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(GameLoop, "GameLoop", configMINIMAL_STACK_SIZE*8, NULL, 1, NULL );
 800156e:	2300      	movs	r3, #0
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	2301      	movs	r3, #1
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	493c      	ldr	r1, [pc, #240]	; (8001670 <main+0x254>)
 800157e:	483d      	ldr	r0, [pc, #244]	; (8001674 <main+0x258>)
 8001580:	f005 ff9b 	bl	80074ba <xTaskCreate>
  //xTaskCreate(ButtonHandler, "ButtonHandler", configMINIMAL_STACK_SIZE, NULL, 2, NULL );
  //xTaskCreate(CollisionCheck, "CollisionCheck", configMINIMAL_STACK_SIZE*8, NULL, 2, NULL );
  xTaskCreate(Task3, "Task3", configMINIMAL_STACK_SIZE, NULL, 5, NULL );
 8001584:	2300      	movs	r3, #0
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	2305      	movs	r3, #5
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2300      	movs	r3, #0
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	4939      	ldr	r1, [pc, #228]	; (8001678 <main+0x25c>)
 8001592:	483a      	ldr	r0, [pc, #232]	; (800167c <main+0x260>)
 8001594:	f005 ff91 	bl	80074ba <xTaskCreate>
  xTaskCreate(FoodPositionGenerator, "FoodPositionGenerator", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8001598:	2300      	movs	r3, #0
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	2301      	movs	r3, #1
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	4936      	ldr	r1, [pc, #216]	; (8001680 <main+0x264>)
 80015a6:	4837      	ldr	r0, [pc, #220]	; (8001684 <main+0x268>)
 80015a8:	f005 ff87 	bl	80074ba <xTaskCreate>
  xTaskCreate(ButtonHandler_A, "ButtonHandler_A", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 80015ac:	2300      	movs	r3, #0
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2303      	movs	r3, #3
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2300      	movs	r3, #0
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	4933      	ldr	r1, [pc, #204]	; (8001688 <main+0x26c>)
 80015ba:	4834      	ldr	r0, [pc, #208]	; (800168c <main+0x270>)
 80015bc:	f005 ff7d 	bl	80074ba <xTaskCreate>
  xTaskCreate(ButtonHandler_B, "ButtonHandler_B", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 80015c0:	2300      	movs	r3, #0
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	2303      	movs	r3, #3
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	4930      	ldr	r1, [pc, #192]	; (8001690 <main+0x274>)
 80015ce:	4831      	ldr	r0, [pc, #196]	; (8001694 <main+0x278>)
 80015d0:	f005 ff73 	bl	80074ba <xTaskCreate>
  xTaskCreate(ButtonHandler_C, "ButtonHandler_C", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 80015d4:	2300      	movs	r3, #0
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2303      	movs	r3, #3
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2300      	movs	r3, #0
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	492d      	ldr	r1, [pc, #180]	; (8001698 <main+0x27c>)
 80015e2:	482e      	ldr	r0, [pc, #184]	; (800169c <main+0x280>)
 80015e4:	f005 ff69 	bl	80074ba <xTaskCreate>
  xTaskCreate(ButtonHandler_D, "ButtonHandler_D", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 80015e8:	2300      	movs	r3, #0
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2303      	movs	r3, #3
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	492a      	ldr	r1, [pc, #168]	; (80016a0 <main+0x284>)
 80015f6:	482b      	ldr	r0, [pc, #172]	; (80016a4 <main+0x288>)
 80015f8:	f005 ff5f 	bl	80074ba <xTaskCreate>
  xTaskCreate(ScreenDriver, "ScreenDriver", configMINIMAL_STACK_SIZE*8, NULL, 1, NULL );
 80015fc:	2300      	movs	r3, #0
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	2301      	movs	r3, #1
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2300      	movs	r3, #0
 8001606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160a:	4927      	ldr	r1, [pc, #156]	; (80016a8 <main+0x28c>)
 800160c:	4827      	ldr	r0, [pc, #156]	; (80016ac <main+0x290>)
 800160e:	f005 ff54 	bl	80074ba <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001612:	f004 fe31 	bl	8006278 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001616:	e7fe      	b.n	8001616 <main+0x1fa>
 8001618:	00033d61 	.word	0x00033d61
 800161c:	20000090 	.word	0x20000090
 8001620:	20000190 	.word	0x20000190
 8001624:	20000194 	.word	0x20000194
 8001628:	20000198 	.word	0x20000198
 800162c:	2000019c 	.word	0x2000019c
 8001630:	200001a0 	.word	0x200001a0
 8001634:	200001a4 	.word	0x200001a4
 8001638:	200001ac 	.word	0x200001ac
 800163c:	200001b0 	.word	0x200001b0
 8001640:	200001b4 	.word	0x200001b4
 8001644:	200001b8 	.word	0x200001b8
 8001648:	200001a8 	.word	0x200001a8
 800164c:	200001bc 	.word	0x200001bc
 8001650:	2000017c 	.word	0x2000017c
 8001654:	20000180 	.word	0x20000180
 8001658:	20000184 	.word	0x20000184
 800165c:	20000188 	.word	0x20000188
 8001660:	2000018c 	.word	0x2000018c
 8001664:	0800b4a8 	.word	0x0800b4a8
 8001668:	080023d5 	.word	0x080023d5
 800166c:	20000178 	.word	0x20000178
 8001670:	0800b3cc 	.word	0x0800b3cc
 8001674:	08001cbd 	.word	0x08001cbd
 8001678:	0800b3d8 	.word	0x0800b3d8
 800167c:	080022e9 	.word	0x080022e9
 8001680:	0800b3e0 	.word	0x0800b3e0
 8001684:	080021b9 	.word	0x080021b9
 8001688:	0800b3f8 	.word	0x0800b3f8
 800168c:	08001b21 	.word	0x08001b21
 8001690:	0800b408 	.word	0x0800b408
 8001694:	08001b69 	.word	0x08001b69
 8001698:	0800b418 	.word	0x0800b418
 800169c:	08001bb1 	.word	0x08001bb1
 80016a0:	0800b428 	.word	0x0800b428
 80016a4:	08001bf9 	.word	0x08001bf9
 80016a8:	0800b438 	.word	0x0800b438
 80016ac:	08001c41 	.word	0x08001c41

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b096      	sub	sp, #88	; 0x58
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	2244      	movs	r2, #68	; 0x44
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f007 fede 	bl	8009480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016d6:	f001 ff25 	bl	8003524 <HAL_PWREx_ControlVoltageScaling>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016e0:	f000 fe92 	bl	8002408 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e4:	2302      	movs	r3, #2
 80016e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ee:	2310      	movs	r3, #16
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f2:	2302      	movs	r3, #2
 80016f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f6:	2302      	movs	r3, #2
 80016f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016fa:	2301      	movs	r3, #1
 80016fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016fe:	230a      	movs	r3, #10
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001702:	2307      	movs	r3, #7
 8001704:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001706:	2302      	movs	r3, #2
 8001708:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800170a:	2302      	movs	r3, #2
 800170c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4618      	mov	r0, r3
 8001714:	f001 ff5c 	bl	80035d0 <HAL_RCC_OscConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800171e:	f000 fe73 	bl	8002408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	230f      	movs	r3, #15
 8001724:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001726:	2303      	movs	r3, #3
 8001728:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	2104      	movs	r1, #4
 800173a:	4618      	mov	r0, r3
 800173c:	f002 fb24 	bl	8003d88 <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001746:	f000 fe5f 	bl	8002408 <Error_Handler>
  }
}
 800174a:	bf00      	nop
 800174c:	3758      	adds	r7, #88	; 0x58
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_SPI1_Init+0x74>)
 800175a:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <MX_SPI1_Init+0x78>)
 800175c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_SPI1_Init+0x74>)
 8001760:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_SPI1_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_SPI1_Init+0x74>)
 800176e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001772:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_SPI1_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <MX_SPI1_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_SPI1_Init+0x74>)
 8001782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001786:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_SPI1_Init+0x74>)
 800178a:	2218      	movs	r2, #24
 800178c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_SPI1_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_SPI1_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_SPI1_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_SPI1_Init+0x74>)
 80017a2:	2207      	movs	r2, #7
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_SPI1_Init+0x74>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_SPI1_Init+0x74>)
 80017ae:	2208      	movs	r2, #8
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_SPI1_Init+0x74>)
 80017b4:	f003 f9fa 	bl	8004bac <HAL_SPI_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017be:	f000 fe23 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000090 	.word	0x20000090
 80017cc:	40013000 	.word	0x40013000

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017d6:	4a15      	ldr	r2, [pc, #84]	; (800182c <MX_USART2_UART_Init+0x5c>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_USART2_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001814:	f004 f812 	bl	800583c <HAL_UART_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800181e:	f000 fdf3 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200000f4 	.word	0x200000f4
 800182c:	40004400 	.word	0x40004400

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <MX_GPIO_Init+0x1c0>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a69      	ldr	r2, [pc, #420]	; (80019f0 <MX_GPIO_Init+0x1c0>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b67      	ldr	r3, [pc, #412]	; (80019f0 <MX_GPIO_Init+0x1c0>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185e:	4b64      	ldr	r3, [pc, #400]	; (80019f0 <MX_GPIO_Init+0x1c0>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a63      	ldr	r2, [pc, #396]	; (80019f0 <MX_GPIO_Init+0x1c0>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b61      	ldr	r3, [pc, #388]	; (80019f0 <MX_GPIO_Init+0x1c0>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <MX_GPIO_Init+0x1c0>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a5d      	ldr	r2, [pc, #372]	; (80019f0 <MX_GPIO_Init+0x1c0>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b5b      	ldr	r3, [pc, #364]	; (80019f0 <MX_GPIO_Init+0x1c0>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b58      	ldr	r3, [pc, #352]	; (80019f0 <MX_GPIO_Init+0x1c0>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a57      	ldr	r2, [pc, #348]	; (80019f0 <MX_GPIO_Init+0x1c0>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b55      	ldr	r3, [pc, #340]	; (80019f0 <MX_GPIO_Init+0x1c0>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2107      	movs	r1, #7
 80018aa:	4852      	ldr	r0, [pc, #328]	; (80019f4 <MX_GPIO_Init+0x1c4>)
 80018ac:	f001 fe14 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2150      	movs	r1, #80	; 0x50
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b8:	f001 fe0e 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	2140      	movs	r1, #64	; 0x40
 80018c0:	484d      	ldr	r0, [pc, #308]	; (80019f8 <MX_GPIO_Init+0x1c8>)
 80018c2:	f001 fe09 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4845      	ldr	r0, [pc, #276]	; (80019f4 <MX_GPIO_Init+0x1c4>)
 80018de:	f001 fc51 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80018e2:	2307      	movs	r3, #7
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	483e      	ldr	r0, [pc, #248]	; (80019f4 <MX_GPIO_Init+0x1c4>)
 80018fa:	f001 fc43 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 80018fe:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f001 fc35 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin PA6 */
  GPIO_InitStruct.Pin = SPI_CS_Pin|GPIO_PIN_6;
 800191a:	2350      	movs	r3, #80	; 0x50
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001934:	f001 fc26 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_A3_Pin PB10 */
  GPIO_InitStruct.Pin = Button_A3_Pin|GPIO_PIN_10;
 8001938:	f240 4301 	movw	r3, #1025	; 0x401
 800193c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	482a      	ldr	r0, [pc, #168]	; (80019f8 <MX_GPIO_Init+0x1c8>)
 800194e:	f001 fc19 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001958:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800195c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f001 fc0a 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_B_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = Button_B_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8001970:	2338      	movs	r3, #56	; 0x38
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001974:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	481c      	ldr	r0, [pc, #112]	; (80019f8 <MX_GPIO_Init+0x1c8>)
 8001986:	f001 fbfd 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800198a:	2340      	movs	r3, #64	; 0x40
 800198c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4815      	ldr	r0, [pc, #84]	; (80019f8 <MX_GPIO_Init+0x1c8>)
 80019a2:	f001 fbef 	bl	8003184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2105      	movs	r1, #5
 80019aa:	2009      	movs	r0, #9
 80019ac:	f001 fbc0 	bl	8003130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80019b0:	2009      	movs	r0, #9
 80019b2:	f001 fbd9 	bl	8003168 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2105      	movs	r1, #5
 80019ba:	200a      	movs	r0, #10
 80019bc:	f001 fbb8 	bl	8003130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019c0:	200a      	movs	r0, #10
 80019c2:	f001 fbd1 	bl	8003168 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2105      	movs	r1, #5
 80019ca:	2017      	movs	r0, #23
 80019cc:	f001 fbb0 	bl	8003130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019d0:	2017      	movs	r0, #23
 80019d2:	f001 fbc9 	bl	8003168 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2105      	movs	r1, #5
 80019da:	2028      	movs	r0, #40	; 0x28
 80019dc:	f001 fba8 	bl	8003130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019e0:	2028      	movs	r0, #40	; 0x28
 80019e2:	f001 fbc1 	bl	8003168 <HAL_NVIC_EnableIRQ>

}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	48000800 	.word	0x48000800
 80019f8:	48000400 	.word	0x48000400

080019fc <EXTI3_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI3_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	static  BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <EXTI3_IRQHandler+0x38>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <EXTI3_IRQHandler+0x3c>)
 8001a08:	2208      	movs	r2, #8
 8001a0a:	615a      	str	r2, [r3, #20]


	xSemaphoreGiveFromISR( xHandleButtonPressB, &xHigherPriorityTaskWoken );
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <EXTI3_IRQHandler+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4908      	ldr	r1, [pc, #32]	; (8001a34 <EXTI3_IRQHandler+0x38>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f005 f8f5 	bl	8006c02 <xQueueGiveFromISR>

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <EXTI3_IRQHandler+0x38>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <EXTI3_IRQHandler+0x34>
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <EXTI3_IRQHandler+0x44>)
 8001a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f3bf 8f4f 	dsb	sy
 8001a2c:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI3_IRQn 0 */

  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200001c0 	.word	0x200001c0
 8001a38:	40010400 	.word	0x40010400
 8001a3c:	200001b0 	.word	0x200001b0
 8001a40:	e000ed04 	.word	0xe000ed04

08001a44 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	static  BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <EXTI4_IRQHandler+0x38>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <EXTI4_IRQHandler+0x3c>)
 8001a50:	2210      	movs	r2, #16
 8001a52:	615a      	str	r2, [r3, #20]


		xSemaphoreGiveFromISR( xHandleButtonPressD, &xHigherPriorityTaskWoken );
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <EXTI4_IRQHandler+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4908      	ldr	r1, [pc, #32]	; (8001a7c <EXTI4_IRQHandler+0x38>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f005 f8d1 	bl	8006c02 <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <EXTI4_IRQHandler+0x38>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <EXTI4_IRQHandler+0x34>
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <EXTI4_IRQHandler+0x44>)
 8001a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	f3bf 8f4f 	dsb	sy
 8001a74:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI4_IRQn 0 */
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200001c4 	.word	0x200001c4
 8001a80:	40010400 	.word	0x40010400
 8001a84:	200001b8 	.word	0x200001b8
 8001a88:	e000ed04 	.word	0xe000ed04

08001a8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	static  BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <EXTI9_5_IRQHandler+0x38>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <EXTI9_5_IRQHandler+0x3c>)
 8001a98:	2220      	movs	r2, #32
 8001a9a:	615a      	str	r2, [r3, #20]


		xSemaphoreGiveFromISR( xHandleButtonPressC, &xHigherPriorityTaskWoken );
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <EXTI9_5_IRQHandler+0x40>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <EXTI9_5_IRQHandler+0x38>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 f8ad 	bl	8006c02 <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <EXTI9_5_IRQHandler+0x38>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d007      	beq.n	8001ac0 <EXTI9_5_IRQHandler+0x34>
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <EXTI9_5_IRQHandler+0x44>)
 8001ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	f3bf 8f4f 	dsb	sy
 8001abc:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI9_5_IRQn 0 */
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200001c8 	.word	0x200001c8
 8001ac8:	40010400 	.word	0x40010400
 8001acc:	200001b4 	.word	0x200001b4
 8001ad0:	e000ed04 	.word	0xe000ed04

08001ad4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	static  BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <EXTI15_10_IRQHandler+0x3c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <EXTI15_10_IRQHandler+0x40>)
 8001ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae4:	615a      	str	r2, [r3, #20]


		xSemaphoreGiveFromISR( xHandleButtonPressA, &xHigherPriorityTaskWoken );
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <EXTI15_10_IRQHandler+0x44>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4909      	ldr	r1, [pc, #36]	; (8001b10 <EXTI15_10_IRQHandler+0x3c>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	f005 f888 	bl	8006c02 <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <EXTI15_10_IRQHandler+0x3c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d007      	beq.n	8001b0a <EXTI15_10_IRQHandler+0x36>
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <EXTI15_10_IRQHandler+0x48>)
 8001afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	f3bf 8f4f 	dsb	sy
 8001b06:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200001cc 	.word	0x200001cc
 8001b14:	40010400 	.word	0x40010400
 8001b18:	200001ac 	.word	0x200001ac
 8001b1c:	e000ed04 	.word	0xe000ed04

08001b20 <ButtonHandler_A>:

void ButtonHandler_A( void *pvParameters ){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	char buttonLetter = 'a';
 8001b28:	2361      	movs	r3, #97	; 0x61
 8001b2a:	73fb      	strb	r3, [r7, #15]

	for(;;)
	    {

			if( xSemaphoreTake( xHandleButtonPressA, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <ButtonHandler_A+0x3c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	4618      	mov	r0, r3
 8001b36:	f005 f9d1 	bl	8006edc <xQueueSemaphoreTake>
			xQueueSend( xDirectionQ, ( void * ) &buttonLetter,  portMAX_DELAY );
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <ButtonHandler_A+0x40>)
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	f107 010f 	add.w	r1, r7, #15
 8001b42:	2300      	movs	r3, #0
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	f004 fec2 	bl	80068d0 <xQueueGenericSend>
			xSemaphoreGive( xButtonPressedSem );
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <ButtonHandler_A+0x44>)
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	2300      	movs	r3, #0
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	f004 febb 	bl	80068d0 <xQueueGenericSend>
			if( xSemaphoreTake( xHandleButtonPressA, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001b5a:	e7e7      	b.n	8001b2c <ButtonHandler_A+0xc>
 8001b5c:	200001ac 	.word	0x200001ac
 8001b60:	2000017c 	.word	0x2000017c
 8001b64:	20000190 	.word	0x20000190

08001b68 <ButtonHandler_B>:
	    }
};
void ButtonHandler_B( void *pvParameters ){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	char buttonLetter = 'b';
 8001b70:	2362      	movs	r3, #98	; 0x62
 8001b72:	73fb      	strb	r3, [r7, #15]
	for(;;)
		    {

				if( xSemaphoreTake( xHandleButtonPressB, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <ButtonHandler_B+0x3c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 f9ad 	bl	8006edc <xQueueSemaphoreTake>
				xQueueSend( xDirectionQ, ( void * ) &buttonLetter,  portMAX_DELAY );
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <ButtonHandler_B+0x40>)
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	f107 010f 	add.w	r1, r7, #15
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	f004 fe9e 	bl	80068d0 <xQueueGenericSend>
				xSemaphoreGive( xButtonPressedSem );
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <ButtonHandler_B+0x44>)
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	f004 fe97 	bl	80068d0 <xQueueGenericSend>
				if( xSemaphoreTake( xHandleButtonPressB, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001ba2:	e7e7      	b.n	8001b74 <ButtonHandler_B+0xc>
 8001ba4:	200001b0 	.word	0x200001b0
 8001ba8:	2000017c 	.word	0x2000017c
 8001bac:	20000190 	.word	0x20000190

08001bb0 <ButtonHandler_C>:
		    }
};
void ButtonHandler_C( void *pvParameters ){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	char buttonLetter = 'c';
 8001bb8:	2363      	movs	r3, #99	; 0x63
 8001bba:	73fb      	strb	r3, [r7, #15]
	for(;;)
		    {

				if( xSemaphoreTake( xHandleButtonPressC, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <ButtonHandler_C+0x3c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f005 f989 	bl	8006edc <xQueueSemaphoreTake>
				xQueueSend( xDirectionQ, ( void * ) &buttonLetter,  portMAX_DELAY );
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <ButtonHandler_C+0x40>)
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	f107 010f 	add.w	r1, r7, #15
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	f004 fe7a 	bl	80068d0 <xQueueGenericSend>
				xSemaphoreGive( xButtonPressedSem );
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <ButtonHandler_C+0x44>)
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	2300      	movs	r3, #0
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	f004 fe73 	bl	80068d0 <xQueueGenericSend>
				if( xSemaphoreTake( xHandleButtonPressC, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001bea:	e7e7      	b.n	8001bbc <ButtonHandler_C+0xc>
 8001bec:	200001b4 	.word	0x200001b4
 8001bf0:	2000017c 	.word	0x2000017c
 8001bf4:	20000190 	.word	0x20000190

08001bf8 <ButtonHandler_D>:
		    }
};
void ButtonHandler_D( void *pvParameters ){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	char buttonLetter = 'd';
 8001c00:	2364      	movs	r3, #100	; 0x64
 8001c02:	73fb      	strb	r3, [r7, #15]
	for(;;)
		    {

				if( xSemaphoreTake( xHandleButtonPressD, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <ButtonHandler_D+0x3c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f005 f965 	bl	8006edc <xQueueSemaphoreTake>
				xQueueSend( xDirectionQ, ( void * ) &buttonLetter,  portMAX_DELAY );
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <ButtonHandler_D+0x40>)
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	f107 010f 	add.w	r1, r7, #15
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	f004 fe56 	bl	80068d0 <xQueueGenericSend>
				xSemaphoreGive( xButtonPressedSem );
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <ButtonHandler_D+0x44>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	f004 fe4f 	bl	80068d0 <xQueueGenericSend>
				if( xSemaphoreTake( xHandleButtonPressD, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001c32:	e7e7      	b.n	8001c04 <ButtonHandler_D+0xc>
 8001c34:	200001b8 	.word	0x200001b8
 8001c38:	2000017c 	.word	0x2000017c
 8001c3c:	20000190 	.word	0x20000190

08001c40 <ScreenDriver>:
		    }

};

void ScreenDriver( void * pvParameters ){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001c4c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001c50:	6018      	str	r0, [r3, #0]
	int board[4][8][8];

	for(;;)
			    {
		if( xSemaphoreTake( xRepaintScreen, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <ScreenDriver+0x74>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f005 f93e 	bl	8006edc <xQueueSemaphoreTake>
		xQueueReceive( xBoardQ, &board, ( TickType_t ) 10 );
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <ScreenDriver+0x78>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f107 0108 	add.w	r1, r7, #8
 8001c68:	220a      	movs	r2, #10
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f005 f856 	bl	8006d1c <xQueueReceive>

		MAX7219_paintPoints(0, board[0]);
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	4619      	mov	r1, r3
 8001c76:	2000      	movs	r0, #0
 8001c78:	f000 fe0a 	bl	8002890 <MAX7219_paintPoints>
		MAX7219_paintPoints(1, board[1]);
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c84:	4619      	mov	r1, r3
 8001c86:	2001      	movs	r0, #1
 8001c88:	f000 fe02 	bl	8002890 <MAX7219_paintPoints>
		MAX7219_paintPoints(2, board[2]);
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c94:	4619      	mov	r1, r3
 8001c96:	2002      	movs	r0, #2
 8001c98:	f000 fdfa 	bl	8002890 <MAX7219_paintPoints>
		MAX7219_paintPoints(3, board[3]);
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f000 fdf2 	bl	8002890 <MAX7219_paintPoints>
		MAX7219_MatrixUpdate();
 8001cac:	f000 feb0 	bl	8002a10 <MAX7219_MatrixUpdate>
		if( xSemaphoreTake( xRepaintScreen, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001cb0:	e7cf      	b.n	8001c52 <ScreenDriver+0x12>
 8001cb2:	bf00      	nop
 8001cb4:	200001a8 	.word	0x200001a8
 8001cb8:	20000180 	.word	0x20000180

08001cbc <GameLoop>:
};


void GameLoop( void * pvParameters )

{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001cc8:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8001ccc:	6018      	str	r0, [r3, #0]
	int board[4][8][8];
	char direction = 'a';
 8001cce:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001cd2:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001cd6:	2261      	movs	r2, #97	; 0x61
 8001cd8:	701a      	strb	r2, [r3, #0]
	char previousDirection = 'a';
 8001cda:	2361      	movs	r3, #97	; 0x61
 8001cdc:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
	int delay = 350;
 8001ce0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001ce4:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
	int cellState = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int foodTimeout = 3;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	int food[3];
	int grow = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

	memset(board, 0, sizeof(board));
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f007 fbbb 	bl	8009480 <memset>

	llist *snake = llist_create(NULL);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7ff f8c6 	bl	8000e9c <llist_create>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d16:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001d1a:	601a      	str	r2, [r3, #0]
	llist_push(snake, 0,4,1);
 8001d1c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d20:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	2301      	movs	r3, #1
 8001d28:	2204      	movs	r2, #4
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	f7ff f8da 	bl	8000ee4 <llist_push>
	llist_push(snake, 0,4,2);
 8001d30:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d34:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	2100      	movs	r1, #0
 8001d40:	f7ff f8d0 	bl	8000ee4 <llist_push>

	llist_printSnake(snake, board);
 8001d44:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d48:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f107 021c 	add.w	r2, r7, #28
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff f8fb 	bl	8000f50 <llist_printSnake>

	if( xSemaphoreTake( xScreenDriverMutex, ( TickType_t ) portMAX_DELAY) == pdTRUE ) ;
 8001d5a:	4bc1      	ldr	r3, [pc, #772]	; (8002060 <GameLoop+0x3a4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 f8ba 	bl	8006edc <xQueueSemaphoreTake>

	xQueueSend( xBoardQ, ( void * ) &board,  1 );
 8001d68:	4bbe      	ldr	r3, [pc, #760]	; (8002064 <GameLoop+0x3a8>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	f107 011c 	add.w	r1, r7, #28
 8001d70:	2300      	movs	r3, #0
 8001d72:	2201      	movs	r2, #1
 8001d74:	f004 fdac 	bl	80068d0 <xQueueGenericSend>
	xSemaphoreGive( xRepaintScreen );
 8001d78:	4bbb      	ldr	r3, [pc, #748]	; (8002068 <GameLoop+0x3ac>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	f004 fda5 	bl	80068d0 <xQueueGenericSend>

	xSemaphoreGive(xScreenDriverMutex);
 8001d86:	4bb6      	ldr	r3, [pc, #728]	; (8002060 <GameLoop+0x3a4>)
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	f004 fd9e 	bl	80068d0 <xQueueGenericSend>

	vTaskDelay(delay);
 8001d94:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f005 fcd3 	bl	8007744 <vTaskDelay>

    for(;;)
    {

    	if( xSemaphoreTake( xButtonPressedSem, ( TickType_t ) 1) == pdTRUE ){
 8001d9e:	4bb3      	ldr	r3, [pc, #716]	; (800206c <GameLoop+0x3b0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2101      	movs	r1, #1
 8001da4:	4618      	mov	r0, r3
 8001da6:	f005 f899 	bl	8006edc <xQueueSemaphoreTake>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d161      	bne.n	8001e74 <GameLoop+0x1b8>
    		previousDirection = direction;
 8001db0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001db4:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
    		xQueueReceive( xDirectionQ, &direction, ( TickType_t ) 10 );
 8001dbe:	4bac      	ldr	r3, [pc, #688]	; (8002070 <GameLoop+0x3b4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f107 011b 	add.w	r1, r7, #27
 8001dc6:	220a      	movs	r2, #10
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 ffa7 	bl	8006d1c <xQueueReceive>
    		switch (direction)
 8001dce:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001dd2:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	3b61      	subs	r3, #97	; 0x61
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d83a      	bhi.n	8001e54 <GameLoop+0x198>
 8001dde:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <GameLoop+0x128>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001e3d 	.word	0x08001e3d
 8001de8:	08001df5 	.word	0x08001df5
 8001dec:	08001e25 	.word	0x08001e25
 8001df0:	08001e0d 	.word	0x08001e0d
			{
				case 'b':
					if (previousDirection == 'd') direction = previousDirection;
 8001df4:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001df8:	2b64      	cmp	r3, #100	; 0x64
 8001dfa:	d12d      	bne.n	8001e58 <GameLoop+0x19c>
 8001dfc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e00:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e04:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8001e08:	701a      	strb	r2, [r3, #0]

					break;
 8001e0a:	e025      	b.n	8001e58 <GameLoop+0x19c>
				case 'd':

					if (previousDirection == 'b') direction = previousDirection;
 8001e0c:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001e10:	2b62      	cmp	r3, #98	; 0x62
 8001e12:	d123      	bne.n	8001e5c <GameLoop+0x1a0>
 8001e14:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e18:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e1c:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8001e20:	701a      	strb	r2, [r3, #0]
					break;
 8001e22:	e01b      	b.n	8001e5c <GameLoop+0x1a0>
				case 'c':

					if (previousDirection == 'a') direction = previousDirection;
 8001e24:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001e28:	2b61      	cmp	r3, #97	; 0x61
 8001e2a:	d119      	bne.n	8001e60 <GameLoop+0x1a4>
 8001e2c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e30:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e34:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8001e38:	701a      	strb	r2, [r3, #0]
					break;
 8001e3a:	e011      	b.n	8001e60 <GameLoop+0x1a4>
				case 'a':

					if (previousDirection == 'c') direction = previousDirection;
 8001e3c:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001e40:	2b63      	cmp	r3, #99	; 0x63
 8001e42:	d10f      	bne.n	8001e64 <GameLoop+0x1a8>
 8001e44:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e48:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e4c:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8001e50:	701a      	strb	r2, [r3, #0]

					break;
 8001e52:	e007      	b.n	8001e64 <GameLoop+0x1a8>
				default:
					break;
 8001e54:	bf00      	nop
 8001e56:	e006      	b.n	8001e66 <GameLoop+0x1aa>
					break;
 8001e58:	bf00      	nop
 8001e5a:	e004      	b.n	8001e66 <GameLoop+0x1aa>
					break;
 8001e5c:	bf00      	nop
 8001e5e:	e002      	b.n	8001e66 <GameLoop+0x1aa>
					break;
 8001e60:	bf00      	nop
 8001e62:	e000      	b.n	8001e66 <GameLoop+0x1aa>
					break;
 8001e64:	bf00      	nop
			}

    		xQueueReset(xDirectionQ);
 8001e66:	4b82      	ldr	r3, [pc, #520]	; (8002070 <GameLoop+0x3b4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f004 fbbf 	bl	80065f0 <xQueueGenericReset>
 8001e72:	e794      	b.n	8001d9e <GameLoop+0xe2>
    	}else {


    		switch (direction)
 8001e74:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e78:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	3b61      	subs	r3, #97	; 0x61
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	f200 80e5 	bhi.w	8002050 <GameLoop+0x394>
 8001e86:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <GameLoop+0x1d0>)
 8001e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8c:	08001fe5 	.word	0x08001fe5
 8001e90:	08001e9d 	.word	0x08001e9d
 8001e94:	08001f79 	.word	0x08001f79
 8001e98:	08001f0b 	.word	0x08001f0b
			{
			case 'b':
				cellState = checkOccupiedDown( snake, board);
 8001e9c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001ea0:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f107 021c 	add.w	r2, r7, #28
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f9a3 	bl	80011f8 <checkOccupiedDown>
 8001eb2:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
				if (previousDirection != 'd'){
 8001eb6:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	f000 80ca 	beq.w	8002054 <GameLoop+0x398>
					if (cellState == 1 || cellState == -1) xSemaphoreGive( xGameOverSem );
 8001ec0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d004      	beq.n	8001ed2 <GameLoop+0x216>
 8001ec8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d106      	bne.n	8001ee0 <GameLoop+0x224>
 8001ed2:	4b68      	ldr	r3, [pc, #416]	; (8002074 <GameLoop+0x3b8>)
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	f004 fcf8 	bl	80068d0 <xQueueGenericSend>
					if (cellState == 2 ) {
 8001ee0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d105      	bne.n	8001ef4 <GameLoop+0x238>
						foodTimeout = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
						grow = 1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
					}
					 moveDown(snake, grow);
 8001ef4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001ef8:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fa45 	bl	8001392 <moveDown>
				}
				break;
 8001f08:	e0a4      	b.n	8002054 <GameLoop+0x398>
			case 'd':
				cellState = checkOccupiedUp( snake, board);
 8001f0a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001f0e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f107 021c 	add.w	r2, r7, #28
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f917 	bl	800114e <checkOccupiedUp>
 8001f20:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c

				if (previousDirection != 'b') {
 8001f24:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001f28:	2b62      	cmp	r3, #98	; 0x62
 8001f2a:	f000 8095 	beq.w	8002058 <GameLoop+0x39c>

					if (cellState == 1 || cellState == -1) xSemaphoreGive( xGameOverSem );
 8001f2e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d004      	beq.n	8001f40 <GameLoop+0x284>
 8001f36:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3e:	d106      	bne.n	8001f4e <GameLoop+0x292>
 8001f40:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <GameLoop+0x3b8>)
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	2300      	movs	r3, #0
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	f004 fcc1 	bl	80068d0 <xQueueGenericSend>
					if (cellState == 2 ) {
 8001f4e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d105      	bne.n	8001f62 <GameLoop+0x2a6>
										foodTimeout = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
										grow = 1;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
									}
					moveUp(snake, grow);
 8001f62:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001f66:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fa30 	bl	80013d6 <moveUp>
				}
				break;
 8001f76:	e06f      	b.n	8002058 <GameLoop+0x39c>
			case 'c':
				cellState = checkOccupiedLeft( snake, board);
 8001f78:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001f7c:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f107 021c 	add.w	r2, r7, #28
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f874 	bl	8001076 <checkOccupiedLeft>
 8001f8e:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
				if (previousDirection != 'a'){
 8001f92:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001f96:	2b61      	cmp	r3, #97	; 0x61
 8001f98:	d060      	beq.n	800205c <GameLoop+0x3a0>
					if (cellState == 1 || cellState == -1) xSemaphoreGive( xGameOverSem );
 8001f9a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d004      	beq.n	8001fac <GameLoop+0x2f0>
 8001fa2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001faa:	d106      	bne.n	8001fba <GameLoop+0x2fe>
 8001fac:	4b31      	ldr	r3, [pc, #196]	; (8002074 <GameLoop+0x3b8>)
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	f004 fc8b 	bl	80068d0 <xQueueGenericSend>
					if (cellState == 2 ) {
 8001fba:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d105      	bne.n	8001fce <GameLoop+0x312>
										foodTimeout = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
										grow = 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
									}
					 moveLeft(snake, grow);
 8001fce:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001fd2:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff f9aa 	bl	8001336 <moveLeft>
				}
				break;
 8001fe2:	e03b      	b.n	800205c <GameLoop+0x3a0>
			case 'a':
				cellState = checkOccupiedRight( snake, board);
 8001fe4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001fe8:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f107 021c 	add.w	r2, r7, #28
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe ffd5 	bl	8000fa4 <checkOccupiedRight>
 8001ffa:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c


				if (previousDirection != 'c'){
 8001ffe:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8002002:	2b63      	cmp	r3, #99	; 0x63
 8002004:	d038      	beq.n	8002078 <GameLoop+0x3bc>
					if (cellState == 1 || cellState == -1) xSemaphoreGive( xGameOverSem );
 8002006:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800200a:	2b01      	cmp	r3, #1
 800200c:	d004      	beq.n	8002018 <GameLoop+0x35c>
 800200e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002016:	d106      	bne.n	8002026 <GameLoop+0x36a>
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <GameLoop+0x3b8>)
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	2300      	movs	r3, #0
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	f004 fc55 	bl	80068d0 <xQueueGenericSend>
					if (cellState == 2 ) {
 8002026:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800202a:	2b02      	cmp	r3, #2
 800202c:	d105      	bne.n	800203a <GameLoop+0x37e>
						foodTimeout = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
						grow = 1;
 8002034:	2301      	movs	r3, #1
 8002036:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
					}
					moveRight(snake, grow);
 800203a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800203e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f947 	bl	80012dc <moveRight>
//				xQueueSend( xBoardQ, ( void * ) &board,  1 );
//				xQueueSend( xSnakeQ, ( void * ) &snake,  1 );
//				xSemaphoreGive( xCheckCollison );
//				if(xSemaphoreTake( xCollisionChecked, ( TickType_t ) portMAX_DELAY) == pdTRUE);
//				xQueueReceive( xCellStateQ, &cellState, ( TickType_t ) 10 );
				break;
 800204e:	e013      	b.n	8002078 <GameLoop+0x3bc>
			default:
				break;
 8002050:	bf00      	nop
 8002052:	e012      	b.n	800207a <GameLoop+0x3be>
				break;
 8002054:	bf00      	nop
 8002056:	e010      	b.n	800207a <GameLoop+0x3be>
				break;
 8002058:	bf00      	nop
 800205a:	e00e      	b.n	800207a <GameLoop+0x3be>
				break;
 800205c:	bf00      	nop
 800205e:	e00c      	b.n	800207a <GameLoop+0x3be>
 8002060:	200001bc 	.word	0x200001bc
 8002064:	20000180 	.word	0x20000180
 8002068:	200001a8 	.word	0x200001a8
 800206c:	20000190 	.word	0x20000190
 8002070:	2000017c 	.word	0x2000017c
 8002074:	20000194 	.word	0x20000194
				break;
 8002078:	bf00      	nop
			}
    		if (grow == 1) if (delay > 150) delay = delay - 1;
 800207a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800207e:	2b01      	cmp	r3, #1
 8002080:	d108      	bne.n	8002094 <GameLoop+0x3d8>
 8002082:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8002086:	2b96      	cmp	r3, #150	; 0x96
 8002088:	dd04      	ble.n	8002094 <GameLoop+0x3d8>
 800208a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800208e:	3b01      	subs	r3, #1
 8002090:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
    		grow = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

    		memset(board, 0, sizeof(board));
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f007 f9eb 	bl	8009480 <memset>

    		if (foodTimeout == 6){
 80020aa:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d123      	bne.n	80020fa <GameLoop+0x43e>
    			xQueueReset(xSnakeQ);
 80020b2:	4b3a      	ldr	r3, [pc, #232]	; (800219c <GameLoop+0x4e0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 fa99 	bl	80065f0 <xQueueGenericReset>
				xQueueSend( xSnakeQ, ( void * ) &snake,  10 );
 80020be:	4b37      	ldr	r3, [pc, #220]	; (800219c <GameLoop+0x4e0>)
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	f107 0108 	add.w	r1, r7, #8
 80020c6:	2300      	movs	r3, #0
 80020c8:	220a      	movs	r2, #10
 80020ca:	f004 fc01 	bl	80068d0 <xQueueGenericSend>
				xSemaphoreGive( xGenerateFood );
 80020ce:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <GameLoop+0x4e4>)
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	2300      	movs	r3, #0
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	f004 fbfa 	bl	80068d0 <xQueueGenericSend>

				if(xSemaphoreTake( xFoodGenerated, ( TickType_t ) portMAX_DELAY) == pdTRUE);
 80020dc:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <GameLoop+0x4e8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	4618      	mov	r0, r3
 80020e6:	f004 fef9 	bl	8006edc <xQueueSemaphoreTake>
				xQueueReceive( xFoodPositionQ, &food, ( TickType_t ) 10 );
 80020ea:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <GameLoop+0x4ec>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f107 010c 	add.w	r1, r7, #12
 80020f2:	220a      	movs	r2, #10
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 fe11 	bl	8006d1c <xQueueReceive>

			}
    		if (foodTimeout >= 6) board[food[0]][food[2]][food[1]] = 2;
 80020fa:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80020fe:	2b05      	cmp	r3, #5
 8002100:	dd19      	ble.n	8002136 <GameLoop+0x47a>
 8002102:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002106:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002110:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8002114:	6899      	ldr	r1, [r3, #8]
 8002116:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800211a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002124:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002128:	00c0      	lsls	r0, r0, #3
 800212a:	4401      	add	r1, r0
 800212c:	00c9      	lsls	r1, r1, #3
 800212e:	440a      	add	r2, r1
 8002130:	2102      	movs	r1, #2
 8002132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        	llist_printSnake(snake, board);
 8002136:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800213a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f107 021c 	add.w	r2, r7, #28
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe ff02 	bl	8000f50 <llist_printSnake>

//        	board[3][0][0] = 1; test code
//        	board[3][0][1] = 1;
//        	board[3][2][0] = 1;

        	if( xSemaphoreTake( xScreenDriverMutex, ( TickType_t ) portMAX_DELAY) == pdTRUE ) ;
 800214c:	4b17      	ldr	r3, [pc, #92]	; (80021ac <GameLoop+0x4f0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	4618      	mov	r0, r3
 8002156:	f004 fec1 	bl	8006edc <xQueueSemaphoreTake>


			xQueueSend( xBoardQ, ( void * ) &board,  1 );
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <GameLoop+0x4f4>)
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	f107 011c 	add.w	r1, r7, #28
 8002162:	2300      	movs	r3, #0
 8002164:	2201      	movs	r2, #1
 8002166:	f004 fbb3 	bl	80068d0 <xQueueGenericSend>
			xSemaphoreGive( xRepaintScreen );
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <GameLoop+0x4f8>)
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	f004 fbac 	bl	80068d0 <xQueueGenericSend>

			xSemaphoreGive(xScreenDriverMutex);
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <GameLoop+0x4f0>)
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	2300      	movs	r3, #0
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	f004 fba5 	bl	80068d0 <xQueueGenericSend>


    		vTaskDelay(delay);
 8002186:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800218a:	4618      	mov	r0, r3
 800218c:	f005 fada 	bl	8007744 <vTaskDelay>
    		foodTimeout++;
 8002190:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8002194:	3301      	adds	r3, #1
 8002196:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
    	if( xSemaphoreTake( xButtonPressedSem, ( TickType_t ) 1) == pdTRUE ){
 800219a:	e600      	b.n	8001d9e <GameLoop+0xe2>
 800219c:	20000184 	.word	0x20000184
 80021a0:	200001a0 	.word	0x200001a0
 80021a4:	200001a4 	.word	0x200001a4
 80021a8:	2000018c 	.word	0x2000018c
 80021ac:	200001bc 	.word	0x200001bc
 80021b0:	20000180 	.word	0x20000180
 80021b4:	200001a8 	.word	0x200001a8

080021b8 <FoodPositionGenerator>:

    }

}

void FoodPositionGenerator(void *  pvParameters){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

	llist *snakeBody;
	int display;
	int x;
	int y;
	int valid = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
	for(;;) {




		if(xSemaphoreTake( xGenerateFood, ( TickType_t ) portMAX_DELAY) == pdTRUE);
 80021c4:	4b44      	ldr	r3, [pc, #272]	; (80022d8 <FoodPositionGenerator+0x120>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 fe85 	bl	8006edc <xQueueSemaphoreTake>

		xQueueReceive( xSnakeQ, &snakeBody, ( TickType_t ) portMAX_DELAY );
 80021d2:	4b42      	ldr	r3, [pc, #264]	; (80022dc <FoodPositionGenerator+0x124>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f107 0118 	add.w	r1, r7, #24
 80021da:	f04f 32ff 	mov.w	r2, #4294967295
 80021de:	4618      	mov	r0, r3
 80021e0:	f004 fd9c 	bl	8006d1c <xQueueReceive>

		display = rand() % 4;
 80021e4:	f007 fa62 	bl	80096ac <rand>
 80021e8:	4603      	mov	r3, r0
 80021ea:	425a      	negs	r2, r3
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	f002 0203 	and.w	r2, r2, #3
 80021f4:	bf58      	it	pl
 80021f6:	4253      	negpl	r3, r2
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		x = rand() % 8;
 80021fa:	f007 fa57 	bl	80096ac <rand>
 80021fe:	4603      	mov	r3, r0
 8002200:	425a      	negs	r2, r3
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	f002 0207 	and.w	r2, r2, #7
 800220a:	bf58      	it	pl
 800220c:	4253      	negpl	r3, r2
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
		y = rand() % 8;
 8002210:	f007 fa4c 	bl	80096ac <rand>
 8002214:	4603      	mov	r3, r0
 8002216:	425a      	negs	r2, r3
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	f002 0207 	and.w	r2, r2, #7
 8002220:	bf58      	it	pl
 8002222:	4253      	negpl	r3, r2
 8002224:	627b      	str	r3, [r7, #36]	; 0x24


		while(valid == 0 ){
 8002226:	e03e      	b.n	80022a6 <FoodPositionGenerator+0xee>
			struct node *curr = *snakeBody;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61fb      	str	r3, [r7, #28]
			valid = 1;
 800222e:	2301      	movs	r3, #1
 8002230:	623b      	str	r3, [r7, #32]

			display = rand() % 4;
 8002232:	f007 fa3b 	bl	80096ac <rand>
 8002236:	4603      	mov	r3, r0
 8002238:	425a      	negs	r2, r3
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	f002 0203 	and.w	r2, r2, #3
 8002242:	bf58      	it	pl
 8002244:	4253      	negpl	r3, r2
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c

			x = rand() % 8;
 8002248:	f007 fa30 	bl	80096ac <rand>
 800224c:	4603      	mov	r3, r0
 800224e:	425a      	negs	r2, r3
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	f002 0207 	and.w	r2, r2, #7
 8002258:	bf58      	it	pl
 800225a:	4253      	negpl	r3, r2
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
			y = rand() % 8;
 800225e:	f007 fa25 	bl	80096ac <rand>
 8002262:	4603      	mov	r3, r0
 8002264:	425a      	negs	r2, r3
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	f002 0207 	and.w	r2, r2, #7
 800226e:	bf58      	it	pl
 8002270:	4253      	negpl	r3, r2
 8002272:	627b      	str	r3, [r7, #36]	; 0x24

			while (curr != NULL) {
 8002274:	e014      	b.n	80022a0 <FoodPositionGenerator+0xe8>

				if (curr->x == x  && curr->y == y && curr->display == display) {
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800227c:	429a      	cmp	r2, r3
 800227e:	d10c      	bne.n	800229a <FoodPositionGenerator+0xe2>
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002286:	429a      	cmp	r2, r3
 8002288:	d107      	bne.n	800229a <FoodPositionGenerator+0xe2>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002290:	429a      	cmp	r2, r3
 8002292:	d102      	bne.n	800229a <FoodPositionGenerator+0xe2>
					valid = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
					break;
 8002298:	e005      	b.n	80022a6 <FoodPositionGenerator+0xee>
				};

				curr = curr->next;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	61fb      	str	r3, [r7, #28]
			while (curr != NULL) {
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1e7      	bne.n	8002276 <FoodPositionGenerator+0xbe>
		while(valid == 0 ){
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0bd      	beq.n	8002228 <FoodPositionGenerator+0x70>
			}
		}

		food[0] = display;
 80022ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ae:	60fb      	str	r3, [r7, #12]
		food[1] = x;
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b2:	613b      	str	r3, [r7, #16]
		food[2] = y;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	617b      	str	r3, [r7, #20]

		xQueueSend( xFoodPositionQ, (void *) &food,  1 );
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <FoodPositionGenerator+0x128>)
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	f107 010c 	add.w	r1, r7, #12
 80022c0:	2300      	movs	r3, #0
 80022c2:	2201      	movs	r2, #1
 80022c4:	f004 fb04 	bl	80068d0 <xQueueGenericSend>
		xSemaphoreGive( xFoodGenerated );
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <FoodPositionGenerator+0x12c>)
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	2300      	movs	r3, #0
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	f004 fafd 	bl	80068d0 <xQueueGenericSend>
		if(xSemaphoreTake( xGenerateFood, ( TickType_t ) portMAX_DELAY) == pdTRUE);
 80022d6:	e775      	b.n	80021c4 <FoodPositionGenerator+0xc>
 80022d8:	200001a0 	.word	0x200001a0
 80022dc:	20000184 	.word	0x20000184
 80022e0:	2000018c 	.word	0x2000018c
 80022e4:	200001a4 	.word	0x200001a4

080022e8 <Task3>:

    }
}

void Task3( void * pvParameters )
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b096      	sub	sp, #88	; 0x58
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	const uint64_t IMAGES[] = {
 80022f0:	4a34      	ldr	r2, [pc, #208]	; (80023c4 <Task3+0xdc>)
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	4611      	mov	r1, r2
 80022f8:	2248      	movs	r2, #72	; 0x48
 80022fa:	4618      	mov	r0, r3
 80022fc:	f007 f8b2 	bl	8009464 <memcpy>
	  0xff7e7e5a24180000,
	  0xff5a7e7e5a241800,
	  0xff5a5a7e7e5a2418,
	  0xff5a5a7e7e5a2418
	};
	const int IMAGES_LEN = sizeof(IMAGES)/8;
 8002300:	2309      	movs	r3, #9
 8002302:	653b      	str	r3, [r7, #80]	; 0x50

	if(xSemaphoreTake( xGameOverSem, ( TickType_t ) portMAX_DELAY) == pdTRUE);
 8002304:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <Task3+0xe0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	4618      	mov	r0, r3
 800230e:	f004 fde5 	bl	8006edc <xQueueSemaphoreTake>
	if( xSemaphoreTake( xScreenDriverMutex, ( TickType_t ) portMAX_DELAY) == pdTRUE ) ;
 8002312:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <Task3+0xe4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f04f 31ff 	mov.w	r1, #4294967295
 800231a:	4618      	mov	r0, r3
 800231c:	f004 fdde 	bl	8006edc <xQueueSemaphoreTake>
	for (int i = 0; i < IMAGES_LEN; ++i) {
 8002320:	2300      	movs	r3, #0
 8002322:	657b      	str	r3, [r7, #84]	; 0x54
 8002324:	e02f      	b.n	8002386 <Task3+0x9e>
		MAX7219_MatrixSetRow64(0, IMAGES[i]);
 8002326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	3358      	adds	r3, #88	; 0x58
 800232c:	443b      	add	r3, r7
 800232e:	3b50      	subs	r3, #80	; 0x50
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	2000      	movs	r0, #0
 8002336:	f000 fb39 	bl	80029ac <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(1, IMAGES[i]);
 800233a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	3358      	adds	r3, #88	; 0x58
 8002340:	443b      	add	r3, r7
 8002342:	3b50      	subs	r3, #80	; 0x50
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	2001      	movs	r0, #1
 800234a:	f000 fb2f 	bl	80029ac <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(2, IMAGES[i]);
 800234e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	3358      	adds	r3, #88	; 0x58
 8002354:	443b      	add	r3, r7
 8002356:	3b50      	subs	r3, #80	; 0x50
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	2002      	movs	r0, #2
 800235e:	f000 fb25 	bl	80029ac <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(3, IMAGES[i]);
 8002362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	3358      	adds	r3, #88	; 0x58
 8002368:	443b      	add	r3, r7
 800236a:	3b50      	subs	r3, #80	; 0x50
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	2003      	movs	r0, #3
 8002372:	f000 fb1b 	bl	80029ac <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 8002376:	f000 fb4b 	bl	8002a10 <MAX7219_MatrixUpdate>
		vTaskDelay(200);
 800237a:	20c8      	movs	r0, #200	; 0xc8
 800237c:	f005 f9e2 	bl	8007744 <vTaskDelay>
	for (int i = 0; i < IMAGES_LEN; ++i) {
 8002380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002382:	3301      	adds	r3, #1
 8002384:	657b      	str	r3, [r7, #84]	; 0x54
 8002386:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800238a:	429a      	cmp	r2, r3
 800238c:	dbcb      	blt.n	8002326 <Task3+0x3e>

	}
    for(;;)
    {

    	 MAX7219_MatrixSetRow64(0, CHR('D'));
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <Task3+0xe8>)
 8002390:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002394:	2000      	movs	r0, #0
 8002396:	f000 fb09 	bl	80029ac <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(1, CHR('E'));
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <Task3+0xe8>)
 800239c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80023a0:	2001      	movs	r0, #1
 80023a2:	f000 fb03 	bl	80029ac <MAX7219_MatrixSetRow64>
		  MAX7219_MatrixSetRow64(2, CHR('A'));
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <Task3+0xe8>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	2002      	movs	r0, #2
 80023ae:	f000 fafd 	bl	80029ac <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(3, CHR('D'));
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <Task3+0xe8>)
 80023b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023b8:	2003      	movs	r0, #3
 80023ba:	f000 faf7 	bl	80029ac <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 80023be:	f000 fb27 	bl	8002a10 <MAX7219_MatrixUpdate>
    	 MAX7219_MatrixSetRow64(0, CHR('D'));
 80023c2:	e7e4      	b.n	800238e <Task3+0xa6>
 80023c4:	0800b448 	.word	0x0800b448
 80023c8:	20000194 	.word	0x20000194
 80023cc:	200001bc 	.word	0x200001bc
 80023d0:	0800b4d0 	.word	0x0800b4d0

080023d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80023dc:	2001      	movs	r0, #1
 80023de:	f004 f803 	bl	80063e8 <osDelay>
 80023e2:	e7fb      	b.n	80023dc <StartDefaultTask+0x8>

080023e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023f6:	f000 fdc3 	bl	8002f80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40001400 	.word	0x40001400

08002408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800240c:	b672      	cpsid	i
}
 800240e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002410:	e7fe      	b.n	8002410 <Error_Handler+0x8>
	...

08002414 <MAX7219_Init>:
static bool SPI_Tx(uint8_t data);
static void DelayInit(void);
static void DelayUS(uint32_t);

void MAX7219_Init(SPI_HandleTypeDef* spi, GPIO_TypeDef* ss_port, uint16_t ss_pin)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	4613      	mov	r3, r2
 8002420:	80fb      	strh	r3, [r7, #6]
	Max7219_SPI = spi;
 8002422:	4a08      	ldr	r2, [pc, #32]	; (8002444 <MAX7219_Init+0x30>)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6013      	str	r3, [r2, #0]
	Max7219_SS_Port = ss_port;
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <MAX7219_Init+0x34>)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	6013      	str	r3, [r2, #0]
	Max7219_SS_Pin = ss_pin;
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <MAX7219_Init+0x38>)
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	8013      	strh	r3, [r2, #0]

	/* Us delay */
	DelayInit();
 8002434:	f000 f998 	bl	8002768 <DelayInit>

	/* Deselect SS */
	SS_Deselect();
 8002438:	f000 f968 	bl	800270c <SS_Deselect>
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200001d0 	.word	0x200001d0
 8002448:	200001d4 	.word	0x200001d4
 800244c:	200001d8 	.word	0x200001d8

08002450 <MAX7219_Write>:

bool MAX7219_Write(uint8_t index, uint8_t reg, uint8_t data)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
 800245a:	460b      	mov	r3, r1
 800245c:	71bb      	strb	r3, [r7, #6]
 800245e:	4613      	mov	r3, r2
 8002460:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d901      	bls.n	800246c <MAX7219_Write+0x1c>
 8002468:	2300      	movs	r3, #0
 800246a:	e05b      	b.n	8002524 <MAX7219_Write+0xd4>

	SS_Select();
 800246c:	f000 f93a 	bl	80026e4 <SS_Select>

	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e018      	b.n	80024a8 <MAX7219_Write+0x58>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 8002476:	2000      	movs	r0, #0
 8002478:	f000 f95c 	bl	8002734 <SPI_Tx>
 800247c:	4603      	mov	r3, r0
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MAX7219_Write+0x3c>
 8002488:	2300      	movs	r3, #0
 800248a:	e04b      	b.n	8002524 <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 800248c:	2000      	movs	r0, #0
 800248e:	f000 f951 	bl	8002734 <SPI_Tx>
 8002492:	4603      	mov	r3, r0
 8002494:	f083 0301 	eor.w	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MAX7219_Write+0x52>
 800249e:	2300      	movs	r3, #0
 80024a0:	e040      	b.n	8002524 <MAX7219_Write+0xd4>
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3301      	adds	r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	dde3      	ble.n	8002476 <MAX7219_Write+0x26>
	}

	/* Write register */
	if(!SPI_Tx(reg)) return false;
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f93f 	bl	8002734 <SPI_Tx>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f083 0301 	eor.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MAX7219_Write+0x76>
 80024c2:	2300      	movs	r3, #0
 80024c4:	e02e      	b.n	8002524 <MAX7219_Write+0xd4>
	if(!SPI_Tx(data)) return false;
 80024c6:	797b      	ldrb	r3, [r7, #5]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f933 	bl	8002734 <SPI_Tx>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f083 0301 	eor.w	r3, r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MAX7219_Write+0x8e>
 80024da:	2300      	movs	r3, #0
 80024dc:	e022      	b.n	8002524 <MAX7219_Write+0xd4>

	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	e018      	b.n	8002516 <MAX7219_Write+0xc6>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 80024e4:	2000      	movs	r0, #0
 80024e6:	f000 f925 	bl	8002734 <SPI_Tx>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f083 0301 	eor.w	r3, r3, #1
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MAX7219_Write+0xaa>
 80024f6:	2300      	movs	r3, #0
 80024f8:	e014      	b.n	8002524 <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 80024fa:	2000      	movs	r0, #0
 80024fc:	f000 f91a 	bl	8002734 <SPI_Tx>
 8002500:	4603      	mov	r3, r0
 8002502:	f083 0301 	eor.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MAX7219_Write+0xc0>
 800250c:	2300      	movs	r3, #0
 800250e:	e009      	b.n	8002524 <MAX7219_Write+0xd4>
	for(int i = 0; i < index; i++)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	3301      	adds	r3, #1
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	429a      	cmp	r2, r3
 800251c:	dbe2      	blt.n	80024e4 <MAX7219_Write+0x94>
	}

	SS_Deselect();
 800251e:	f000 f8f5 	bl	800270c <SS_Deselect>

	return true;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <MAX7219_Digit>:

bool MAX7219_Digit(uint8_t index, uint8_t digit, int8_t value)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
 8002536:	460b      	mov	r3, r1
 8002538:	71bb      	strb	r3, [r7, #6]
 800253a:	4613      	mov	r3, r2
 800253c:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d901      	bls.n	8002548 <MAX7219_Digit+0x1c>
 8002544:	2300      	movs	r3, #0
 8002546:	e015      	b.n	8002574 <MAX7219_Digit+0x48>
	if(digit > 0x07) return false;
 8002548:	79bb      	ldrb	r3, [r7, #6]
 800254a:	2b07      	cmp	r3, #7
 800254c:	d901      	bls.n	8002552 <MAX7219_Digit+0x26>
 800254e:	2300      	movs	r3, #0
 8002550:	e010      	b.n	8002574 <MAX7219_Digit+0x48>

	if(!MAX7219_Write(index, digit+1, value)) return false;
 8002552:	79bb      	ldrb	r3, [r7, #6]
 8002554:	3301      	adds	r3, #1
 8002556:	b2d9      	uxtb	r1, r3
 8002558:	797a      	ldrb	r2, [r7, #5]
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff77 	bl	8002450 <MAX7219_Write>
 8002562:	4603      	mov	r3, r0
 8002564:	f083 0301 	eor.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MAX7219_Digit+0x46>
 800256e:	2300      	movs	r3, #0
 8002570:	e000      	b.n	8002574 <MAX7219_Digit+0x48>

	return true;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <MAX7219_Decode>:

bool MAX7219_Decode(uint8_t index, uint8_t value)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	460a      	mov	r2, r1
 8002586:	71fb      	strb	r3, [r7, #7]
 8002588:	4613      	mov	r3, r2
 800258a:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d901      	bls.n	8002596 <MAX7219_Decode+0x1a>
 8002592:	2300      	movs	r3, #0
 8002594:	e00e      	b.n	80025b4 <MAX7219_Decode+0x38>

	if(!MAX7219_Write(index, MAX7219_REG_DECODE, value)) return false;
 8002596:	79ba      	ldrb	r2, [r7, #6]
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	2109      	movs	r1, #9
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff57 	bl	8002450 <MAX7219_Write>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f083 0301 	eor.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MAX7219_Decode+0x36>
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <MAX7219_Decode+0x38>

	return true;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <MAX7219_Intensity>:

bool MAX7219_Intensity(uint8_t index, uint8_t value)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	460a      	mov	r2, r1
 80025c6:	71fb      	strb	r3, [r7, #7]
 80025c8:	4613      	mov	r3, r2
 80025ca:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d901      	bls.n	80025d6 <MAX7219_Intensity+0x1a>
 80025d2:	2300      	movs	r3, #0
 80025d4:	e013      	b.n	80025fe <MAX7219_Intensity+0x42>
	if(value > 0x0F) value = 0x0F;
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	2b0f      	cmp	r3, #15
 80025da:	d901      	bls.n	80025e0 <MAX7219_Intensity+0x24>
 80025dc:	230f      	movs	r3, #15
 80025de:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_INTENSITY, value)) return false;
 80025e0:	79ba      	ldrb	r2, [r7, #6]
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	210a      	movs	r1, #10
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff32 	bl	8002450 <MAX7219_Write>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f083 0301 	eor.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MAX7219_Intensity+0x40>
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <MAX7219_Intensity+0x42>

	return true;
 80025fc:	2301      	movs	r3, #1
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <MAX7219_ScanLimit>:

bool MAX7219_ScanLimit(uint8_t index, uint8_t value)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	460a      	mov	r2, r1
 8002610:	71fb      	strb	r3, [r7, #7]
 8002612:	4613      	mov	r3, r2
 8002614:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d901      	bls.n	8002620 <MAX7219_ScanLimit+0x1a>
 800261c:	2300      	movs	r3, #0
 800261e:	e013      	b.n	8002648 <MAX7219_ScanLimit+0x42>
	if(value > 0x07) value = 0x07;
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	2b07      	cmp	r3, #7
 8002624:	d901      	bls.n	800262a <MAX7219_ScanLimit+0x24>
 8002626:	2307      	movs	r3, #7
 8002628:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_SCANLIMIT, value)) return false;
 800262a:	79ba      	ldrb	r2, [r7, #6]
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	210b      	movs	r1, #11
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff0d 	bl	8002450 <MAX7219_Write>
 8002636:	4603      	mov	r3, r0
 8002638:	f083 0301 	eor.w	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MAX7219_ScanLimit+0x40>
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <MAX7219_ScanLimit+0x42>

	return true;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <MAX7219_ShutDown>:

bool MAX7219_ShutDown(uint8_t index, uint8_t value)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	460a      	mov	r2, r1
 800265a:	71fb      	strb	r3, [r7, #7]
 800265c:	4613      	mov	r3, r2
 800265e:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d901      	bls.n	800266a <MAX7219_ShutDown+0x1a>
 8002666:	2300      	movs	r3, #0
 8002668:	e013      	b.n	8002692 <MAX7219_ShutDown+0x42>
	if(value > 0x01) value = 0x01;
 800266a:	79bb      	ldrb	r3, [r7, #6]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d901      	bls.n	8002674 <MAX7219_ShutDown+0x24>
 8002670:	2301      	movs	r3, #1
 8002672:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_SHUTDOWN, value)) return false;
 8002674:	79ba      	ldrb	r2, [r7, #6]
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	210c      	movs	r1, #12
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fee8 	bl	8002450 <MAX7219_Write>
 8002680:	4603      	mov	r3, r0
 8002682:	f083 0301 	eor.w	r3, r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MAX7219_ShutDown+0x40>
 800268c:	2300      	movs	r3, #0
 800268e:	e000      	b.n	8002692 <MAX7219_ShutDown+0x42>

	return true;
 8002690:	2301      	movs	r3, #1
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <MAX7219_Test>:

bool MAX7219_Test(uint8_t index, uint8_t value)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	460a      	mov	r2, r1
 80026a4:	71fb      	strb	r3, [r7, #7]
 80026a6:	4613      	mov	r3, r2
 80026a8:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d901      	bls.n	80026b4 <MAX7219_Test+0x1a>
 80026b0:	2300      	movs	r3, #0
 80026b2:	e013      	b.n	80026dc <MAX7219_Test+0x42>
	if(value > 0x01) value = 0x01;
 80026b4:	79bb      	ldrb	r3, [r7, #6]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d901      	bls.n	80026be <MAX7219_Test+0x24>
 80026ba:	2301      	movs	r3, #1
 80026bc:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_TEST, value)) return false;
 80026be:	79ba      	ldrb	r2, [r7, #6]
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	210f      	movs	r1, #15
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fec3 	bl	8002450 <MAX7219_Write>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f083 0301 	eor.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MAX7219_Test+0x40>
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <MAX7219_Test+0x42>

	return true;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <SS_Select>:

static void SS_Select()
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_RESET);
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <SS_Select+0x20>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a06      	ldr	r2, [pc, #24]	; (8002708 <SS_Select+0x24>)
 80026ee:	8811      	ldrh	r1, [r2, #0]
 80026f0:	2200      	movs	r2, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fef0 	bl	80034d8 <HAL_GPIO_WritePin>
	DelayUS(1);
 80026f8:	2001      	movs	r0, #1
 80026fa:	f000 f85f 	bl	80027bc <DelayUS>
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200001d4 	.word	0x200001d4
 8002708:	200001d8 	.word	0x200001d8

0800270c <SS_Deselect>:

static void SS_Deselect()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_SET);
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <SS_Deselect+0x20>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a06      	ldr	r2, [pc, #24]	; (8002730 <SS_Deselect+0x24>)
 8002716:	8811      	ldrh	r1, [r2, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fedc 	bl	80034d8 <HAL_GPIO_WritePin>
	DelayUS(1);
 8002720:	2001      	movs	r0, #1
 8002722:	f000 f84b 	bl	80027bc <DelayUS>
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200001d4 	.word	0x200001d4
 8002730:	200001d8 	.word	0x200001d8

08002734 <SPI_Tx>:

static bool SPI_Tx(uint8_t data)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_Transmit(Max7219_SPI, &data, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <SPI_Tx+0x30>)
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	1df9      	adds	r1, r7, #7
 8002744:	f04f 33ff 	mov.w	r3, #4294967295
 8002748:	2201      	movs	r2, #1
 800274a:	f002 fad2 	bl	8004cf2 <HAL_SPI_Transmit>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SPI_Tx+0x24>
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <SPI_Tx+0x26>
	return true;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200001d0 	.word	0x200001d0

08002768 <DelayInit>:

static void DelayInit(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <DelayInit+0x4c>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a10      	ldr	r2, [pc, #64]	; (80027b4 <DelayInit+0x4c>)
 8002772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002776:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <DelayInit+0x4c>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <DelayInit+0x4c>)
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002782:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <DelayInit+0x50>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <DelayInit+0x50>)
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <DelayInit+0x50>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <DelayInit+0x50>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <DelayInit+0x50>)
 800279e:	2200      	movs	r2, #0
 80027a0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80027a2:	bf00      	nop
  __ASM volatile ("NOP");
 80027a4:	bf00      	nop
  __ASM volatile ("NOP");
 80027a6:	bf00      	nop
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000edf0 	.word	0xe000edf0
 80027b8:	e0001000 	.word	0xe0001000

080027bc <DelayUS>:

static void DelayUS(uint32_t us) {
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <DelayUS+0x44>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <DelayUS+0x48>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0c9a      	lsrs	r2, r3, #18
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <DelayUS+0x4c>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <DelayUS+0x4c>)
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d8f6      	bhi.n	80027de <DelayUS+0x22>
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000000 	.word	0x20000000
 8002804:	431bde83 	.word	0x431bde83
 8002808:	e0001000 	.word	0xe0001000
 800280c:	00000000 	.word	0x00000000

08002810 <MAX7219_paintPointsInRow>:
};

volatile uint8_t FrameBuffer[MAX7219_IC_NUM][8];


uint8_t MAX7219_paintPointsInRow(int rowArray[]){
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

	uint8_t row = 0x0;
 8002818:	2300      	movs	r3, #0
 800281a:	75fb      	strb	r3, [r7, #23]
	for (int i = 0;  i < 8; ++ i) {
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	e02a      	b.n	8002878 <MAX7219_paintPointsInRow+0x68>
		int colPosition = pow(2, i);
 8002822:	6938      	ldr	r0, [r7, #16]
 8002824:	f7fd fe76 	bl	8000514 <__aeabi_i2d>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	ec43 2b11 	vmov	d1, r2, r3
 8002830:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8002888 <MAX7219_paintPointsInRow+0x78>
 8002834:	f007 fe86 	bl	800a544 <pow>
 8002838:	ec53 2b10 	vmov	r2, r3, d0
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f7fe f982 	bl	8000b48 <__aeabi_d2iz>
 8002844:	4603      	mov	r3, r0
 8002846:	60fb      	str	r3, [r7, #12]
		int ledActive = rowArray[i] > 0 ? 1 : 0;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	4413      	add	r3, r2
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	bfcc      	ite	gt
 8002856:	2301      	movgt	r3, #1
 8002858:	2300      	movle	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	60bb      	str	r3, [r7, #8]
		row += ledActive * colPosition;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	fb12 f303 	smulbb	r3, r2, r3
 800286a:	b2da      	uxtb	r2, r3
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	4413      	add	r3, r2
 8002870:	75fb      	strb	r3, [r7, #23]
	for (int i = 0;  i < 8; ++ i) {
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	3301      	adds	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	2b07      	cmp	r3, #7
 800287c:	ddd1      	ble.n	8002822 <MAX7219_paintPointsInRow+0x12>
	}
	return row;
 800287e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	00000000 	.word	0x00000000
 800288c:	40000000 	.word	0x40000000

08002890 <MAX7219_paintPoints>:

void MAX7219_paintPoints(uint8_t displayIndex, int matrixArray[][8]){
 8002890:	b5b0      	push	{r4, r5, r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	6039      	str	r1, [r7, #0]
 800289a:	71fb      	strb	r3, [r7, #7]

	for (int i = 0;  i < 8; ++ i) {
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e015      	b.n	80028ce <MAX7219_paintPoints+0x3e>

		FrameBuffer[displayIndex][7-i] = MAX7219_paintPointsInRow(matrixArray[i]);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	015b      	lsls	r3, r3, #5
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	441a      	add	r2, r3
 80028aa:	79fd      	ldrb	r5, [r7, #7]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f1c3 0407 	rsb	r4, r3, #7
 80028b2:	4610      	mov	r0, r2
 80028b4:	f7ff ffac 	bl	8002810 <MAX7219_paintPointsInRow>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4619      	mov	r1, r3
 80028bc:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <MAX7219_paintPoints+0x50>)
 80028be:	00eb      	lsls	r3, r5, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	4423      	add	r3, r4
 80028c4:	460a      	mov	r2, r1
 80028c6:	701a      	strb	r2, [r3, #0]
	for (int i = 0;  i < 8; ++ i) {
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3301      	adds	r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b07      	cmp	r3, #7
 80028d2:	dde6      	ble.n	80028a2 <MAX7219_paintPoints+0x12>

	}

}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bdb0      	pop	{r4, r5, r7, pc}
 80028de:	bf00      	nop
 80028e0:	200001dc 	.word	0x200001dc

080028e4 <MAX7219_MatrixInit>:

void MAX7219_MatrixInit(SPI_HandleTypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]
	MAX7219_Init(spi, cs_port, cs_pin);
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	461a      	mov	r2, r3
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f7ff fd8b 	bl	8002414 <MAX7219_Init>

	for(int i = 0; i < MAX7219_IC_NUM; i++)
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e02a      	b.n	800295a <MAX7219_MatrixInit+0x76>
	{
		MAX7219_MatrixClear(i);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f82f 	bl	800296c <MAX7219_MatrixClear>
		MAX7219_ShutDown(i, 1);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2101      	movs	r1, #1
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fe9b 	bl	8002650 <MAX7219_ShutDown>
		MAX7219_Test(i, 0);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff feba 	bl	800269a <MAX7219_Test>
		MAX7219_Decode(i, 0);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fe25 	bl	800257c <MAX7219_Decode>
		MAX7219_Intensity(i, 1);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2101      	movs	r1, #1
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fe3f 	bl	80025bc <MAX7219_Intensity>
		MAX7219_ScanLimit(i, 7);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2107      	movs	r1, #7
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fe5e 	bl	8002606 <MAX7219_ScanLimit>
		MAX7219_MatrixClear(i);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f80c 	bl	800296c <MAX7219_MatrixClear>
	for(int i = 0; i < MAX7219_IC_NUM; i++)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3301      	adds	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b03      	cmp	r3, #3
 800295e:	ddd1      	ble.n	8002904 <MAX7219_MatrixInit+0x20>
	}
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <MAX7219_MatrixClear>:

void MAX7219_MatrixClear(uint8_t index)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
	for(int i =0; i < 8; i++)
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	e00a      	b.n	8002992 <MAX7219_MatrixClear+0x26>
	{
		FrameBuffer[index][i] = 0;
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <MAX7219_MatrixClear+0x3c>)
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	441a      	add	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
	for(int i =0; i < 8; i++)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3301      	adds	r3, #1
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b07      	cmp	r3, #7
 8002996:	ddf1      	ble.n	800297c <MAX7219_MatrixClear+0x10>
	}
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	200001dc 	.word	0x200001dc

080029ac <MAX7219_MatrixSetRow64>:
		FrameBuffer[index][i] = rows[i];
	}
}

void MAX7219_MatrixSetRow64(uint8_t index,  uint64_t rows)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4601      	mov	r1, r0
 80029b4:	e9c7 2300 	strd	r2, r3, [r7]
 80029b8:	460b      	mov	r3, r1
 80029ba:	73fb      	strb	r3, [r7, #15]
	for(int i =0; i < 8; i++)
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	e01a      	b.n	80029f8 <MAX7219_MatrixSetRow64+0x4c>
	{
		uint8_t row = rows & 0xFF;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	74fb      	strb	r3, [r7, #19]
		FrameBuffer[index][7-i] = row;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f1c3 0307 	rsb	r3, r3, #7
 80029ce:	490f      	ldr	r1, [pc, #60]	; (8002a0c <MAX7219_MatrixSetRow64+0x60>)
 80029d0:	00d2      	lsls	r2, r2, #3
 80029d2:	440a      	add	r2, r1
 80029d4:	4413      	add	r3, r2
 80029d6:	7cfa      	ldrb	r2, [r7, #19]
 80029d8:	701a      	strb	r2, [r3, #0]
		rows = rows >> 8;
 80029da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	0a02      	lsrs	r2, r0, #8
 80029e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80029ec:	0a0b      	lsrs	r3, r1, #8
 80029ee:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i =0; i < 8; i++)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3301      	adds	r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b07      	cmp	r3, #7
 80029fc:	dde1      	ble.n	80029c2 <MAX7219_MatrixSetRow64+0x16>
	}
}
 80029fe:	bf00      	nop
 8002a00:	bf00      	nop
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	200001dc 	.word	0x200001dc

08002a10 <MAX7219_MatrixUpdate>:
		FrameBuffer[3][i] |= lsbD0;
	}
}

bool MAX7219_MatrixUpdate()
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e024      	b.n	8002a66 <MAX7219_MatrixUpdate+0x56>
	{
		for(int digit = 0; digit < 8; digit++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	e01b      	b.n	8002a5a <MAX7219_MatrixUpdate+0x4a>
		{

			uint8_t row = FrameBuffer[index][digit];
 8002a22:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <MAX7219_MatrixUpdate+0x68>)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	441a      	add	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	71fb      	strb	r3, [r7, #7]
			if(!MAX7219_Digit(index, digit, row)) return false;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	b2d1      	uxtb	r1, r2
 8002a3a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fd74 	bl	800252c <MAX7219_Digit>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f083 0301 	eor.w	r3, r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MAX7219_MatrixUpdate+0x44>
 8002a50:	2300      	movs	r3, #0
 8002a52:	e00c      	b.n	8002a6e <MAX7219_MatrixUpdate+0x5e>
		for(int digit = 0; digit < 8; digit++)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3301      	adds	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b07      	cmp	r3, #7
 8002a5e:	dde0      	ble.n	8002a22 <MAX7219_MatrixUpdate+0x12>
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	ddd7      	ble.n	8002a1c <MAX7219_MatrixUpdate+0xc>
		}
	}

	return true;
 8002a6c:	2301      	movs	r3, #1
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200001dc 	.word	0x200001dc

08002a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_MspInit+0x4c>)
 8002a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a86:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <HAL_MspInit+0x4c>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_MspInit+0x4c>)
 8002a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_MspInit+0x4c>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_MspInit+0x4c>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_MspInit+0x4c>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	210f      	movs	r1, #15
 8002ab6:	f06f 0001 	mvn.w	r0, #1
 8002aba:	f000 fb39 	bl	8003130 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000

08002acc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <HAL_SPI_MspInit+0x7c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d128      	bne.n	8002b40 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <HAL_SPI_MspInit+0x80>)
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <HAL_SPI_MspInit+0x80>)
 8002af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002af8:	6613      	str	r3, [r2, #96]	; 0x60
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_SPI_MspInit+0x80>)
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_SPI_MspInit+0x80>)
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <HAL_SPI_MspInit+0x80>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <HAL_SPI_MspInit+0x80>)
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b1e:	23a0      	movs	r3, #160	; 0xa0
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b2e:	2305      	movs	r3, #5
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b3c:	f000 fb22 	bl	8003184 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b40:	bf00      	nop
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40013000 	.word	0x40013000
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b0ac      	sub	sp, #176	; 0xb0
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	2288      	movs	r2, #136	; 0x88
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f006 fc85 	bl	8009480 <memset>
  if(huart->Instance==USART2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a21      	ldr	r2, [pc, #132]	; (8002c00 <HAL_UART_MspInit+0xb0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d13b      	bne.n	8002bf8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b80:	2302      	movs	r3, #2
 8002b82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b84:	2300      	movs	r3, #0
 8002b86:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 fb51 	bl	8004234 <HAL_RCCEx_PeriphCLKConfig>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b98:	f7ff fc36 	bl	8002408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_UART_MspInit+0xb4>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <HAL_UART_MspInit+0xb4>)
 8002ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_UART_MspInit+0xb4>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_UART_MspInit+0xb4>)
 8002bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb8:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <HAL_UART_MspInit+0xb4>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_UART_MspInit+0xb4>)
 8002bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bcc:	230c      	movs	r3, #12
 8002bce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bde:	2303      	movs	r3, #3
 8002be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002be4:	2307      	movs	r3, #7
 8002be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf4:	f000 fac6 	bl	8003184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bf8:	bf00      	nop
 8002bfa:	37b0      	adds	r7, #176	; 0xb0
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40004400 	.word	0x40004400
 8002c04:	40021000 	.word	0x40021000

08002c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08e      	sub	sp, #56	; 0x38
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002c16:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <HAL_InitTick+0xe0>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	4a33      	ldr	r2, [pc, #204]	; (8002ce8 <HAL_InitTick+0xe0>)
 8002c1c:	f043 0320 	orr.w	r3, r3, #32
 8002c20:	6593      	str	r3, [r2, #88]	; 0x58
 8002c22:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <HAL_InitTick+0xe0>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c2e:	f107 0210 	add.w	r2, r7, #16
 8002c32:	f107 0314 	add.w	r3, r7, #20
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f001 fa69 	bl	8004110 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c48:	f001 fa36 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 8002c4c:	6378      	str	r0, [r7, #52]	; 0x34
 8002c4e:	e004      	b.n	8002c5a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c50:	f001 fa32 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 8002c54:	4603      	mov	r3, r0
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	4a23      	ldr	r2, [pc, #140]	; (8002cec <HAL_InitTick+0xe4>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0c9b      	lsrs	r3, r3, #18
 8002c64:	3b01      	subs	r3, #1
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002c68:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <HAL_InitTick+0xe8>)
 8002c6a:	4a22      	ldr	r2, [pc, #136]	; (8002cf4 <HAL_InitTick+0xec>)
 8002c6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_InitTick+0xe8>)
 8002c70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c74:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002c76:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_InitTick+0xe8>)
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <HAL_InitTick+0xe8>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_InitTick+0xe8>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_InitTick+0xe8>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002c8e:	4818      	ldr	r0, [pc, #96]	; (8002cf0 <HAL_InitTick+0xe8>)
 8002c90:	f002 fb02 	bl	8005298 <HAL_TIM_Base_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002c9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11b      	bne.n	8002cda <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002ca2:	4813      	ldr	r0, [pc, #76]	; (8002cf0 <HAL_InitTick+0xe8>)
 8002ca4:	f002 fb5a 	bl	800535c <HAL_TIM_Base_Start_IT>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002cae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d111      	bne.n	8002cda <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002cb6:	2037      	movs	r0, #55	; 0x37
 8002cb8:	f000 fa56 	bl	8003168 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	d808      	bhi.n	8002cd4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	2037      	movs	r0, #55	; 0x37
 8002cc8:	f000 fa32 	bl	8003130 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_InitTick+0xf0>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e002      	b.n	8002cda <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002cda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3738      	adds	r7, #56	; 0x38
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	431bde83 	.word	0x431bde83
 8002cf0:	200001fc 	.word	0x200001fc
 8002cf4:	40001400 	.word	0x40001400
 8002cf8:	20000004 	.word	0x20000004

08002cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <NMI_Handler+0x4>

08002d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d06:	e7fe      	b.n	8002d06 <HardFault_Handler+0x4>

08002d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <MemManage_Handler+0x4>

08002d0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d12:	e7fe      	b.n	8002d12 <BusFault_Handler+0x4>

08002d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d18:	e7fe      	b.n	8002d18 <UsageFault_Handler+0x4>

08002d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <TIM7_IRQHandler>:
/**
  * @brief This function handles EXTI line3 interrupt.
  */

void TIM7_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d2c:	4802      	ldr	r0, [pc, #8]	; (8002d38 <TIM7_IRQHandler+0x10>)
 8002d2e:	f002 fb85 	bl	800543c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200001fc 	.word	0x200001fc

08002d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
	return 1;
 8002d40:	2301      	movs	r3, #1
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <_kill>:

int _kill(int pid, int sig)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d56:	f006 fad9 	bl	800930c <__errno>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2216      	movs	r2, #22
 8002d5e:	601a      	str	r2, [r3, #0]
	return -1;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_exit>:

void _exit (int status)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff ffe7 	bl	8002d4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d7e:	e7fe      	b.n	8002d7e <_exit+0x12>

08002d80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	e00a      	b.n	8002da8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d92:	f3af 8000 	nop.w
 8002d96:	4601      	mov	r1, r0
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	60ba      	str	r2, [r7, #8]
 8002d9e:	b2ca      	uxtb	r2, r1
 8002da0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3301      	adds	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	dbf0      	blt.n	8002d92 <_read+0x12>
	}

return len;
 8002db0:	687b      	ldr	r3, [r7, #4]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e009      	b.n	8002de0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	60ba      	str	r2, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dbf1      	blt.n	8002dcc <_write+0x12>
	}
	return len;
 8002de8:	687b      	ldr	r3, [r7, #4]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_close>:

int _close(int file)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
	return -1;
 8002dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e1a:	605a      	str	r2, [r3, #4]
	return 0;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <_isatty>:

int _isatty(int file)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
	return 1;
 8002e32:	2301      	movs	r3, #1
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
	return 0;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e64:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <_sbrk+0x5c>)
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <_sbrk+0x60>)
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <_sbrk+0x64>)
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <_sbrk+0x68>)
 8002e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <_sbrk+0x64>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d207      	bcs.n	8002e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e8c:	f006 fa3e 	bl	800930c <__errno>
 8002e90:	4603      	mov	r3, r0
 8002e92:	220c      	movs	r2, #12
 8002e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9a:	e009      	b.n	8002eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <_sbrk+0x64>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <_sbrk+0x64>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4a05      	ldr	r2, [pc, #20]	; (8002ec0 <_sbrk+0x64>)
 8002eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20018000 	.word	0x20018000
 8002ebc:	00000400 	.word	0x00000400
 8002ec0:	20000248 	.word	0x20000248
 8002ec4:	20008cb0 	.word	0x20008cb0

08002ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <SystemInit+0x20>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <SystemInit+0x20>)
 8002ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ef0:	f7ff ffea 	bl	8002ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ef4:	480c      	ldr	r0, [pc, #48]	; (8002f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ef6:	490d      	ldr	r1, [pc, #52]	; (8002f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ef8:	4a0d      	ldr	r2, [pc, #52]	; (8002f30 <LoopForever+0xe>)
  movs r3, #0
 8002efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002efc:	e002      	b.n	8002f04 <LoopCopyDataInit>

08002efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f02:	3304      	adds	r3, #4

08002f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f08:	d3f9      	bcc.n	8002efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f0c:	4c0a      	ldr	r4, [pc, #40]	; (8002f38 <LoopForever+0x16>)
  movs r3, #0
 8002f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f10:	e001      	b.n	8002f16 <LoopFillZerobss>

08002f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f14:	3204      	adds	r2, #4

08002f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f18:	d3fb      	bcc.n	8002f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f1a:	f006 fa6b 	bl	80093f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f1e:	f7fe fa7d 	bl	800141c <main>

08002f22 <LoopForever>:

LoopForever:
    b LoopForever
 8002f22:	e7fe      	b.n	8002f22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f2c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002f30:	0800b848 	.word	0x0800b848
  ldr r2, =_sbss
 8002f34:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002f38:	20008cb0 	.word	0x20008cb0

08002f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f3c:	e7fe      	b.n	8002f3c <ADC1_2_IRQHandler>
	...

08002f40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_Init+0x3c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <HAL_Init+0x3c>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f56:	2003      	movs	r0, #3
 8002f58:	f000 f8df 	bl	800311a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f5c:	200f      	movs	r0, #15
 8002f5e:	f7ff fe53 	bl	8002c08 <HAL_InitTick>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	71fb      	strb	r3, [r7, #7]
 8002f6c:	e001      	b.n	8002f72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f6e:	f7ff fd85 	bl	8002a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f72:	79fb      	ldrb	r3, [r7, #7]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40022000 	.word	0x40022000

08002f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_IncTick+0x20>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_IncTick+0x24>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <HAL_IncTick+0x24>)
 8002f92:	6013      	str	r3, [r2, #0]
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000008 	.word	0x20000008
 8002fa4:	2000024c 	.word	0x2000024c

08002fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return uwTick;
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <HAL_GetTick+0x14>)
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	2000024c 	.word	0x2000024c

08002fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff2:	4a04      	ldr	r2, [pc, #16]	; (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	60d3      	str	r3, [r2, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <__NVIC_GetPriorityGrouping+0x18>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	f003 0307 	and.w	r3, r3, #7
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	db0b      	blt.n	800304e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f003 021f 	and.w	r2, r3, #31
 800303c:	4907      	ldr	r1, [pc, #28]	; (800305c <__NVIC_EnableIRQ+0x38>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	2001      	movs	r0, #1
 8003046:	fa00 f202 	lsl.w	r2, r0, r2
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000e100 	.word	0xe000e100

08003060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	6039      	str	r1, [r7, #0]
 800306a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	2b00      	cmp	r3, #0
 8003072:	db0a      	blt.n	800308a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	b2da      	uxtb	r2, r3
 8003078:	490c      	ldr	r1, [pc, #48]	; (80030ac <__NVIC_SetPriority+0x4c>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	440b      	add	r3, r1
 8003084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003088:	e00a      	b.n	80030a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4908      	ldr	r1, [pc, #32]	; (80030b0 <__NVIC_SetPriority+0x50>)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	3b04      	subs	r3, #4
 8003098:	0112      	lsls	r2, r2, #4
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	440b      	add	r3, r1
 800309e:	761a      	strb	r2, [r3, #24]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000e100 	.word	0xe000e100
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f1c3 0307 	rsb	r3, r3, #7
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	bf28      	it	cs
 80030d2:	2304      	movcs	r3, #4
 80030d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3304      	adds	r3, #4
 80030da:	2b06      	cmp	r3, #6
 80030dc:	d902      	bls.n	80030e4 <NVIC_EncodePriority+0x30>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3b03      	subs	r3, #3
 80030e2:	e000      	b.n	80030e6 <NVIC_EncodePriority+0x32>
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	401a      	ands	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa01 f303 	lsl.w	r3, r1, r3
 8003106:	43d9      	mvns	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	4313      	orrs	r3, r2
         );
}
 800310e:	4618      	mov	r0, r3
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ff4c 	bl	8002fc0 <__NVIC_SetPriorityGrouping>
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003142:	f7ff ff61 	bl	8003008 <__NVIC_GetPriorityGrouping>
 8003146:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	6978      	ldr	r0, [r7, #20]
 800314e:	f7ff ffb1 	bl	80030b4 <NVIC_EncodePriority>
 8003152:	4602      	mov	r2, r0
 8003154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ff80 	bl	8003060 <__NVIC_SetPriority>
}
 8003160:	bf00      	nop
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff ff54 	bl	8003024 <__NVIC_EnableIRQ>
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003192:	e17f      	b.n	8003494 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8171 	beq.w	800348e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d005      	beq.n	80031c4 <HAL_GPIO_Init+0x40>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d130      	bne.n	8003226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2203      	movs	r2, #3
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4013      	ands	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031fa:	2201      	movs	r2, #1
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f003 0201 	and.w	r2, r3, #1
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b03      	cmp	r3, #3
 8003230:	d118      	bne.n	8003264 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	08db      	lsrs	r3, r3, #3
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b03      	cmp	r3, #3
 800326e:	d017      	beq.n	80032a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d123      	bne.n	80032f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	08da      	lsrs	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3208      	adds	r2, #8
 80032ee:	6939      	ldr	r1, [r7, #16]
 80032f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0203 	and.w	r2, r3, #3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80ac 	beq.w	800348e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	4b5f      	ldr	r3, [pc, #380]	; (80034b4 <HAL_GPIO_Init+0x330>)
 8003338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333a:	4a5e      	ldr	r2, [pc, #376]	; (80034b4 <HAL_GPIO_Init+0x330>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6613      	str	r3, [r2, #96]	; 0x60
 8003342:	4b5c      	ldr	r3, [pc, #368]	; (80034b4 <HAL_GPIO_Init+0x330>)
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800334e:	4a5a      	ldr	r2, [pc, #360]	; (80034b8 <HAL_GPIO_Init+0x334>)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	3302      	adds	r3, #2
 8003356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	220f      	movs	r2, #15
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003378:	d025      	beq.n	80033c6 <HAL_GPIO_Init+0x242>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a4f      	ldr	r2, [pc, #316]	; (80034bc <HAL_GPIO_Init+0x338>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01f      	beq.n	80033c2 <HAL_GPIO_Init+0x23e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a4e      	ldr	r2, [pc, #312]	; (80034c0 <HAL_GPIO_Init+0x33c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d019      	beq.n	80033be <HAL_GPIO_Init+0x23a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4d      	ldr	r2, [pc, #308]	; (80034c4 <HAL_GPIO_Init+0x340>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_GPIO_Init+0x236>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4c      	ldr	r2, [pc, #304]	; (80034c8 <HAL_GPIO_Init+0x344>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00d      	beq.n	80033b6 <HAL_GPIO_Init+0x232>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4b      	ldr	r2, [pc, #300]	; (80034cc <HAL_GPIO_Init+0x348>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <HAL_GPIO_Init+0x22e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4a      	ldr	r2, [pc, #296]	; (80034d0 <HAL_GPIO_Init+0x34c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <HAL_GPIO_Init+0x22a>
 80033aa:	2306      	movs	r3, #6
 80033ac:	e00c      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e00a      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033b2:	2305      	movs	r3, #5
 80033b4:	e008      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033b6:	2304      	movs	r3, #4
 80033b8:	e006      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033ba:	2303      	movs	r3, #3
 80033bc:	e004      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033be:	2302      	movs	r3, #2
 80033c0:	e002      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033c6:	2300      	movs	r3, #0
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	f002 0203 	and.w	r2, r2, #3
 80033ce:	0092      	lsls	r2, r2, #2
 80033d0:	4093      	lsls	r3, r2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033d8:	4937      	ldr	r1, [pc, #220]	; (80034b8 <HAL_GPIO_Init+0x334>)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	089b      	lsrs	r3, r3, #2
 80033de:	3302      	adds	r3, #2
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_GPIO_Init+0x350>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800340a:	4a32      	ldr	r2, [pc, #200]	; (80034d4 <HAL_GPIO_Init+0x350>)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003410:	4b30      	ldr	r3, [pc, #192]	; (80034d4 <HAL_GPIO_Init+0x350>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	43db      	mvns	r3, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003434:	4a27      	ldr	r2, [pc, #156]	; (80034d4 <HAL_GPIO_Init+0x350>)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800343a:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <HAL_GPIO_Init+0x350>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	43db      	mvns	r3, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800345e:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <HAL_GPIO_Init+0x350>)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003464:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <HAL_GPIO_Init+0x350>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	43db      	mvns	r3, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4013      	ands	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003488:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <HAL_GPIO_Init+0x350>)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3301      	adds	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa22 f303 	lsr.w	r3, r2, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f47f ae78 	bne.w	8003194 <HAL_GPIO_Init+0x10>
  }
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40010000 	.word	0x40010000
 80034bc:	48000400 	.word	0x48000400
 80034c0:	48000800 	.word	0x48000800
 80034c4:	48000c00 	.word	0x48000c00
 80034c8:	48001000 	.word	0x48001000
 80034cc:	48001400 	.word	0x48001400
 80034d0:	48001800 	.word	0x48001800
 80034d4:	40010400 	.word	0x40010400

080034d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
 80034e4:	4613      	mov	r3, r2
 80034e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e8:	787b      	ldrb	r3, [r7, #1]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034f4:	e002      	b.n	80034fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <HAL_PWREx_GetVoltageRange+0x18>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40007000 	.word	0x40007000

08003524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003532:	d130      	bne.n	8003596 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003534:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800353c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003540:	d038      	beq.n	80035b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003542:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800354a:	4a1e      	ldr	r2, [pc, #120]	; (80035c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003550:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003552:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2232      	movs	r2, #50	; 0x32
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	4a1b      	ldr	r2, [pc, #108]	; (80035cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	0c9b      	lsrs	r3, r3, #18
 8003564:	3301      	adds	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003568:	e002      	b.n	8003570 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3b01      	subs	r3, #1
 800356e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357c:	d102      	bne.n	8003584 <HAL_PWREx_ControlVoltageScaling+0x60>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f2      	bne.n	800356a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003590:	d110      	bne.n	80035b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e00f      	b.n	80035b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a2:	d007      	beq.n	80035b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035a4:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035ac:	4a05      	ldr	r2, [pc, #20]	; (80035c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40007000 	.word	0x40007000
 80035c8:	20000000 	.word	0x20000000
 80035cc:	431bde83 	.word	0x431bde83

080035d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e3ca      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e2:	4b97      	ldr	r3, [pc, #604]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ec:	4b94      	ldr	r3, [pc, #592]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80e4 	beq.w	80037cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <HAL_RCC_OscConfig+0x4a>
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b0c      	cmp	r3, #12
 800360e:	f040 808b 	bne.w	8003728 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b01      	cmp	r3, #1
 8003616:	f040 8087 	bne.w	8003728 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800361a:	4b89      	ldr	r3, [pc, #548]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_RCC_OscConfig+0x62>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e3a2      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1a      	ldr	r2, [r3, #32]
 8003636:	4b82      	ldr	r3, [pc, #520]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d004      	beq.n	800364c <HAL_RCC_OscConfig+0x7c>
 8003642:	4b7f      	ldr	r3, [pc, #508]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800364a:	e005      	b.n	8003658 <HAL_RCC_OscConfig+0x88>
 800364c:	4b7c      	ldr	r3, [pc, #496]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800364e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003658:	4293      	cmp	r3, r2
 800365a:	d223      	bcs.n	80036a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fd87 	bl	8004174 <RCC_SetFlashLatencyFromMSIRange>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e383      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003670:	4b73      	ldr	r3, [pc, #460]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a72      	ldr	r2, [pc, #456]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003676:	f043 0308 	orr.w	r3, r3, #8
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b70      	ldr	r3, [pc, #448]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	496d      	ldr	r1, [pc, #436]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800368e:	4b6c      	ldr	r3, [pc, #432]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	4968      	ldr	r1, [pc, #416]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
 80036a2:	e025      	b.n	80036f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036a4:	4b66      	ldr	r3, [pc, #408]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a65      	ldr	r2, [pc, #404]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036aa:	f043 0308 	orr.w	r3, r3, #8
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b63      	ldr	r3, [pc, #396]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4960      	ldr	r1, [pc, #384]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036c2:	4b5f      	ldr	r3, [pc, #380]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	495b      	ldr	r1, [pc, #364]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fd47 	bl	8004174 <RCC_SetFlashLatencyFromMSIRange>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e343      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036f0:	f000 fc4a 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b52      	ldr	r3, [pc, #328]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	4950      	ldr	r1, [pc, #320]	; (8003844 <HAL_RCC_OscConfig+0x274>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
 800370c:	4a4e      	ldr	r2, [pc, #312]	; (8003848 <HAL_RCC_OscConfig+0x278>)
 800370e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003710:	4b4e      	ldr	r3, [pc, #312]	; (800384c <HAL_RCC_OscConfig+0x27c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fa77 	bl	8002c08 <HAL_InitTick>
 800371a:	4603      	mov	r3, r0
 800371c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d052      	beq.n	80037ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	e327      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d032      	beq.n	8003796 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003730:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a42      	ldr	r2, [pc, #264]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800373c:	f7ff fc34 	bl	8002fa8 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003744:	f7ff fc30 	bl	8002fa8 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e310      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003756:	4b3a      	ldr	r3, [pc, #232]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003762:	4b37      	ldr	r3, [pc, #220]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a36      	ldr	r2, [pc, #216]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003768:	f043 0308 	orr.w	r3, r3, #8
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	4b34      	ldr	r3, [pc, #208]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	4931      	ldr	r1, [pc, #196]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003780:	4b2f      	ldr	r3, [pc, #188]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	492c      	ldr	r1, [pc, #176]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
 8003794:	e01a      	b.n	80037cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003796:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a29      	ldr	r2, [pc, #164]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037a2:	f7ff fc01 	bl	8002fa8 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037aa:	f7ff fbfd 	bl	8002fa8 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e2dd      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037bc:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f0      	bne.n	80037aa <HAL_RCC_OscConfig+0x1da>
 80037c8:	e000      	b.n	80037cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d074      	beq.n	80038c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d005      	beq.n	80037ea <HAL_RCC_OscConfig+0x21a>
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	d10e      	bne.n	8003802 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d10b      	bne.n	8003802 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d064      	beq.n	80038c0 <HAL_RCC_OscConfig+0x2f0>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d160      	bne.n	80038c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e2ba      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x24a>
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e026      	b.n	8003868 <HAL_RCC_OscConfig+0x298>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003822:	d115      	bne.n	8003850 <HAL_RCC_OscConfig+0x280>
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a05      	ldr	r2, [pc, #20]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 800382a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a02      	ldr	r2, [pc, #8]	; (8003840 <HAL_RCC_OscConfig+0x270>)
 8003836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	e014      	b.n	8003868 <HAL_RCC_OscConfig+0x298>
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	0800b678 	.word	0x0800b678
 8003848:	20000000 	.word	0x20000000
 800384c:	20000004 	.word	0x20000004
 8003850:	4ba0      	ldr	r3, [pc, #640]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a9f      	ldr	r2, [pc, #636]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4b9d      	ldr	r3, [pc, #628]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a9c      	ldr	r2, [pc, #624]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d013      	beq.n	8003898 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7ff fb9a 	bl	8002fa8 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003878:	f7ff fb96 	bl	8002fa8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e276      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388a:	4b92      	ldr	r3, [pc, #584]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x2a8>
 8003896:	e014      	b.n	80038c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7ff fb86 	bl	8002fa8 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a0:	f7ff fb82 	bl	8002fa8 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e262      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038b2:	4b88      	ldr	r3, [pc, #544]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x2d0>
 80038be:	e000      	b.n	80038c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d060      	beq.n	8003990 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_OscConfig+0x310>
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	d119      	bne.n	800390e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d116      	bne.n	800390e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e0:	4b7c      	ldr	r3, [pc, #496]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_OscConfig+0x328>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e23f      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f8:	4b76      	ldr	r3, [pc, #472]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	4973      	ldr	r1, [pc, #460]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800390c:	e040      	b.n	8003990 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d023      	beq.n	800395e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003916:	4b6f      	ldr	r3, [pc, #444]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6e      	ldr	r2, [pc, #440]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7ff fb41 	bl	8002fa8 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392a:	f7ff fb3d 	bl	8002fa8 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e21d      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800393c:	4b65      	ldr	r3, [pc, #404]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003948:	4b62      	ldr	r3, [pc, #392]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	495f      	ldr	r1, [pc, #380]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
 800395c:	e018      	b.n	8003990 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395e:	4b5d      	ldr	r3, [pc, #372]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a5c      	ldr	r2, [pc, #368]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396a:	f7ff fb1d 	bl	8002fa8 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003972:	f7ff fb19 	bl	8002fa8 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e1f9      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003984:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f0      	bne.n	8003972 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d03c      	beq.n	8003a16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01c      	beq.n	80039de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a4:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80039a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039aa:	4a4a      	ldr	r2, [pc, #296]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7ff faf8 	bl	8002fa8 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039bc:	f7ff faf4 	bl	8002fa8 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e1d4      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ce:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80039d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0ef      	beq.n	80039bc <HAL_RCC_OscConfig+0x3ec>
 80039dc:	e01b      	b.n	8003a16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039de:	4b3d      	ldr	r3, [pc, #244]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80039e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e4:	4a3b      	ldr	r2, [pc, #236]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ee:	f7ff fadb 	bl	8002fa8 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f6:	f7ff fad7 	bl	8002fa8 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e1b7      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a08:	4b32      	ldr	r3, [pc, #200]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1ef      	bne.n	80039f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80a6 	beq.w	8003b70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a24:	2300      	movs	r3, #0
 8003a26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a28:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10d      	bne.n	8003a50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	4a26      	ldr	r2, [pc, #152]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a40:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a50:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <HAL_RCC_OscConfig+0x508>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d118      	bne.n	8003a8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <HAL_RCC_OscConfig+0x508>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <HAL_RCC_OscConfig+0x508>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a68:	f7ff fa9e 	bl	8002fa8 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a70:	f7ff fa9a 	bl	8002fa8 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e17a      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <HAL_RCC_OscConfig+0x508>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d108      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4d8>
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa6:	e029      	b.n	8003afc <HAL_RCC_OscConfig+0x52c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d115      	bne.n	8003adc <HAL_RCC_OscConfig+0x50c>
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003ab8:	f043 0304 	orr.w	r3, r3, #4
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	4a03      	ldr	r2, [pc, #12]	; (8003ad4 <HAL_RCC_OscConfig+0x504>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad0:	e014      	b.n	8003afc <HAL_RCC_OscConfig+0x52c>
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	4b9c      	ldr	r3, [pc, #624]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	4a9b      	ldr	r2, [pc, #620]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aec:	4b98      	ldr	r3, [pc, #608]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	4a97      	ldr	r2, [pc, #604]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003af4:	f023 0304 	bic.w	r3, r3, #4
 8003af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d016      	beq.n	8003b32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7ff fa50 	bl	8002fa8 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7ff fa4c 	bl	8002fa8 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e12a      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b22:	4b8b      	ldr	r3, [pc, #556]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0ed      	beq.n	8003b0c <HAL_RCC_OscConfig+0x53c>
 8003b30:	e015      	b.n	8003b5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7ff fa39 	bl	8002fa8 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7ff fa35 	bl	8002fa8 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e113      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b50:	4b7f      	ldr	r3, [pc, #508]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1ed      	bne.n	8003b3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b5e:	7ffb      	ldrb	r3, [r7, #31]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b64:	4b7a      	ldr	r3, [pc, #488]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	4a79      	ldr	r2, [pc, #484]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80fe 	beq.w	8003d76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	f040 80d0 	bne.w	8003d24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b84:	4b72      	ldr	r3, [pc, #456]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 0203 	and.w	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d130      	bne.n	8003bfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d127      	bne.n	8003bfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d11f      	bne.n	8003bfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bc4:	2a07      	cmp	r2, #7
 8003bc6:	bf14      	ite	ne
 8003bc8:	2201      	movne	r2, #1
 8003bca:	2200      	moveq	r2, #0
 8003bcc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d113      	bne.n	8003bfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	3b01      	subs	r3, #1
 8003be0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d109      	bne.n	8003bfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d06e      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b0c      	cmp	r3, #12
 8003bfe:	d069      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c00:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c0c:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0ad      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c1c:	4b4c      	ldr	r3, [pc, #304]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a4b      	ldr	r2, [pc, #300]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c28:	f7ff f9be 	bl	8002fa8 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c30:	f7ff f9ba 	bl	8002fa8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e09a      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c42:	4b43      	ldr	r3, [pc, #268]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c4e:	4b40      	ldr	r3, [pc, #256]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	4b40      	ldr	r3, [pc, #256]	; (8003d54 <HAL_RCC_OscConfig+0x784>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c5e:	3a01      	subs	r2, #1
 8003c60:	0112      	lsls	r2, r2, #4
 8003c62:	4311      	orrs	r1, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c68:	0212      	lsls	r2, r2, #8
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c70:	0852      	lsrs	r2, r2, #1
 8003c72:	3a01      	subs	r2, #1
 8003c74:	0552      	lsls	r2, r2, #21
 8003c76:	4311      	orrs	r1, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c7c:	0852      	lsrs	r2, r2, #1
 8003c7e:	3a01      	subs	r2, #1
 8003c80:	0652      	lsls	r2, r2, #25
 8003c82:	4311      	orrs	r1, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c88:	0912      	lsrs	r2, r2, #4
 8003c8a:	0452      	lsls	r2, r2, #17
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	4930      	ldr	r1, [pc, #192]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c94:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ca0:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4a2a      	ldr	r2, [pc, #168]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003caa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cac:	f7ff f97c 	bl	8002fa8 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7ff f978 	bl	8002fa8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e058      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cd2:	e050      	b.n	8003d76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e04f      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd8:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d148      	bne.n	8003d76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cf0:	4b17      	ldr	r3, [pc, #92]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4a16      	ldr	r2, [pc, #88]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cfc:	f7ff f954 	bl	8002fa8 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d04:	f7ff f950 	bl	8002fa8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e030      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d16:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x734>
 8003d22:	e028      	b.n	8003d76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	d023      	beq.n	8003d72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <HAL_RCC_OscConfig+0x780>)
 8003d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d36:	f7ff f937 	bl	8002fa8 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d3c:	e00c      	b.n	8003d58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7ff f933 	bl	8002fa8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d905      	bls.n	8003d58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e013      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
 8003d50:	40021000 	.word	0x40021000
 8003d54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_RCC_OscConfig+0x7b0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ec      	bne.n	8003d3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <HAL_RCC_OscConfig+0x7b0>)
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	4905      	ldr	r1, [pc, #20]	; (8003d80 <HAL_RCC_OscConfig+0x7b0>)
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_RCC_OscConfig+0x7b4>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60cb      	str	r3, [r1, #12]
 8003d70:	e001      	b.n	8003d76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3720      	adds	r7, #32
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40021000 	.word	0x40021000
 8003d84:	feeefffc 	.word	0xfeeefffc

08003d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0e7      	b.n	8003f6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b75      	ldr	r3, [pc, #468]	; (8003f74 <HAL_RCC_ClockConfig+0x1ec>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d910      	bls.n	8003dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b72      	ldr	r3, [pc, #456]	; (8003f74 <HAL_RCC_ClockConfig+0x1ec>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 0207 	bic.w	r2, r3, #7
 8003db2:	4970      	ldr	r1, [pc, #448]	; (8003f74 <HAL_RCC_ClockConfig+0x1ec>)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dba:	4b6e      	ldr	r3, [pc, #440]	; (8003f74 <HAL_RCC_ClockConfig+0x1ec>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0cf      	b.n	8003f6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d010      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	4b66      	ldr	r3, [pc, #408]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d908      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de8:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4960      	ldr	r1, [pc, #384]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d04c      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0e:	4b5a      	ldr	r3, [pc, #360]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d121      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0a6      	b.n	8003f6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e26:	4b54      	ldr	r3, [pc, #336]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d115      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e09a      	b.n	8003f6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e3e:	4b4e      	ldr	r3, [pc, #312]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e08e      	b.n	8003f6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e4e:	4b4a      	ldr	r3, [pc, #296]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e086      	b.n	8003f6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e5e:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 0203 	bic.w	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4943      	ldr	r1, [pc, #268]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e70:	f7ff f89a 	bl	8002fa8 <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e78:	f7ff f896 	bl	8002fa8 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e06e      	b.n	8003f6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8e:	4b3a      	ldr	r3, [pc, #232]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 020c 	and.w	r2, r3, #12
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d1eb      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d010      	beq.n	8003ece <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d208      	bcs.n	8003ece <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ebc:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	492b      	ldr	r1, [pc, #172]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ece:	4b29      	ldr	r3, [pc, #164]	; (8003f74 <HAL_RCC_ClockConfig+0x1ec>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d210      	bcs.n	8003efe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003edc:	4b25      	ldr	r3, [pc, #148]	; (8003f74 <HAL_RCC_ClockConfig+0x1ec>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f023 0207 	bic.w	r2, r3, #7
 8003ee4:	4923      	ldr	r1, [pc, #140]	; (8003f74 <HAL_RCC_ClockConfig+0x1ec>)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eec:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <HAL_RCC_ClockConfig+0x1ec>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e036      	b.n	8003f6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	4918      	ldr	r1, [pc, #96]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4910      	ldr	r1, [pc, #64]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f3c:	f000 f824 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <HAL_RCC_ClockConfig+0x1f0>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	091b      	lsrs	r3, r3, #4
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	490b      	ldr	r1, [pc, #44]	; (8003f7c <HAL_RCC_ClockConfig+0x1f4>)
 8003f4e:	5ccb      	ldrb	r3, [r1, r3]
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	fa22 f303 	lsr.w	r3, r2, r3
 8003f58:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <HAL_RCC_ClockConfig+0x1f8>)
 8003f5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCC_ClockConfig+0x1fc>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fe51 	bl	8002c08 <HAL_InitTick>
 8003f66:	4603      	mov	r3, r0
 8003f68:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40022000 	.word	0x40022000
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	0800b678 	.word	0x0800b678
 8003f80:	20000000 	.word	0x20000000
 8003f84:	20000004 	.word	0x20000004

08003f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	; 0x24
 8003f8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	2300      	movs	r3, #0
 8003f94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f96:	4b3e      	ldr	r3, [pc, #248]	; (8004090 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fa0:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_GetSysClockFreq+0x34>
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b0c      	cmp	r3, #12
 8003fb4:	d121      	bne.n	8003ffa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d11e      	bne.n	8003ffa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fbc:	4b34      	ldr	r3, [pc, #208]	; (8004090 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fc8:	4b31      	ldr	r3, [pc, #196]	; (8004090 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fce:	0a1b      	lsrs	r3, r3, #8
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	e005      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fd8:	4b2d      	ldr	r3, [pc, #180]	; (8004090 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fe4:	4a2b      	ldr	r2, [pc, #172]	; (8004094 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10d      	bne.n	8004010 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ff8:	e00a      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d102      	bne.n	8004006 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004000:	4b25      	ldr	r3, [pc, #148]	; (8004098 <HAL_RCC_GetSysClockFreq+0x110>)
 8004002:	61bb      	str	r3, [r7, #24]
 8004004:	e004      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d101      	bne.n	8004010 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800400c:	4b23      	ldr	r3, [pc, #140]	; (800409c <HAL_RCC_GetSysClockFreq+0x114>)
 800400e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d134      	bne.n	8004080 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004016:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d003      	beq.n	800402e <HAL_RCC_GetSysClockFreq+0xa6>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d003      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0xac>
 800402c:	e005      	b.n	800403a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800402e:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <HAL_RCC_GetSysClockFreq+0x110>)
 8004030:	617b      	str	r3, [r7, #20]
      break;
 8004032:	e005      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <HAL_RCC_GetSysClockFreq+0x114>)
 8004036:	617b      	str	r3, [r7, #20]
      break;
 8004038:	e002      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	617b      	str	r3, [r7, #20]
      break;
 800403e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004040:	4b13      	ldr	r3, [pc, #76]	; (8004090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	3301      	adds	r3, #1
 800404c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	fb03 f202 	mul.w	r2, r3, r2
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	fbb2 f3f3 	udiv	r3, r2, r3
 8004064:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	0e5b      	lsrs	r3, r3, #25
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	3301      	adds	r3, #1
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	fbb2 f3f3 	udiv	r3, r2, r3
 800407e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004080:	69bb      	ldr	r3, [r7, #24]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3724      	adds	r7, #36	; 0x24
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
 8004094:	0800b690 	.word	0x0800b690
 8004098:	00f42400 	.word	0x00f42400
 800409c:	007a1200 	.word	0x007a1200

080040a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000000 	.word	0x20000000

080040b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040bc:	f7ff fff0 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4904      	ldr	r1, [pc, #16]	; (80040e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40021000 	.word	0x40021000
 80040e0:	0800b688 	.word	0x0800b688

080040e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040e8:	f7ff ffda 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040ec:	4602      	mov	r2, r0
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	0adb      	lsrs	r3, r3, #11
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	4904      	ldr	r1, [pc, #16]	; (800410c <HAL_RCC_GetPCLK2Freq+0x28>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000
 800410c:	0800b688 	.word	0x0800b688

08004110 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	220f      	movs	r2, #15
 800411e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004120:	4b12      	ldr	r3, [pc, #72]	; (800416c <HAL_RCC_GetClockConfig+0x5c>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0203 	and.w	r2, r3, #3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <HAL_RCC_GetClockConfig+0x5c>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <HAL_RCC_GetClockConfig+0x5c>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004144:	4b09      	ldr	r3, [pc, #36]	; (800416c <HAL_RCC_GetClockConfig+0x5c>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	08db      	lsrs	r3, r3, #3
 800414a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004152:	4b07      	ldr	r3, [pc, #28]	; (8004170 <HAL_RCC_GetClockConfig+0x60>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0207 	and.w	r2, r3, #7
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	601a      	str	r2, [r3, #0]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40021000 	.word	0x40021000
 8004170:	40022000 	.word	0x40022000

08004174 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004180:	4b2a      	ldr	r3, [pc, #168]	; (800422c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800418c:	f7ff f9bc 	bl	8003508 <HAL_PWREx_GetVoltageRange>
 8004190:	6178      	str	r0, [r7, #20]
 8004192:	e014      	b.n	80041be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	4a24      	ldr	r2, [pc, #144]	; (800422c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419e:	6593      	str	r3, [r2, #88]	; 0x58
 80041a0:	4b22      	ldr	r3, [pc, #136]	; (800422c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041ac:	f7ff f9ac 	bl	8003508 <HAL_PWREx_GetVoltageRange>
 80041b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041b2:	4b1e      	ldr	r3, [pc, #120]	; (800422c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	4a1d      	ldr	r2, [pc, #116]	; (800422c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c4:	d10b      	bne.n	80041de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b80      	cmp	r3, #128	; 0x80
 80041ca:	d919      	bls.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2ba0      	cmp	r3, #160	; 0xa0
 80041d0:	d902      	bls.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041d2:	2302      	movs	r3, #2
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	e013      	b.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041d8:	2301      	movs	r3, #1
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	e010      	b.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b80      	cmp	r3, #128	; 0x80
 80041e2:	d902      	bls.n	80041ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041e4:	2303      	movs	r3, #3
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	e00a      	b.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b80      	cmp	r3, #128	; 0x80
 80041ee:	d102      	bne.n	80041f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041f0:	2302      	movs	r3, #2
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	e004      	b.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b70      	cmp	r3, #112	; 0x70
 80041fa:	d101      	bne.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041fc:	2301      	movs	r3, #1
 80041fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f023 0207 	bic.w	r2, r3, #7
 8004208:	4909      	ldr	r1, [pc, #36]	; (8004230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004210:	4b07      	ldr	r3, [pc, #28]	; (8004230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	429a      	cmp	r2, r3
 800421c:	d001      	beq.n	8004222 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000
 8004230:	40022000 	.word	0x40022000

08004234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800423c:	2300      	movs	r3, #0
 800423e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004240:	2300      	movs	r3, #0
 8004242:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424c:	2b00      	cmp	r3, #0
 800424e:	d041      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004254:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004258:	d02a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800425a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800425e:	d824      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004260:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004264:	d008      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004266:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800426a:	d81e      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004274:	d010      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004276:	e018      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004278:	4b86      	ldr	r3, [pc, #536]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a85      	ldr	r2, [pc, #532]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004282:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004284:	e015      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3304      	adds	r3, #4
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fabb 	bl	8004808 <RCCEx_PLLSAI1_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004296:	e00c      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3320      	adds	r3, #32
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fba6 	bl	80049f0 <RCCEx_PLLSAI2_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042a8:	e003      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	74fb      	strb	r3, [r7, #19]
      break;
 80042ae:	e000      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042b8:	4b76      	ldr	r3, [pc, #472]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c6:	4973      	ldr	r1, [pc, #460]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042ce:	e001      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d041      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042e8:	d02a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042ee:	d824      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042f4:	d008      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042fa:	d81e      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004304:	d010      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004306:	e018      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004308:	4b62      	ldr	r3, [pc, #392]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4a61      	ldr	r2, [pc, #388]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004312:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004314:	e015      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3304      	adds	r3, #4
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fa73 	bl	8004808 <RCCEx_PLLSAI1_Config>
 8004322:	4603      	mov	r3, r0
 8004324:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004326:	e00c      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3320      	adds	r3, #32
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fb5e 	bl	80049f0 <RCCEx_PLLSAI2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004338:	e003      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	74fb      	strb	r3, [r7, #19]
      break;
 800433e:	e000      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004348:	4b52      	ldr	r3, [pc, #328]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004356:	494f      	ldr	r1, [pc, #316]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800435e:	e001      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80a0 	beq.w	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004372:	2300      	movs	r3, #0
 8004374:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004376:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004386:	2300      	movs	r3, #0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00d      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438c:	4b41      	ldr	r3, [pc, #260]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004390:	4a40      	ldr	r2, [pc, #256]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004396:	6593      	str	r3, [r2, #88]	; 0x58
 8004398:	4b3e      	ldr	r3, [pc, #248]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043a4:	2301      	movs	r3, #1
 80043a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a8:	4b3b      	ldr	r3, [pc, #236]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a3a      	ldr	r2, [pc, #232]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043b4:	f7fe fdf8 	bl	8002fa8 <HAL_GetTick>
 80043b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ba:	e009      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043bc:	f7fe fdf4 	bl	8002fa8 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d902      	bls.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	74fb      	strb	r3, [r7, #19]
        break;
 80043ce:	e005      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043d0:	4b31      	ldr	r3, [pc, #196]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0ef      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d15c      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043e2:	4b2c      	ldr	r3, [pc, #176]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01f      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d019      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004400:	4b24      	ldr	r3, [pc, #144]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800440c:	4b21      	ldr	r3, [pc, #132]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	4a20      	ldr	r2, [pc, #128]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800441c:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	4a1c      	ldr	r2, [pc, #112]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800442c:	4a19      	ldr	r2, [pc, #100]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443e:	f7fe fdb3 	bl	8002fa8 <HAL_GetTick>
 8004442:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004444:	e00b      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004446:	f7fe fdaf 	bl	8002fa8 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	f241 3288 	movw	r2, #5000	; 0x1388
 8004454:	4293      	cmp	r3, r2
 8004456:	d902      	bls.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	74fb      	strb	r3, [r7, #19]
            break;
 800445c:	e006      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445e:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0ec      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10c      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004482:	4904      	ldr	r1, [pc, #16]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800448a:	e009      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	74bb      	strb	r3, [r7, #18]
 8004490:	e006      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000
 8004498:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a0:	7c7b      	ldrb	r3, [r7, #17]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d105      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a6:	4b9e      	ldr	r3, [pc, #632]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044aa:	4a9d      	ldr	r2, [pc, #628]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044be:	4b98      	ldr	r3, [pc, #608]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f023 0203 	bic.w	r2, r3, #3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	4994      	ldr	r1, [pc, #592]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044e0:	4b8f      	ldr	r3, [pc, #572]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	f023 020c 	bic.w	r2, r3, #12
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ee:	498c      	ldr	r1, [pc, #560]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004502:	4b87      	ldr	r3, [pc, #540]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004508:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	4983      	ldr	r1, [pc, #524]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004524:	4b7e      	ldr	r3, [pc, #504]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	497b      	ldr	r1, [pc, #492]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004546:	4b76      	ldr	r3, [pc, #472]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004554:	4972      	ldr	r1, [pc, #456]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004568:	4b6d      	ldr	r3, [pc, #436]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	496a      	ldr	r1, [pc, #424]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800458a:	4b65      	ldr	r3, [pc, #404]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004590:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004598:	4961      	ldr	r1, [pc, #388]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045ac:	4b5c      	ldr	r3, [pc, #368]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ba:	4959      	ldr	r1, [pc, #356]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ce:	4b54      	ldr	r3, [pc, #336]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	4950      	ldr	r1, [pc, #320]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045f0:	4b4b      	ldr	r3, [pc, #300]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fe:	4948      	ldr	r1, [pc, #288]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004612:	4b43      	ldr	r3, [pc, #268]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	493f      	ldr	r1, [pc, #252]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d028      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004634:	4b3a      	ldr	r3, [pc, #232]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004642:	4937      	ldr	r1, [pc, #220]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800464e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004652:	d106      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004654:	4b32      	ldr	r3, [pc, #200]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a31      	ldr	r2, [pc, #196]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465e:	60d3      	str	r3, [r2, #12]
 8004660:	e011      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800466a:	d10c      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	2101      	movs	r1, #1
 8004672:	4618      	mov	r0, r3
 8004674:	f000 f8c8 	bl	8004808 <RCCEx_PLLSAI1_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800467c:	7cfb      	ldrb	r3, [r7, #19]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d028      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004692:	4b23      	ldr	r3, [pc, #140]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	491f      	ldr	r1, [pc, #124]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046b0:	d106      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046b2:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	4a1a      	ldr	r2, [pc, #104]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046bc:	60d3      	str	r3, [r2, #12]
 80046be:	e011      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046c8:	d10c      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3304      	adds	r3, #4
 80046ce:	2101      	movs	r1, #1
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f899 	bl	8004808 <RCCEx_PLLSAI1_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d02b      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fe:	4908      	ldr	r1, [pc, #32]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800470e:	d109      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004710:	4b03      	ldr	r3, [pc, #12]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a02      	ldr	r2, [pc, #8]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800471a:	60d3      	str	r3, [r2, #12]
 800471c:	e014      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004728:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800472c:	d10c      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3304      	adds	r3, #4
 8004732:	2101      	movs	r1, #1
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f867 	bl	8004808 <RCCEx_PLLSAI1_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d02f      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004754:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004762:	4928      	ldr	r1, [pc, #160]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800476e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004772:	d10d      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	2102      	movs	r1, #2
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f844 	bl	8004808 <RCCEx_PLLSAI1_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004784:	7cfb      	ldrb	r3, [r7, #19]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d014      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800478a:	7cfb      	ldrb	r3, [r7, #19]
 800478c:	74bb      	strb	r3, [r7, #18]
 800478e:	e011      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004798:	d10c      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3320      	adds	r3, #32
 800479e:	2102      	movs	r1, #2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f925 	bl	80049f0 <RCCEx_PLLSAI2_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047aa:	7cfb      	ldrb	r3, [r7, #19]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ce:	490d      	ldr	r1, [pc, #52]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f2:	4904      	ldr	r1, [pc, #16]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000

08004808 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004816:	4b75      	ldr	r3, [pc, #468]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d018      	beq.n	8004854 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004822:	4b72      	ldr	r3, [pc, #456]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0203 	and.w	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d10d      	bne.n	800484e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
       ||
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800483a:	4b6c      	ldr	r3, [pc, #432]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	091b      	lsrs	r3, r3, #4
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
       ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d047      	beq.n	80048de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
 8004852:	e044      	b.n	80048de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b03      	cmp	r3, #3
 800485a:	d018      	beq.n	800488e <RCCEx_PLLSAI1_Config+0x86>
 800485c:	2b03      	cmp	r3, #3
 800485e:	d825      	bhi.n	80048ac <RCCEx_PLLSAI1_Config+0xa4>
 8004860:	2b01      	cmp	r3, #1
 8004862:	d002      	beq.n	800486a <RCCEx_PLLSAI1_Config+0x62>
 8004864:	2b02      	cmp	r3, #2
 8004866:	d009      	beq.n	800487c <RCCEx_PLLSAI1_Config+0x74>
 8004868:	e020      	b.n	80048ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800486a:	4b60      	ldr	r3, [pc, #384]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11d      	bne.n	80048b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800487a:	e01a      	b.n	80048b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800487c:	4b5b      	ldr	r3, [pc, #364]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d116      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800488c:	e013      	b.n	80048b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800488e:	4b57      	ldr	r3, [pc, #348]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10f      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800489a:	4b54      	ldr	r3, [pc, #336]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048aa:	e006      	b.n	80048ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	e004      	b.n	80048bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048b2:	bf00      	nop
 80048b4:	e002      	b.n	80048bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048b6:	bf00      	nop
 80048b8:	e000      	b.n	80048bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10d      	bne.n	80048de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048c2:	4b4a      	ldr	r3, [pc, #296]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6819      	ldr	r1, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	430b      	orrs	r3, r1
 80048d8:	4944      	ldr	r1, [pc, #272]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d17d      	bne.n	80049e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048e4:	4b41      	ldr	r3, [pc, #260]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a40      	ldr	r2, [pc, #256]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f0:	f7fe fb5a 	bl	8002fa8 <HAL_GetTick>
 80048f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048f6:	e009      	b.n	800490c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048f8:	f7fe fb56 	bl	8002fa8 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d902      	bls.n	800490c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	73fb      	strb	r3, [r7, #15]
        break;
 800490a:	e005      	b.n	8004918 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800490c:	4b37      	ldr	r3, [pc, #220]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ef      	bne.n	80048f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d160      	bne.n	80049e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d111      	bne.n	8004948 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004924:	4b31      	ldr	r3, [pc, #196]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800492c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6892      	ldr	r2, [r2, #8]
 8004934:	0211      	lsls	r1, r2, #8
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68d2      	ldr	r2, [r2, #12]
 800493a:	0912      	lsrs	r2, r2, #4
 800493c:	0452      	lsls	r2, r2, #17
 800493e:	430a      	orrs	r2, r1
 8004940:	492a      	ldr	r1, [pc, #168]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004942:	4313      	orrs	r3, r2
 8004944:	610b      	str	r3, [r1, #16]
 8004946:	e027      	b.n	8004998 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d112      	bne.n	8004974 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494e:	4b27      	ldr	r3, [pc, #156]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004956:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6892      	ldr	r2, [r2, #8]
 800495e:	0211      	lsls	r1, r2, #8
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6912      	ldr	r2, [r2, #16]
 8004964:	0852      	lsrs	r2, r2, #1
 8004966:	3a01      	subs	r2, #1
 8004968:	0552      	lsls	r2, r2, #21
 800496a:	430a      	orrs	r2, r1
 800496c:	491f      	ldr	r1, [pc, #124]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	610b      	str	r3, [r1, #16]
 8004972:	e011      	b.n	8004998 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004974:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800497c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6892      	ldr	r2, [r2, #8]
 8004984:	0211      	lsls	r1, r2, #8
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6952      	ldr	r2, [r2, #20]
 800498a:	0852      	lsrs	r2, r2, #1
 800498c:	3a01      	subs	r2, #1
 800498e:	0652      	lsls	r2, r2, #25
 8004990:	430a      	orrs	r2, r1
 8004992:	4916      	ldr	r1, [pc, #88]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004994:	4313      	orrs	r3, r2
 8004996:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004998:	4b14      	ldr	r3, [pc, #80]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a13      	ldr	r2, [pc, #76]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800499e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a4:	f7fe fb00 	bl	8002fa8 <HAL_GetTick>
 80049a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049aa:	e009      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049ac:	f7fe fafc 	bl	8002fa8 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d902      	bls.n	80049c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	73fb      	strb	r3, [r7, #15]
          break;
 80049be:	e005      	b.n	80049cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0ef      	beq.n	80049ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d106      	bne.n	80049e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	4904      	ldr	r1, [pc, #16]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000

080049f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049fe:	4b6a      	ldr	r3, [pc, #424]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d018      	beq.n	8004a3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a0a:	4b67      	ldr	r3, [pc, #412]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0203 	and.w	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d10d      	bne.n	8004a36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a22:	4b61      	ldr	r3, [pc, #388]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	091b      	lsrs	r3, r3, #4
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
       ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d047      	beq.n	8004ac6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
 8004a3a:	e044      	b.n	8004ac6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d018      	beq.n	8004a76 <RCCEx_PLLSAI2_Config+0x86>
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d825      	bhi.n	8004a94 <RCCEx_PLLSAI2_Config+0xa4>
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d002      	beq.n	8004a52 <RCCEx_PLLSAI2_Config+0x62>
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d009      	beq.n	8004a64 <RCCEx_PLLSAI2_Config+0x74>
 8004a50:	e020      	b.n	8004a94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a52:	4b55      	ldr	r3, [pc, #340]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11d      	bne.n	8004a9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a62:	e01a      	b.n	8004a9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a64:	4b50      	ldr	r3, [pc, #320]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d116      	bne.n	8004a9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a74:	e013      	b.n	8004a9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a76:	4b4c      	ldr	r3, [pc, #304]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10f      	bne.n	8004aa2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a82:	4b49      	ldr	r3, [pc, #292]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a92:	e006      	b.n	8004aa2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
      break;
 8004a98:	e004      	b.n	8004aa4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e002      	b.n	8004aa4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e000      	b.n	8004aa4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aa2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10d      	bne.n	8004ac6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004aaa:	4b3f      	ldr	r3, [pc, #252]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	4939      	ldr	r1, [pc, #228]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d167      	bne.n	8004b9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004acc:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a35      	ldr	r2, [pc, #212]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad8:	f7fe fa66 	bl	8002fa8 <HAL_GetTick>
 8004adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ade:	e009      	b.n	8004af4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ae0:	f7fe fa62 	bl	8002fa8 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d902      	bls.n	8004af4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	73fb      	strb	r3, [r7, #15]
        break;
 8004af2:	e005      	b.n	8004b00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004af4:	4b2c      	ldr	r3, [pc, #176]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ef      	bne.n	8004ae0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d14a      	bne.n	8004b9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d111      	bne.n	8004b30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b0c:	4b26      	ldr	r3, [pc, #152]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6892      	ldr	r2, [r2, #8]
 8004b1c:	0211      	lsls	r1, r2, #8
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	68d2      	ldr	r2, [r2, #12]
 8004b22:	0912      	lsrs	r2, r2, #4
 8004b24:	0452      	lsls	r2, r2, #17
 8004b26:	430a      	orrs	r2, r1
 8004b28:	491f      	ldr	r1, [pc, #124]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	614b      	str	r3, [r1, #20]
 8004b2e:	e011      	b.n	8004b54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6892      	ldr	r2, [r2, #8]
 8004b40:	0211      	lsls	r1, r2, #8
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6912      	ldr	r2, [r2, #16]
 8004b46:	0852      	lsrs	r2, r2, #1
 8004b48:	3a01      	subs	r2, #1
 8004b4a:	0652      	lsls	r2, r2, #25
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	4916      	ldr	r1, [pc, #88]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b54:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fe fa22 	bl	8002fa8 <HAL_GetTick>
 8004b64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b66:	e009      	b.n	8004b7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b68:	f7fe fa1e 	bl	8002fa8 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d902      	bls.n	8004b7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	73fb      	strb	r3, [r7, #15]
          break;
 8004b7a:	e005      	b.n	8004b88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ef      	beq.n	8004b68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b90:	695a      	ldr	r2, [r3, #20]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	4904      	ldr	r1, [pc, #16]	; (8004ba8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40021000 	.word	0x40021000

08004bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e095      	b.n	8004cea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d108      	bne.n	8004bd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bce:	d009      	beq.n	8004be4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	61da      	str	r2, [r3, #28]
 8004bd6:	e005      	b.n	8004be4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fd ff64 	bl	8002acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c24:	d902      	bls.n	8004c2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	e002      	b.n	8004c32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c3a:	d007      	beq.n	8004c4c <HAL_SPI_Init+0xa0>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c44:	d002      	beq.n	8004c4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8e:	ea42 0103 	orr.w	r1, r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	0c1b      	lsrs	r3, r3, #16
 8004ca8:	f003 0204 	and.w	r2, r3, #4
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004cc8:	ea42 0103 	orr.w	r1, r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b088      	sub	sp, #32
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_SPI_Transmit+0x22>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e158      	b.n	8004fc6 <HAL_SPI_Transmit+0x2d4>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d1c:	f7fe f944 	bl	8002fa8 <HAL_GetTick>
 8004d20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d002      	beq.n	8004d38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d32:	2302      	movs	r3, #2
 8004d34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d36:	e13d      	b.n	8004fb4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_SPI_Transmit+0x52>
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d102      	bne.n	8004d4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d48:	e134      	b.n	8004fb4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	88fa      	ldrh	r2, [r7, #6]
 8004d62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	88fa      	ldrh	r2, [r7, #6]
 8004d68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d94:	d10f      	bne.n	8004db6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004db4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d007      	beq.n	8004dd4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ddc:	d94b      	bls.n	8004e76 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_SPI_Transmit+0xfa>
 8004de6:	8afb      	ldrh	r3, [r7, #22]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d13e      	bne.n	8004e6a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	881a      	ldrh	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	1c9a      	adds	r2, r3, #2
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e10:	e02b      	b.n	8004e6a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d112      	bne.n	8004e46 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	881a      	ldrh	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	1c9a      	adds	r2, r3, #2
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e44:	e011      	b.n	8004e6a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e46:	f7fe f8af 	bl	8002fa8 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d803      	bhi.n	8004e5e <HAL_SPI_Transmit+0x16c>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d102      	bne.n	8004e64 <HAL_SPI_Transmit+0x172>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d102      	bne.n	8004e6a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e68:	e0a4      	b.n	8004fb4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ce      	bne.n	8004e12 <HAL_SPI_Transmit+0x120>
 8004e74:	e07c      	b.n	8004f70 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_SPI_Transmit+0x192>
 8004e7e:	8afb      	ldrh	r3, [r7, #22]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d170      	bne.n	8004f66 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d912      	bls.n	8004eb4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	881a      	ldrh	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	1c9a      	adds	r2, r3, #2
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b02      	subs	r3, #2
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eb2:	e058      	b.n	8004f66 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	7812      	ldrb	r2, [r2, #0]
 8004ec0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004eda:	e044      	b.n	8004f66 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d12b      	bne.n	8004f42 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d912      	bls.n	8004f1a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	881a      	ldrh	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	1c9a      	adds	r2, r3, #2
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b02      	subs	r3, #2
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f18:	e025      	b.n	8004f66 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	330c      	adds	r3, #12
 8004f24:	7812      	ldrb	r2, [r2, #0]
 8004f26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f40:	e011      	b.n	8004f66 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f42:	f7fe f831 	bl	8002fa8 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d803      	bhi.n	8004f5a <HAL_SPI_Transmit+0x268>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d102      	bne.n	8004f60 <HAL_SPI_Transmit+0x26e>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f64:	e026      	b.n	8004fb4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1b5      	bne.n	8004edc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	6839      	ldr	r1, [r7, #0]
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f949 	bl	800520c <SPI_EndRxTxTransaction>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e000      	b.n	8004fb4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004fb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fe0:	f7fd ffe2 	bl	8002fa8 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	4413      	add	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ff0:	f7fd ffda 	bl	8002fa8 <HAL_GetTick>
 8004ff4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ff6:	4b39      	ldr	r3, [pc, #228]	; (80050dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	015b      	lsls	r3, r3, #5
 8004ffc:	0d1b      	lsrs	r3, r3, #20
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	fb02 f303 	mul.w	r3, r2, r3
 8005004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005006:	e054      	b.n	80050b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500e:	d050      	beq.n	80050b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005010:	f7fd ffca 	bl	8002fa8 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	429a      	cmp	r2, r3
 800501e:	d902      	bls.n	8005026 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d13d      	bne.n	80050a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800503e:	d111      	bne.n	8005064 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005048:	d004      	beq.n	8005054 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005052:	d107      	bne.n	8005064 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506c:	d10f      	bne.n	800508e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800508c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e017      	b.n	80050d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4013      	ands	r3, r2
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	429a      	cmp	r2, r3
 80050c0:	bf0c      	ite	eq
 80050c2:	2301      	moveq	r3, #1
 80050c4:	2300      	movne	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d19b      	bne.n	8005008 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000000 	.word	0x20000000

080050e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	; 0x28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80050f2:	f7fd ff59 	bl	8002fa8 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	4413      	add	r3, r2
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005102:	f7fd ff51 	bl	8002fa8 <HAL_GetTick>
 8005106:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	330c      	adds	r3, #12
 800510e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005110:	4b3d      	ldr	r3, [pc, #244]	; (8005208 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	00da      	lsls	r2, r3, #3
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	0d1b      	lsrs	r3, r3, #20
 8005120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005122:	fb02 f303 	mul.w	r3, r2, r3
 8005126:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005128:	e060      	b.n	80051ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005130:	d107      	bne.n	8005142 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d104      	bne.n	8005142 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005140:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d050      	beq.n	80051ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800514a:	f7fd ff2d 	bl	8002fa8 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005156:	429a      	cmp	r2, r3
 8005158:	d902      	bls.n	8005160 <SPI_WaitFifoStateUntilTimeout+0x80>
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d13d      	bne.n	80051dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800516e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005178:	d111      	bne.n	800519e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005182:	d004      	beq.n	800518e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518c:	d107      	bne.n	800519e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a6:	d10f      	bne.n	80051c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e010      	b.n	80051fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4013      	ands	r3, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d196      	bne.n	800512a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3728      	adds	r7, #40	; 0x28
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000000 	.word	0x20000000

0800520c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2200      	movs	r2, #0
 8005220:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f7ff ff5b 	bl	80050e0 <SPI_WaitFifoStateUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005234:	f043 0220 	orr.w	r2, r3, #32
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e027      	b.n	8005290 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2200      	movs	r2, #0
 8005248:	2180      	movs	r1, #128	; 0x80
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f7ff fec0 	bl	8004fd0 <SPI_WaitFlagStateUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800525a:	f043 0220 	orr.w	r2, r3, #32
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e014      	b.n	8005290 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2200      	movs	r2, #0
 800526e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7ff ff34 	bl	80050e0 <SPI_WaitFifoStateUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e000      	b.n	8005290 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e049      	b.n	800533e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f841 	bl	8005346 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f000 f9f8 	bl	80056cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	d001      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e04f      	b.n	8005414 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a23      	ldr	r2, [pc, #140]	; (8005420 <HAL_TIM_Base_Start_IT+0xc4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d01d      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539e:	d018      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1f      	ldr	r2, [pc, #124]	; (8005424 <HAL_TIM_Base_Start_IT+0xc8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <HAL_TIM_Base_Start_IT+0xcc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1c      	ldr	r2, [pc, #112]	; (800542c <HAL_TIM_Base_Start_IT+0xd0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <HAL_TIM_Base_Start_IT+0xd4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a19      	ldr	r2, [pc, #100]	; (8005434 <HAL_TIM_Base_Start_IT+0xd8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d115      	bne.n	80053fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	4b17      	ldr	r3, [pc, #92]	; (8005438 <HAL_TIM_Base_Start_IT+0xdc>)
 80053da:	4013      	ands	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b06      	cmp	r3, #6
 80053e2:	d015      	beq.n	8005410 <HAL_TIM_Base_Start_IT+0xb4>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ea:	d011      	beq.n	8005410 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fc:	e008      	b.n	8005410 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0201 	orr.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e000      	b.n	8005412 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005410:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40013400 	.word	0x40013400
 8005434:	40014000 	.word	0x40014000
 8005438:	00010007 	.word	0x00010007

0800543c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b02      	cmp	r3, #2
 8005450:	d122      	bne.n	8005498 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b02      	cmp	r3, #2
 800545e:	d11b      	bne.n	8005498 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0202 	mvn.w	r2, #2
 8005468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f905 	bl	800568e <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f8f7 	bl	800567a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f908 	bl	80056a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d122      	bne.n	80054ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d11b      	bne.n	80054ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0204 	mvn.w	r2, #4
 80054bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2202      	movs	r2, #2
 80054c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f8db 	bl	800568e <HAL_TIM_IC_CaptureCallback>
 80054d8:	e005      	b.n	80054e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f8cd 	bl	800567a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f8de 	bl	80056a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d122      	bne.n	8005540 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b08      	cmp	r3, #8
 8005506:	d11b      	bne.n	8005540 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0208 	mvn.w	r2, #8
 8005510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2204      	movs	r2, #4
 8005516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f8b1 	bl	800568e <HAL_TIM_IC_CaptureCallback>
 800552c:	e005      	b.n	800553a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f8a3 	bl	800567a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f8b4 	bl	80056a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b10      	cmp	r3, #16
 800554c:	d122      	bne.n	8005594 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b10      	cmp	r3, #16
 800555a:	d11b      	bne.n	8005594 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0210 	mvn.w	r2, #16
 8005564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2208      	movs	r2, #8
 800556a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f887 	bl	800568e <HAL_TIM_IC_CaptureCallback>
 8005580:	e005      	b.n	800558e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f879 	bl	800567a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f88a 	bl	80056a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d10e      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d107      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0201 	mvn.w	r2, #1
 80055b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fc ff12 	bl	80023e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ca:	2b80      	cmp	r3, #128	; 0x80
 80055cc:	d10e      	bne.n	80055ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d8:	2b80      	cmp	r3, #128	; 0x80
 80055da:	d107      	bne.n	80055ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f914 	bl	8005814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055fa:	d10e      	bne.n	800561a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005606:	2b80      	cmp	r3, #128	; 0x80
 8005608:	d107      	bne.n	800561a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f907 	bl	8005828 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d10e      	bne.n	8005646 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d107      	bne.n	8005646 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800563e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f838 	bl	80056b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b20      	cmp	r3, #32
 8005652:	d10e      	bne.n	8005672 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b20      	cmp	r3, #32
 8005660:	d107      	bne.n	8005672 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f06f 0220 	mvn.w	r2, #32
 800566a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f8c7 	bl	8005800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a40      	ldr	r2, [pc, #256]	; (80057e0 <TIM_Base_SetConfig+0x114>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d013      	beq.n	800570c <TIM_Base_SetConfig+0x40>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ea:	d00f      	beq.n	800570c <TIM_Base_SetConfig+0x40>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a3d      	ldr	r2, [pc, #244]	; (80057e4 <TIM_Base_SetConfig+0x118>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a3c      	ldr	r2, [pc, #240]	; (80057e8 <TIM_Base_SetConfig+0x11c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0x40>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a3b      	ldr	r2, [pc, #236]	; (80057ec <TIM_Base_SetConfig+0x120>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0x40>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a3a      	ldr	r2, [pc, #232]	; (80057f0 <TIM_Base_SetConfig+0x124>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d108      	bne.n	800571e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2f      	ldr	r2, [pc, #188]	; (80057e0 <TIM_Base_SetConfig+0x114>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01f      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572c:	d01b      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2c      	ldr	r2, [pc, #176]	; (80057e4 <TIM_Base_SetConfig+0x118>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d017      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2b      	ldr	r2, [pc, #172]	; (80057e8 <TIM_Base_SetConfig+0x11c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2a      	ldr	r2, [pc, #168]	; (80057ec <TIM_Base_SetConfig+0x120>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00f      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a29      	ldr	r2, [pc, #164]	; (80057f0 <TIM_Base_SetConfig+0x124>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00b      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a28      	ldr	r2, [pc, #160]	; (80057f4 <TIM_Base_SetConfig+0x128>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d007      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a27      	ldr	r2, [pc, #156]	; (80057f8 <TIM_Base_SetConfig+0x12c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d003      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a26      	ldr	r2, [pc, #152]	; (80057fc <TIM_Base_SetConfig+0x130>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d108      	bne.n	8005778 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <TIM_Base_SetConfig+0x114>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00f      	beq.n	80057c4 <TIM_Base_SetConfig+0xf8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <TIM_Base_SetConfig+0x124>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_Base_SetConfig+0xf8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a11      	ldr	r2, [pc, #68]	; (80057f4 <TIM_Base_SetConfig+0x128>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_Base_SetConfig+0xf8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a10      	ldr	r2, [pc, #64]	; (80057f8 <TIM_Base_SetConfig+0x12c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_Base_SetConfig+0xf8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a0f      	ldr	r2, [pc, #60]	; (80057fc <TIM_Base_SetConfig+0x130>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d103      	bne.n	80057cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	615a      	str	r2, [r3, #20]
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40013400 	.word	0x40013400
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40014400 	.word	0x40014400
 80057fc:	40014800 	.word	0x40014800

08005800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e040      	b.n	80058d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fd f976 	bl	8002b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2224      	movs	r2, #36	; 0x24
 8005868:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f82c 	bl	80058d8 <UART_SetConfig>
 8005880:	4603      	mov	r3, r0
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e022      	b.n	80058d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fad8 	bl	8005e48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fb5f 	bl	8005f8c <UART_CheckIdleState>
 80058ce:	4603      	mov	r3, r0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058dc:	b08a      	sub	sp, #40	; 0x28
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	431a      	orrs	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4ba4      	ldr	r3, [pc, #656]	; (8005b98 <UART_SetConfig+0x2c0>)
 8005908:	4013      	ands	r3, r2
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005910:	430b      	orrs	r3, r1
 8005912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a99      	ldr	r2, [pc, #612]	; (8005b9c <UART_SetConfig+0x2c4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005940:	4313      	orrs	r3, r2
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	430a      	orrs	r2, r1
 8005956:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a90      	ldr	r2, [pc, #576]	; (8005ba0 <UART_SetConfig+0x2c8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d126      	bne.n	80059b0 <UART_SetConfig+0xd8>
 8005962:	4b90      	ldr	r3, [pc, #576]	; (8005ba4 <UART_SetConfig+0x2cc>)
 8005964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	2b03      	cmp	r3, #3
 800596e:	d81b      	bhi.n	80059a8 <UART_SetConfig+0xd0>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <UART_SetConfig+0xa0>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	08005989 	.word	0x08005989
 800597c:	08005999 	.word	0x08005999
 8005980:	08005991 	.word	0x08005991
 8005984:	080059a1 	.word	0x080059a1
 8005988:	2301      	movs	r3, #1
 800598a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598e:	e116      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005990:	2302      	movs	r3, #2
 8005992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005996:	e112      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005998:	2304      	movs	r3, #4
 800599a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599e:	e10e      	b.n	8005bbe <UART_SetConfig+0x2e6>
 80059a0:	2308      	movs	r3, #8
 80059a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a6:	e10a      	b.n	8005bbe <UART_SetConfig+0x2e6>
 80059a8:	2310      	movs	r3, #16
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ae:	e106      	b.n	8005bbe <UART_SetConfig+0x2e6>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a7c      	ldr	r2, [pc, #496]	; (8005ba8 <UART_SetConfig+0x2d0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d138      	bne.n	8005a2c <UART_SetConfig+0x154>
 80059ba:	4b7a      	ldr	r3, [pc, #488]	; (8005ba4 <UART_SetConfig+0x2cc>)
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	f003 030c 	and.w	r3, r3, #12
 80059c4:	2b0c      	cmp	r3, #12
 80059c6:	d82d      	bhi.n	8005a24 <UART_SetConfig+0x14c>
 80059c8:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <UART_SetConfig+0xf8>)
 80059ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ce:	bf00      	nop
 80059d0:	08005a05 	.word	0x08005a05
 80059d4:	08005a25 	.word	0x08005a25
 80059d8:	08005a25 	.word	0x08005a25
 80059dc:	08005a25 	.word	0x08005a25
 80059e0:	08005a15 	.word	0x08005a15
 80059e4:	08005a25 	.word	0x08005a25
 80059e8:	08005a25 	.word	0x08005a25
 80059ec:	08005a25 	.word	0x08005a25
 80059f0:	08005a0d 	.word	0x08005a0d
 80059f4:	08005a25 	.word	0x08005a25
 80059f8:	08005a25 	.word	0x08005a25
 80059fc:	08005a25 	.word	0x08005a25
 8005a00:	08005a1d 	.word	0x08005a1d
 8005a04:	2300      	movs	r3, #0
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0a:	e0d8      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a12:	e0d4      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1a:	e0d0      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a22:	e0cc      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2a:	e0c8      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a5e      	ldr	r2, [pc, #376]	; (8005bac <UART_SetConfig+0x2d4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d125      	bne.n	8005a82 <UART_SetConfig+0x1aa>
 8005a36:	4b5b      	ldr	r3, [pc, #364]	; (8005ba4 <UART_SetConfig+0x2cc>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a40:	2b30      	cmp	r3, #48	; 0x30
 8005a42:	d016      	beq.n	8005a72 <UART_SetConfig+0x19a>
 8005a44:	2b30      	cmp	r3, #48	; 0x30
 8005a46:	d818      	bhi.n	8005a7a <UART_SetConfig+0x1a2>
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d00a      	beq.n	8005a62 <UART_SetConfig+0x18a>
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	d814      	bhi.n	8005a7a <UART_SetConfig+0x1a2>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <UART_SetConfig+0x182>
 8005a54:	2b10      	cmp	r3, #16
 8005a56:	d008      	beq.n	8005a6a <UART_SetConfig+0x192>
 8005a58:	e00f      	b.n	8005a7a <UART_SetConfig+0x1a2>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a60:	e0ad      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005a62:	2302      	movs	r3, #2
 8005a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a68:	e0a9      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005a6a:	2304      	movs	r3, #4
 8005a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a70:	e0a5      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005a72:	2308      	movs	r3, #8
 8005a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a78:	e0a1      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005a7a:	2310      	movs	r3, #16
 8005a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a80:	e09d      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a4a      	ldr	r2, [pc, #296]	; (8005bb0 <UART_SetConfig+0x2d8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d125      	bne.n	8005ad8 <UART_SetConfig+0x200>
 8005a8c:	4b45      	ldr	r3, [pc, #276]	; (8005ba4 <UART_SetConfig+0x2cc>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a96:	2bc0      	cmp	r3, #192	; 0xc0
 8005a98:	d016      	beq.n	8005ac8 <UART_SetConfig+0x1f0>
 8005a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a9c:	d818      	bhi.n	8005ad0 <UART_SetConfig+0x1f8>
 8005a9e:	2b80      	cmp	r3, #128	; 0x80
 8005aa0:	d00a      	beq.n	8005ab8 <UART_SetConfig+0x1e0>
 8005aa2:	2b80      	cmp	r3, #128	; 0x80
 8005aa4:	d814      	bhi.n	8005ad0 <UART_SetConfig+0x1f8>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <UART_SetConfig+0x1d8>
 8005aaa:	2b40      	cmp	r3, #64	; 0x40
 8005aac:	d008      	beq.n	8005ac0 <UART_SetConfig+0x1e8>
 8005aae:	e00f      	b.n	8005ad0 <UART_SetConfig+0x1f8>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ab6:	e082      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005abe:	e07e      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac6:	e07a      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005ac8:	2308      	movs	r3, #8
 8005aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ace:	e076      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad6:	e072      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a35      	ldr	r2, [pc, #212]	; (8005bb4 <UART_SetConfig+0x2dc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d12a      	bne.n	8005b38 <UART_SetConfig+0x260>
 8005ae2:	4b30      	ldr	r3, [pc, #192]	; (8005ba4 <UART_SetConfig+0x2cc>)
 8005ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af0:	d01a      	beq.n	8005b28 <UART_SetConfig+0x250>
 8005af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af6:	d81b      	bhi.n	8005b30 <UART_SetConfig+0x258>
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afc:	d00c      	beq.n	8005b18 <UART_SetConfig+0x240>
 8005afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b02:	d815      	bhi.n	8005b30 <UART_SetConfig+0x258>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <UART_SetConfig+0x238>
 8005b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0c:	d008      	beq.n	8005b20 <UART_SetConfig+0x248>
 8005b0e:	e00f      	b.n	8005b30 <UART_SetConfig+0x258>
 8005b10:	2300      	movs	r3, #0
 8005b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b16:	e052      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b1e:	e04e      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005b20:	2304      	movs	r3, #4
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b26:	e04a      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005b28:	2308      	movs	r3, #8
 8005b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b2e:	e046      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005b30:	2310      	movs	r3, #16
 8005b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b36:	e042      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a17      	ldr	r2, [pc, #92]	; (8005b9c <UART_SetConfig+0x2c4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d13a      	bne.n	8005bb8 <UART_SetConfig+0x2e0>
 8005b42:	4b18      	ldr	r3, [pc, #96]	; (8005ba4 <UART_SetConfig+0x2cc>)
 8005b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b50:	d01a      	beq.n	8005b88 <UART_SetConfig+0x2b0>
 8005b52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b56:	d81b      	bhi.n	8005b90 <UART_SetConfig+0x2b8>
 8005b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b5c:	d00c      	beq.n	8005b78 <UART_SetConfig+0x2a0>
 8005b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b62:	d815      	bhi.n	8005b90 <UART_SetConfig+0x2b8>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <UART_SetConfig+0x298>
 8005b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6c:	d008      	beq.n	8005b80 <UART_SetConfig+0x2a8>
 8005b6e:	e00f      	b.n	8005b90 <UART_SetConfig+0x2b8>
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b76:	e022      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7e:	e01e      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b86:	e01a      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8e:	e016      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b96:	e012      	b.n	8005bbe <UART_SetConfig+0x2e6>
 8005b98:	efff69f3 	.word	0xefff69f3
 8005b9c:	40008000 	.word	0x40008000
 8005ba0:	40013800 	.word	0x40013800
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	40004400 	.word	0x40004400
 8005bac:	40004800 	.word	0x40004800
 8005bb0:	40004c00 	.word	0x40004c00
 8005bb4:	40005000 	.word	0x40005000
 8005bb8:	2310      	movs	r3, #16
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a9f      	ldr	r2, [pc, #636]	; (8005e40 <UART_SetConfig+0x568>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d17a      	bne.n	8005cbe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d824      	bhi.n	8005c1a <UART_SetConfig+0x342>
 8005bd0:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <UART_SetConfig+0x300>)
 8005bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd6:	bf00      	nop
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c1b 	.word	0x08005c1b
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c1b 	.word	0x08005c1b
 8005be8:	08005c0b 	.word	0x08005c0b
 8005bec:	08005c1b 	.word	0x08005c1b
 8005bf0:	08005c1b 	.word	0x08005c1b
 8005bf4:	08005c1b 	.word	0x08005c1b
 8005bf8:	08005c13 	.word	0x08005c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bfc:	f7fe fa5c 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 8005c00:	61f8      	str	r0, [r7, #28]
        break;
 8005c02:	e010      	b.n	8005c26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c04:	4b8f      	ldr	r3, [pc, #572]	; (8005e44 <UART_SetConfig+0x56c>)
 8005c06:	61fb      	str	r3, [r7, #28]
        break;
 8005c08:	e00d      	b.n	8005c26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fe f9bd 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8005c0e:	61f8      	str	r0, [r7, #28]
        break;
 8005c10:	e009      	b.n	8005c26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c16:	61fb      	str	r3, [r7, #28]
        break;
 8005c18:	e005      	b.n	8005c26 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 80fb 	beq.w	8005e24 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4413      	add	r3, r2
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d305      	bcc.n	8005c4a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d903      	bls.n	8005c52 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c50:	e0e8      	b.n	8005e24 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	2200      	movs	r2, #0
 8005c56:	461c      	mov	r4, r3
 8005c58:	4615      	mov	r5, r2
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	022b      	lsls	r3, r5, #8
 8005c64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c68:	0222      	lsls	r2, r4, #8
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	6849      	ldr	r1, [r1, #4]
 8005c6e:	0849      	lsrs	r1, r1, #1
 8005c70:	2000      	movs	r0, #0
 8005c72:	4688      	mov	r8, r1
 8005c74:	4681      	mov	r9, r0
 8005c76:	eb12 0a08 	adds.w	sl, r2, r8
 8005c7a:	eb43 0b09 	adc.w	fp, r3, r9
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c8c:	4650      	mov	r0, sl
 8005c8e:	4659      	mov	r1, fp
 8005c90:	f7fa ff82 	bl	8000b98 <__aeabi_uldivmod>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4613      	mov	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca2:	d308      	bcc.n	8005cb6 <UART_SetConfig+0x3de>
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005caa:	d204      	bcs.n	8005cb6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	60da      	str	r2, [r3, #12]
 8005cb4:	e0b6      	b.n	8005e24 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cbc:	e0b2      	b.n	8005e24 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc6:	d15e      	bne.n	8005d86 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d828      	bhi.n	8005d22 <UART_SetConfig+0x44a>
 8005cd0:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <UART_SetConfig+0x400>)
 8005cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd6:	bf00      	nop
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005d05 	.word	0x08005d05
 8005ce0:	08005d0d 	.word	0x08005d0d
 8005ce4:	08005d23 	.word	0x08005d23
 8005ce8:	08005d13 	.word	0x08005d13
 8005cec:	08005d23 	.word	0x08005d23
 8005cf0:	08005d23 	.word	0x08005d23
 8005cf4:	08005d23 	.word	0x08005d23
 8005cf8:	08005d1b 	.word	0x08005d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cfc:	f7fe f9dc 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 8005d00:	61f8      	str	r0, [r7, #28]
        break;
 8005d02:	e014      	b.n	8005d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d04:	f7fe f9ee 	bl	80040e4 <HAL_RCC_GetPCLK2Freq>
 8005d08:	61f8      	str	r0, [r7, #28]
        break;
 8005d0a:	e010      	b.n	8005d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d0c:	4b4d      	ldr	r3, [pc, #308]	; (8005e44 <UART_SetConfig+0x56c>)
 8005d0e:	61fb      	str	r3, [r7, #28]
        break;
 8005d10:	e00d      	b.n	8005d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d12:	f7fe f939 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8005d16:	61f8      	str	r0, [r7, #28]
        break;
 8005d18:	e009      	b.n	8005d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1e:	61fb      	str	r3, [r7, #28]
        break;
 8005d20:	e005      	b.n	8005d2e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d077      	beq.n	8005e24 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	005a      	lsls	r2, r3, #1
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	085b      	lsrs	r3, r3, #1
 8005d3e:	441a      	add	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b0f      	cmp	r3, #15
 8005d4e:	d916      	bls.n	8005d7e <UART_SetConfig+0x4a6>
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d56:	d212      	bcs.n	8005d7e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f023 030f 	bic.w	r3, r3, #15
 8005d60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	8afb      	ldrh	r3, [r7, #22]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	8afa      	ldrh	r2, [r7, #22]
 8005d7a:	60da      	str	r2, [r3, #12]
 8005d7c:	e052      	b.n	8005e24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d84:	e04e      	b.n	8005e24 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d827      	bhi.n	8005dde <UART_SetConfig+0x506>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <UART_SetConfig+0x4bc>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005db9 	.word	0x08005db9
 8005d98:	08005dc1 	.word	0x08005dc1
 8005d9c:	08005dc9 	.word	0x08005dc9
 8005da0:	08005ddf 	.word	0x08005ddf
 8005da4:	08005dcf 	.word	0x08005dcf
 8005da8:	08005ddf 	.word	0x08005ddf
 8005dac:	08005ddf 	.word	0x08005ddf
 8005db0:	08005ddf 	.word	0x08005ddf
 8005db4:	08005dd7 	.word	0x08005dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db8:	f7fe f97e 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 8005dbc:	61f8      	str	r0, [r7, #28]
        break;
 8005dbe:	e014      	b.n	8005dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dc0:	f7fe f990 	bl	80040e4 <HAL_RCC_GetPCLK2Freq>
 8005dc4:	61f8      	str	r0, [r7, #28]
        break;
 8005dc6:	e010      	b.n	8005dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc8:	4b1e      	ldr	r3, [pc, #120]	; (8005e44 <UART_SetConfig+0x56c>)
 8005dca:	61fb      	str	r3, [r7, #28]
        break;
 8005dcc:	e00d      	b.n	8005dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dce:	f7fe f8db 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8005dd2:	61f8      	str	r0, [r7, #28]
        break;
 8005dd4:	e009      	b.n	8005dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dda:	61fb      	str	r3, [r7, #28]
        break;
 8005ddc:	e005      	b.n	8005dea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005de8:	bf00      	nop
    }

    if (pclk != 0U)
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d019      	beq.n	8005e24 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	085a      	lsrs	r2, r3, #1
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	441a      	add	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	2b0f      	cmp	r3, #15
 8005e08:	d909      	bls.n	8005e1e <UART_SetConfig+0x546>
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e10:	d205      	bcs.n	8005e1e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60da      	str	r2, [r3, #12]
 8005e1c:	e002      	b.n	8005e24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3728      	adds	r7, #40	; 0x28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e3e:	bf00      	nop
 8005e40:	40008000 	.word	0x40008000
 8005e44:	00f42400 	.word	0x00f42400

08005e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01a      	beq.n	8005f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f46:	d10a      	bne.n	8005f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
  }
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f9c:	f7fd f804 	bl	8002fa8 <HAL_GetTick>
 8005fa0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d10e      	bne.n	8005fce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f82d 	bl	800601e <UART_WaitOnFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e023      	b.n	8006016 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d10e      	bne.n	8005ffa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f817 	bl	800601e <UART_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e00d      	b.n	8006016 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b09c      	sub	sp, #112	; 0x70
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	603b      	str	r3, [r7, #0]
 800602a:	4613      	mov	r3, r2
 800602c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602e:	e0a5      	b.n	800617c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006036:	f000 80a1 	beq.w	800617c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603a:	f7fc ffb5 	bl	8002fa8 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006046:	429a      	cmp	r2, r3
 8006048:	d302      	bcc.n	8006050 <UART_WaitOnFlagUntilTimeout+0x32>
 800604a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800604c:	2b00      	cmp	r3, #0
 800604e:	d13e      	bne.n	80060ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800605e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006060:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006064:	667b      	str	r3, [r7, #100]	; 0x64
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800606e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006070:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006074:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800607c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e6      	bne.n	8006050 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3308      	adds	r3, #8
 8006088:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	f023 0301 	bic.w	r3, r3, #1
 8006098:	663b      	str	r3, [r7, #96]	; 0x60
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3308      	adds	r3, #8
 80060a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80060a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e5      	bne.n	8006082 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e067      	b.n	800619e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d04f      	beq.n	800617c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ea:	d147      	bne.n	800617c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	e853 3f00 	ldrex	r3, [r3]
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800610a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
 8006116:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800611a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800611c:	e841 2300 	strex	r3, r2, [r1]
 8006120:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e6      	bne.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	613b      	str	r3, [r7, #16]
   return(result);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006148:	623a      	str	r2, [r7, #32]
 800614a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	69f9      	ldr	r1, [r7, #28]
 800614e:	6a3a      	ldr	r2, [r7, #32]
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	61bb      	str	r3, [r7, #24]
   return(result);
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e5      	bne.n	8006128 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e010      	b.n	800619e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69da      	ldr	r2, [r3, #28]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	4013      	ands	r3, r2
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	429a      	cmp	r2, r3
 800618a:	bf0c      	ite	eq
 800618c:	2301      	moveq	r3, #1
 800618e:	2300      	movne	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	461a      	mov	r2, r3
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	429a      	cmp	r2, r3
 8006198:	f43f af4a 	beq.w	8006030 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3770      	adds	r7, #112	; 0x70
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <__NVIC_SetPriority>:
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	4603      	mov	r3, r0
 80061b0:	6039      	str	r1, [r7, #0]
 80061b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	db0a      	blt.n	80061d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	490c      	ldr	r1, [pc, #48]	; (80061f4 <__NVIC_SetPriority+0x4c>)
 80061c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c6:	0112      	lsls	r2, r2, #4
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	440b      	add	r3, r1
 80061cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061d0:	e00a      	b.n	80061e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	4908      	ldr	r1, [pc, #32]	; (80061f8 <__NVIC_SetPriority+0x50>)
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	3b04      	subs	r3, #4
 80061e0:	0112      	lsls	r2, r2, #4
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	440b      	add	r3, r1
 80061e6:	761a      	strb	r2, [r3, #24]
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	e000e100 	.word	0xe000e100
 80061f8:	e000ed00 	.word	0xe000ed00

080061fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <SysTick_Handler+0x1c>)
 8006202:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006204:	f001 ff1a 	bl	800803c <xTaskGetSchedulerState>
 8006208:	4603      	mov	r3, r0
 800620a:	2b01      	cmp	r3, #1
 800620c:	d001      	beq.n	8006212 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800620e:	f002 fe03 	bl	8008e18 <xPortSysTickHandler>
  }
}
 8006212:	bf00      	nop
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	e000e010 	.word	0xe000e010

0800621c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006220:	2100      	movs	r1, #0
 8006222:	f06f 0004 	mvn.w	r0, #4
 8006226:	f7ff ffbf 	bl	80061a8 <__NVIC_SetPriority>
#endif
}
 800622a:	bf00      	nop
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006236:	f3ef 8305 	mrs	r3, IPSR
 800623a:	603b      	str	r3, [r7, #0]
  return(result);
 800623c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006242:	f06f 0305 	mvn.w	r3, #5
 8006246:	607b      	str	r3, [r7, #4]
 8006248:	e00c      	b.n	8006264 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <osKernelInitialize+0x44>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d105      	bne.n	800625e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <osKernelInitialize+0x44>)
 8006254:	2201      	movs	r2, #1
 8006256:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006258:	2300      	movs	r3, #0
 800625a:	607b      	str	r3, [r7, #4]
 800625c:	e002      	b.n	8006264 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800625e:	f04f 33ff 	mov.w	r3, #4294967295
 8006262:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006264:	687b      	ldr	r3, [r7, #4]
}
 8006266:	4618      	mov	r0, r3
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000250 	.word	0x20000250

08006278 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800627e:	f3ef 8305 	mrs	r3, IPSR
 8006282:	603b      	str	r3, [r7, #0]
  return(result);
 8006284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <osKernelStart+0x1a>
    stat = osErrorISR;
 800628a:	f06f 0305 	mvn.w	r3, #5
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	e010      	b.n	80062b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006292:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <osKernelStart+0x48>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d109      	bne.n	80062ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800629a:	f7ff ffbf 	bl	800621c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800629e:	4b08      	ldr	r3, [pc, #32]	; (80062c0 <osKernelStart+0x48>)
 80062a0:	2202      	movs	r2, #2
 80062a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80062a4:	f001 fa82 	bl	80077ac <vTaskStartScheduler>
      stat = osOK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	607b      	str	r3, [r7, #4]
 80062ac:	e002      	b.n	80062b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80062ae:	f04f 33ff 	mov.w	r3, #4294967295
 80062b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062b4:	687b      	ldr	r3, [r7, #4]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000250 	.word	0x20000250

080062c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08e      	sub	sp, #56	; 0x38
 80062c8:	af04      	add	r7, sp, #16
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062d4:	f3ef 8305 	mrs	r3, IPSR
 80062d8:	617b      	str	r3, [r7, #20]
  return(result);
 80062da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d17e      	bne.n	80063de <osThreadNew+0x11a>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d07b      	beq.n	80063de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062e6:	2380      	movs	r3, #128	; 0x80
 80062e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062ea:	2318      	movs	r3, #24
 80062ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80062f2:	f04f 33ff 	mov.w	r3, #4294967295
 80062f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d045      	beq.n	800638a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <osThreadNew+0x48>
        name = attr->name;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d008      	beq.n	8006332 <osThreadNew+0x6e>
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	2b38      	cmp	r3, #56	; 0x38
 8006324:	d805      	bhi.n	8006332 <osThreadNew+0x6e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <osThreadNew+0x72>
        return (NULL);
 8006332:	2300      	movs	r3, #0
 8006334:	e054      	b.n	80063e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	089b      	lsrs	r3, r3, #2
 8006344:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00e      	beq.n	800636c <osThreadNew+0xa8>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	2b5b      	cmp	r3, #91	; 0x5b
 8006354:	d90a      	bls.n	800636c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <osThreadNew+0xa8>
        mem = 1;
 8006366:	2301      	movs	r3, #1
 8006368:	61bb      	str	r3, [r7, #24]
 800636a:	e010      	b.n	800638e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10c      	bne.n	800638e <osThreadNew+0xca>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d108      	bne.n	800638e <osThreadNew+0xca>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <osThreadNew+0xca>
          mem = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	61bb      	str	r3, [r7, #24]
 8006388:	e001      	b.n	800638e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d110      	bne.n	80063b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800639c:	9202      	str	r2, [sp, #8]
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	6a3a      	ldr	r2, [r7, #32]
 80063a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f001 f828 	bl	8007400 <xTaskCreateStatic>
 80063b0:	4603      	mov	r3, r0
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	e013      	b.n	80063de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d110      	bne.n	80063de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	b29a      	uxth	r2, r3
 80063c0:	f107 0310 	add.w	r3, r7, #16
 80063c4:	9301      	str	r3, [sp, #4]
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f001 f873 	bl	80074ba <xTaskCreate>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d001      	beq.n	80063de <osThreadNew+0x11a>
            hTask = NULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063de:	693b      	ldr	r3, [r7, #16]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3728      	adds	r7, #40	; 0x28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063f0:	f3ef 8305 	mrs	r3, IPSR
 80063f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80063f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <osDelay+0x1c>
    stat = osErrorISR;
 80063fc:	f06f 0305 	mvn.w	r3, #5
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	e007      	b.n	8006414 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <osDelay+0x2c>
      vTaskDelay(ticks);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 f998 	bl	8007744 <vTaskDelay>
    }
  }

  return (stat);
 8006414:	68fb      	ldr	r3, [r7, #12]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4a07      	ldr	r2, [pc, #28]	; (800644c <vApplicationGetIdleTaskMemory+0x2c>)
 8006430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	4a06      	ldr	r2, [pc, #24]	; (8006450 <vApplicationGetIdleTaskMemory+0x30>)
 8006436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2280      	movs	r2, #128	; 0x80
 800643c:	601a      	str	r2, [r3, #0]
}
 800643e:	bf00      	nop
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	20000254 	.word	0x20000254
 8006450:	200002b0 	.word	0x200002b0

08006454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4a07      	ldr	r2, [pc, #28]	; (8006480 <vApplicationGetTimerTaskMemory+0x2c>)
 8006464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4a06      	ldr	r2, [pc, #24]	; (8006484 <vApplicationGetTimerTaskMemory+0x30>)
 800646a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006472:	601a      	str	r2, [r3, #0]
}
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	200004b0 	.word	0x200004b0
 8006484:	2000050c 	.word	0x2000050c

08006488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f103 0208 	add.w	r2, r3, #8
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f04f 32ff 	mov.w	r2, #4294967295
 80064a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f103 0208 	add.w	r2, r3, #8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f103 0208 	add.w	r2, r3, #8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	601a      	str	r2, [r3, #0]
}
 800651e:	bf00      	nop
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d103      	bne.n	800654a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	e00c      	b.n	8006564 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3308      	adds	r3, #8
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e002      	b.n	8006558 <vListInsert+0x2e>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	d2f6      	bcs.n	8006552 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	601a      	str	r2, [r3, #0]
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6892      	ldr	r2, [r2, #8]
 80065b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6852      	ldr	r2, [r2, #4]
 80065bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d103      	bne.n	80065d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	1e5a      	subs	r2, r3, #1
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800661a:	f002 fb6b 	bl	8008cf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800662a:	fb01 f303 	mul.w	r3, r1, r3
 800662e:	441a      	add	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	3b01      	subs	r3, #1
 800664c:	68f9      	ldr	r1, [r7, #12]
 800664e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006650:	fb01 f303 	mul.w	r3, r1, r3
 8006654:	441a      	add	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	22ff      	movs	r2, #255	; 0xff
 800665e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	22ff      	movs	r2, #255	; 0xff
 8006666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d114      	bne.n	800669a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01a      	beq.n	80066ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3310      	adds	r3, #16
 800667c:	4618      	mov	r0, r3
 800667e:	f001 fb1f 	bl	8007cc0 <xTaskRemoveFromEventList>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d012      	beq.n	80066ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006688:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <xQueueGenericReset+0xcc>)
 800668a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	e009      	b.n	80066ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3310      	adds	r3, #16
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff fef2 	bl	8006488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3324      	adds	r3, #36	; 0x24
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff feed 	bl	8006488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066ae:	f002 fb51 	bl	8008d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066b2:	2301      	movs	r3, #1
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08e      	sub	sp, #56	; 0x38
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <xQueueGenericCreateStatic+0x52>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <xQueueGenericCreateStatic+0x56>
 8006712:	2301      	movs	r3, #1
 8006714:	e000      	b.n	8006718 <xQueueGenericCreateStatic+0x58>
 8006716:	2300      	movs	r3, #0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	623b      	str	r3, [r7, #32]
}
 800672e:	bf00      	nop
 8006730:	e7fe      	b.n	8006730 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <xQueueGenericCreateStatic+0x7e>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <xQueueGenericCreateStatic+0x82>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <xQueueGenericCreateStatic+0x84>
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	61fb      	str	r3, [r7, #28]
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800675e:	2350      	movs	r3, #80	; 0x50
 8006760:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b50      	cmp	r3, #80	; 0x50
 8006766:	d00a      	beq.n	800677e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	61bb      	str	r3, [r7, #24]
}
 800677a:	bf00      	nop
 800677c:	e7fe      	b.n	800677c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800677e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00d      	beq.n	80067a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006792:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f83f 	bl	8006824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3730      	adds	r7, #48	; 0x30
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	; 0x28
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	4613      	mov	r3, r2
 80067bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <xQueueGenericCreate+0x2a>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	613b      	str	r3, [r7, #16]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	3350      	adds	r3, #80	; 0x50
 80067e8:	4618      	mov	r0, r3
 80067ea:	f002 fba5 	bl	8008f38 <pvPortMalloc>
 80067ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d011      	beq.n	800681a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	3350      	adds	r3, #80	; 0x50
 80067fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006808:	79fa      	ldrb	r2, [r7, #7]
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	4613      	mov	r3, r2
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 f805 	bl	8006824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800681a:	69bb      	ldr	r3, [r7, #24]
	}
 800681c:	4618      	mov	r0, r3
 800681e:	3720      	adds	r7, #32
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d103      	bne.n	8006840 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	e002      	b.n	8006846 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006852:	2101      	movs	r1, #1
 8006854:	69b8      	ldr	r0, [r7, #24]
 8006856:	f7ff fecb 	bl	80065f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	78fa      	ldrb	r2, [r7, #3]
 800685e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00e      	beq.n	8006896 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800688a:	2300      	movs	r3, #0
 800688c:	2200      	movs	r2, #0
 800688e:	2100      	movs	r1, #0
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f81d 	bl	80068d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b086      	sub	sp, #24
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	4603      	mov	r3, r0
 80068a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80068a8:	2301      	movs	r3, #1
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	2300      	movs	r3, #0
 80068ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	461a      	mov	r2, r3
 80068b4:	6939      	ldr	r1, [r7, #16]
 80068b6:	6978      	ldr	r0, [r7, #20]
 80068b8:	f7ff ff7a 	bl	80067b0 <xQueueGenericCreate>
 80068bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff ffd3 	bl	800686a <prvInitialiseMutex>

		return xNewQueue;
 80068c4:	68fb      	ldr	r3, [r7, #12]
	}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08e      	sub	sp, #56	; 0x38
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068de:	2300      	movs	r3, #0
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <xQueueGenericSend+0x32>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d103      	bne.n	8006910 <xQueueGenericSend+0x40>
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <xQueueGenericSend+0x44>
 8006910:	2301      	movs	r3, #1
 8006912:	e000      	b.n	8006916 <xQueueGenericSend+0x46>
 8006914:	2300      	movs	r3, #0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10a      	bne.n	8006930 <xQueueGenericSend+0x60>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800692c:	bf00      	nop
 800692e:	e7fe      	b.n	800692e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d103      	bne.n	800693e <xQueueGenericSend+0x6e>
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <xQueueGenericSend+0x72>
 800693e:	2301      	movs	r3, #1
 8006940:	e000      	b.n	8006944 <xQueueGenericSend+0x74>
 8006942:	2300      	movs	r3, #0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <xQueueGenericSend+0x8e>
	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	623b      	str	r3, [r7, #32]
}
 800695a:	bf00      	nop
 800695c:	e7fe      	b.n	800695c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800695e:	f001 fb6d 	bl	800803c <xTaskGetSchedulerState>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d102      	bne.n	800696e <xQueueGenericSend+0x9e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <xQueueGenericSend+0xa2>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <xQueueGenericSend+0xa4>
 8006972:	2300      	movs	r3, #0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <xQueueGenericSend+0xbe>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	61fb      	str	r3, [r7, #28]
}
 800698a:	bf00      	nop
 800698c:	e7fe      	b.n	800698c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800698e:	f002 f9b1 	bl	8008cf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699a:	429a      	cmp	r2, r3
 800699c:	d302      	bcc.n	80069a4 <xQueueGenericSend+0xd4>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d129      	bne.n	80069f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	68b9      	ldr	r1, [r7, #8]
 80069a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069aa:	f000 fbbb 	bl	8007124 <prvCopyDataToQueue>
 80069ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d010      	beq.n	80069da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ba:	3324      	adds	r3, #36	; 0x24
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 f97f 	bl	8007cc0 <xTaskRemoveFromEventList>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d013      	beq.n	80069f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069c8:	4b3f      	ldr	r3, [pc, #252]	; (8006ac8 <xQueueGenericSend+0x1f8>)
 80069ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	e00a      	b.n	80069f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069e0:	4b39      	ldr	r3, [pc, #228]	; (8006ac8 <xQueueGenericSend+0x1f8>)
 80069e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069f0:	f002 f9b0 	bl	8008d54 <vPortExitCritical>
				return pdPASS;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e063      	b.n	8006ac0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069fe:	f002 f9a9 	bl	8008d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e05c      	b.n	8006ac0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a0c:	f107 0314 	add.w	r3, r7, #20
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 f9b9 	bl	8007d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a16:	2301      	movs	r3, #1
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a1a:	f002 f99b 	bl	8008d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a1e:	f000 ff2b 	bl	8007878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a22:	f002 f967 	bl	8008cf4 <vPortEnterCritical>
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a2c:	b25b      	sxtb	r3, r3
 8006a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a32:	d103      	bne.n	8006a3c <xQueueGenericSend+0x16c>
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a42:	b25b      	sxtb	r3, r3
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a48:	d103      	bne.n	8006a52 <xQueueGenericSend+0x182>
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a52:	f002 f97f 	bl	8008d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a56:	1d3a      	adds	r2, r7, #4
 8006a58:	f107 0314 	add.w	r3, r7, #20
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f001 f9a8 	bl	8007db4 <xTaskCheckForTimeOut>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d124      	bne.n	8006ab4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a6c:	f000 fc52 	bl	8007314 <prvIsQueueFull>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d018      	beq.n	8006aa8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	3310      	adds	r3, #16
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 f8ce 	bl	8007c20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a86:	f000 fbdd 	bl	8007244 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a8a:	f000 ff03 	bl	8007894 <xTaskResumeAll>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f47f af7c 	bne.w	800698e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a96:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <xQueueGenericSend+0x1f8>)
 8006a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	e772      	b.n	800698e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aaa:	f000 fbcb 	bl	8007244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aae:	f000 fef1 	bl	8007894 <xTaskResumeAll>
 8006ab2:	e76c      	b.n	800698e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ab6:	f000 fbc5 	bl	8007244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aba:	f000 feeb 	bl	8007894 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006abe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3738      	adds	r7, #56	; 0x38
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	e000ed04 	.word	0xe000ed04

08006acc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b090      	sub	sp, #64	; 0x40
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d103      	bne.n	8006b08 <xQueueGenericSendFromISR+0x3c>
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <xQueueGenericSendFromISR+0x40>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <xQueueGenericSendFromISR+0x42>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d103      	bne.n	8006b36 <xQueueGenericSendFromISR+0x6a>
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <xQueueGenericSendFromISR+0x6e>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <xQueueGenericSendFromISR+0x70>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	623b      	str	r3, [r7, #32]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b56:	f002 f9af 	bl	8008eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b5a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	61fa      	str	r2, [r7, #28]
 8006b70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d302      	bcc.n	8006b88 <xQueueGenericSendFromISR+0xbc>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d12f      	bne.n	8006be8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	68b9      	ldr	r1, [r7, #8]
 8006b9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b9e:	f000 fac1 	bl	8007124 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ba2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d112      	bne.n	8006bd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d016      	beq.n	8006be2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	3324      	adds	r3, #36	; 0x24
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 f881 	bl	8007cc0 <xTaskRemoveFromEventList>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00e      	beq.n	8006be2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00b      	beq.n	8006be2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	e007      	b.n	8006be2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	b25a      	sxtb	r2, r3
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006be2:	2301      	movs	r3, #1
 8006be4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006be6:	e001      	b.n	8006bec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bf6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3740      	adds	r7, #64	; 0x40
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b08e      	sub	sp, #56	; 0x38
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10a      	bne.n	8006c2c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	623b      	str	r3, [r7, #32]
}
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <xQueueGiveFromISR+0x48>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	61fb      	str	r3, [r7, #28]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <xQueueGiveFromISR+0x58>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <xQueueGiveFromISR+0x5c>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <xQueueGiveFromISR+0x5e>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	61bb      	str	r3, [r7, #24]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c7a:	f002 f91d 	bl	8008eb8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c7e:	f3ef 8211 	mrs	r2, BASEPRI
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	617a      	str	r2, [r7, #20]
 8006c94:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006c96:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d22b      	bcs.n	8006d02 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d112      	bne.n	8006cec <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d016      	beq.n	8006cfc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	3324      	adds	r3, #36	; 0x24
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fff4 	bl	8007cc0 <xTaskRemoveFromEventList>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00e      	beq.n	8006cfc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e007      	b.n	8006cfc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	b25a      	sxtb	r2, r3
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8006d00:	e001      	b.n	8006d06 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
 8006d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d08:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f383 8811 	msr	BASEPRI, r3
}
 8006d10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3738      	adds	r7, #56	; 0x38
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08c      	sub	sp, #48	; 0x30
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <xQueueReceive+0x30>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	623b      	str	r3, [r7, #32]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d103      	bne.n	8006d5a <xQueueReceive+0x3e>
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <xQueueReceive+0x42>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <xQueueReceive+0x44>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <xQueueReceive+0x5e>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	61fb      	str	r3, [r7, #28]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d7a:	f001 f95f 	bl	800803c <xTaskGetSchedulerState>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d102      	bne.n	8006d8a <xQueueReceive+0x6e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <xQueueReceive+0x72>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <xQueueReceive+0x74>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10a      	bne.n	8006daa <xQueueReceive+0x8e>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	61bb      	str	r3, [r7, #24]
}
 8006da6:	bf00      	nop
 8006da8:	e7fe      	b.n	8006da8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006daa:	f001 ffa3 	bl	8008cf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d01f      	beq.n	8006dfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dbe:	f000 fa1b 	bl	80071f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	1e5a      	subs	r2, r3, #1
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00f      	beq.n	8006df2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	3310      	adds	r3, #16
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 ff72 	bl	8007cc0 <xTaskRemoveFromEventList>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d007      	beq.n	8006df2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006de2:	4b3d      	ldr	r3, [pc, #244]	; (8006ed8 <xQueueReceive+0x1bc>)
 8006de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006df2:	f001 ffaf 	bl	8008d54 <vPortExitCritical>
				return pdPASS;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e069      	b.n	8006ece <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d103      	bne.n	8006e08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e00:	f001 ffa8 	bl	8008d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e04:	2300      	movs	r3, #0
 8006e06:	e062      	b.n	8006ece <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e0e:	f107 0310 	add.w	r3, r7, #16
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 ffb8 	bl	8007d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e1c:	f001 ff9a 	bl	8008d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e20:	f000 fd2a 	bl	8007878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e24:	f001 ff66 	bl	8008cf4 <vPortEnterCritical>
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e2e:	b25b      	sxtb	r3, r3
 8006e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e34:	d103      	bne.n	8006e3e <xQueueReceive+0x122>
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e44:	b25b      	sxtb	r3, r3
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d103      	bne.n	8006e54 <xQueueReceive+0x138>
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e54:	f001 ff7e 	bl	8008d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e58:	1d3a      	adds	r2, r7, #4
 8006e5a:	f107 0310 	add.w	r3, r7, #16
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 ffa7 	bl	8007db4 <xTaskCheckForTimeOut>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d123      	bne.n	8006eb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e6e:	f000 fa3b 	bl	80072e8 <prvIsQueueEmpty>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d017      	beq.n	8006ea8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	3324      	adds	r3, #36	; 0x24
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	4611      	mov	r1, r2
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 fecd 	bl	8007c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e88:	f000 f9dc 	bl	8007244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e8c:	f000 fd02 	bl	8007894 <xTaskResumeAll>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d189      	bne.n	8006daa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e96:	4b10      	ldr	r3, [pc, #64]	; (8006ed8 <xQueueReceive+0x1bc>)
 8006e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	e780      	b.n	8006daa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eaa:	f000 f9cb 	bl	8007244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eae:	f000 fcf1 	bl	8007894 <xTaskResumeAll>
 8006eb2:	e77a      	b.n	8006daa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb6:	f000 f9c5 	bl	8007244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eba:	f000 fceb 	bl	8007894 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ec0:	f000 fa12 	bl	80072e8 <prvIsQueueEmpty>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f43f af6f 	beq.w	8006daa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ecc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3730      	adds	r7, #48	; 0x30
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08e      	sub	sp, #56	; 0x38
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	623b      	str	r3, [r7, #32]
}
 8006f0a:	bf00      	nop
 8006f0c:	e7fe      	b.n	8006f0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	61fb      	str	r3, [r7, #28]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f2c:	f001 f886 	bl	800803c <xTaskGetSchedulerState>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d102      	bne.n	8006f3c <xQueueSemaphoreTake+0x60>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <xQueueSemaphoreTake+0x64>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <xQueueSemaphoreTake+0x66>
 8006f40:	2300      	movs	r3, #0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	61bb      	str	r3, [r7, #24]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f5c:	f001 feca 	bl	8008cf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d024      	beq.n	8006fb6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	1e5a      	subs	r2, r3, #1
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f7c:	f001 f9d4 	bl	8008328 <pvTaskIncrementMutexHeldCount>
 8006f80:	4602      	mov	r2, r0
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00f      	beq.n	8006fae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	3310      	adds	r3, #16
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fe94 	bl	8007cc0 <xTaskRemoveFromEventList>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f9e:	4b54      	ldr	r3, [pc, #336]	; (80070f0 <xQueueSemaphoreTake+0x214>)
 8006fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fae:	f001 fed1 	bl	8008d54 <vPortExitCritical>
				return pdPASS;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e097      	b.n	80070e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d111      	bne.n	8006fe0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	617b      	str	r3, [r7, #20]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006fd8:	f001 febc 	bl	8008d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e082      	b.n	80070e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d106      	bne.n	8006ff4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fe6:	f107 030c 	add.w	r3, r7, #12
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fecc 	bl	8007d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ff4:	f001 feae 	bl	8008d54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ff8:	f000 fc3e 	bl	8007878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ffc:	f001 fe7a 	bl	8008cf4 <vPortEnterCritical>
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007006:	b25b      	sxtb	r3, r3
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700c:	d103      	bne.n	8007016 <xQueueSemaphoreTake+0x13a>
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800701c:	b25b      	sxtb	r3, r3
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007022:	d103      	bne.n	800702c <xQueueSemaphoreTake+0x150>
 8007024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800702c:	f001 fe92 	bl	8008d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007030:	463a      	mov	r2, r7
 8007032:	f107 030c 	add.w	r3, r7, #12
 8007036:	4611      	mov	r1, r2
 8007038:	4618      	mov	r0, r3
 800703a:	f000 febb 	bl	8007db4 <xTaskCheckForTimeOut>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d132      	bne.n	80070aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007044:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007046:	f000 f94f 	bl	80072e8 <prvIsQueueEmpty>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d026      	beq.n	800709e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d109      	bne.n	800706c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007058:	f001 fe4c 	bl	8008cf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4618      	mov	r0, r3
 8007062:	f001 f809 	bl	8008078 <xTaskPriorityInherit>
 8007066:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007068:	f001 fe74 	bl	8008d54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706e:	3324      	adds	r3, #36	; 0x24
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	4611      	mov	r1, r2
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fdd3 	bl	8007c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800707a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800707c:	f000 f8e2 	bl	8007244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007080:	f000 fc08 	bl	8007894 <xTaskResumeAll>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	f47f af68 	bne.w	8006f5c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800708c:	4b18      	ldr	r3, [pc, #96]	; (80070f0 <xQueueSemaphoreTake+0x214>)
 800708e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	e75e      	b.n	8006f5c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800709e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a0:	f000 f8d0 	bl	8007244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070a4:	f000 fbf6 	bl	8007894 <xTaskResumeAll>
 80070a8:	e758      	b.n	8006f5c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80070aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ac:	f000 f8ca 	bl	8007244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070b0:	f000 fbf0 	bl	8007894 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070b6:	f000 f917 	bl	80072e8 <prvIsQueueEmpty>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f43f af4d 	beq.w	8006f5c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00d      	beq.n	80070e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80070c8:	f001 fe14 	bl	8008cf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ce:	f000 f811 	bl	80070f4 <prvGetDisinheritPriorityAfterTimeout>
 80070d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070da:	4618      	mov	r0, r3
 80070dc:	f001 f8a2 	bl	8008224 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80070e0:	f001 fe38 	bl	8008d54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3738      	adds	r7, #56	; 0x38
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	e000ed04 	.word	0xe000ed04

080070f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	2b00      	cmp	r3, #0
 8007102:	d006      	beq.n	8007112 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e001      	b.n	8007116 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007116:	68fb      	ldr	r3, [r7, #12]
	}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007130:	2300      	movs	r3, #0
 8007132:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10d      	bne.n	800715e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d14d      	bne.n	80071e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fffa 	bl	8008148 <xTaskPriorityDisinherit>
 8007154:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	609a      	str	r2, [r3, #8]
 800715c:	e043      	b.n	80071e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d119      	bne.n	8007198 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6858      	ldr	r0, [r3, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716c:	461a      	mov	r2, r3
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	f002 f978 	bl	8009464 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	441a      	add	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	429a      	cmp	r2, r3
 800718c:	d32b      	bcc.n	80071e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	e026      	b.n	80071e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68d8      	ldr	r0, [r3, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	461a      	mov	r2, r3
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	f002 f95e 	bl	8009464 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	425b      	negs	r3, r3
 80071b2:	441a      	add	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d207      	bcs.n	80071d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071cc:	425b      	negs	r3, r3
 80071ce:	441a      	add	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d105      	bne.n	80071e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071ee:	697b      	ldr	r3, [r7, #20]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d018      	beq.n	800723c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	441a      	add	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	429a      	cmp	r2, r3
 8007222:	d303      	bcc.n	800722c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68d9      	ldr	r1, [r3, #12]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	461a      	mov	r2, r3
 8007236:	6838      	ldr	r0, [r7, #0]
 8007238:	f002 f914 	bl	8009464 <memcpy>
	}
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800724c:	f001 fd52 	bl	8008cf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007256:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007258:	e011      	b.n	800727e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	2b00      	cmp	r3, #0
 8007260:	d012      	beq.n	8007288 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3324      	adds	r3, #36	; 0x24
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fd2a 	bl	8007cc0 <xTaskRemoveFromEventList>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007272:	f000 fe01 	bl	8007e78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	3b01      	subs	r3, #1
 800727a:	b2db      	uxtb	r3, r3
 800727c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800727e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007282:	2b00      	cmp	r3, #0
 8007284:	dce9      	bgt.n	800725a <prvUnlockQueue+0x16>
 8007286:	e000      	b.n	800728a <prvUnlockQueue+0x46>
					break;
 8007288:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	22ff      	movs	r2, #255	; 0xff
 800728e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007292:	f001 fd5f 	bl	8008d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007296:	f001 fd2d 	bl	8008cf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072a2:	e011      	b.n	80072c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d012      	beq.n	80072d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3310      	adds	r3, #16
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fd05 	bl	8007cc0 <xTaskRemoveFromEventList>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072bc:	f000 fddc 	bl	8007e78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dce9      	bgt.n	80072a4 <prvUnlockQueue+0x60>
 80072d0:	e000      	b.n	80072d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	22ff      	movs	r2, #255	; 0xff
 80072d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072dc:	f001 fd3a 	bl	8008d54 <vPortExitCritical>
}
 80072e0:	bf00      	nop
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072f0:	f001 fd00 	bl	8008cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d102      	bne.n	8007302 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072fc:	2301      	movs	r3, #1
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	e001      	b.n	8007306 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007306:	f001 fd25 	bl	8008d54 <vPortExitCritical>

	return xReturn;
 800730a:	68fb      	ldr	r3, [r7, #12]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800731c:	f001 fcea 	bl	8008cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007328:	429a      	cmp	r2, r3
 800732a:	d102      	bne.n	8007332 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800732c:	2301      	movs	r3, #1
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	e001      	b.n	8007336 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007332:	2300      	movs	r3, #0
 8007334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007336:	f001 fd0d 	bl	8008d54 <vPortExitCritical>

	return xReturn;
 800733a:	68fb      	ldr	r3, [r7, #12]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	e014      	b.n	800737e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007354:	4a0f      	ldr	r2, [pc, #60]	; (8007394 <vQueueAddToRegistry+0x50>)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10b      	bne.n	8007378 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007360:	490c      	ldr	r1, [pc, #48]	; (8007394 <vQueueAddToRegistry+0x50>)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800736a:	4a0a      	ldr	r2, [pc, #40]	; (8007394 <vQueueAddToRegistry+0x50>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	4413      	add	r3, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007376:	e006      	b.n	8007386 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3301      	adds	r3, #1
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b07      	cmp	r3, #7
 8007382:	d9e7      	bls.n	8007354 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007384:	bf00      	nop
 8007386:	bf00      	nop
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	2000090c 	.word	0x2000090c

08007398 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073a8:	f001 fca4 	bl	8008cf4 <vPortEnterCritical>
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073b2:	b25b      	sxtb	r3, r3
 80073b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b8:	d103      	bne.n	80073c2 <vQueueWaitForMessageRestricted+0x2a>
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073c8:	b25b      	sxtb	r3, r3
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ce:	d103      	bne.n	80073d8 <vQueueWaitForMessageRestricted+0x40>
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073d8:	f001 fcbc 	bl	8008d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d106      	bne.n	80073f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	3324      	adds	r3, #36	; 0x24
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fc3b 	bl	8007c68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80073f2:	6978      	ldr	r0, [r7, #20]
 80073f4:	f7ff ff26 	bl	8007244 <prvUnlockQueue>
	}
 80073f8:	bf00      	nop
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08e      	sub	sp, #56	; 0x38
 8007404:	af04      	add	r7, sp, #16
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800740e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	623b      	str	r3, [r7, #32]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xTaskCreateStatic+0x46>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	61fb      	str	r3, [r7, #28]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007446:	235c      	movs	r3, #92	; 0x5c
 8007448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2b5c      	cmp	r3, #92	; 0x5c
 800744e:	d00a      	beq.n	8007466 <xTaskCreateStatic+0x66>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	61bb      	str	r3, [r7, #24]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007466:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746a:	2b00      	cmp	r3, #0
 800746c:	d01e      	beq.n	80074ac <xTaskCreateStatic+0xac>
 800746e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007470:	2b00      	cmp	r3, #0
 8007472:	d01b      	beq.n	80074ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800747c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	2202      	movs	r2, #2
 8007482:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007486:	2300      	movs	r3, #0
 8007488:	9303      	str	r3, [sp, #12]
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	9302      	str	r3, [sp, #8]
 800748e:	f107 0314 	add.w	r3, r7, #20
 8007492:	9301      	str	r3, [sp, #4]
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 f850 	bl	8007544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074a6:	f000 f8dd 	bl	8007664 <prvAddNewTaskToReadyList>
 80074aa:	e001      	b.n	80074b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074b0:	697b      	ldr	r3, [r7, #20]
	}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3728      	adds	r7, #40	; 0x28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b08c      	sub	sp, #48	; 0x30
 80074be:	af04      	add	r7, sp, #16
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	603b      	str	r3, [r7, #0]
 80074c6:	4613      	mov	r3, r2
 80074c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 fd32 	bl	8008f38 <pvPortMalloc>
 80074d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00e      	beq.n	80074fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074dc:	205c      	movs	r0, #92	; 0x5c
 80074de:	f001 fd2b 	bl	8008f38 <pvPortMalloc>
 80074e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	631a      	str	r2, [r3, #48]	; 0x30
 80074f0:	e005      	b.n	80074fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074f2:	6978      	ldr	r0, [r7, #20]
 80074f4:	f001 fdec 	bl	80090d0 <vPortFree>
 80074f8:	e001      	b.n	80074fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d017      	beq.n	8007534 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800750c:	88fa      	ldrh	r2, [r7, #6]
 800750e:	2300      	movs	r3, #0
 8007510:	9303      	str	r3, [sp, #12]
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	9302      	str	r3, [sp, #8]
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68b9      	ldr	r1, [r7, #8]
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 f80e 	bl	8007544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007528:	69f8      	ldr	r0, [r7, #28]
 800752a:	f000 f89b 	bl	8007664 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800752e:	2301      	movs	r3, #1
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	e002      	b.n	800753a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007534:	f04f 33ff 	mov.w	r3, #4294967295
 8007538:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800753a:	69bb      	ldr	r3, [r7, #24]
	}
 800753c:	4618      	mov	r0, r3
 800753e:	3720      	adds	r7, #32
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	461a      	mov	r2, r3
 800755c:	21a5      	movs	r1, #165	; 0xa5
 800755e:	f001 ff8f 	bl	8009480 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800756c:	3b01      	subs	r3, #1
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f023 0307 	bic.w	r3, r3, #7
 800757a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	617b      	str	r3, [r7, #20]
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01f      	beq.n	80075e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075a2:	2300      	movs	r3, #0
 80075a4:	61fb      	str	r3, [r7, #28]
 80075a6:	e012      	b.n	80075ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4413      	add	r3, r2
 80075ae:	7819      	ldrb	r1, [r3, #0]
 80075b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	3334      	adds	r3, #52	; 0x34
 80075b8:	460a      	mov	r2, r1
 80075ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	4413      	add	r3, r2
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d006      	beq.n	80075d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	3301      	adds	r3, #1
 80075cc:	61fb      	str	r3, [r7, #28]
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	2b0f      	cmp	r3, #15
 80075d2:	d9e9      	bls.n	80075a8 <prvInitialiseNewTask+0x64>
 80075d4:	e000      	b.n	80075d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80075d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075e0:	e003      	b.n	80075ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	2b37      	cmp	r3, #55	; 0x37
 80075ee:	d901      	bls.n	80075f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075f0:	2337      	movs	r3, #55	; 0x37
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	2200      	movs	r2, #0
 8007604:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	3304      	adds	r3, #4
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe ff5c 	bl	80064c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	3318      	adds	r3, #24
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe ff57 	bl	80064c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800762e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	2200      	movs	r2, #0
 8007634:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	68f9      	ldr	r1, [r7, #12]
 8007642:	69b8      	ldr	r0, [r7, #24]
 8007644:	f001 fa26 	bl	8008a94 <pxPortInitialiseStack>
 8007648:	4602      	mov	r2, r0
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800765a:	bf00      	nop
 800765c:	3720      	adds	r7, #32
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800766c:	f001 fb42 	bl	8008cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007670:	4b2d      	ldr	r3, [pc, #180]	; (8007728 <prvAddNewTaskToReadyList+0xc4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3301      	adds	r3, #1
 8007676:	4a2c      	ldr	r2, [pc, #176]	; (8007728 <prvAddNewTaskToReadyList+0xc4>)
 8007678:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800767a:	4b2c      	ldr	r3, [pc, #176]	; (800772c <prvAddNewTaskToReadyList+0xc8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d109      	bne.n	8007696 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007682:	4a2a      	ldr	r2, [pc, #168]	; (800772c <prvAddNewTaskToReadyList+0xc8>)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007688:	4b27      	ldr	r3, [pc, #156]	; (8007728 <prvAddNewTaskToReadyList+0xc4>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d110      	bne.n	80076b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007690:	f000 fc16 	bl	8007ec0 <prvInitialiseTaskLists>
 8007694:	e00d      	b.n	80076b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007696:	4b26      	ldr	r3, [pc, #152]	; (8007730 <prvAddNewTaskToReadyList+0xcc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800769e:	4b23      	ldr	r3, [pc, #140]	; (800772c <prvAddNewTaskToReadyList+0xc8>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d802      	bhi.n	80076b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076ac:	4a1f      	ldr	r2, [pc, #124]	; (800772c <prvAddNewTaskToReadyList+0xc8>)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076b2:	4b20      	ldr	r3, [pc, #128]	; (8007734 <prvAddNewTaskToReadyList+0xd0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3301      	adds	r3, #1
 80076b8:	4a1e      	ldr	r2, [pc, #120]	; (8007734 <prvAddNewTaskToReadyList+0xd0>)
 80076ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076bc:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <prvAddNewTaskToReadyList+0xd0>)
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c8:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <prvAddNewTaskToReadyList+0xd4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d903      	bls.n	80076d8 <prvAddNewTaskToReadyList+0x74>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4a18      	ldr	r2, [pc, #96]	; (8007738 <prvAddNewTaskToReadyList+0xd4>)
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4a15      	ldr	r2, [pc, #84]	; (800773c <prvAddNewTaskToReadyList+0xd8>)
 80076e6:	441a      	add	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4619      	mov	r1, r3
 80076ee:	4610      	mov	r0, r2
 80076f0:	f7fe fef7 	bl	80064e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076f4:	f001 fb2e 	bl	8008d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076f8:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <prvAddNewTaskToReadyList+0xcc>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00e      	beq.n	800771e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007700:	4b0a      	ldr	r3, [pc, #40]	; (800772c <prvAddNewTaskToReadyList+0xc8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	429a      	cmp	r2, r3
 800770c:	d207      	bcs.n	800771e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800770e:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <prvAddNewTaskToReadyList+0xdc>)
 8007710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800771e:	bf00      	nop
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20000e20 	.word	0x20000e20
 800772c:	2000094c 	.word	0x2000094c
 8007730:	20000e2c 	.word	0x20000e2c
 8007734:	20000e3c 	.word	0x20000e3c
 8007738:	20000e28 	.word	0x20000e28
 800773c:	20000950 	.word	0x20000950
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d017      	beq.n	8007786 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007756:	4b13      	ldr	r3, [pc, #76]	; (80077a4 <vTaskDelay+0x60>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <vTaskDelay+0x30>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	60bb      	str	r3, [r7, #8]
}
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007774:	f000 f880 	bl	8007878 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007778:	2100      	movs	r1, #0
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fde8 	bl	8008350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007780:	f000 f888 	bl	8007894 <xTaskResumeAll>
 8007784:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d107      	bne.n	800779c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <vTaskDelay+0x64>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20000e48 	.word	0x20000e48
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08a      	sub	sp, #40	; 0x28
 80077b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077ba:	463a      	mov	r2, r7
 80077bc:	1d39      	adds	r1, r7, #4
 80077be:	f107 0308 	add.w	r3, r7, #8
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fe2c 	bl	8006420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	9202      	str	r2, [sp, #8]
 80077d0:	9301      	str	r3, [sp, #4]
 80077d2:	2300      	movs	r3, #0
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	2300      	movs	r3, #0
 80077d8:	460a      	mov	r2, r1
 80077da:	4921      	ldr	r1, [pc, #132]	; (8007860 <vTaskStartScheduler+0xb4>)
 80077dc:	4821      	ldr	r0, [pc, #132]	; (8007864 <vTaskStartScheduler+0xb8>)
 80077de:	f7ff fe0f 	bl	8007400 <xTaskCreateStatic>
 80077e2:	4603      	mov	r3, r0
 80077e4:	4a20      	ldr	r2, [pc, #128]	; (8007868 <vTaskStartScheduler+0xbc>)
 80077e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077e8:	4b1f      	ldr	r3, [pc, #124]	; (8007868 <vTaskStartScheduler+0xbc>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077f0:	2301      	movs	r3, #1
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	e001      	b.n	80077fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d102      	bne.n	8007806 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007800:	f000 fdfa 	bl	80083f8 <xTimerCreateTimerTask>
 8007804:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d116      	bne.n	800783a <vTaskStartScheduler+0x8e>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	613b      	str	r3, [r7, #16]
}
 800781e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007820:	4b12      	ldr	r3, [pc, #72]	; (800786c <vTaskStartScheduler+0xc0>)
 8007822:	f04f 32ff 	mov.w	r2, #4294967295
 8007826:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007828:	4b11      	ldr	r3, [pc, #68]	; (8007870 <vTaskStartScheduler+0xc4>)
 800782a:	2201      	movs	r2, #1
 800782c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800782e:	4b11      	ldr	r3, [pc, #68]	; (8007874 <vTaskStartScheduler+0xc8>)
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007834:	f001 f9bc 	bl	8008bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007838:	e00e      	b.n	8007858 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007840:	d10a      	bne.n	8007858 <vTaskStartScheduler+0xac>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	60fb      	str	r3, [r7, #12]
}
 8007854:	bf00      	nop
 8007856:	e7fe      	b.n	8007856 <vTaskStartScheduler+0xaa>
}
 8007858:	bf00      	nop
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	0800b490 	.word	0x0800b490
 8007864:	08007e91 	.word	0x08007e91
 8007868:	20000e44 	.word	0x20000e44
 800786c:	20000e40 	.word	0x20000e40
 8007870:	20000e2c 	.word	0x20000e2c
 8007874:	20000e24 	.word	0x20000e24

08007878 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007878:	b480      	push	{r7}
 800787a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800787c:	4b04      	ldr	r3, [pc, #16]	; (8007890 <vTaskSuspendAll+0x18>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3301      	adds	r3, #1
 8007882:	4a03      	ldr	r2, [pc, #12]	; (8007890 <vTaskSuspendAll+0x18>)
 8007884:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007886:	bf00      	nop
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	20000e48 	.word	0x20000e48

08007894 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800789e:	2300      	movs	r3, #0
 80078a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078a2:	4b42      	ldr	r3, [pc, #264]	; (80079ac <xTaskResumeAll+0x118>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	603b      	str	r3, [r7, #0]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078c0:	f001 fa18 	bl	8008cf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078c4:	4b39      	ldr	r3, [pc, #228]	; (80079ac <xTaskResumeAll+0x118>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	4a38      	ldr	r2, [pc, #224]	; (80079ac <xTaskResumeAll+0x118>)
 80078cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ce:	4b37      	ldr	r3, [pc, #220]	; (80079ac <xTaskResumeAll+0x118>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d162      	bne.n	800799c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078d6:	4b36      	ldr	r3, [pc, #216]	; (80079b0 <xTaskResumeAll+0x11c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d05e      	beq.n	800799c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078de:	e02f      	b.n	8007940 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078e0:	4b34      	ldr	r3, [pc, #208]	; (80079b4 <xTaskResumeAll+0x120>)
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3318      	adds	r3, #24
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe fe55 	bl	800659c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3304      	adds	r3, #4
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe fe50 	bl	800659c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007900:	4b2d      	ldr	r3, [pc, #180]	; (80079b8 <xTaskResumeAll+0x124>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d903      	bls.n	8007910 <xTaskResumeAll+0x7c>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	4a2a      	ldr	r2, [pc, #168]	; (80079b8 <xTaskResumeAll+0x124>)
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4a27      	ldr	r2, [pc, #156]	; (80079bc <xTaskResumeAll+0x128>)
 800791e:	441a      	add	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3304      	adds	r3, #4
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f7fe fddb 	bl	80064e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	4b23      	ldr	r3, [pc, #140]	; (80079c0 <xTaskResumeAll+0x12c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	429a      	cmp	r2, r3
 8007938:	d302      	bcc.n	8007940 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800793a:	4b22      	ldr	r3, [pc, #136]	; (80079c4 <xTaskResumeAll+0x130>)
 800793c:	2201      	movs	r2, #1
 800793e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007940:	4b1c      	ldr	r3, [pc, #112]	; (80079b4 <xTaskResumeAll+0x120>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1cb      	bne.n	80078e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800794e:	f000 fb55 	bl	8007ffc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007952:	4b1d      	ldr	r3, [pc, #116]	; (80079c8 <xTaskResumeAll+0x134>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d010      	beq.n	8007980 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800795e:	f000 f847 	bl	80079f0 <xTaskIncrementTick>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007968:	4b16      	ldr	r3, [pc, #88]	; (80079c4 <xTaskResumeAll+0x130>)
 800796a:	2201      	movs	r2, #1
 800796c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3b01      	subs	r3, #1
 8007972:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1f1      	bne.n	800795e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800797a:	4b13      	ldr	r3, [pc, #76]	; (80079c8 <xTaskResumeAll+0x134>)
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007980:	4b10      	ldr	r3, [pc, #64]	; (80079c4 <xTaskResumeAll+0x130>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d009      	beq.n	800799c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007988:	2301      	movs	r3, #1
 800798a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800798c:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <xTaskResumeAll+0x138>)
 800798e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800799c:	f001 f9da 	bl	8008d54 <vPortExitCritical>

	return xAlreadyYielded;
 80079a0:	68bb      	ldr	r3, [r7, #8]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000e48 	.word	0x20000e48
 80079b0:	20000e20 	.word	0x20000e20
 80079b4:	20000de0 	.word	0x20000de0
 80079b8:	20000e28 	.word	0x20000e28
 80079bc:	20000950 	.word	0x20000950
 80079c0:	2000094c 	.word	0x2000094c
 80079c4:	20000e34 	.word	0x20000e34
 80079c8:	20000e30 	.word	0x20000e30
 80079cc:	e000ed04 	.word	0xe000ed04

080079d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079d6:	4b05      	ldr	r3, [pc, #20]	; (80079ec <xTaskGetTickCount+0x1c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079dc:	687b      	ldr	r3, [r7, #4]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	20000e24 	.word	0x20000e24

080079f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079f6:	2300      	movs	r3, #0
 80079f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079fa:	4b4f      	ldr	r3, [pc, #316]	; (8007b38 <xTaskIncrementTick+0x148>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f040 808f 	bne.w	8007b22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a04:	4b4d      	ldr	r3, [pc, #308]	; (8007b3c <xTaskIncrementTick+0x14c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a0c:	4a4b      	ldr	r2, [pc, #300]	; (8007b3c <xTaskIncrementTick+0x14c>)
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d120      	bne.n	8007a5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a18:	4b49      	ldr	r3, [pc, #292]	; (8007b40 <xTaskIncrementTick+0x150>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	603b      	str	r3, [r7, #0]
}
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <xTaskIncrementTick+0x46>
 8007a38:	4b41      	ldr	r3, [pc, #260]	; (8007b40 <xTaskIncrementTick+0x150>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	4b41      	ldr	r3, [pc, #260]	; (8007b44 <xTaskIncrementTick+0x154>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a3f      	ldr	r2, [pc, #252]	; (8007b40 <xTaskIncrementTick+0x150>)
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	4a3f      	ldr	r2, [pc, #252]	; (8007b44 <xTaskIncrementTick+0x154>)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	4b3e      	ldr	r3, [pc, #248]	; (8007b48 <xTaskIncrementTick+0x158>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3301      	adds	r3, #1
 8007a52:	4a3d      	ldr	r2, [pc, #244]	; (8007b48 <xTaskIncrementTick+0x158>)
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	f000 fad1 	bl	8007ffc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a5a:	4b3c      	ldr	r3, [pc, #240]	; (8007b4c <xTaskIncrementTick+0x15c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d349      	bcc.n	8007af8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a64:	4b36      	ldr	r3, [pc, #216]	; (8007b40 <xTaskIncrementTick+0x150>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d104      	bne.n	8007a78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a6e:	4b37      	ldr	r3, [pc, #220]	; (8007b4c <xTaskIncrementTick+0x15c>)
 8007a70:	f04f 32ff 	mov.w	r2, #4294967295
 8007a74:	601a      	str	r2, [r3, #0]
					break;
 8007a76:	e03f      	b.n	8007af8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a78:	4b31      	ldr	r3, [pc, #196]	; (8007b40 <xTaskIncrementTick+0x150>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d203      	bcs.n	8007a98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a90:	4a2e      	ldr	r2, [pc, #184]	; (8007b4c <xTaskIncrementTick+0x15c>)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a96:	e02f      	b.n	8007af8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fe fd7d 	bl	800659c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	3318      	adds	r3, #24
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe fd74 	bl	800659c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab8:	4b25      	ldr	r3, [pc, #148]	; (8007b50 <xTaskIncrementTick+0x160>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d903      	bls.n	8007ac8 <xTaskIncrementTick+0xd8>
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac4:	4a22      	ldr	r2, [pc, #136]	; (8007b50 <xTaskIncrementTick+0x160>)
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4a1f      	ldr	r2, [pc, #124]	; (8007b54 <xTaskIncrementTick+0x164>)
 8007ad6:	441a      	add	r2, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4619      	mov	r1, r3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	f7fe fcff 	bl	80064e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae8:	4b1b      	ldr	r3, [pc, #108]	; (8007b58 <xTaskIncrementTick+0x168>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d3b8      	bcc.n	8007a64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007af2:	2301      	movs	r3, #1
 8007af4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007af6:	e7b5      	b.n	8007a64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007af8:	4b17      	ldr	r3, [pc, #92]	; (8007b58 <xTaskIncrementTick+0x168>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afe:	4915      	ldr	r1, [pc, #84]	; (8007b54 <xTaskIncrementTick+0x164>)
 8007b00:	4613      	mov	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	440b      	add	r3, r1
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d901      	bls.n	8007b14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b10:	2301      	movs	r3, #1
 8007b12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b14:	4b11      	ldr	r3, [pc, #68]	; (8007b5c <xTaskIncrementTick+0x16c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d007      	beq.n	8007b2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	617b      	str	r3, [r7, #20]
 8007b20:	e004      	b.n	8007b2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b22:	4b0f      	ldr	r3, [pc, #60]	; (8007b60 <xTaskIncrementTick+0x170>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3301      	adds	r3, #1
 8007b28:	4a0d      	ldr	r2, [pc, #52]	; (8007b60 <xTaskIncrementTick+0x170>)
 8007b2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b2c:	697b      	ldr	r3, [r7, #20]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000e48 	.word	0x20000e48
 8007b3c:	20000e24 	.word	0x20000e24
 8007b40:	20000dd8 	.word	0x20000dd8
 8007b44:	20000ddc 	.word	0x20000ddc
 8007b48:	20000e38 	.word	0x20000e38
 8007b4c:	20000e40 	.word	0x20000e40
 8007b50:	20000e28 	.word	0x20000e28
 8007b54:	20000950 	.word	0x20000950
 8007b58:	2000094c 	.word	0x2000094c
 8007b5c:	20000e34 	.word	0x20000e34
 8007b60:	20000e30 	.word	0x20000e30

08007b64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b6a:	4b28      	ldr	r3, [pc, #160]	; (8007c0c <vTaskSwitchContext+0xa8>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b72:	4b27      	ldr	r3, [pc, #156]	; (8007c10 <vTaskSwitchContext+0xac>)
 8007b74:	2201      	movs	r2, #1
 8007b76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b78:	e041      	b.n	8007bfe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007b7a:	4b25      	ldr	r3, [pc, #148]	; (8007c10 <vTaskSwitchContext+0xac>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b80:	4b24      	ldr	r3, [pc, #144]	; (8007c14 <vTaskSwitchContext+0xb0>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	60fb      	str	r3, [r7, #12]
 8007b86:	e010      	b.n	8007baa <vTaskSwitchContext+0x46>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <vTaskSwitchContext+0x40>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	607b      	str	r3, [r7, #4]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <vTaskSwitchContext+0x3e>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	491b      	ldr	r1, [pc, #108]	; (8007c18 <vTaskSwitchContext+0xb4>)
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0e4      	beq.n	8007b88 <vTaskSwitchContext+0x24>
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4a13      	ldr	r2, [pc, #76]	; (8007c18 <vTaskSwitchContext+0xb4>)
 8007bca:	4413      	add	r3, r2
 8007bcc:	60bb      	str	r3, [r7, #8]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	605a      	str	r2, [r3, #4]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	3308      	adds	r3, #8
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d104      	bne.n	8007bee <vTaskSwitchContext+0x8a>
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	605a      	str	r2, [r3, #4]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	4a09      	ldr	r2, [pc, #36]	; (8007c1c <vTaskSwitchContext+0xb8>)
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	4a06      	ldr	r2, [pc, #24]	; (8007c14 <vTaskSwitchContext+0xb0>)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6013      	str	r3, [r2, #0]
}
 8007bfe:	bf00      	nop
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	20000e48 	.word	0x20000e48
 8007c10:	20000e34 	.word	0x20000e34
 8007c14:	20000e28 	.word	0x20000e28
 8007c18:	20000950 	.word	0x20000950
 8007c1c:	2000094c 	.word	0x2000094c

08007c20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10a      	bne.n	8007c46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	60fb      	str	r3, [r7, #12]
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c46:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <vTaskPlaceOnEventList+0x44>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3318      	adds	r3, #24
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7fe fc6b 	bl	800652a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c54:	2101      	movs	r1, #1
 8007c56:	6838      	ldr	r0, [r7, #0]
 8007c58:	f000 fb7a 	bl	8008350 <prvAddCurrentTaskToDelayedList>
}
 8007c5c:	bf00      	nop
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	2000094c 	.word	0x2000094c

08007c68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10a      	bne.n	8007c90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	617b      	str	r3, [r7, #20]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c90:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <vTaskPlaceOnEventListRestricted+0x54>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3318      	adds	r3, #24
 8007c96:	4619      	mov	r1, r3
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f7fe fc22 	bl	80064e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	68b8      	ldr	r0, [r7, #8]
 8007cae:	f000 fb4f 	bl	8008350 <prvAddCurrentTaskToDelayedList>
	}
 8007cb2:	bf00      	nop
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	2000094c 	.word	0x2000094c

08007cc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10a      	bne.n	8007cec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	60fb      	str	r3, [r7, #12]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	3318      	adds	r3, #24
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe fc53 	bl	800659c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cf6:	4b1e      	ldr	r3, [pc, #120]	; (8007d70 <xTaskRemoveFromEventList+0xb0>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d11d      	bne.n	8007d3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	3304      	adds	r3, #4
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fc4a 	bl	800659c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d0c:	4b19      	ldr	r3, [pc, #100]	; (8007d74 <xTaskRemoveFromEventList+0xb4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d903      	bls.n	8007d1c <xTaskRemoveFromEventList+0x5c>
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d18:	4a16      	ldr	r2, [pc, #88]	; (8007d74 <xTaskRemoveFromEventList+0xb4>)
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4a13      	ldr	r2, [pc, #76]	; (8007d78 <xTaskRemoveFromEventList+0xb8>)
 8007d2a:	441a      	add	r2, r3
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	4619      	mov	r1, r3
 8007d32:	4610      	mov	r0, r2
 8007d34:	f7fe fbd5 	bl	80064e2 <vListInsertEnd>
 8007d38:	e005      	b.n	8007d46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	3318      	adds	r3, #24
 8007d3e:	4619      	mov	r1, r3
 8007d40:	480e      	ldr	r0, [pc, #56]	; (8007d7c <xTaskRemoveFromEventList+0xbc>)
 8007d42:	f7fe fbce 	bl	80064e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <xTaskRemoveFromEventList+0xc0>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d905      	bls.n	8007d60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d54:	2301      	movs	r3, #1
 8007d56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d58:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <xTaskRemoveFromEventList+0xc4>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e001      	b.n	8007d64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d60:	2300      	movs	r3, #0
 8007d62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d64:	697b      	ldr	r3, [r7, #20]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000e48 	.word	0x20000e48
 8007d74:	20000e28 	.word	0x20000e28
 8007d78:	20000950 	.word	0x20000950
 8007d7c:	20000de0 	.word	0x20000de0
 8007d80:	2000094c 	.word	0x2000094c
 8007d84:	20000e34 	.word	0x20000e34

08007d88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d90:	4b06      	ldr	r3, [pc, #24]	; (8007dac <vTaskInternalSetTimeOutState+0x24>)
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <vTaskInternalSetTimeOutState+0x28>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	605a      	str	r2, [r3, #4]
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	20000e38 	.word	0x20000e38
 8007db0:	20000e24 	.word	0x20000e24

08007db4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10a      	bne.n	8007dda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	613b      	str	r3, [r7, #16]
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	60fb      	str	r3, [r7, #12]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007df6:	f000 ff7d 	bl	8008cf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dfa:	4b1d      	ldr	r3, [pc, #116]	; (8007e70 <xTaskCheckForTimeOut+0xbc>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e12:	d102      	bne.n	8007e1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e14:	2300      	movs	r3, #0
 8007e16:	61fb      	str	r3, [r7, #28]
 8007e18:	e023      	b.n	8007e62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	4b15      	ldr	r3, [pc, #84]	; (8007e74 <xTaskCheckForTimeOut+0xc0>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d007      	beq.n	8007e36 <xTaskCheckForTimeOut+0x82>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d302      	bcc.n	8007e36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e30:	2301      	movs	r3, #1
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	e015      	b.n	8007e62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d20b      	bcs.n	8007e58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	1ad2      	subs	r2, r2, r3
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff ff9b 	bl	8007d88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e52:	2300      	movs	r3, #0
 8007e54:	61fb      	str	r3, [r7, #28]
 8007e56:	e004      	b.n	8007e62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e62:	f000 ff77 	bl	8008d54 <vPortExitCritical>

	return xReturn;
 8007e66:	69fb      	ldr	r3, [r7, #28]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3720      	adds	r7, #32
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	20000e24 	.word	0x20000e24
 8007e74:	20000e38 	.word	0x20000e38

08007e78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e7c:	4b03      	ldr	r3, [pc, #12]	; (8007e8c <vTaskMissedYield+0x14>)
 8007e7e:	2201      	movs	r2, #1
 8007e80:	601a      	str	r2, [r3, #0]
}
 8007e82:	bf00      	nop
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	20000e34 	.word	0x20000e34

08007e90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e98:	f000 f852 	bl	8007f40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e9c:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <prvIdleTask+0x28>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d9f9      	bls.n	8007e98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <prvIdleTask+0x2c>)
 8007ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007eb4:	e7f0      	b.n	8007e98 <prvIdleTask+0x8>
 8007eb6:	bf00      	nop
 8007eb8:	20000950 	.word	0x20000950
 8007ebc:	e000ed04 	.word	0xe000ed04

08007ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	607b      	str	r3, [r7, #4]
 8007eca:	e00c      	b.n	8007ee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4a12      	ldr	r2, [pc, #72]	; (8007f20 <prvInitialiseTaskLists+0x60>)
 8007ed8:	4413      	add	r3, r2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe fad4 	bl	8006488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2b37      	cmp	r3, #55	; 0x37
 8007eea:	d9ef      	bls.n	8007ecc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007eec:	480d      	ldr	r0, [pc, #52]	; (8007f24 <prvInitialiseTaskLists+0x64>)
 8007eee:	f7fe facb 	bl	8006488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ef2:	480d      	ldr	r0, [pc, #52]	; (8007f28 <prvInitialiseTaskLists+0x68>)
 8007ef4:	f7fe fac8 	bl	8006488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ef8:	480c      	ldr	r0, [pc, #48]	; (8007f2c <prvInitialiseTaskLists+0x6c>)
 8007efa:	f7fe fac5 	bl	8006488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007efe:	480c      	ldr	r0, [pc, #48]	; (8007f30 <prvInitialiseTaskLists+0x70>)
 8007f00:	f7fe fac2 	bl	8006488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f04:	480b      	ldr	r0, [pc, #44]	; (8007f34 <prvInitialiseTaskLists+0x74>)
 8007f06:	f7fe fabf 	bl	8006488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f0a:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <prvInitialiseTaskLists+0x78>)
 8007f0c:	4a05      	ldr	r2, [pc, #20]	; (8007f24 <prvInitialiseTaskLists+0x64>)
 8007f0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f10:	4b0a      	ldr	r3, [pc, #40]	; (8007f3c <prvInitialiseTaskLists+0x7c>)
 8007f12:	4a05      	ldr	r2, [pc, #20]	; (8007f28 <prvInitialiseTaskLists+0x68>)
 8007f14:	601a      	str	r2, [r3, #0]
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000950 	.word	0x20000950
 8007f24:	20000db0 	.word	0x20000db0
 8007f28:	20000dc4 	.word	0x20000dc4
 8007f2c:	20000de0 	.word	0x20000de0
 8007f30:	20000df4 	.word	0x20000df4
 8007f34:	20000e0c 	.word	0x20000e0c
 8007f38:	20000dd8 	.word	0x20000dd8
 8007f3c:	20000ddc 	.word	0x20000ddc

08007f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f46:	e019      	b.n	8007f7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f48:	f000 fed4 	bl	8008cf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f4c:	4b10      	ldr	r3, [pc, #64]	; (8007f90 <prvCheckTasksWaitingTermination+0x50>)
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fe fb1f 	bl	800659c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f5e:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <prvCheckTasksWaitingTermination+0x54>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	4a0b      	ldr	r2, [pc, #44]	; (8007f94 <prvCheckTasksWaitingTermination+0x54>)
 8007f66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f68:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <prvCheckTasksWaitingTermination+0x58>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	4a0a      	ldr	r2, [pc, #40]	; (8007f98 <prvCheckTasksWaitingTermination+0x58>)
 8007f70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f72:	f000 feef 	bl	8008d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f810 	bl	8007f9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f7c:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <prvCheckTasksWaitingTermination+0x58>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1e1      	bne.n	8007f48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20000df4 	.word	0x20000df4
 8007f94:	20000e20 	.word	0x20000e20
 8007f98:	20000e08 	.word	0x20000e08

08007f9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d108      	bne.n	8007fc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f001 f88c 	bl	80090d0 <vPortFree>
				vPortFree( pxTCB );
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 f889 	bl	80090d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fbe:	e018      	b.n	8007ff2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d103      	bne.n	8007fd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 f880 	bl	80090d0 <vPortFree>
	}
 8007fd0:	e00f      	b.n	8007ff2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d00a      	beq.n	8007ff2 <prvDeleteTCB+0x56>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	60fb      	str	r3, [r7, #12]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <prvDeleteTCB+0x54>
	}
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008002:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <prvResetNextTaskUnblockTime+0x38>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800800c:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <prvResetNextTaskUnblockTime+0x3c>)
 800800e:	f04f 32ff 	mov.w	r2, #4294967295
 8008012:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008014:	e008      	b.n	8008028 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008016:	4b07      	ldr	r3, [pc, #28]	; (8008034 <prvResetNextTaskUnblockTime+0x38>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	4a04      	ldr	r2, [pc, #16]	; (8008038 <prvResetNextTaskUnblockTime+0x3c>)
 8008026:	6013      	str	r3, [r2, #0]
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	20000dd8 	.word	0x20000dd8
 8008038:	20000e40 	.word	0x20000e40

0800803c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008042:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <xTaskGetSchedulerState+0x34>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d102      	bne.n	8008050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800804a:	2301      	movs	r3, #1
 800804c:	607b      	str	r3, [r7, #4]
 800804e:	e008      	b.n	8008062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008050:	4b08      	ldr	r3, [pc, #32]	; (8008074 <xTaskGetSchedulerState+0x38>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d102      	bne.n	800805e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008058:	2302      	movs	r3, #2
 800805a:	607b      	str	r3, [r7, #4]
 800805c:	e001      	b.n	8008062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800805e:	2300      	movs	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008062:	687b      	ldr	r3, [r7, #4]
	}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	20000e2c 	.word	0x20000e2c
 8008074:	20000e48 	.word	0x20000e48

08008078 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d051      	beq.n	8008132 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008092:	4b2a      	ldr	r3, [pc, #168]	; (800813c <xTaskPriorityInherit+0xc4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	429a      	cmp	r2, r3
 800809a:	d241      	bcs.n	8008120 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	db06      	blt.n	80080b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a4:	4b25      	ldr	r3, [pc, #148]	; (800813c <xTaskPriorityInherit+0xc4>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	6959      	ldr	r1, [r3, #20]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ba:	4613      	mov	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4a1f      	ldr	r2, [pc, #124]	; (8008140 <xTaskPriorityInherit+0xc8>)
 80080c4:	4413      	add	r3, r2
 80080c6:	4299      	cmp	r1, r3
 80080c8:	d122      	bne.n	8008110 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	3304      	adds	r3, #4
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe fa64 	bl	800659c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080d4:	4b19      	ldr	r3, [pc, #100]	; (800813c <xTaskPriorityInherit+0xc4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e2:	4b18      	ldr	r3, [pc, #96]	; (8008144 <xTaskPriorityInherit+0xcc>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d903      	bls.n	80080f2 <xTaskPriorityInherit+0x7a>
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	4a15      	ldr	r2, [pc, #84]	; (8008144 <xTaskPriorityInherit+0xcc>)
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4a10      	ldr	r2, [pc, #64]	; (8008140 <xTaskPriorityInherit+0xc8>)
 8008100:	441a      	add	r2, r3
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7fe f9ea 	bl	80064e2 <vListInsertEnd>
 800810e:	e004      	b.n	800811a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008110:	4b0a      	ldr	r3, [pc, #40]	; (800813c <xTaskPriorityInherit+0xc4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800811a:	2301      	movs	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	e008      	b.n	8008132 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <xTaskPriorityInherit+0xc4>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	429a      	cmp	r2, r3
 800812c:	d201      	bcs.n	8008132 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800812e:	2301      	movs	r3, #1
 8008130:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008132:	68fb      	ldr	r3, [r7, #12]
	}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	2000094c 	.word	0x2000094c
 8008140:	20000950 	.word	0x20000950
 8008144:	20000e28 	.word	0x20000e28

08008148 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008154:	2300      	movs	r3, #0
 8008156:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d056      	beq.n	800820c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800815e:	4b2e      	ldr	r3, [pc, #184]	; (8008218 <xTaskPriorityDisinherit+0xd0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	429a      	cmp	r2, r3
 8008166:	d00a      	beq.n	800817e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	60fb      	str	r3, [r7, #12]
}
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	60bb      	str	r3, [r7, #8]
}
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a0:	1e5a      	subs	r2, r3, #1
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d02c      	beq.n	800820c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d128      	bne.n	800820c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	3304      	adds	r3, #4
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe f9ec 	bl	800659c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081dc:	4b0f      	ldr	r3, [pc, #60]	; (800821c <xTaskPriorityDisinherit+0xd4>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d903      	bls.n	80081ec <xTaskPriorityDisinherit+0xa4>
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	4a0c      	ldr	r2, [pc, #48]	; (800821c <xTaskPriorityDisinherit+0xd4>)
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4a09      	ldr	r2, [pc, #36]	; (8008220 <xTaskPriorityDisinherit+0xd8>)
 80081fa:	441a      	add	r2, r3
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3304      	adds	r3, #4
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f7fe f96d 	bl	80064e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008208:	2301      	movs	r3, #1
 800820a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800820c:	697b      	ldr	r3, [r7, #20]
	}
 800820e:	4618      	mov	r0, r3
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	2000094c 	.word	0x2000094c
 800821c:	20000e28 	.word	0x20000e28
 8008220:	20000950 	.word	0x20000950

08008224 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008232:	2301      	movs	r3, #1
 8008234:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d06a      	beq.n	8008312 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	60fb      	str	r3, [r7, #12]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d902      	bls.n	800826a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	61fb      	str	r3, [r7, #28]
 8008268:	e002      	b.n	8008270 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800826e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	69fa      	ldr	r2, [r7, #28]
 8008276:	429a      	cmp	r2, r3
 8008278:	d04b      	beq.n	8008312 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	429a      	cmp	r2, r3
 8008282:	d146      	bne.n	8008312 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008284:	4b25      	ldr	r3, [pc, #148]	; (800831c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	429a      	cmp	r2, r3
 800828c:	d10a      	bne.n	80082a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	60bb      	str	r3, [r7, #8]
}
 80082a0:	bf00      	nop
 80082a2:	e7fe      	b.n	80082a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	69fa      	ldr	r2, [r7, #28]
 80082ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	db04      	blt.n	80082c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	6959      	ldr	r1, [r3, #20]
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4a13      	ldr	r2, [pc, #76]	; (8008320 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80082d2:	4413      	add	r3, r2
 80082d4:	4299      	cmp	r1, r3
 80082d6:	d11c      	bne.n	8008312 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	3304      	adds	r3, #4
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe f95d 	bl	800659c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e6:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d903      	bls.n	80082f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f2:	4a0c      	ldr	r2, [pc, #48]	; (8008324 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fa:	4613      	mov	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4a07      	ldr	r2, [pc, #28]	; (8008320 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008304:	441a      	add	r2, r3
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	3304      	adds	r3, #4
 800830a:	4619      	mov	r1, r3
 800830c:	4610      	mov	r0, r2
 800830e:	f7fe f8e8 	bl	80064e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008312:	bf00      	nop
 8008314:	3720      	adds	r7, #32
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	2000094c 	.word	0x2000094c
 8008320:	20000950 	.word	0x20000950
 8008324:	20000e28 	.word	0x20000e28

08008328 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800832c:	4b07      	ldr	r3, [pc, #28]	; (800834c <pvTaskIncrementMutexHeldCount+0x24>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d004      	beq.n	800833e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <pvTaskIncrementMutexHeldCount+0x24>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800833a:	3201      	adds	r2, #1
 800833c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800833e:	4b03      	ldr	r3, [pc, #12]	; (800834c <pvTaskIncrementMutexHeldCount+0x24>)
 8008340:	681b      	ldr	r3, [r3, #0]
	}
 8008342:	4618      	mov	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	2000094c 	.word	0x2000094c

08008350 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800835a:	4b21      	ldr	r3, [pc, #132]	; (80083e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008360:	4b20      	ldr	r3, [pc, #128]	; (80083e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3304      	adds	r3, #4
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe f918 	bl	800659c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008372:	d10a      	bne.n	800838a <prvAddCurrentTaskToDelayedList+0x3a>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d007      	beq.n	800838a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800837a:	4b1a      	ldr	r3, [pc, #104]	; (80083e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3304      	adds	r3, #4
 8008380:	4619      	mov	r1, r3
 8008382:	4819      	ldr	r0, [pc, #100]	; (80083e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008384:	f7fe f8ad 	bl	80064e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008388:	e026      	b.n	80083d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4413      	add	r3, r2
 8008390:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008392:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d209      	bcs.n	80083b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083a2:	4b12      	ldr	r3, [pc, #72]	; (80083ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3304      	adds	r3, #4
 80083ac:	4619      	mov	r1, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	f7fe f8bb 	bl	800652a <vListInsert>
}
 80083b4:	e010      	b.n	80083d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083b6:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3304      	adds	r3, #4
 80083c0:	4619      	mov	r1, r3
 80083c2:	4610      	mov	r0, r2
 80083c4:	f7fe f8b1 	bl	800652a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083c8:	4b0a      	ldr	r3, [pc, #40]	; (80083f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d202      	bcs.n	80083d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80083d2:	4a08      	ldr	r2, [pc, #32]	; (80083f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	6013      	str	r3, [r2, #0]
}
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20000e24 	.word	0x20000e24
 80083e4:	2000094c 	.word	0x2000094c
 80083e8:	20000e0c 	.word	0x20000e0c
 80083ec:	20000ddc 	.word	0x20000ddc
 80083f0:	20000dd8 	.word	0x20000dd8
 80083f4:	20000e40 	.word	0x20000e40

080083f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08a      	sub	sp, #40	; 0x28
 80083fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80083fe:	2300      	movs	r3, #0
 8008400:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008402:	f000 fb07 	bl	8008a14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008406:	4b1c      	ldr	r3, [pc, #112]	; (8008478 <xTimerCreateTimerTask+0x80>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d021      	beq.n	8008452 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800840e:	2300      	movs	r3, #0
 8008410:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008412:	2300      	movs	r3, #0
 8008414:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008416:	1d3a      	adds	r2, r7, #4
 8008418:	f107 0108 	add.w	r1, r7, #8
 800841c:	f107 030c 	add.w	r3, r7, #12
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe f817 	bl	8006454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	9202      	str	r2, [sp, #8]
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	2302      	movs	r3, #2
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	2300      	movs	r3, #0
 8008436:	460a      	mov	r2, r1
 8008438:	4910      	ldr	r1, [pc, #64]	; (800847c <xTimerCreateTimerTask+0x84>)
 800843a:	4811      	ldr	r0, [pc, #68]	; (8008480 <xTimerCreateTimerTask+0x88>)
 800843c:	f7fe ffe0 	bl	8007400 <xTaskCreateStatic>
 8008440:	4603      	mov	r3, r0
 8008442:	4a10      	ldr	r2, [pc, #64]	; (8008484 <xTimerCreateTimerTask+0x8c>)
 8008444:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008446:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <xTimerCreateTimerTask+0x8c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800844e:	2301      	movs	r3, #1
 8008450:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10a      	bne.n	800846e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	613b      	str	r3, [r7, #16]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800846e:	697b      	ldr	r3, [r7, #20]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000e7c 	.word	0x20000e7c
 800847c:	0800b498 	.word	0x0800b498
 8008480:	080085bd 	.word	0x080085bd
 8008484:	20000e80 	.word	0x20000e80

08008488 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08a      	sub	sp, #40	; 0x28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008496:	2300      	movs	r3, #0
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10a      	bne.n	80084b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	623b      	str	r3, [r7, #32]
}
 80084b2:	bf00      	nop
 80084b4:	e7fe      	b.n	80084b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80084b6:	4b1a      	ldr	r3, [pc, #104]	; (8008520 <xTimerGenericCommand+0x98>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d02a      	beq.n	8008514 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b05      	cmp	r3, #5
 80084ce:	dc18      	bgt.n	8008502 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80084d0:	f7ff fdb4 	bl	800803c <xTaskGetSchedulerState>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d109      	bne.n	80084ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80084da:	4b11      	ldr	r3, [pc, #68]	; (8008520 <xTimerGenericCommand+0x98>)
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	f107 0110 	add.w	r1, r7, #16
 80084e2:	2300      	movs	r3, #0
 80084e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084e6:	f7fe f9f3 	bl	80068d0 <xQueueGenericSend>
 80084ea:	6278      	str	r0, [r7, #36]	; 0x24
 80084ec:	e012      	b.n	8008514 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084ee:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <xTimerGenericCommand+0x98>)
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	f107 0110 	add.w	r1, r7, #16
 80084f6:	2300      	movs	r3, #0
 80084f8:	2200      	movs	r2, #0
 80084fa:	f7fe f9e9 	bl	80068d0 <xQueueGenericSend>
 80084fe:	6278      	str	r0, [r7, #36]	; 0x24
 8008500:	e008      	b.n	8008514 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008502:	4b07      	ldr	r3, [pc, #28]	; (8008520 <xTimerGenericCommand+0x98>)
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f107 0110 	add.w	r1, r7, #16
 800850a:	2300      	movs	r3, #0
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	f7fe fadd 	bl	8006acc <xQueueGenericSendFromISR>
 8008512:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008516:	4618      	mov	r0, r3
 8008518:	3728      	adds	r7, #40	; 0x28
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000e7c 	.word	0x20000e7c

08008524 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af02      	add	r7, sp, #8
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800852e:	4b22      	ldr	r3, [pc, #136]	; (80085b8 <prvProcessExpiredTimer+0x94>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	3304      	adds	r3, #4
 800853c:	4618      	mov	r0, r3
 800853e:	f7fe f82d 	bl	800659c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b00      	cmp	r3, #0
 800854e:	d022      	beq.n	8008596 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	699a      	ldr	r2, [r3, #24]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	18d1      	adds	r1, r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	6978      	ldr	r0, [r7, #20]
 800855e:	f000 f8d1 	bl	8008704 <prvInsertTimerInActiveList>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01f      	beq.n	80085a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008568:	2300      	movs	r3, #0
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	2300      	movs	r3, #0
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	2100      	movs	r1, #0
 8008572:	6978      	ldr	r0, [r7, #20]
 8008574:	f7ff ff88 	bl	8008488 <xTimerGenericCommand>
 8008578:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d113      	bne.n	80085a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	60fb      	str	r3, [r7, #12]
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800859c:	f023 0301 	bic.w	r3, r3, #1
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	6a1b      	ldr	r3, [r3, #32]
 80085ac:	6978      	ldr	r0, [r7, #20]
 80085ae:	4798      	blx	r3
}
 80085b0:	bf00      	nop
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	20000e74 	.word	0x20000e74

080085bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085c4:	f107 0308 	add.w	r3, r7, #8
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 f857 	bl	800867c <prvGetNextExpireTime>
 80085ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4619      	mov	r1, r3
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 f803 	bl	80085e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80085da:	f000 f8d5 	bl	8008788 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085de:	e7f1      	b.n	80085c4 <prvTimerTask+0x8>

080085e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80085ea:	f7ff f945 	bl	8007878 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085ee:	f107 0308 	add.w	r3, r7, #8
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 f866 	bl	80086c4 <prvSampleTimeNow>
 80085f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d130      	bne.n	8008662 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10a      	bne.n	800861c <prvProcessTimerOrBlockTask+0x3c>
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	429a      	cmp	r2, r3
 800860c:	d806      	bhi.n	800861c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800860e:	f7ff f941 	bl	8007894 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008612:	68f9      	ldr	r1, [r7, #12]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff ff85 	bl	8008524 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800861a:	e024      	b.n	8008666 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d008      	beq.n	8008634 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008622:	4b13      	ldr	r3, [pc, #76]	; (8008670 <prvProcessTimerOrBlockTask+0x90>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <prvProcessTimerOrBlockTask+0x50>
 800862c:	2301      	movs	r3, #1
 800862e:	e000      	b.n	8008632 <prvProcessTimerOrBlockTask+0x52>
 8008630:	2300      	movs	r3, #0
 8008632:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008634:	4b0f      	ldr	r3, [pc, #60]	; (8008674 <prvProcessTimerOrBlockTask+0x94>)
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	4619      	mov	r1, r3
 8008642:	f7fe fea9 	bl	8007398 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008646:	f7ff f925 	bl	8007894 <xTaskResumeAll>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008650:	4b09      	ldr	r3, [pc, #36]	; (8008678 <prvProcessTimerOrBlockTask+0x98>)
 8008652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
}
 8008660:	e001      	b.n	8008666 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008662:	f7ff f917 	bl	8007894 <xTaskResumeAll>
}
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000e78 	.word	0x20000e78
 8008674:	20000e7c 	.word	0x20000e7c
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008684:	4b0e      	ldr	r3, [pc, #56]	; (80086c0 <prvGetNextExpireTime+0x44>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <prvGetNextExpireTime+0x16>
 800868e:	2201      	movs	r2, #1
 8008690:	e000      	b.n	8008694 <prvGetNextExpireTime+0x18>
 8008692:	2200      	movs	r2, #0
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d105      	bne.n	80086ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <prvGetNextExpireTime+0x44>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	e001      	b.n	80086b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80086b0:	68fb      	ldr	r3, [r7, #12]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	20000e74 	.word	0x20000e74

080086c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80086cc:	f7ff f980 	bl	80079d0 <xTaskGetTickCount>
 80086d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80086d2:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <prvSampleTimeNow+0x3c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d205      	bcs.n	80086e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80086dc:	f000 f936 	bl	800894c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	e002      	b.n	80086ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086ee:	4a04      	ldr	r2, [pc, #16]	; (8008700 <prvSampleTimeNow+0x3c>)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80086f4:	68fb      	ldr	r3, [r7, #12]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20000e84 	.word	0x20000e84

08008704 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	429a      	cmp	r2, r3
 8008728:	d812      	bhi.n	8008750 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	1ad2      	subs	r2, r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	429a      	cmp	r2, r3
 8008736:	d302      	bcc.n	800873e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008738:	2301      	movs	r3, #1
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	e01b      	b.n	8008776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800873e:	4b10      	ldr	r3, [pc, #64]	; (8008780 <prvInsertTimerInActiveList+0x7c>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3304      	adds	r3, #4
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f7fd feee 	bl	800652a <vListInsert>
 800874e:	e012      	b.n	8008776 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	429a      	cmp	r2, r3
 8008756:	d206      	bcs.n	8008766 <prvInsertTimerInActiveList+0x62>
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	429a      	cmp	r2, r3
 800875e:	d302      	bcc.n	8008766 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008760:	2301      	movs	r3, #1
 8008762:	617b      	str	r3, [r7, #20]
 8008764:	e007      	b.n	8008776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008766:	4b07      	ldr	r3, [pc, #28]	; (8008784 <prvInsertTimerInActiveList+0x80>)
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3304      	adds	r3, #4
 800876e:	4619      	mov	r1, r3
 8008770:	4610      	mov	r0, r2
 8008772:	f7fd feda 	bl	800652a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008776:	697b      	ldr	r3, [r7, #20]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20000e78 	.word	0x20000e78
 8008784:	20000e74 	.word	0x20000e74

08008788 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08e      	sub	sp, #56	; 0x38
 800878c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800878e:	e0ca      	b.n	8008926 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	da18      	bge.n	80087c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008796:	1d3b      	adds	r3, r7, #4
 8008798:	3304      	adds	r3, #4
 800879a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800879c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10a      	bne.n	80087b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	61fb      	str	r3, [r7, #28]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80087b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087be:	6850      	ldr	r0, [r2, #4]
 80087c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087c2:	6892      	ldr	r2, [r2, #8]
 80087c4:	4611      	mov	r1, r2
 80087c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f2c0 80aa 	blt.w	8008924 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	3304      	adds	r3, #4
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fd fedb 	bl	800659c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087e6:	463b      	mov	r3, r7
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff ff6b 	bl	80086c4 <prvSampleTimeNow>
 80087ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b09      	cmp	r3, #9
 80087f4:	f200 8097 	bhi.w	8008926 <prvProcessReceivedCommands+0x19e>
 80087f8:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <prvProcessReceivedCommands+0x78>)
 80087fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fe:	bf00      	nop
 8008800:	08008829 	.word	0x08008829
 8008804:	08008829 	.word	0x08008829
 8008808:	08008829 	.word	0x08008829
 800880c:	0800889d 	.word	0x0800889d
 8008810:	080088b1 	.word	0x080088b1
 8008814:	080088fb 	.word	0x080088fb
 8008818:	08008829 	.word	0x08008829
 800881c:	08008829 	.word	0x08008829
 8008820:	0800889d 	.word	0x0800889d
 8008824:	080088b1 	.word	0x080088b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800882e:	f043 0301 	orr.w	r3, r3, #1
 8008832:	b2da      	uxtb	r2, r3
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	18d1      	adds	r1, r2, r3
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008848:	f7ff ff5c 	bl	8008704 <prvInsertTimerInActiveList>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d069      	beq.n	8008926 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008858:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d05e      	beq.n	8008926 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	441a      	add	r2, r3
 8008870:	2300      	movs	r3, #0
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	2300      	movs	r3, #0
 8008876:	2100      	movs	r1, #0
 8008878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800887a:	f7ff fe05 	bl	8008488 <xTimerGenericCommand>
 800887e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d14f      	bne.n	8008926 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	61bb      	str	r3, [r7, #24]
}
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a2:	f023 0301 	bic.w	r3, r3, #1
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80088ae:	e03a      	b.n	8008926 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088b6:	f043 0301 	orr.w	r3, r3, #1
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	617b      	str	r3, [r7, #20]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	18d1      	adds	r1, r2, r3
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f4:	f7ff ff06 	bl	8008704 <prvInsertTimerInActiveList>
					break;
 80088f8:	e015      	b.n	8008926 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d103      	bne.n	8008910 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800890a:	f000 fbe1 	bl	80090d0 <vPortFree>
 800890e:	e00a      	b.n	8008926 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008916:	f023 0301 	bic.w	r3, r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008922:	e000      	b.n	8008926 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008924:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008926:	4b08      	ldr	r3, [pc, #32]	; (8008948 <prvProcessReceivedCommands+0x1c0>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	1d39      	adds	r1, r7, #4
 800892c:	2200      	movs	r2, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe f9f4 	bl	8006d1c <xQueueReceive>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	f47f af2a 	bne.w	8008790 <prvProcessReceivedCommands+0x8>
	}
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	3730      	adds	r7, #48	; 0x30
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20000e7c 	.word	0x20000e7c

0800894c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008952:	e048      	b.n	80089e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008954:	4b2d      	ldr	r3, [pc, #180]	; (8008a0c <prvSwitchTimerLists+0xc0>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800895e:	4b2b      	ldr	r3, [pc, #172]	; (8008a0c <prvSwitchTimerLists+0xc0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3304      	adds	r3, #4
 800896c:	4618      	mov	r0, r3
 800896e:	f7fd fe15 	bl	800659c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b00      	cmp	r3, #0
 8008986:	d02e      	beq.n	80089e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4413      	add	r3, r2
 8008990:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	429a      	cmp	r2, r3
 8008998:	d90e      	bls.n	80089b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089a6:	4b19      	ldr	r3, [pc, #100]	; (8008a0c <prvSwitchTimerLists+0xc0>)
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4619      	mov	r1, r3
 80089b0:	4610      	mov	r0, r2
 80089b2:	f7fd fdba 	bl	800652a <vListInsert>
 80089b6:	e016      	b.n	80089e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089b8:	2300      	movs	r3, #0
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	2300      	movs	r3, #0
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	2100      	movs	r1, #0
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f7ff fd60 	bl	8008488 <xTimerGenericCommand>
 80089c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10a      	bne.n	80089e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	603b      	str	r3, [r7, #0]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089e6:	4b09      	ldr	r3, [pc, #36]	; (8008a0c <prvSwitchTimerLists+0xc0>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1b1      	bne.n	8008954 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089f0:	4b06      	ldr	r3, [pc, #24]	; (8008a0c <prvSwitchTimerLists+0xc0>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80089f6:	4b06      	ldr	r3, [pc, #24]	; (8008a10 <prvSwitchTimerLists+0xc4>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a04      	ldr	r2, [pc, #16]	; (8008a0c <prvSwitchTimerLists+0xc0>)
 80089fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80089fe:	4a04      	ldr	r2, [pc, #16]	; (8008a10 <prvSwitchTimerLists+0xc4>)
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	6013      	str	r3, [r2, #0]
}
 8008a04:	bf00      	nop
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20000e74 	.word	0x20000e74
 8008a10:	20000e78 	.word	0x20000e78

08008a14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a1a:	f000 f96b 	bl	8008cf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a1e:	4b15      	ldr	r3, [pc, #84]	; (8008a74 <prvCheckForValidListAndQueue+0x60>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d120      	bne.n	8008a68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a26:	4814      	ldr	r0, [pc, #80]	; (8008a78 <prvCheckForValidListAndQueue+0x64>)
 8008a28:	f7fd fd2e 	bl	8006488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a2c:	4813      	ldr	r0, [pc, #76]	; (8008a7c <prvCheckForValidListAndQueue+0x68>)
 8008a2e:	f7fd fd2b 	bl	8006488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a32:	4b13      	ldr	r3, [pc, #76]	; (8008a80 <prvCheckForValidListAndQueue+0x6c>)
 8008a34:	4a10      	ldr	r2, [pc, #64]	; (8008a78 <prvCheckForValidListAndQueue+0x64>)
 8008a36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a38:	4b12      	ldr	r3, [pc, #72]	; (8008a84 <prvCheckForValidListAndQueue+0x70>)
 8008a3a:	4a10      	ldr	r2, [pc, #64]	; (8008a7c <prvCheckForValidListAndQueue+0x68>)
 8008a3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	4b11      	ldr	r3, [pc, #68]	; (8008a88 <prvCheckForValidListAndQueue+0x74>)
 8008a44:	4a11      	ldr	r2, [pc, #68]	; (8008a8c <prvCheckForValidListAndQueue+0x78>)
 8008a46:	2110      	movs	r1, #16
 8008a48:	200a      	movs	r0, #10
 8008a4a:	f7fd fe39 	bl	80066c0 <xQueueGenericCreateStatic>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4a08      	ldr	r2, [pc, #32]	; (8008a74 <prvCheckForValidListAndQueue+0x60>)
 8008a52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a54:	4b07      	ldr	r3, [pc, #28]	; (8008a74 <prvCheckForValidListAndQueue+0x60>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d005      	beq.n	8008a68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a5c:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <prvCheckForValidListAndQueue+0x60>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	490b      	ldr	r1, [pc, #44]	; (8008a90 <prvCheckForValidListAndQueue+0x7c>)
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe fc6e 	bl	8007344 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a68:	f000 f974 	bl	8008d54 <vPortExitCritical>
}
 8008a6c:	bf00      	nop
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000e7c 	.word	0x20000e7c
 8008a78:	20000e4c 	.word	0x20000e4c
 8008a7c:	20000e60 	.word	0x20000e60
 8008a80:	20000e74 	.word	0x20000e74
 8008a84:	20000e78 	.word	0x20000e78
 8008a88:	20000f28 	.word	0x20000f28
 8008a8c:	20000e88 	.word	0x20000e88
 8008a90:	0800b4a0 	.word	0x0800b4a0

08008a94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3b04      	subs	r3, #4
 8008aa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3b04      	subs	r3, #4
 8008ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f023 0201 	bic.w	r2, r3, #1
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3b04      	subs	r3, #4
 8008ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ac4:	4a0c      	ldr	r2, [pc, #48]	; (8008af8 <pxPortInitialiseStack+0x64>)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3b14      	subs	r3, #20
 8008ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3b04      	subs	r3, #4
 8008ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f06f 0202 	mvn.w	r2, #2
 8008ae2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3b20      	subs	r3, #32
 8008ae8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008aea:	68fb      	ldr	r3, [r7, #12]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	08008afd 	.word	0x08008afd

08008afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b06:	4b12      	ldr	r3, [pc, #72]	; (8008b50 <prvTaskExitError+0x54>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0e:	d00a      	beq.n	8008b26 <prvTaskExitError+0x2a>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	60fb      	str	r3, [r7, #12]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <prvTaskExitError+0x28>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	60bb      	str	r3, [r7, #8]
}
 8008b38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b3a:	bf00      	nop
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0fc      	beq.n	8008b3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b42:	bf00      	nop
 8008b44:	bf00      	nop
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	2000000c 	.word	0x2000000c
	...

08008b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b60:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <pxCurrentTCBConst2>)
 8008b62:	6819      	ldr	r1, [r3, #0]
 8008b64:	6808      	ldr	r0, [r1, #0]
 8008b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6a:	f380 8809 	msr	PSP, r0
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f04f 0000 	mov.w	r0, #0
 8008b76:	f380 8811 	msr	BASEPRI, r0
 8008b7a:	4770      	bx	lr
 8008b7c:	f3af 8000 	nop.w

08008b80 <pxCurrentTCBConst2>:
 8008b80:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop

08008b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b88:	4808      	ldr	r0, [pc, #32]	; (8008bac <prvPortStartFirstTask+0x24>)
 8008b8a:	6800      	ldr	r0, [r0, #0]
 8008b8c:	6800      	ldr	r0, [r0, #0]
 8008b8e:	f380 8808 	msr	MSP, r0
 8008b92:	f04f 0000 	mov.w	r0, #0
 8008b96:	f380 8814 	msr	CONTROL, r0
 8008b9a:	b662      	cpsie	i
 8008b9c:	b661      	cpsie	f
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	df00      	svc	0
 8008ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008baa:	bf00      	nop
 8008bac:	e000ed08 	.word	0xe000ed08

08008bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008bb6:	4b46      	ldr	r3, [pc, #280]	; (8008cd0 <xPortStartScheduler+0x120>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a46      	ldr	r2, [pc, #280]	; (8008cd4 <xPortStartScheduler+0x124>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d10a      	bne.n	8008bd6 <xPortStartScheduler+0x26>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	613b      	str	r3, [r7, #16]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008bd6:	4b3e      	ldr	r3, [pc, #248]	; (8008cd0 <xPortStartScheduler+0x120>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a3f      	ldr	r2, [pc, #252]	; (8008cd8 <xPortStartScheduler+0x128>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d10a      	bne.n	8008bf6 <xPortStartScheduler+0x46>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	60fb      	str	r3, [r7, #12]
}
 8008bf2:	bf00      	nop
 8008bf4:	e7fe      	b.n	8008bf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008bf6:	4b39      	ldr	r3, [pc, #228]	; (8008cdc <xPortStartScheduler+0x12c>)
 8008bf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	22ff      	movs	r2, #255	; 0xff
 8008c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	4b31      	ldr	r3, [pc, #196]	; (8008ce0 <xPortStartScheduler+0x130>)
 8008c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c1e:	4b31      	ldr	r3, [pc, #196]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c20:	2207      	movs	r2, #7
 8008c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c24:	e009      	b.n	8008c3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c26:	4b2f      	ldr	r3, [pc, #188]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c42:	2b80      	cmp	r3, #128	; 0x80
 8008c44:	d0ef      	beq.n	8008c26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c46:	4b27      	ldr	r3, [pc, #156]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f1c3 0307 	rsb	r3, r3, #7
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d00a      	beq.n	8008c68 <xPortStartScheduler+0xb8>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	60bb      	str	r3, [r7, #8]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c68:	4b1e      	ldr	r3, [pc, #120]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c72:	4b1c      	ldr	r3, [pc, #112]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c86:	4b18      	ldr	r3, [pc, #96]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a17      	ldr	r2, [pc, #92]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c92:	4b15      	ldr	r3, [pc, #84]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a14      	ldr	r2, [pc, #80]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c9e:	f000 f8dd 	bl	8008e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ca2:	4b12      	ldr	r3, [pc, #72]	; (8008cec <xPortStartScheduler+0x13c>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ca8:	f000 f8fc 	bl	8008ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cac:	4b10      	ldr	r3, [pc, #64]	; (8008cf0 <xPortStartScheduler+0x140>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a0f      	ldr	r2, [pc, #60]	; (8008cf0 <xPortStartScheduler+0x140>)
 8008cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008cb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cb8:	f7ff ff66 	bl	8008b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cbc:	f7fe ff52 	bl	8007b64 <vTaskSwitchContext>
	prvTaskExitError();
 8008cc0:	f7ff ff1c 	bl	8008afc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	e000ed00 	.word	0xe000ed00
 8008cd4:	410fc271 	.word	0x410fc271
 8008cd8:	410fc270 	.word	0x410fc270
 8008cdc:	e000e400 	.word	0xe000e400
 8008ce0:	20000f78 	.word	0x20000f78
 8008ce4:	20000f7c 	.word	0x20000f7c
 8008ce8:	e000ed20 	.word	0xe000ed20
 8008cec:	2000000c 	.word	0x2000000c
 8008cf0:	e000ef34 	.word	0xe000ef34

08008cf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	607b      	str	r3, [r7, #4]
}
 8008d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <vPortEnterCritical+0x58>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3301      	adds	r3, #1
 8008d14:	4a0d      	ldr	r2, [pc, #52]	; (8008d4c <vPortEnterCritical+0x58>)
 8008d16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <vPortEnterCritical+0x58>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d10f      	bne.n	8008d40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d20:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <vPortEnterCritical+0x5c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	603b      	str	r3, [r7, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	e7fe      	b.n	8008d3e <vPortEnterCritical+0x4a>
	}
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	2000000c 	.word	0x2000000c
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d5a:	4b12      	ldr	r3, [pc, #72]	; (8008da4 <vPortExitCritical+0x50>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10a      	bne.n	8008d78 <vPortExitCritical+0x24>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	607b      	str	r3, [r7, #4]
}
 8008d74:	bf00      	nop
 8008d76:	e7fe      	b.n	8008d76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d78:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <vPortExitCritical+0x50>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	4a09      	ldr	r2, [pc, #36]	; (8008da4 <vPortExitCritical+0x50>)
 8008d80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d82:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <vPortExitCritical+0x50>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d105      	bne.n	8008d96 <vPortExitCritical+0x42>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	f383 8811 	msr	BASEPRI, r3
}
 8008d94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	2000000c 	.word	0x2000000c
	...

08008db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008db0:	f3ef 8009 	mrs	r0, PSP
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	4b15      	ldr	r3, [pc, #84]	; (8008e10 <pxCurrentTCBConst>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	f01e 0f10 	tst.w	lr, #16
 8008dc0:	bf08      	it	eq
 8008dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dca:	6010      	str	r0, [r2, #0]
 8008dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008dd4:	f380 8811 	msr	BASEPRI, r0
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f7fe fec0 	bl	8007b64 <vTaskSwitchContext>
 8008de4:	f04f 0000 	mov.w	r0, #0
 8008de8:	f380 8811 	msr	BASEPRI, r0
 8008dec:	bc09      	pop	{r0, r3}
 8008dee:	6819      	ldr	r1, [r3, #0]
 8008df0:	6808      	ldr	r0, [r1, #0]
 8008df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df6:	f01e 0f10 	tst.w	lr, #16
 8008dfa:	bf08      	it	eq
 8008dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e00:	f380 8809 	msr	PSP, r0
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	f3af 8000 	nop.w

08008e10 <pxCurrentTCBConst>:
 8008e10:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop

08008e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	607b      	str	r3, [r7, #4]
}
 8008e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e32:	f7fe fddd 	bl	80079f0 <xTaskIncrementTick>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e3c:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <xPortSysTickHandler+0x40>)
 8008e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	2300      	movs	r3, #0
 8008e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f383 8811 	msr	BASEPRI, r3
}
 8008e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e60:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e66:	4b0b      	ldr	r3, [pc, #44]	; (8008e94 <vPortSetupTimerInterrupt+0x38>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <vPortSetupTimerInterrupt+0x3c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <vPortSetupTimerInterrupt+0x40>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	099b      	lsrs	r3, r3, #6
 8008e78:	4a09      	ldr	r2, [pc, #36]	; (8008ea0 <vPortSetupTimerInterrupt+0x44>)
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e7e:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e80:	2207      	movs	r2, #7
 8008e82:	601a      	str	r2, [r3, #0]
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	e000e010 	.word	0xe000e010
 8008e94:	e000e018 	.word	0xe000e018
 8008e98:	20000000 	.word	0x20000000
 8008e9c:	10624dd3 	.word	0x10624dd3
 8008ea0:	e000e014 	.word	0xe000e014

08008ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008eb4 <vPortEnableVFP+0x10>
 8008ea8:	6801      	ldr	r1, [r0, #0]
 8008eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008eae:	6001      	str	r1, [r0, #0]
 8008eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed88 	.word	0xe000ed88

08008eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ebe:	f3ef 8305 	mrs	r3, IPSR
 8008ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d914      	bls.n	8008ef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008eca:	4a17      	ldr	r2, [pc, #92]	; (8008f28 <vPortValidateInterruptPriority+0x70>)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ed4:	4b15      	ldr	r3, [pc, #84]	; (8008f2c <vPortValidateInterruptPriority+0x74>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	7afa      	ldrb	r2, [r7, #11]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d20a      	bcs.n	8008ef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	607b      	str	r3, [r7, #4]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ef4:	4b0e      	ldr	r3, [pc, #56]	; (8008f30 <vPortValidateInterruptPriority+0x78>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008efc:	4b0d      	ldr	r3, [pc, #52]	; (8008f34 <vPortValidateInterruptPriority+0x7c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d90a      	bls.n	8008f1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	603b      	str	r3, [r7, #0]
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <vPortValidateInterruptPriority+0x60>
	}
 8008f1a:	bf00      	nop
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	e000e3f0 	.word	0xe000e3f0
 8008f2c:	20000f78 	.word	0x20000f78
 8008f30:	e000ed0c 	.word	0xe000ed0c
 8008f34:	20000f7c 	.word	0x20000f7c

08008f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08a      	sub	sp, #40	; 0x28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f44:	f7fe fc98 	bl	8007878 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f48:	4b5b      	ldr	r3, [pc, #364]	; (80090b8 <pvPortMalloc+0x180>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f50:	f000 f920 	bl	8009194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f54:	4b59      	ldr	r3, [pc, #356]	; (80090bc <pvPortMalloc+0x184>)
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f040 8093 	bne.w	8009088 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d01d      	beq.n	8008fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008f68:	2208      	movs	r2, #8
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f003 0307 	and.w	r3, r3, #7
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d014      	beq.n	8008fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f023 0307 	bic.w	r3, r3, #7
 8008f80:	3308      	adds	r3, #8
 8008f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00a      	beq.n	8008fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	617b      	str	r3, [r7, #20]
}
 8008fa0:	bf00      	nop
 8008fa2:	e7fe      	b.n	8008fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d06e      	beq.n	8009088 <pvPortMalloc+0x150>
 8008faa:	4b45      	ldr	r3, [pc, #276]	; (80090c0 <pvPortMalloc+0x188>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d869      	bhi.n	8009088 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008fb4:	4b43      	ldr	r3, [pc, #268]	; (80090c4 <pvPortMalloc+0x18c>)
 8008fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008fb8:	4b42      	ldr	r3, [pc, #264]	; (80090c4 <pvPortMalloc+0x18c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fbe:	e004      	b.n	8008fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d903      	bls.n	8008fdc <pvPortMalloc+0xa4>
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1f1      	bne.n	8008fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008fdc:	4b36      	ldr	r3, [pc, #216]	; (80090b8 <pvPortMalloc+0x180>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d050      	beq.n	8009088 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2208      	movs	r2, #8
 8008fec:	4413      	add	r3, r2
 8008fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	1ad2      	subs	r2, r2, r3
 8009000:	2308      	movs	r3, #8
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	429a      	cmp	r2, r3
 8009006:	d91f      	bls.n	8009048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4413      	add	r3, r2
 800900e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00a      	beq.n	8009030 <pvPortMalloc+0xf8>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	613b      	str	r3, [r7, #16]
}
 800902c:	bf00      	nop
 800902e:	e7fe      	b.n	800902e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	1ad2      	subs	r2, r2, r3
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009042:	69b8      	ldr	r0, [r7, #24]
 8009044:	f000 f908 	bl	8009258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009048:	4b1d      	ldr	r3, [pc, #116]	; (80090c0 <pvPortMalloc+0x188>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	4a1b      	ldr	r2, [pc, #108]	; (80090c0 <pvPortMalloc+0x188>)
 8009054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009056:	4b1a      	ldr	r3, [pc, #104]	; (80090c0 <pvPortMalloc+0x188>)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4b1b      	ldr	r3, [pc, #108]	; (80090c8 <pvPortMalloc+0x190>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	429a      	cmp	r2, r3
 8009060:	d203      	bcs.n	800906a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009062:	4b17      	ldr	r3, [pc, #92]	; (80090c0 <pvPortMalloc+0x188>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a18      	ldr	r2, [pc, #96]	; (80090c8 <pvPortMalloc+0x190>)
 8009068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	4b13      	ldr	r3, [pc, #76]	; (80090bc <pvPortMalloc+0x184>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	431a      	orrs	r2, r3
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	2200      	movs	r2, #0
 800907c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800907e:	4b13      	ldr	r3, [pc, #76]	; (80090cc <pvPortMalloc+0x194>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3301      	adds	r3, #1
 8009084:	4a11      	ldr	r2, [pc, #68]	; (80090cc <pvPortMalloc+0x194>)
 8009086:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009088:	f7fe fc04 	bl	8007894 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <pvPortMalloc+0x174>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	60fb      	str	r3, [r7, #12]
}
 80090a8:	bf00      	nop
 80090aa:	e7fe      	b.n	80090aa <pvPortMalloc+0x172>
	return pvReturn;
 80090ac:	69fb      	ldr	r3, [r7, #28]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3728      	adds	r7, #40	; 0x28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20008c88 	.word	0x20008c88
 80090bc:	20008c9c 	.word	0x20008c9c
 80090c0:	20008c8c 	.word	0x20008c8c
 80090c4:	20008c80 	.word	0x20008c80
 80090c8:	20008c90 	.word	0x20008c90
 80090cc:	20008c94 	.word	0x20008c94

080090d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d04d      	beq.n	800917e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090e2:	2308      	movs	r3, #8
 80090e4:	425b      	negs	r3, r3
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	4413      	add	r3, r2
 80090ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	4b24      	ldr	r3, [pc, #144]	; (8009188 <vPortFree+0xb8>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4013      	ands	r3, r2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10a      	bne.n	8009114 <vPortFree+0x44>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	60fb      	str	r3, [r7, #12]
}
 8009110:	bf00      	nop
 8009112:	e7fe      	b.n	8009112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00a      	beq.n	8009132 <vPortFree+0x62>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	60bb      	str	r3, [r7, #8]
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	4b14      	ldr	r3, [pc, #80]	; (8009188 <vPortFree+0xb8>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4013      	ands	r3, r2
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01e      	beq.n	800917e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d11a      	bne.n	800917e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	4b0e      	ldr	r3, [pc, #56]	; (8009188 <vPortFree+0xb8>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	43db      	mvns	r3, r3
 8009152:	401a      	ands	r2, r3
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009158:	f7fe fb8e 	bl	8007878 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <vPortFree+0xbc>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4413      	add	r3, r2
 8009166:	4a09      	ldr	r2, [pc, #36]	; (800918c <vPortFree+0xbc>)
 8009168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800916a:	6938      	ldr	r0, [r7, #16]
 800916c:	f000 f874 	bl	8009258 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009170:	4b07      	ldr	r3, [pc, #28]	; (8009190 <vPortFree+0xc0>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3301      	adds	r3, #1
 8009176:	4a06      	ldr	r2, [pc, #24]	; (8009190 <vPortFree+0xc0>)
 8009178:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800917a:	f7fe fb8b 	bl	8007894 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800917e:	bf00      	nop
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20008c9c 	.word	0x20008c9c
 800918c:	20008c8c 	.word	0x20008c8c
 8009190:	20008c98 	.word	0x20008c98

08009194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800919a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800919e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091a0:	4b27      	ldr	r3, [pc, #156]	; (8009240 <prvHeapInit+0xac>)
 80091a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00c      	beq.n	80091c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3307      	adds	r3, #7
 80091b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 0307 	bic.w	r3, r3, #7
 80091ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	4a1f      	ldr	r2, [pc, #124]	; (8009240 <prvHeapInit+0xac>)
 80091c4:	4413      	add	r3, r2
 80091c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091cc:	4a1d      	ldr	r2, [pc, #116]	; (8009244 <prvHeapInit+0xb0>)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091d2:	4b1c      	ldr	r3, [pc, #112]	; (8009244 <prvHeapInit+0xb0>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	4413      	add	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091e0:	2208      	movs	r2, #8
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	1a9b      	subs	r3, r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 0307 	bic.w	r3, r3, #7
 80091ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a15      	ldr	r2, [pc, #84]	; (8009248 <prvHeapInit+0xb4>)
 80091f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091f6:	4b14      	ldr	r3, [pc, #80]	; (8009248 <prvHeapInit+0xb4>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2200      	movs	r2, #0
 80091fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091fe:	4b12      	ldr	r3, [pc, #72]	; (8009248 <prvHeapInit+0xb4>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	1ad2      	subs	r2, r2, r3
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009214:	4b0c      	ldr	r3, [pc, #48]	; (8009248 <prvHeapInit+0xb4>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	4a0a      	ldr	r2, [pc, #40]	; (800924c <prvHeapInit+0xb8>)
 8009222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4a09      	ldr	r2, [pc, #36]	; (8009250 <prvHeapInit+0xbc>)
 800922a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800922c:	4b09      	ldr	r3, [pc, #36]	; (8009254 <prvHeapInit+0xc0>)
 800922e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009232:	601a      	str	r2, [r3, #0]
}
 8009234:	bf00      	nop
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	20000f80 	.word	0x20000f80
 8009244:	20008c80 	.word	0x20008c80
 8009248:	20008c88 	.word	0x20008c88
 800924c:	20008c90 	.word	0x20008c90
 8009250:	20008c8c 	.word	0x20008c8c
 8009254:	20008c9c 	.word	0x20008c9c

08009258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009260:	4b28      	ldr	r3, [pc, #160]	; (8009304 <prvInsertBlockIntoFreeList+0xac>)
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	e002      	b.n	800926c <prvInsertBlockIntoFreeList+0x14>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	429a      	cmp	r2, r3
 8009274:	d8f7      	bhi.n	8009266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	4413      	add	r3, r2
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	429a      	cmp	r2, r3
 8009286:	d108      	bne.n	800929a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	441a      	add	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	441a      	add	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d118      	bne.n	80092e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	4b15      	ldr	r3, [pc, #84]	; (8009308 <prvInsertBlockIntoFreeList+0xb0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d00d      	beq.n	80092d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	441a      	add	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	e008      	b.n	80092e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092d6:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <prvInsertBlockIntoFreeList+0xb0>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	e003      	b.n	80092e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d002      	beq.n	80092f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092f6:	bf00      	nop
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20008c80 	.word	0x20008c80
 8009308:	20008c88 	.word	0x20008c88

0800930c <__errno>:
 800930c:	4b01      	ldr	r3, [pc, #4]	; (8009314 <__errno+0x8>)
 800930e:	6818      	ldr	r0, [r3, #0]
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	20000010 	.word	0x20000010

08009318 <_fwrite_r>:
 8009318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800931c:	9c08      	ldr	r4, [sp, #32]
 800931e:	468a      	mov	sl, r1
 8009320:	4690      	mov	r8, r2
 8009322:	fb02 f903 	mul.w	r9, r2, r3
 8009326:	4605      	mov	r5, r0
 8009328:	b118      	cbz	r0, 8009332 <_fwrite_r+0x1a>
 800932a:	6983      	ldr	r3, [r0, #24]
 800932c:	b90b      	cbnz	r3, 8009332 <_fwrite_r+0x1a>
 800932e:	f000 fc03 	bl	8009b38 <__sinit>
 8009332:	4b26      	ldr	r3, [pc, #152]	; (80093cc <_fwrite_r+0xb4>)
 8009334:	429c      	cmp	r4, r3
 8009336:	d123      	bne.n	8009380 <_fwrite_r+0x68>
 8009338:	686c      	ldr	r4, [r5, #4]
 800933a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800933c:	07de      	lsls	r6, r3, #31
 800933e:	d405      	bmi.n	800934c <_fwrite_r+0x34>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	0598      	lsls	r0, r3, #22
 8009344:	d402      	bmi.n	800934c <_fwrite_r+0x34>
 8009346:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009348:	f000 f879 	bl	800943e <__retarget_lock_acquire_recursive>
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	0719      	lsls	r1, r3, #28
 8009350:	d520      	bpl.n	8009394 <_fwrite_r+0x7c>
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	b1f3      	cbz	r3, 8009394 <_fwrite_r+0x7c>
 8009356:	2600      	movs	r6, #0
 8009358:	454e      	cmp	r6, r9
 800935a:	d029      	beq.n	80093b0 <_fwrite_r+0x98>
 800935c:	68a7      	ldr	r7, [r4, #8]
 800935e:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8009362:	3f01      	subs	r7, #1
 8009364:	2f00      	cmp	r7, #0
 8009366:	60a7      	str	r7, [r4, #8]
 8009368:	da04      	bge.n	8009374 <_fwrite_r+0x5c>
 800936a:	69a3      	ldr	r3, [r4, #24]
 800936c:	429f      	cmp	r7, r3
 800936e:	db19      	blt.n	80093a4 <_fwrite_r+0x8c>
 8009370:	290a      	cmp	r1, #10
 8009372:	d017      	beq.n	80093a4 <_fwrite_r+0x8c>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	6022      	str	r2, [r4, #0]
 800937a:	7019      	strb	r1, [r3, #0]
 800937c:	3601      	adds	r6, #1
 800937e:	e7eb      	b.n	8009358 <_fwrite_r+0x40>
 8009380:	4b13      	ldr	r3, [pc, #76]	; (80093d0 <_fwrite_r+0xb8>)
 8009382:	429c      	cmp	r4, r3
 8009384:	d101      	bne.n	800938a <_fwrite_r+0x72>
 8009386:	68ac      	ldr	r4, [r5, #8]
 8009388:	e7d7      	b.n	800933a <_fwrite_r+0x22>
 800938a:	4b12      	ldr	r3, [pc, #72]	; (80093d4 <_fwrite_r+0xbc>)
 800938c:	429c      	cmp	r4, r3
 800938e:	bf08      	it	eq
 8009390:	68ec      	ldreq	r4, [r5, #12]
 8009392:	e7d2      	b.n	800933a <_fwrite_r+0x22>
 8009394:	4621      	mov	r1, r4
 8009396:	4628      	mov	r0, r5
 8009398:	f000 fa28 	bl	80097ec <__swsetup_r>
 800939c:	2800      	cmp	r0, #0
 800939e:	d0da      	beq.n	8009356 <_fwrite_r+0x3e>
 80093a0:	2600      	movs	r6, #0
 80093a2:	e005      	b.n	80093b0 <_fwrite_r+0x98>
 80093a4:	4622      	mov	r2, r4
 80093a6:	4628      	mov	r0, r5
 80093a8:	f000 f9ce 	bl	8009748 <__swbuf_r>
 80093ac:	3001      	adds	r0, #1
 80093ae:	d1e5      	bne.n	800937c <_fwrite_r+0x64>
 80093b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093b2:	07da      	lsls	r2, r3, #31
 80093b4:	d405      	bmi.n	80093c2 <_fwrite_r+0xaa>
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	059b      	lsls	r3, r3, #22
 80093ba:	d402      	bmi.n	80093c2 <_fwrite_r+0xaa>
 80093bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093be:	f000 f83f 	bl	8009440 <__retarget_lock_release_recursive>
 80093c2:	fbb6 f0f8 	udiv	r0, r6, r8
 80093c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ca:	bf00      	nop
 80093cc:	0800b794 	.word	0x0800b794
 80093d0:	0800b7b4 	.word	0x0800b7b4
 80093d4:	0800b774 	.word	0x0800b774

080093d8 <fwrite>:
 80093d8:	b507      	push	{r0, r1, r2, lr}
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	4613      	mov	r3, r2
 80093de:	460a      	mov	r2, r1
 80093e0:	4601      	mov	r1, r0
 80093e2:	4803      	ldr	r0, [pc, #12]	; (80093f0 <fwrite+0x18>)
 80093e4:	6800      	ldr	r0, [r0, #0]
 80093e6:	f7ff ff97 	bl	8009318 <_fwrite_r>
 80093ea:	b003      	add	sp, #12
 80093ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80093f0:	20000010 	.word	0x20000010

080093f4 <__libc_init_array>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	4d0d      	ldr	r5, [pc, #52]	; (800942c <__libc_init_array+0x38>)
 80093f8:	4c0d      	ldr	r4, [pc, #52]	; (8009430 <__libc_init_array+0x3c>)
 80093fa:	1b64      	subs	r4, r4, r5
 80093fc:	10a4      	asrs	r4, r4, #2
 80093fe:	2600      	movs	r6, #0
 8009400:	42a6      	cmp	r6, r4
 8009402:	d109      	bne.n	8009418 <__libc_init_array+0x24>
 8009404:	4d0b      	ldr	r5, [pc, #44]	; (8009434 <__libc_init_array+0x40>)
 8009406:	4c0c      	ldr	r4, [pc, #48]	; (8009438 <__libc_init_array+0x44>)
 8009408:	f001 ffb8 	bl	800b37c <_init>
 800940c:	1b64      	subs	r4, r4, r5
 800940e:	10a4      	asrs	r4, r4, #2
 8009410:	2600      	movs	r6, #0
 8009412:	42a6      	cmp	r6, r4
 8009414:	d105      	bne.n	8009422 <__libc_init_array+0x2e>
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	f855 3b04 	ldr.w	r3, [r5], #4
 800941c:	4798      	blx	r3
 800941e:	3601      	adds	r6, #1
 8009420:	e7ee      	b.n	8009400 <__libc_init_array+0xc>
 8009422:	f855 3b04 	ldr.w	r3, [r5], #4
 8009426:	4798      	blx	r3
 8009428:	3601      	adds	r6, #1
 800942a:	e7f2      	b.n	8009412 <__libc_init_array+0x1e>
 800942c:	0800b840 	.word	0x0800b840
 8009430:	0800b840 	.word	0x0800b840
 8009434:	0800b840 	.word	0x0800b840
 8009438:	0800b844 	.word	0x0800b844

0800943c <__retarget_lock_init_recursive>:
 800943c:	4770      	bx	lr

0800943e <__retarget_lock_acquire_recursive>:
 800943e:	4770      	bx	lr

08009440 <__retarget_lock_release_recursive>:
 8009440:	4770      	bx	lr
	...

08009444 <malloc>:
 8009444:	4b02      	ldr	r3, [pc, #8]	; (8009450 <malloc+0xc>)
 8009446:	4601      	mov	r1, r0
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	f000 b88d 	b.w	8009568 <_malloc_r>
 800944e:	bf00      	nop
 8009450:	20000010 	.word	0x20000010

08009454 <free>:
 8009454:	4b02      	ldr	r3, [pc, #8]	; (8009460 <free+0xc>)
 8009456:	4601      	mov	r1, r0
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	f000 b819 	b.w	8009490 <_free_r>
 800945e:	bf00      	nop
 8009460:	20000010 	.word	0x20000010

08009464 <memcpy>:
 8009464:	440a      	add	r2, r1
 8009466:	4291      	cmp	r1, r2
 8009468:	f100 33ff 	add.w	r3, r0, #4294967295
 800946c:	d100      	bne.n	8009470 <memcpy+0xc>
 800946e:	4770      	bx	lr
 8009470:	b510      	push	{r4, lr}
 8009472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800947a:	4291      	cmp	r1, r2
 800947c:	d1f9      	bne.n	8009472 <memcpy+0xe>
 800947e:	bd10      	pop	{r4, pc}

08009480 <memset>:
 8009480:	4402      	add	r2, r0
 8009482:	4603      	mov	r3, r0
 8009484:	4293      	cmp	r3, r2
 8009486:	d100      	bne.n	800948a <memset+0xa>
 8009488:	4770      	bx	lr
 800948a:	f803 1b01 	strb.w	r1, [r3], #1
 800948e:	e7f9      	b.n	8009484 <memset+0x4>

08009490 <_free_r>:
 8009490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009492:	2900      	cmp	r1, #0
 8009494:	d044      	beq.n	8009520 <_free_r+0x90>
 8009496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800949a:	9001      	str	r0, [sp, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	f1a1 0404 	sub.w	r4, r1, #4
 80094a2:	bfb8      	it	lt
 80094a4:	18e4      	addlt	r4, r4, r3
 80094a6:	f000 fc5b 	bl	8009d60 <__malloc_lock>
 80094aa:	4a1e      	ldr	r2, [pc, #120]	; (8009524 <_free_r+0x94>)
 80094ac:	9801      	ldr	r0, [sp, #4]
 80094ae:	6813      	ldr	r3, [r2, #0]
 80094b0:	b933      	cbnz	r3, 80094c0 <_free_r+0x30>
 80094b2:	6063      	str	r3, [r4, #4]
 80094b4:	6014      	str	r4, [r2, #0]
 80094b6:	b003      	add	sp, #12
 80094b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094bc:	f000 bc56 	b.w	8009d6c <__malloc_unlock>
 80094c0:	42a3      	cmp	r3, r4
 80094c2:	d908      	bls.n	80094d6 <_free_r+0x46>
 80094c4:	6825      	ldr	r5, [r4, #0]
 80094c6:	1961      	adds	r1, r4, r5
 80094c8:	428b      	cmp	r3, r1
 80094ca:	bf01      	itttt	eq
 80094cc:	6819      	ldreq	r1, [r3, #0]
 80094ce:	685b      	ldreq	r3, [r3, #4]
 80094d0:	1949      	addeq	r1, r1, r5
 80094d2:	6021      	streq	r1, [r4, #0]
 80094d4:	e7ed      	b.n	80094b2 <_free_r+0x22>
 80094d6:	461a      	mov	r2, r3
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	b10b      	cbz	r3, 80094e0 <_free_r+0x50>
 80094dc:	42a3      	cmp	r3, r4
 80094de:	d9fa      	bls.n	80094d6 <_free_r+0x46>
 80094e0:	6811      	ldr	r1, [r2, #0]
 80094e2:	1855      	adds	r5, r2, r1
 80094e4:	42a5      	cmp	r5, r4
 80094e6:	d10b      	bne.n	8009500 <_free_r+0x70>
 80094e8:	6824      	ldr	r4, [r4, #0]
 80094ea:	4421      	add	r1, r4
 80094ec:	1854      	adds	r4, r2, r1
 80094ee:	42a3      	cmp	r3, r4
 80094f0:	6011      	str	r1, [r2, #0]
 80094f2:	d1e0      	bne.n	80094b6 <_free_r+0x26>
 80094f4:	681c      	ldr	r4, [r3, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	6053      	str	r3, [r2, #4]
 80094fa:	4421      	add	r1, r4
 80094fc:	6011      	str	r1, [r2, #0]
 80094fe:	e7da      	b.n	80094b6 <_free_r+0x26>
 8009500:	d902      	bls.n	8009508 <_free_r+0x78>
 8009502:	230c      	movs	r3, #12
 8009504:	6003      	str	r3, [r0, #0]
 8009506:	e7d6      	b.n	80094b6 <_free_r+0x26>
 8009508:	6825      	ldr	r5, [r4, #0]
 800950a:	1961      	adds	r1, r4, r5
 800950c:	428b      	cmp	r3, r1
 800950e:	bf04      	itt	eq
 8009510:	6819      	ldreq	r1, [r3, #0]
 8009512:	685b      	ldreq	r3, [r3, #4]
 8009514:	6063      	str	r3, [r4, #4]
 8009516:	bf04      	itt	eq
 8009518:	1949      	addeq	r1, r1, r5
 800951a:	6021      	streq	r1, [r4, #0]
 800951c:	6054      	str	r4, [r2, #4]
 800951e:	e7ca      	b.n	80094b6 <_free_r+0x26>
 8009520:	b003      	add	sp, #12
 8009522:	bd30      	pop	{r4, r5, pc}
 8009524:	20008ca4 	.word	0x20008ca4

08009528 <sbrk_aligned>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	4e0e      	ldr	r6, [pc, #56]	; (8009564 <sbrk_aligned+0x3c>)
 800952c:	460c      	mov	r4, r1
 800952e:	6831      	ldr	r1, [r6, #0]
 8009530:	4605      	mov	r5, r0
 8009532:	b911      	cbnz	r1, 800953a <sbrk_aligned+0x12>
 8009534:	f000 f8f8 	bl	8009728 <_sbrk_r>
 8009538:	6030      	str	r0, [r6, #0]
 800953a:	4621      	mov	r1, r4
 800953c:	4628      	mov	r0, r5
 800953e:	f000 f8f3 	bl	8009728 <_sbrk_r>
 8009542:	1c43      	adds	r3, r0, #1
 8009544:	d00a      	beq.n	800955c <sbrk_aligned+0x34>
 8009546:	1cc4      	adds	r4, r0, #3
 8009548:	f024 0403 	bic.w	r4, r4, #3
 800954c:	42a0      	cmp	r0, r4
 800954e:	d007      	beq.n	8009560 <sbrk_aligned+0x38>
 8009550:	1a21      	subs	r1, r4, r0
 8009552:	4628      	mov	r0, r5
 8009554:	f000 f8e8 	bl	8009728 <_sbrk_r>
 8009558:	3001      	adds	r0, #1
 800955a:	d101      	bne.n	8009560 <sbrk_aligned+0x38>
 800955c:	f04f 34ff 	mov.w	r4, #4294967295
 8009560:	4620      	mov	r0, r4
 8009562:	bd70      	pop	{r4, r5, r6, pc}
 8009564:	20008ca8 	.word	0x20008ca8

08009568 <_malloc_r>:
 8009568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800956c:	1ccd      	adds	r5, r1, #3
 800956e:	f025 0503 	bic.w	r5, r5, #3
 8009572:	3508      	adds	r5, #8
 8009574:	2d0c      	cmp	r5, #12
 8009576:	bf38      	it	cc
 8009578:	250c      	movcc	r5, #12
 800957a:	2d00      	cmp	r5, #0
 800957c:	4607      	mov	r7, r0
 800957e:	db01      	blt.n	8009584 <_malloc_r+0x1c>
 8009580:	42a9      	cmp	r1, r5
 8009582:	d905      	bls.n	8009590 <_malloc_r+0x28>
 8009584:	230c      	movs	r3, #12
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	2600      	movs	r6, #0
 800958a:	4630      	mov	r0, r6
 800958c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009590:	4e2e      	ldr	r6, [pc, #184]	; (800964c <_malloc_r+0xe4>)
 8009592:	f000 fbe5 	bl	8009d60 <__malloc_lock>
 8009596:	6833      	ldr	r3, [r6, #0]
 8009598:	461c      	mov	r4, r3
 800959a:	bb34      	cbnz	r4, 80095ea <_malloc_r+0x82>
 800959c:	4629      	mov	r1, r5
 800959e:	4638      	mov	r0, r7
 80095a0:	f7ff ffc2 	bl	8009528 <sbrk_aligned>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	4604      	mov	r4, r0
 80095a8:	d14d      	bne.n	8009646 <_malloc_r+0xde>
 80095aa:	6834      	ldr	r4, [r6, #0]
 80095ac:	4626      	mov	r6, r4
 80095ae:	2e00      	cmp	r6, #0
 80095b0:	d140      	bne.n	8009634 <_malloc_r+0xcc>
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	4631      	mov	r1, r6
 80095b6:	4638      	mov	r0, r7
 80095b8:	eb04 0803 	add.w	r8, r4, r3
 80095bc:	f000 f8b4 	bl	8009728 <_sbrk_r>
 80095c0:	4580      	cmp	r8, r0
 80095c2:	d13a      	bne.n	800963a <_malloc_r+0xd2>
 80095c4:	6821      	ldr	r1, [r4, #0]
 80095c6:	3503      	adds	r5, #3
 80095c8:	1a6d      	subs	r5, r5, r1
 80095ca:	f025 0503 	bic.w	r5, r5, #3
 80095ce:	3508      	adds	r5, #8
 80095d0:	2d0c      	cmp	r5, #12
 80095d2:	bf38      	it	cc
 80095d4:	250c      	movcc	r5, #12
 80095d6:	4629      	mov	r1, r5
 80095d8:	4638      	mov	r0, r7
 80095da:	f7ff ffa5 	bl	8009528 <sbrk_aligned>
 80095de:	3001      	adds	r0, #1
 80095e0:	d02b      	beq.n	800963a <_malloc_r+0xd2>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	442b      	add	r3, r5
 80095e6:	6023      	str	r3, [r4, #0]
 80095e8:	e00e      	b.n	8009608 <_malloc_r+0xa0>
 80095ea:	6822      	ldr	r2, [r4, #0]
 80095ec:	1b52      	subs	r2, r2, r5
 80095ee:	d41e      	bmi.n	800962e <_malloc_r+0xc6>
 80095f0:	2a0b      	cmp	r2, #11
 80095f2:	d916      	bls.n	8009622 <_malloc_r+0xba>
 80095f4:	1961      	adds	r1, r4, r5
 80095f6:	42a3      	cmp	r3, r4
 80095f8:	6025      	str	r5, [r4, #0]
 80095fa:	bf18      	it	ne
 80095fc:	6059      	strne	r1, [r3, #4]
 80095fe:	6863      	ldr	r3, [r4, #4]
 8009600:	bf08      	it	eq
 8009602:	6031      	streq	r1, [r6, #0]
 8009604:	5162      	str	r2, [r4, r5]
 8009606:	604b      	str	r3, [r1, #4]
 8009608:	4638      	mov	r0, r7
 800960a:	f104 060b 	add.w	r6, r4, #11
 800960e:	f000 fbad 	bl	8009d6c <__malloc_unlock>
 8009612:	f026 0607 	bic.w	r6, r6, #7
 8009616:	1d23      	adds	r3, r4, #4
 8009618:	1af2      	subs	r2, r6, r3
 800961a:	d0b6      	beq.n	800958a <_malloc_r+0x22>
 800961c:	1b9b      	subs	r3, r3, r6
 800961e:	50a3      	str	r3, [r4, r2]
 8009620:	e7b3      	b.n	800958a <_malloc_r+0x22>
 8009622:	6862      	ldr	r2, [r4, #4]
 8009624:	42a3      	cmp	r3, r4
 8009626:	bf0c      	ite	eq
 8009628:	6032      	streq	r2, [r6, #0]
 800962a:	605a      	strne	r2, [r3, #4]
 800962c:	e7ec      	b.n	8009608 <_malloc_r+0xa0>
 800962e:	4623      	mov	r3, r4
 8009630:	6864      	ldr	r4, [r4, #4]
 8009632:	e7b2      	b.n	800959a <_malloc_r+0x32>
 8009634:	4634      	mov	r4, r6
 8009636:	6876      	ldr	r6, [r6, #4]
 8009638:	e7b9      	b.n	80095ae <_malloc_r+0x46>
 800963a:	230c      	movs	r3, #12
 800963c:	603b      	str	r3, [r7, #0]
 800963e:	4638      	mov	r0, r7
 8009640:	f000 fb94 	bl	8009d6c <__malloc_unlock>
 8009644:	e7a1      	b.n	800958a <_malloc_r+0x22>
 8009646:	6025      	str	r5, [r4, #0]
 8009648:	e7de      	b.n	8009608 <_malloc_r+0xa0>
 800964a:	bf00      	nop
 800964c:	20008ca4 	.word	0x20008ca4

08009650 <srand>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4b10      	ldr	r3, [pc, #64]	; (8009694 <srand+0x44>)
 8009654:	681d      	ldr	r5, [r3, #0]
 8009656:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009658:	4604      	mov	r4, r0
 800965a:	b9b3      	cbnz	r3, 800968a <srand+0x3a>
 800965c:	2018      	movs	r0, #24
 800965e:	f7ff fef1 	bl	8009444 <malloc>
 8009662:	4602      	mov	r2, r0
 8009664:	63a8      	str	r0, [r5, #56]	; 0x38
 8009666:	b920      	cbnz	r0, 8009672 <srand+0x22>
 8009668:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <srand+0x48>)
 800966a:	480c      	ldr	r0, [pc, #48]	; (800969c <srand+0x4c>)
 800966c:	2142      	movs	r1, #66	; 0x42
 800966e:	f000 f92b 	bl	80098c8 <__assert_func>
 8009672:	490b      	ldr	r1, [pc, #44]	; (80096a0 <srand+0x50>)
 8009674:	4b0b      	ldr	r3, [pc, #44]	; (80096a4 <srand+0x54>)
 8009676:	e9c0 1300 	strd	r1, r3, [r0]
 800967a:	4b0b      	ldr	r3, [pc, #44]	; (80096a8 <srand+0x58>)
 800967c:	6083      	str	r3, [r0, #8]
 800967e:	230b      	movs	r3, #11
 8009680:	8183      	strh	r3, [r0, #12]
 8009682:	2100      	movs	r1, #0
 8009684:	2001      	movs	r0, #1
 8009686:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800968a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800968c:	2200      	movs	r2, #0
 800968e:	611c      	str	r4, [r3, #16]
 8009690:	615a      	str	r2, [r3, #20]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	20000010 	.word	0x20000010
 8009698:	0800b6c4 	.word	0x0800b6c4
 800969c:	0800b6db 	.word	0x0800b6db
 80096a0:	abcd330e 	.word	0xabcd330e
 80096a4:	e66d1234 	.word	0xe66d1234
 80096a8:	0005deec 	.word	0x0005deec

080096ac <rand>:
 80096ac:	4b16      	ldr	r3, [pc, #88]	; (8009708 <rand+0x5c>)
 80096ae:	b510      	push	{r4, lr}
 80096b0:	681c      	ldr	r4, [r3, #0]
 80096b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096b4:	b9b3      	cbnz	r3, 80096e4 <rand+0x38>
 80096b6:	2018      	movs	r0, #24
 80096b8:	f7ff fec4 	bl	8009444 <malloc>
 80096bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80096be:	b928      	cbnz	r0, 80096cc <rand+0x20>
 80096c0:	4602      	mov	r2, r0
 80096c2:	4b12      	ldr	r3, [pc, #72]	; (800970c <rand+0x60>)
 80096c4:	4812      	ldr	r0, [pc, #72]	; (8009710 <rand+0x64>)
 80096c6:	214e      	movs	r1, #78	; 0x4e
 80096c8:	f000 f8fe 	bl	80098c8 <__assert_func>
 80096cc:	4a11      	ldr	r2, [pc, #68]	; (8009714 <rand+0x68>)
 80096ce:	4b12      	ldr	r3, [pc, #72]	; (8009718 <rand+0x6c>)
 80096d0:	e9c0 2300 	strd	r2, r3, [r0]
 80096d4:	4b11      	ldr	r3, [pc, #68]	; (800971c <rand+0x70>)
 80096d6:	6083      	str	r3, [r0, #8]
 80096d8:	230b      	movs	r3, #11
 80096da:	8183      	strh	r3, [r0, #12]
 80096dc:	2201      	movs	r2, #1
 80096de:	2300      	movs	r3, #0
 80096e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80096e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80096e6:	4a0e      	ldr	r2, [pc, #56]	; (8009720 <rand+0x74>)
 80096e8:	6920      	ldr	r0, [r4, #16]
 80096ea:	6963      	ldr	r3, [r4, #20]
 80096ec:	490d      	ldr	r1, [pc, #52]	; (8009724 <rand+0x78>)
 80096ee:	4342      	muls	r2, r0
 80096f0:	fb01 2203 	mla	r2, r1, r3, r2
 80096f4:	fba0 0101 	umull	r0, r1, r0, r1
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	eb42 0001 	adc.w	r0, r2, r1
 80096fe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009702:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009706:	bd10      	pop	{r4, pc}
 8009708:	20000010 	.word	0x20000010
 800970c:	0800b6c4 	.word	0x0800b6c4
 8009710:	0800b6db 	.word	0x0800b6db
 8009714:	abcd330e 	.word	0xabcd330e
 8009718:	e66d1234 	.word	0xe66d1234
 800971c:	0005deec 	.word	0x0005deec
 8009720:	5851f42d 	.word	0x5851f42d
 8009724:	4c957f2d 	.word	0x4c957f2d

08009728 <_sbrk_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d06      	ldr	r5, [pc, #24]	; (8009744 <_sbrk_r+0x1c>)
 800972c:	2300      	movs	r3, #0
 800972e:	4604      	mov	r4, r0
 8009730:	4608      	mov	r0, r1
 8009732:	602b      	str	r3, [r5, #0]
 8009734:	f7f9 fb92 	bl	8002e5c <_sbrk>
 8009738:	1c43      	adds	r3, r0, #1
 800973a:	d102      	bne.n	8009742 <_sbrk_r+0x1a>
 800973c:	682b      	ldr	r3, [r5, #0]
 800973e:	b103      	cbz	r3, 8009742 <_sbrk_r+0x1a>
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	bd38      	pop	{r3, r4, r5, pc}
 8009744:	20008cac 	.word	0x20008cac

08009748 <__swbuf_r>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	460e      	mov	r6, r1
 800974c:	4614      	mov	r4, r2
 800974e:	4605      	mov	r5, r0
 8009750:	b118      	cbz	r0, 800975a <__swbuf_r+0x12>
 8009752:	6983      	ldr	r3, [r0, #24]
 8009754:	b90b      	cbnz	r3, 800975a <__swbuf_r+0x12>
 8009756:	f000 f9ef 	bl	8009b38 <__sinit>
 800975a:	4b21      	ldr	r3, [pc, #132]	; (80097e0 <__swbuf_r+0x98>)
 800975c:	429c      	cmp	r4, r3
 800975e:	d12b      	bne.n	80097b8 <__swbuf_r+0x70>
 8009760:	686c      	ldr	r4, [r5, #4]
 8009762:	69a3      	ldr	r3, [r4, #24]
 8009764:	60a3      	str	r3, [r4, #8]
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	071a      	lsls	r2, r3, #28
 800976a:	d52f      	bpl.n	80097cc <__swbuf_r+0x84>
 800976c:	6923      	ldr	r3, [r4, #16]
 800976e:	b36b      	cbz	r3, 80097cc <__swbuf_r+0x84>
 8009770:	6923      	ldr	r3, [r4, #16]
 8009772:	6820      	ldr	r0, [r4, #0]
 8009774:	1ac0      	subs	r0, r0, r3
 8009776:	6963      	ldr	r3, [r4, #20]
 8009778:	b2f6      	uxtb	r6, r6
 800977a:	4283      	cmp	r3, r0
 800977c:	4637      	mov	r7, r6
 800977e:	dc04      	bgt.n	800978a <__swbuf_r+0x42>
 8009780:	4621      	mov	r1, r4
 8009782:	4628      	mov	r0, r5
 8009784:	f000 f944 	bl	8009a10 <_fflush_r>
 8009788:	bb30      	cbnz	r0, 80097d8 <__swbuf_r+0x90>
 800978a:	68a3      	ldr	r3, [r4, #8]
 800978c:	3b01      	subs	r3, #1
 800978e:	60a3      	str	r3, [r4, #8]
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	1c5a      	adds	r2, r3, #1
 8009794:	6022      	str	r2, [r4, #0]
 8009796:	701e      	strb	r6, [r3, #0]
 8009798:	6963      	ldr	r3, [r4, #20]
 800979a:	3001      	adds	r0, #1
 800979c:	4283      	cmp	r3, r0
 800979e:	d004      	beq.n	80097aa <__swbuf_r+0x62>
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	07db      	lsls	r3, r3, #31
 80097a4:	d506      	bpl.n	80097b4 <__swbuf_r+0x6c>
 80097a6:	2e0a      	cmp	r6, #10
 80097a8:	d104      	bne.n	80097b4 <__swbuf_r+0x6c>
 80097aa:	4621      	mov	r1, r4
 80097ac:	4628      	mov	r0, r5
 80097ae:	f000 f92f 	bl	8009a10 <_fflush_r>
 80097b2:	b988      	cbnz	r0, 80097d8 <__swbuf_r+0x90>
 80097b4:	4638      	mov	r0, r7
 80097b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097b8:	4b0a      	ldr	r3, [pc, #40]	; (80097e4 <__swbuf_r+0x9c>)
 80097ba:	429c      	cmp	r4, r3
 80097bc:	d101      	bne.n	80097c2 <__swbuf_r+0x7a>
 80097be:	68ac      	ldr	r4, [r5, #8]
 80097c0:	e7cf      	b.n	8009762 <__swbuf_r+0x1a>
 80097c2:	4b09      	ldr	r3, [pc, #36]	; (80097e8 <__swbuf_r+0xa0>)
 80097c4:	429c      	cmp	r4, r3
 80097c6:	bf08      	it	eq
 80097c8:	68ec      	ldreq	r4, [r5, #12]
 80097ca:	e7ca      	b.n	8009762 <__swbuf_r+0x1a>
 80097cc:	4621      	mov	r1, r4
 80097ce:	4628      	mov	r0, r5
 80097d0:	f000 f80c 	bl	80097ec <__swsetup_r>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d0cb      	beq.n	8009770 <__swbuf_r+0x28>
 80097d8:	f04f 37ff 	mov.w	r7, #4294967295
 80097dc:	e7ea      	b.n	80097b4 <__swbuf_r+0x6c>
 80097de:	bf00      	nop
 80097e0:	0800b794 	.word	0x0800b794
 80097e4:	0800b7b4 	.word	0x0800b7b4
 80097e8:	0800b774 	.word	0x0800b774

080097ec <__swsetup_r>:
 80097ec:	4b32      	ldr	r3, [pc, #200]	; (80098b8 <__swsetup_r+0xcc>)
 80097ee:	b570      	push	{r4, r5, r6, lr}
 80097f0:	681d      	ldr	r5, [r3, #0]
 80097f2:	4606      	mov	r6, r0
 80097f4:	460c      	mov	r4, r1
 80097f6:	b125      	cbz	r5, 8009802 <__swsetup_r+0x16>
 80097f8:	69ab      	ldr	r3, [r5, #24]
 80097fa:	b913      	cbnz	r3, 8009802 <__swsetup_r+0x16>
 80097fc:	4628      	mov	r0, r5
 80097fe:	f000 f99b 	bl	8009b38 <__sinit>
 8009802:	4b2e      	ldr	r3, [pc, #184]	; (80098bc <__swsetup_r+0xd0>)
 8009804:	429c      	cmp	r4, r3
 8009806:	d10f      	bne.n	8009828 <__swsetup_r+0x3c>
 8009808:	686c      	ldr	r4, [r5, #4]
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009810:	0719      	lsls	r1, r3, #28
 8009812:	d42c      	bmi.n	800986e <__swsetup_r+0x82>
 8009814:	06dd      	lsls	r5, r3, #27
 8009816:	d411      	bmi.n	800983c <__swsetup_r+0x50>
 8009818:	2309      	movs	r3, #9
 800981a:	6033      	str	r3, [r6, #0]
 800981c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009820:	81a3      	strh	r3, [r4, #12]
 8009822:	f04f 30ff 	mov.w	r0, #4294967295
 8009826:	e03e      	b.n	80098a6 <__swsetup_r+0xba>
 8009828:	4b25      	ldr	r3, [pc, #148]	; (80098c0 <__swsetup_r+0xd4>)
 800982a:	429c      	cmp	r4, r3
 800982c:	d101      	bne.n	8009832 <__swsetup_r+0x46>
 800982e:	68ac      	ldr	r4, [r5, #8]
 8009830:	e7eb      	b.n	800980a <__swsetup_r+0x1e>
 8009832:	4b24      	ldr	r3, [pc, #144]	; (80098c4 <__swsetup_r+0xd8>)
 8009834:	429c      	cmp	r4, r3
 8009836:	bf08      	it	eq
 8009838:	68ec      	ldreq	r4, [r5, #12]
 800983a:	e7e6      	b.n	800980a <__swsetup_r+0x1e>
 800983c:	0758      	lsls	r0, r3, #29
 800983e:	d512      	bpl.n	8009866 <__swsetup_r+0x7a>
 8009840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009842:	b141      	cbz	r1, 8009856 <__swsetup_r+0x6a>
 8009844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009848:	4299      	cmp	r1, r3
 800984a:	d002      	beq.n	8009852 <__swsetup_r+0x66>
 800984c:	4630      	mov	r0, r6
 800984e:	f7ff fe1f 	bl	8009490 <_free_r>
 8009852:	2300      	movs	r3, #0
 8009854:	6363      	str	r3, [r4, #52]	; 0x34
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800985c:	81a3      	strh	r3, [r4, #12]
 800985e:	2300      	movs	r3, #0
 8009860:	6063      	str	r3, [r4, #4]
 8009862:	6923      	ldr	r3, [r4, #16]
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	f043 0308 	orr.w	r3, r3, #8
 800986c:	81a3      	strh	r3, [r4, #12]
 800986e:	6923      	ldr	r3, [r4, #16]
 8009870:	b94b      	cbnz	r3, 8009886 <__swsetup_r+0x9a>
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800987c:	d003      	beq.n	8009886 <__swsetup_r+0x9a>
 800987e:	4621      	mov	r1, r4
 8009880:	4630      	mov	r0, r6
 8009882:	f000 fa2d 	bl	8009ce0 <__smakebuf_r>
 8009886:	89a0      	ldrh	r0, [r4, #12]
 8009888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800988c:	f010 0301 	ands.w	r3, r0, #1
 8009890:	d00a      	beq.n	80098a8 <__swsetup_r+0xbc>
 8009892:	2300      	movs	r3, #0
 8009894:	60a3      	str	r3, [r4, #8]
 8009896:	6963      	ldr	r3, [r4, #20]
 8009898:	425b      	negs	r3, r3
 800989a:	61a3      	str	r3, [r4, #24]
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	b943      	cbnz	r3, 80098b2 <__swsetup_r+0xc6>
 80098a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098a4:	d1ba      	bne.n	800981c <__swsetup_r+0x30>
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
 80098a8:	0781      	lsls	r1, r0, #30
 80098aa:	bf58      	it	pl
 80098ac:	6963      	ldrpl	r3, [r4, #20]
 80098ae:	60a3      	str	r3, [r4, #8]
 80098b0:	e7f4      	b.n	800989c <__swsetup_r+0xb0>
 80098b2:	2000      	movs	r0, #0
 80098b4:	e7f7      	b.n	80098a6 <__swsetup_r+0xba>
 80098b6:	bf00      	nop
 80098b8:	20000010 	.word	0x20000010
 80098bc:	0800b794 	.word	0x0800b794
 80098c0:	0800b7b4 	.word	0x0800b7b4
 80098c4:	0800b774 	.word	0x0800b774

080098c8 <__assert_func>:
 80098c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098ca:	4614      	mov	r4, r2
 80098cc:	461a      	mov	r2, r3
 80098ce:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <__assert_func+0x2c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4605      	mov	r5, r0
 80098d4:	68d8      	ldr	r0, [r3, #12]
 80098d6:	b14c      	cbz	r4, 80098ec <__assert_func+0x24>
 80098d8:	4b07      	ldr	r3, [pc, #28]	; (80098f8 <__assert_func+0x30>)
 80098da:	9100      	str	r1, [sp, #0]
 80098dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098e0:	4906      	ldr	r1, [pc, #24]	; (80098fc <__assert_func+0x34>)
 80098e2:	462b      	mov	r3, r5
 80098e4:	f000 f9a6 	bl	8009c34 <fiprintf>
 80098e8:	f000 fd8a 	bl	800a400 <abort>
 80098ec:	4b04      	ldr	r3, [pc, #16]	; (8009900 <__assert_func+0x38>)
 80098ee:	461c      	mov	r4, r3
 80098f0:	e7f3      	b.n	80098da <__assert_func+0x12>
 80098f2:	bf00      	nop
 80098f4:	20000010 	.word	0x20000010
 80098f8:	0800b736 	.word	0x0800b736
 80098fc:	0800b743 	.word	0x0800b743
 8009900:	0800b771 	.word	0x0800b771

08009904 <__sflush_r>:
 8009904:	898a      	ldrh	r2, [r1, #12]
 8009906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990a:	4605      	mov	r5, r0
 800990c:	0710      	lsls	r0, r2, #28
 800990e:	460c      	mov	r4, r1
 8009910:	d458      	bmi.n	80099c4 <__sflush_r+0xc0>
 8009912:	684b      	ldr	r3, [r1, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	dc05      	bgt.n	8009924 <__sflush_r+0x20>
 8009918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	dc02      	bgt.n	8009924 <__sflush_r+0x20>
 800991e:	2000      	movs	r0, #0
 8009920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009926:	2e00      	cmp	r6, #0
 8009928:	d0f9      	beq.n	800991e <__sflush_r+0x1a>
 800992a:	2300      	movs	r3, #0
 800992c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009930:	682f      	ldr	r7, [r5, #0]
 8009932:	602b      	str	r3, [r5, #0]
 8009934:	d032      	beq.n	800999c <__sflush_r+0x98>
 8009936:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	075a      	lsls	r2, r3, #29
 800993c:	d505      	bpl.n	800994a <__sflush_r+0x46>
 800993e:	6863      	ldr	r3, [r4, #4]
 8009940:	1ac0      	subs	r0, r0, r3
 8009942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009944:	b10b      	cbz	r3, 800994a <__sflush_r+0x46>
 8009946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009948:	1ac0      	subs	r0, r0, r3
 800994a:	2300      	movs	r3, #0
 800994c:	4602      	mov	r2, r0
 800994e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009950:	6a21      	ldr	r1, [r4, #32]
 8009952:	4628      	mov	r0, r5
 8009954:	47b0      	blx	r6
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	d106      	bne.n	800996a <__sflush_r+0x66>
 800995c:	6829      	ldr	r1, [r5, #0]
 800995e:	291d      	cmp	r1, #29
 8009960:	d82c      	bhi.n	80099bc <__sflush_r+0xb8>
 8009962:	4a2a      	ldr	r2, [pc, #168]	; (8009a0c <__sflush_r+0x108>)
 8009964:	40ca      	lsrs	r2, r1
 8009966:	07d6      	lsls	r6, r2, #31
 8009968:	d528      	bpl.n	80099bc <__sflush_r+0xb8>
 800996a:	2200      	movs	r2, #0
 800996c:	6062      	str	r2, [r4, #4]
 800996e:	04d9      	lsls	r1, r3, #19
 8009970:	6922      	ldr	r2, [r4, #16]
 8009972:	6022      	str	r2, [r4, #0]
 8009974:	d504      	bpl.n	8009980 <__sflush_r+0x7c>
 8009976:	1c42      	adds	r2, r0, #1
 8009978:	d101      	bne.n	800997e <__sflush_r+0x7a>
 800997a:	682b      	ldr	r3, [r5, #0]
 800997c:	b903      	cbnz	r3, 8009980 <__sflush_r+0x7c>
 800997e:	6560      	str	r0, [r4, #84]	; 0x54
 8009980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009982:	602f      	str	r7, [r5, #0]
 8009984:	2900      	cmp	r1, #0
 8009986:	d0ca      	beq.n	800991e <__sflush_r+0x1a>
 8009988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800998c:	4299      	cmp	r1, r3
 800998e:	d002      	beq.n	8009996 <__sflush_r+0x92>
 8009990:	4628      	mov	r0, r5
 8009992:	f7ff fd7d 	bl	8009490 <_free_r>
 8009996:	2000      	movs	r0, #0
 8009998:	6360      	str	r0, [r4, #52]	; 0x34
 800999a:	e7c1      	b.n	8009920 <__sflush_r+0x1c>
 800999c:	6a21      	ldr	r1, [r4, #32]
 800999e:	2301      	movs	r3, #1
 80099a0:	4628      	mov	r0, r5
 80099a2:	47b0      	blx	r6
 80099a4:	1c41      	adds	r1, r0, #1
 80099a6:	d1c7      	bne.n	8009938 <__sflush_r+0x34>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0c4      	beq.n	8009938 <__sflush_r+0x34>
 80099ae:	2b1d      	cmp	r3, #29
 80099b0:	d001      	beq.n	80099b6 <__sflush_r+0xb2>
 80099b2:	2b16      	cmp	r3, #22
 80099b4:	d101      	bne.n	80099ba <__sflush_r+0xb6>
 80099b6:	602f      	str	r7, [r5, #0]
 80099b8:	e7b1      	b.n	800991e <__sflush_r+0x1a>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099c0:	81a3      	strh	r3, [r4, #12]
 80099c2:	e7ad      	b.n	8009920 <__sflush_r+0x1c>
 80099c4:	690f      	ldr	r7, [r1, #16]
 80099c6:	2f00      	cmp	r7, #0
 80099c8:	d0a9      	beq.n	800991e <__sflush_r+0x1a>
 80099ca:	0793      	lsls	r3, r2, #30
 80099cc:	680e      	ldr	r6, [r1, #0]
 80099ce:	bf08      	it	eq
 80099d0:	694b      	ldreq	r3, [r1, #20]
 80099d2:	600f      	str	r7, [r1, #0]
 80099d4:	bf18      	it	ne
 80099d6:	2300      	movne	r3, #0
 80099d8:	eba6 0807 	sub.w	r8, r6, r7
 80099dc:	608b      	str	r3, [r1, #8]
 80099de:	f1b8 0f00 	cmp.w	r8, #0
 80099e2:	dd9c      	ble.n	800991e <__sflush_r+0x1a>
 80099e4:	6a21      	ldr	r1, [r4, #32]
 80099e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099e8:	4643      	mov	r3, r8
 80099ea:	463a      	mov	r2, r7
 80099ec:	4628      	mov	r0, r5
 80099ee:	47b0      	blx	r6
 80099f0:	2800      	cmp	r0, #0
 80099f2:	dc06      	bgt.n	8009a02 <__sflush_r+0xfe>
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099fa:	81a3      	strh	r3, [r4, #12]
 80099fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009a00:	e78e      	b.n	8009920 <__sflush_r+0x1c>
 8009a02:	4407      	add	r7, r0
 8009a04:	eba8 0800 	sub.w	r8, r8, r0
 8009a08:	e7e9      	b.n	80099de <__sflush_r+0xda>
 8009a0a:	bf00      	nop
 8009a0c:	20400001 	.word	0x20400001

08009a10 <_fflush_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	690b      	ldr	r3, [r1, #16]
 8009a14:	4605      	mov	r5, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	b913      	cbnz	r3, 8009a20 <_fflush_r+0x10>
 8009a1a:	2500      	movs	r5, #0
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	b118      	cbz	r0, 8009a2a <_fflush_r+0x1a>
 8009a22:	6983      	ldr	r3, [r0, #24]
 8009a24:	b90b      	cbnz	r3, 8009a2a <_fflush_r+0x1a>
 8009a26:	f000 f887 	bl	8009b38 <__sinit>
 8009a2a:	4b14      	ldr	r3, [pc, #80]	; (8009a7c <_fflush_r+0x6c>)
 8009a2c:	429c      	cmp	r4, r3
 8009a2e:	d11b      	bne.n	8009a68 <_fflush_r+0x58>
 8009a30:	686c      	ldr	r4, [r5, #4]
 8009a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d0ef      	beq.n	8009a1a <_fflush_r+0xa>
 8009a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a3c:	07d0      	lsls	r0, r2, #31
 8009a3e:	d404      	bmi.n	8009a4a <_fflush_r+0x3a>
 8009a40:	0599      	lsls	r1, r3, #22
 8009a42:	d402      	bmi.n	8009a4a <_fflush_r+0x3a>
 8009a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a46:	f7ff fcfa 	bl	800943e <__retarget_lock_acquire_recursive>
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	f7ff ff59 	bl	8009904 <__sflush_r>
 8009a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a54:	07da      	lsls	r2, r3, #31
 8009a56:	4605      	mov	r5, r0
 8009a58:	d4e0      	bmi.n	8009a1c <_fflush_r+0xc>
 8009a5a:	89a3      	ldrh	r3, [r4, #12]
 8009a5c:	059b      	lsls	r3, r3, #22
 8009a5e:	d4dd      	bmi.n	8009a1c <_fflush_r+0xc>
 8009a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a62:	f7ff fced 	bl	8009440 <__retarget_lock_release_recursive>
 8009a66:	e7d9      	b.n	8009a1c <_fflush_r+0xc>
 8009a68:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <_fflush_r+0x70>)
 8009a6a:	429c      	cmp	r4, r3
 8009a6c:	d101      	bne.n	8009a72 <_fflush_r+0x62>
 8009a6e:	68ac      	ldr	r4, [r5, #8]
 8009a70:	e7df      	b.n	8009a32 <_fflush_r+0x22>
 8009a72:	4b04      	ldr	r3, [pc, #16]	; (8009a84 <_fflush_r+0x74>)
 8009a74:	429c      	cmp	r4, r3
 8009a76:	bf08      	it	eq
 8009a78:	68ec      	ldreq	r4, [r5, #12]
 8009a7a:	e7da      	b.n	8009a32 <_fflush_r+0x22>
 8009a7c:	0800b794 	.word	0x0800b794
 8009a80:	0800b7b4 	.word	0x0800b7b4
 8009a84:	0800b774 	.word	0x0800b774

08009a88 <std>:
 8009a88:	2300      	movs	r3, #0
 8009a8a:	b510      	push	{r4, lr}
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a96:	6083      	str	r3, [r0, #8]
 8009a98:	8181      	strh	r1, [r0, #12]
 8009a9a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a9c:	81c2      	strh	r2, [r0, #14]
 8009a9e:	6183      	str	r3, [r0, #24]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	2208      	movs	r2, #8
 8009aa4:	305c      	adds	r0, #92	; 0x5c
 8009aa6:	f7ff fceb 	bl	8009480 <memset>
 8009aaa:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <std+0x38>)
 8009aac:	6263      	str	r3, [r4, #36]	; 0x24
 8009aae:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <std+0x3c>)
 8009ab0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ab2:	4b05      	ldr	r3, [pc, #20]	; (8009ac8 <std+0x40>)
 8009ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ab6:	4b05      	ldr	r3, [pc, #20]	; (8009acc <std+0x44>)
 8009ab8:	6224      	str	r4, [r4, #32]
 8009aba:	6323      	str	r3, [r4, #48]	; 0x30
 8009abc:	bd10      	pop	{r4, pc}
 8009abe:	bf00      	nop
 8009ac0:	0800a355 	.word	0x0800a355
 8009ac4:	0800a377 	.word	0x0800a377
 8009ac8:	0800a3af 	.word	0x0800a3af
 8009acc:	0800a3d3 	.word	0x0800a3d3

08009ad0 <_cleanup_r>:
 8009ad0:	4901      	ldr	r1, [pc, #4]	; (8009ad8 <_cleanup_r+0x8>)
 8009ad2:	f000 b8c1 	b.w	8009c58 <_fwalk_reent>
 8009ad6:	bf00      	nop
 8009ad8:	08009a11 	.word	0x08009a11

08009adc <__sfmoreglue>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	2268      	movs	r2, #104	; 0x68
 8009ae0:	1e4d      	subs	r5, r1, #1
 8009ae2:	4355      	muls	r5, r2
 8009ae4:	460e      	mov	r6, r1
 8009ae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009aea:	f7ff fd3d 	bl	8009568 <_malloc_r>
 8009aee:	4604      	mov	r4, r0
 8009af0:	b140      	cbz	r0, 8009b04 <__sfmoreglue+0x28>
 8009af2:	2100      	movs	r1, #0
 8009af4:	e9c0 1600 	strd	r1, r6, [r0]
 8009af8:	300c      	adds	r0, #12
 8009afa:	60a0      	str	r0, [r4, #8]
 8009afc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b00:	f7ff fcbe 	bl	8009480 <memset>
 8009b04:	4620      	mov	r0, r4
 8009b06:	bd70      	pop	{r4, r5, r6, pc}

08009b08 <__sfp_lock_acquire>:
 8009b08:	4801      	ldr	r0, [pc, #4]	; (8009b10 <__sfp_lock_acquire+0x8>)
 8009b0a:	f7ff bc98 	b.w	800943e <__retarget_lock_acquire_recursive>
 8009b0e:	bf00      	nop
 8009b10:	20008ca1 	.word	0x20008ca1

08009b14 <__sfp_lock_release>:
 8009b14:	4801      	ldr	r0, [pc, #4]	; (8009b1c <__sfp_lock_release+0x8>)
 8009b16:	f7ff bc93 	b.w	8009440 <__retarget_lock_release_recursive>
 8009b1a:	bf00      	nop
 8009b1c:	20008ca1 	.word	0x20008ca1

08009b20 <__sinit_lock_acquire>:
 8009b20:	4801      	ldr	r0, [pc, #4]	; (8009b28 <__sinit_lock_acquire+0x8>)
 8009b22:	f7ff bc8c 	b.w	800943e <__retarget_lock_acquire_recursive>
 8009b26:	bf00      	nop
 8009b28:	20008ca2 	.word	0x20008ca2

08009b2c <__sinit_lock_release>:
 8009b2c:	4801      	ldr	r0, [pc, #4]	; (8009b34 <__sinit_lock_release+0x8>)
 8009b2e:	f7ff bc87 	b.w	8009440 <__retarget_lock_release_recursive>
 8009b32:	bf00      	nop
 8009b34:	20008ca2 	.word	0x20008ca2

08009b38 <__sinit>:
 8009b38:	b510      	push	{r4, lr}
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	f7ff fff0 	bl	8009b20 <__sinit_lock_acquire>
 8009b40:	69a3      	ldr	r3, [r4, #24]
 8009b42:	b11b      	cbz	r3, 8009b4c <__sinit+0x14>
 8009b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b48:	f7ff bff0 	b.w	8009b2c <__sinit_lock_release>
 8009b4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b50:	6523      	str	r3, [r4, #80]	; 0x50
 8009b52:	4b13      	ldr	r3, [pc, #76]	; (8009ba0 <__sinit+0x68>)
 8009b54:	4a13      	ldr	r2, [pc, #76]	; (8009ba4 <__sinit+0x6c>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	bf04      	itt	eq
 8009b5e:	2301      	moveq	r3, #1
 8009b60:	61a3      	streq	r3, [r4, #24]
 8009b62:	4620      	mov	r0, r4
 8009b64:	f000 f820 	bl	8009ba8 <__sfp>
 8009b68:	6060      	str	r0, [r4, #4]
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f000 f81c 	bl	8009ba8 <__sfp>
 8009b70:	60a0      	str	r0, [r4, #8]
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 f818 	bl	8009ba8 <__sfp>
 8009b78:	2200      	movs	r2, #0
 8009b7a:	60e0      	str	r0, [r4, #12]
 8009b7c:	2104      	movs	r1, #4
 8009b7e:	6860      	ldr	r0, [r4, #4]
 8009b80:	f7ff ff82 	bl	8009a88 <std>
 8009b84:	68a0      	ldr	r0, [r4, #8]
 8009b86:	2201      	movs	r2, #1
 8009b88:	2109      	movs	r1, #9
 8009b8a:	f7ff ff7d 	bl	8009a88 <std>
 8009b8e:	68e0      	ldr	r0, [r4, #12]
 8009b90:	2202      	movs	r2, #2
 8009b92:	2112      	movs	r1, #18
 8009b94:	f7ff ff78 	bl	8009a88 <std>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	61a3      	str	r3, [r4, #24]
 8009b9c:	e7d2      	b.n	8009b44 <__sinit+0xc>
 8009b9e:	bf00      	nop
 8009ba0:	0800b6c0 	.word	0x0800b6c0
 8009ba4:	08009ad1 	.word	0x08009ad1

08009ba8 <__sfp>:
 8009ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009baa:	4607      	mov	r7, r0
 8009bac:	f7ff ffac 	bl	8009b08 <__sfp_lock_acquire>
 8009bb0:	4b1e      	ldr	r3, [pc, #120]	; (8009c2c <__sfp+0x84>)
 8009bb2:	681e      	ldr	r6, [r3, #0]
 8009bb4:	69b3      	ldr	r3, [r6, #24]
 8009bb6:	b913      	cbnz	r3, 8009bbe <__sfp+0x16>
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff ffbd 	bl	8009b38 <__sinit>
 8009bbe:	3648      	adds	r6, #72	; 0x48
 8009bc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	d503      	bpl.n	8009bd0 <__sfp+0x28>
 8009bc8:	6833      	ldr	r3, [r6, #0]
 8009bca:	b30b      	cbz	r3, 8009c10 <__sfp+0x68>
 8009bcc:	6836      	ldr	r6, [r6, #0]
 8009bce:	e7f7      	b.n	8009bc0 <__sfp+0x18>
 8009bd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bd4:	b9d5      	cbnz	r5, 8009c0c <__sfp+0x64>
 8009bd6:	4b16      	ldr	r3, [pc, #88]	; (8009c30 <__sfp+0x88>)
 8009bd8:	60e3      	str	r3, [r4, #12]
 8009bda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bde:	6665      	str	r5, [r4, #100]	; 0x64
 8009be0:	f7ff fc2c 	bl	800943c <__retarget_lock_init_recursive>
 8009be4:	f7ff ff96 	bl	8009b14 <__sfp_lock_release>
 8009be8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bf0:	6025      	str	r5, [r4, #0]
 8009bf2:	61a5      	str	r5, [r4, #24]
 8009bf4:	2208      	movs	r2, #8
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bfc:	f7ff fc40 	bl	8009480 <memset>
 8009c00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c08:	4620      	mov	r0, r4
 8009c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c0c:	3468      	adds	r4, #104	; 0x68
 8009c0e:	e7d9      	b.n	8009bc4 <__sfp+0x1c>
 8009c10:	2104      	movs	r1, #4
 8009c12:	4638      	mov	r0, r7
 8009c14:	f7ff ff62 	bl	8009adc <__sfmoreglue>
 8009c18:	4604      	mov	r4, r0
 8009c1a:	6030      	str	r0, [r6, #0]
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d1d5      	bne.n	8009bcc <__sfp+0x24>
 8009c20:	f7ff ff78 	bl	8009b14 <__sfp_lock_release>
 8009c24:	230c      	movs	r3, #12
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	e7ee      	b.n	8009c08 <__sfp+0x60>
 8009c2a:	bf00      	nop
 8009c2c:	0800b6c0 	.word	0x0800b6c0
 8009c30:	ffff0001 	.word	0xffff0001

08009c34 <fiprintf>:
 8009c34:	b40e      	push	{r1, r2, r3}
 8009c36:	b503      	push	{r0, r1, lr}
 8009c38:	4601      	mov	r1, r0
 8009c3a:	ab03      	add	r3, sp, #12
 8009c3c:	4805      	ldr	r0, [pc, #20]	; (8009c54 <fiprintf+0x20>)
 8009c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c42:	6800      	ldr	r0, [r0, #0]
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	f000 f8c1 	bl	8009dcc <_vfiprintf_r>
 8009c4a:	b002      	add	sp, #8
 8009c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c50:	b003      	add	sp, #12
 8009c52:	4770      	bx	lr
 8009c54:	20000010 	.word	0x20000010

08009c58 <_fwalk_reent>:
 8009c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	4688      	mov	r8, r1
 8009c60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c64:	2700      	movs	r7, #0
 8009c66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c6a:	f1b9 0901 	subs.w	r9, r9, #1
 8009c6e:	d505      	bpl.n	8009c7c <_fwalk_reent+0x24>
 8009c70:	6824      	ldr	r4, [r4, #0]
 8009c72:	2c00      	cmp	r4, #0
 8009c74:	d1f7      	bne.n	8009c66 <_fwalk_reent+0xe>
 8009c76:	4638      	mov	r0, r7
 8009c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c7c:	89ab      	ldrh	r3, [r5, #12]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d907      	bls.n	8009c92 <_fwalk_reent+0x3a>
 8009c82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c86:	3301      	adds	r3, #1
 8009c88:	d003      	beq.n	8009c92 <_fwalk_reent+0x3a>
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	47c0      	blx	r8
 8009c90:	4307      	orrs	r7, r0
 8009c92:	3568      	adds	r5, #104	; 0x68
 8009c94:	e7e9      	b.n	8009c6a <_fwalk_reent+0x12>

08009c96 <__swhatbuf_r>:
 8009c96:	b570      	push	{r4, r5, r6, lr}
 8009c98:	460e      	mov	r6, r1
 8009c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c9e:	2900      	cmp	r1, #0
 8009ca0:	b096      	sub	sp, #88	; 0x58
 8009ca2:	4614      	mov	r4, r2
 8009ca4:	461d      	mov	r5, r3
 8009ca6:	da08      	bge.n	8009cba <__swhatbuf_r+0x24>
 8009ca8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	602a      	str	r2, [r5, #0]
 8009cb0:	061a      	lsls	r2, r3, #24
 8009cb2:	d410      	bmi.n	8009cd6 <__swhatbuf_r+0x40>
 8009cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cb8:	e00e      	b.n	8009cd8 <__swhatbuf_r+0x42>
 8009cba:	466a      	mov	r2, sp
 8009cbc:	f000 fbb8 	bl	800a430 <_fstat_r>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	dbf1      	blt.n	8009ca8 <__swhatbuf_r+0x12>
 8009cc4:	9a01      	ldr	r2, [sp, #4]
 8009cc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cce:	425a      	negs	r2, r3
 8009cd0:	415a      	adcs	r2, r3
 8009cd2:	602a      	str	r2, [r5, #0]
 8009cd4:	e7ee      	b.n	8009cb4 <__swhatbuf_r+0x1e>
 8009cd6:	2340      	movs	r3, #64	; 0x40
 8009cd8:	2000      	movs	r0, #0
 8009cda:	6023      	str	r3, [r4, #0]
 8009cdc:	b016      	add	sp, #88	; 0x58
 8009cde:	bd70      	pop	{r4, r5, r6, pc}

08009ce0 <__smakebuf_r>:
 8009ce0:	898b      	ldrh	r3, [r1, #12]
 8009ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ce4:	079d      	lsls	r5, r3, #30
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	460c      	mov	r4, r1
 8009cea:	d507      	bpl.n	8009cfc <__smakebuf_r+0x1c>
 8009cec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	6123      	str	r3, [r4, #16]
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	6163      	str	r3, [r4, #20]
 8009cf8:	b002      	add	sp, #8
 8009cfa:	bd70      	pop	{r4, r5, r6, pc}
 8009cfc:	ab01      	add	r3, sp, #4
 8009cfe:	466a      	mov	r2, sp
 8009d00:	f7ff ffc9 	bl	8009c96 <__swhatbuf_r>
 8009d04:	9900      	ldr	r1, [sp, #0]
 8009d06:	4605      	mov	r5, r0
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f7ff fc2d 	bl	8009568 <_malloc_r>
 8009d0e:	b948      	cbnz	r0, 8009d24 <__smakebuf_r+0x44>
 8009d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d14:	059a      	lsls	r2, r3, #22
 8009d16:	d4ef      	bmi.n	8009cf8 <__smakebuf_r+0x18>
 8009d18:	f023 0303 	bic.w	r3, r3, #3
 8009d1c:	f043 0302 	orr.w	r3, r3, #2
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	e7e3      	b.n	8009cec <__smakebuf_r+0xc>
 8009d24:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <__smakebuf_r+0x7c>)
 8009d26:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	6020      	str	r0, [r4, #0]
 8009d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d30:	81a3      	strh	r3, [r4, #12]
 8009d32:	9b00      	ldr	r3, [sp, #0]
 8009d34:	6163      	str	r3, [r4, #20]
 8009d36:	9b01      	ldr	r3, [sp, #4]
 8009d38:	6120      	str	r0, [r4, #16]
 8009d3a:	b15b      	cbz	r3, 8009d54 <__smakebuf_r+0x74>
 8009d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d40:	4630      	mov	r0, r6
 8009d42:	f000 fb87 	bl	800a454 <_isatty_r>
 8009d46:	b128      	cbz	r0, 8009d54 <__smakebuf_r+0x74>
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	f023 0303 	bic.w	r3, r3, #3
 8009d4e:	f043 0301 	orr.w	r3, r3, #1
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	89a0      	ldrh	r0, [r4, #12]
 8009d56:	4305      	orrs	r5, r0
 8009d58:	81a5      	strh	r5, [r4, #12]
 8009d5a:	e7cd      	b.n	8009cf8 <__smakebuf_r+0x18>
 8009d5c:	08009ad1 	.word	0x08009ad1

08009d60 <__malloc_lock>:
 8009d60:	4801      	ldr	r0, [pc, #4]	; (8009d68 <__malloc_lock+0x8>)
 8009d62:	f7ff bb6c 	b.w	800943e <__retarget_lock_acquire_recursive>
 8009d66:	bf00      	nop
 8009d68:	20008ca0 	.word	0x20008ca0

08009d6c <__malloc_unlock>:
 8009d6c:	4801      	ldr	r0, [pc, #4]	; (8009d74 <__malloc_unlock+0x8>)
 8009d6e:	f7ff bb67 	b.w	8009440 <__retarget_lock_release_recursive>
 8009d72:	bf00      	nop
 8009d74:	20008ca0 	.word	0x20008ca0

08009d78 <__sfputc_r>:
 8009d78:	6893      	ldr	r3, [r2, #8]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	b410      	push	{r4}
 8009d80:	6093      	str	r3, [r2, #8]
 8009d82:	da08      	bge.n	8009d96 <__sfputc_r+0x1e>
 8009d84:	6994      	ldr	r4, [r2, #24]
 8009d86:	42a3      	cmp	r3, r4
 8009d88:	db01      	blt.n	8009d8e <__sfputc_r+0x16>
 8009d8a:	290a      	cmp	r1, #10
 8009d8c:	d103      	bne.n	8009d96 <__sfputc_r+0x1e>
 8009d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d92:	f7ff bcd9 	b.w	8009748 <__swbuf_r>
 8009d96:	6813      	ldr	r3, [r2, #0]
 8009d98:	1c58      	adds	r0, r3, #1
 8009d9a:	6010      	str	r0, [r2, #0]
 8009d9c:	7019      	strb	r1, [r3, #0]
 8009d9e:	4608      	mov	r0, r1
 8009da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <__sfputs_r>:
 8009da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da8:	4606      	mov	r6, r0
 8009daa:	460f      	mov	r7, r1
 8009dac:	4614      	mov	r4, r2
 8009dae:	18d5      	adds	r5, r2, r3
 8009db0:	42ac      	cmp	r4, r5
 8009db2:	d101      	bne.n	8009db8 <__sfputs_r+0x12>
 8009db4:	2000      	movs	r0, #0
 8009db6:	e007      	b.n	8009dc8 <__sfputs_r+0x22>
 8009db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dbc:	463a      	mov	r2, r7
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	f7ff ffda 	bl	8009d78 <__sfputc_r>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d1f3      	bne.n	8009db0 <__sfputs_r+0xa>
 8009dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009dcc <_vfiprintf_r>:
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	460d      	mov	r5, r1
 8009dd2:	b09d      	sub	sp, #116	; 0x74
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	4698      	mov	r8, r3
 8009dd8:	4606      	mov	r6, r0
 8009dda:	b118      	cbz	r0, 8009de4 <_vfiprintf_r+0x18>
 8009ddc:	6983      	ldr	r3, [r0, #24]
 8009dde:	b90b      	cbnz	r3, 8009de4 <_vfiprintf_r+0x18>
 8009de0:	f7ff feaa 	bl	8009b38 <__sinit>
 8009de4:	4b89      	ldr	r3, [pc, #548]	; (800a00c <_vfiprintf_r+0x240>)
 8009de6:	429d      	cmp	r5, r3
 8009de8:	d11b      	bne.n	8009e22 <_vfiprintf_r+0x56>
 8009dea:	6875      	ldr	r5, [r6, #4]
 8009dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dee:	07d9      	lsls	r1, r3, #31
 8009df0:	d405      	bmi.n	8009dfe <_vfiprintf_r+0x32>
 8009df2:	89ab      	ldrh	r3, [r5, #12]
 8009df4:	059a      	lsls	r2, r3, #22
 8009df6:	d402      	bmi.n	8009dfe <_vfiprintf_r+0x32>
 8009df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dfa:	f7ff fb20 	bl	800943e <__retarget_lock_acquire_recursive>
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	071b      	lsls	r3, r3, #28
 8009e02:	d501      	bpl.n	8009e08 <_vfiprintf_r+0x3c>
 8009e04:	692b      	ldr	r3, [r5, #16]
 8009e06:	b9eb      	cbnz	r3, 8009e44 <_vfiprintf_r+0x78>
 8009e08:	4629      	mov	r1, r5
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7ff fcee 	bl	80097ec <__swsetup_r>
 8009e10:	b1c0      	cbz	r0, 8009e44 <_vfiprintf_r+0x78>
 8009e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e14:	07dc      	lsls	r4, r3, #31
 8009e16:	d50e      	bpl.n	8009e36 <_vfiprintf_r+0x6a>
 8009e18:	f04f 30ff 	mov.w	r0, #4294967295
 8009e1c:	b01d      	add	sp, #116	; 0x74
 8009e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e22:	4b7b      	ldr	r3, [pc, #492]	; (800a010 <_vfiprintf_r+0x244>)
 8009e24:	429d      	cmp	r5, r3
 8009e26:	d101      	bne.n	8009e2c <_vfiprintf_r+0x60>
 8009e28:	68b5      	ldr	r5, [r6, #8]
 8009e2a:	e7df      	b.n	8009dec <_vfiprintf_r+0x20>
 8009e2c:	4b79      	ldr	r3, [pc, #484]	; (800a014 <_vfiprintf_r+0x248>)
 8009e2e:	429d      	cmp	r5, r3
 8009e30:	bf08      	it	eq
 8009e32:	68f5      	ldreq	r5, [r6, #12]
 8009e34:	e7da      	b.n	8009dec <_vfiprintf_r+0x20>
 8009e36:	89ab      	ldrh	r3, [r5, #12]
 8009e38:	0598      	lsls	r0, r3, #22
 8009e3a:	d4ed      	bmi.n	8009e18 <_vfiprintf_r+0x4c>
 8009e3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e3e:	f7ff faff 	bl	8009440 <__retarget_lock_release_recursive>
 8009e42:	e7e9      	b.n	8009e18 <_vfiprintf_r+0x4c>
 8009e44:	2300      	movs	r3, #0
 8009e46:	9309      	str	r3, [sp, #36]	; 0x24
 8009e48:	2320      	movs	r3, #32
 8009e4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e52:	2330      	movs	r3, #48	; 0x30
 8009e54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a018 <_vfiprintf_r+0x24c>
 8009e58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e5c:	f04f 0901 	mov.w	r9, #1
 8009e60:	4623      	mov	r3, r4
 8009e62:	469a      	mov	sl, r3
 8009e64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e68:	b10a      	cbz	r2, 8009e6e <_vfiprintf_r+0xa2>
 8009e6a:	2a25      	cmp	r2, #37	; 0x25
 8009e6c:	d1f9      	bne.n	8009e62 <_vfiprintf_r+0x96>
 8009e6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009e72:	d00b      	beq.n	8009e8c <_vfiprintf_r+0xc0>
 8009e74:	465b      	mov	r3, fp
 8009e76:	4622      	mov	r2, r4
 8009e78:	4629      	mov	r1, r5
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f7ff ff93 	bl	8009da6 <__sfputs_r>
 8009e80:	3001      	adds	r0, #1
 8009e82:	f000 80aa 	beq.w	8009fda <_vfiprintf_r+0x20e>
 8009e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e88:	445a      	add	r2, fp
 8009e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f000 80a2 	beq.w	8009fda <_vfiprintf_r+0x20e>
 8009e96:	2300      	movs	r3, #0
 8009e98:	f04f 32ff 	mov.w	r2, #4294967295
 8009e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ea0:	f10a 0a01 	add.w	sl, sl, #1
 8009ea4:	9304      	str	r3, [sp, #16]
 8009ea6:	9307      	str	r3, [sp, #28]
 8009ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eac:	931a      	str	r3, [sp, #104]	; 0x68
 8009eae:	4654      	mov	r4, sl
 8009eb0:	2205      	movs	r2, #5
 8009eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eb6:	4858      	ldr	r0, [pc, #352]	; (800a018 <_vfiprintf_r+0x24c>)
 8009eb8:	f7f6 f98a 	bl	80001d0 <memchr>
 8009ebc:	9a04      	ldr	r2, [sp, #16]
 8009ebe:	b9d8      	cbnz	r0, 8009ef8 <_vfiprintf_r+0x12c>
 8009ec0:	06d1      	lsls	r1, r2, #27
 8009ec2:	bf44      	itt	mi
 8009ec4:	2320      	movmi	r3, #32
 8009ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eca:	0713      	lsls	r3, r2, #28
 8009ecc:	bf44      	itt	mi
 8009ece:	232b      	movmi	r3, #43	; 0x2b
 8009ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8009eda:	d015      	beq.n	8009f08 <_vfiprintf_r+0x13c>
 8009edc:	9a07      	ldr	r2, [sp, #28]
 8009ede:	4654      	mov	r4, sl
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	f04f 0c0a 	mov.w	ip, #10
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eec:	3b30      	subs	r3, #48	; 0x30
 8009eee:	2b09      	cmp	r3, #9
 8009ef0:	d94e      	bls.n	8009f90 <_vfiprintf_r+0x1c4>
 8009ef2:	b1b0      	cbz	r0, 8009f22 <_vfiprintf_r+0x156>
 8009ef4:	9207      	str	r2, [sp, #28]
 8009ef6:	e014      	b.n	8009f22 <_vfiprintf_r+0x156>
 8009ef8:	eba0 0308 	sub.w	r3, r0, r8
 8009efc:	fa09 f303 	lsl.w	r3, r9, r3
 8009f00:	4313      	orrs	r3, r2
 8009f02:	9304      	str	r3, [sp, #16]
 8009f04:	46a2      	mov	sl, r4
 8009f06:	e7d2      	b.n	8009eae <_vfiprintf_r+0xe2>
 8009f08:	9b03      	ldr	r3, [sp, #12]
 8009f0a:	1d19      	adds	r1, r3, #4
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	9103      	str	r1, [sp, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	bfbb      	ittet	lt
 8009f14:	425b      	neglt	r3, r3
 8009f16:	f042 0202 	orrlt.w	r2, r2, #2
 8009f1a:	9307      	strge	r3, [sp, #28]
 8009f1c:	9307      	strlt	r3, [sp, #28]
 8009f1e:	bfb8      	it	lt
 8009f20:	9204      	strlt	r2, [sp, #16]
 8009f22:	7823      	ldrb	r3, [r4, #0]
 8009f24:	2b2e      	cmp	r3, #46	; 0x2e
 8009f26:	d10c      	bne.n	8009f42 <_vfiprintf_r+0x176>
 8009f28:	7863      	ldrb	r3, [r4, #1]
 8009f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f2c:	d135      	bne.n	8009f9a <_vfiprintf_r+0x1ce>
 8009f2e:	9b03      	ldr	r3, [sp, #12]
 8009f30:	1d1a      	adds	r2, r3, #4
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	9203      	str	r2, [sp, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	bfb8      	it	lt
 8009f3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f3e:	3402      	adds	r4, #2
 8009f40:	9305      	str	r3, [sp, #20]
 8009f42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a028 <_vfiprintf_r+0x25c>
 8009f46:	7821      	ldrb	r1, [r4, #0]
 8009f48:	2203      	movs	r2, #3
 8009f4a:	4650      	mov	r0, sl
 8009f4c:	f7f6 f940 	bl	80001d0 <memchr>
 8009f50:	b140      	cbz	r0, 8009f64 <_vfiprintf_r+0x198>
 8009f52:	2340      	movs	r3, #64	; 0x40
 8009f54:	eba0 000a 	sub.w	r0, r0, sl
 8009f58:	fa03 f000 	lsl.w	r0, r3, r0
 8009f5c:	9b04      	ldr	r3, [sp, #16]
 8009f5e:	4303      	orrs	r3, r0
 8009f60:	3401      	adds	r4, #1
 8009f62:	9304      	str	r3, [sp, #16]
 8009f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f68:	482c      	ldr	r0, [pc, #176]	; (800a01c <_vfiprintf_r+0x250>)
 8009f6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f6e:	2206      	movs	r2, #6
 8009f70:	f7f6 f92e 	bl	80001d0 <memchr>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d03f      	beq.n	8009ff8 <_vfiprintf_r+0x22c>
 8009f78:	4b29      	ldr	r3, [pc, #164]	; (800a020 <_vfiprintf_r+0x254>)
 8009f7a:	bb1b      	cbnz	r3, 8009fc4 <_vfiprintf_r+0x1f8>
 8009f7c:	9b03      	ldr	r3, [sp, #12]
 8009f7e:	3307      	adds	r3, #7
 8009f80:	f023 0307 	bic.w	r3, r3, #7
 8009f84:	3308      	adds	r3, #8
 8009f86:	9303      	str	r3, [sp, #12]
 8009f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8a:	443b      	add	r3, r7
 8009f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f8e:	e767      	b.n	8009e60 <_vfiprintf_r+0x94>
 8009f90:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f94:	460c      	mov	r4, r1
 8009f96:	2001      	movs	r0, #1
 8009f98:	e7a5      	b.n	8009ee6 <_vfiprintf_r+0x11a>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	3401      	adds	r4, #1
 8009f9e:	9305      	str	r3, [sp, #20]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	f04f 0c0a 	mov.w	ip, #10
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fac:	3a30      	subs	r2, #48	; 0x30
 8009fae:	2a09      	cmp	r2, #9
 8009fb0:	d903      	bls.n	8009fba <_vfiprintf_r+0x1ee>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0c5      	beq.n	8009f42 <_vfiprintf_r+0x176>
 8009fb6:	9105      	str	r1, [sp, #20]
 8009fb8:	e7c3      	b.n	8009f42 <_vfiprintf_r+0x176>
 8009fba:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e7f0      	b.n	8009fa6 <_vfiprintf_r+0x1da>
 8009fc4:	ab03      	add	r3, sp, #12
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	462a      	mov	r2, r5
 8009fca:	4b16      	ldr	r3, [pc, #88]	; (800a024 <_vfiprintf_r+0x258>)
 8009fcc:	a904      	add	r1, sp, #16
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f3af 8000 	nop.w
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	1c78      	adds	r0, r7, #1
 8009fd8:	d1d6      	bne.n	8009f88 <_vfiprintf_r+0x1bc>
 8009fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fdc:	07d9      	lsls	r1, r3, #31
 8009fde:	d405      	bmi.n	8009fec <_vfiprintf_r+0x220>
 8009fe0:	89ab      	ldrh	r3, [r5, #12]
 8009fe2:	059a      	lsls	r2, r3, #22
 8009fe4:	d402      	bmi.n	8009fec <_vfiprintf_r+0x220>
 8009fe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fe8:	f7ff fa2a 	bl	8009440 <__retarget_lock_release_recursive>
 8009fec:	89ab      	ldrh	r3, [r5, #12]
 8009fee:	065b      	lsls	r3, r3, #25
 8009ff0:	f53f af12 	bmi.w	8009e18 <_vfiprintf_r+0x4c>
 8009ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ff6:	e711      	b.n	8009e1c <_vfiprintf_r+0x50>
 8009ff8:	ab03      	add	r3, sp, #12
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	462a      	mov	r2, r5
 8009ffe:	4b09      	ldr	r3, [pc, #36]	; (800a024 <_vfiprintf_r+0x258>)
 800a000:	a904      	add	r1, sp, #16
 800a002:	4630      	mov	r0, r6
 800a004:	f000 f880 	bl	800a108 <_printf_i>
 800a008:	e7e4      	b.n	8009fd4 <_vfiprintf_r+0x208>
 800a00a:	bf00      	nop
 800a00c:	0800b794 	.word	0x0800b794
 800a010:	0800b7b4 	.word	0x0800b7b4
 800a014:	0800b774 	.word	0x0800b774
 800a018:	0800b7d4 	.word	0x0800b7d4
 800a01c:	0800b7de 	.word	0x0800b7de
 800a020:	00000000 	.word	0x00000000
 800a024:	08009da7 	.word	0x08009da7
 800a028:	0800b7da 	.word	0x0800b7da

0800a02c <_printf_common>:
 800a02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a030:	4616      	mov	r6, r2
 800a032:	4699      	mov	r9, r3
 800a034:	688a      	ldr	r2, [r1, #8]
 800a036:	690b      	ldr	r3, [r1, #16]
 800a038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a03c:	4293      	cmp	r3, r2
 800a03e:	bfb8      	it	lt
 800a040:	4613      	movlt	r3, r2
 800a042:	6033      	str	r3, [r6, #0]
 800a044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a048:	4607      	mov	r7, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	b10a      	cbz	r2, 800a052 <_printf_common+0x26>
 800a04e:	3301      	adds	r3, #1
 800a050:	6033      	str	r3, [r6, #0]
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	0699      	lsls	r1, r3, #26
 800a056:	bf42      	ittt	mi
 800a058:	6833      	ldrmi	r3, [r6, #0]
 800a05a:	3302      	addmi	r3, #2
 800a05c:	6033      	strmi	r3, [r6, #0]
 800a05e:	6825      	ldr	r5, [r4, #0]
 800a060:	f015 0506 	ands.w	r5, r5, #6
 800a064:	d106      	bne.n	800a074 <_printf_common+0x48>
 800a066:	f104 0a19 	add.w	sl, r4, #25
 800a06a:	68e3      	ldr	r3, [r4, #12]
 800a06c:	6832      	ldr	r2, [r6, #0]
 800a06e:	1a9b      	subs	r3, r3, r2
 800a070:	42ab      	cmp	r3, r5
 800a072:	dc26      	bgt.n	800a0c2 <_printf_common+0x96>
 800a074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a078:	1e13      	subs	r3, r2, #0
 800a07a:	6822      	ldr	r2, [r4, #0]
 800a07c:	bf18      	it	ne
 800a07e:	2301      	movne	r3, #1
 800a080:	0692      	lsls	r2, r2, #26
 800a082:	d42b      	bmi.n	800a0dc <_printf_common+0xb0>
 800a084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a088:	4649      	mov	r1, r9
 800a08a:	4638      	mov	r0, r7
 800a08c:	47c0      	blx	r8
 800a08e:	3001      	adds	r0, #1
 800a090:	d01e      	beq.n	800a0d0 <_printf_common+0xa4>
 800a092:	6823      	ldr	r3, [r4, #0]
 800a094:	68e5      	ldr	r5, [r4, #12]
 800a096:	6832      	ldr	r2, [r6, #0]
 800a098:	f003 0306 	and.w	r3, r3, #6
 800a09c:	2b04      	cmp	r3, #4
 800a09e:	bf08      	it	eq
 800a0a0:	1aad      	subeq	r5, r5, r2
 800a0a2:	68a3      	ldr	r3, [r4, #8]
 800a0a4:	6922      	ldr	r2, [r4, #16]
 800a0a6:	bf0c      	ite	eq
 800a0a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0ac:	2500      	movne	r5, #0
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	bfc4      	itt	gt
 800a0b2:	1a9b      	subgt	r3, r3, r2
 800a0b4:	18ed      	addgt	r5, r5, r3
 800a0b6:	2600      	movs	r6, #0
 800a0b8:	341a      	adds	r4, #26
 800a0ba:	42b5      	cmp	r5, r6
 800a0bc:	d11a      	bne.n	800a0f4 <_printf_common+0xc8>
 800a0be:	2000      	movs	r0, #0
 800a0c0:	e008      	b.n	800a0d4 <_printf_common+0xa8>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	4652      	mov	r2, sl
 800a0c6:	4649      	mov	r1, r9
 800a0c8:	4638      	mov	r0, r7
 800a0ca:	47c0      	blx	r8
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d103      	bne.n	800a0d8 <_printf_common+0xac>
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d8:	3501      	adds	r5, #1
 800a0da:	e7c6      	b.n	800a06a <_printf_common+0x3e>
 800a0dc:	18e1      	adds	r1, r4, r3
 800a0de:	1c5a      	adds	r2, r3, #1
 800a0e0:	2030      	movs	r0, #48	; 0x30
 800a0e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0e6:	4422      	add	r2, r4
 800a0e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0f0:	3302      	adds	r3, #2
 800a0f2:	e7c7      	b.n	800a084 <_printf_common+0x58>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	4622      	mov	r2, r4
 800a0f8:	4649      	mov	r1, r9
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	47c0      	blx	r8
 800a0fe:	3001      	adds	r0, #1
 800a100:	d0e6      	beq.n	800a0d0 <_printf_common+0xa4>
 800a102:	3601      	adds	r6, #1
 800a104:	e7d9      	b.n	800a0ba <_printf_common+0x8e>
	...

0800a108 <_printf_i>:
 800a108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a10c:	7e0f      	ldrb	r7, [r1, #24]
 800a10e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a110:	2f78      	cmp	r7, #120	; 0x78
 800a112:	4691      	mov	r9, r2
 800a114:	4680      	mov	r8, r0
 800a116:	460c      	mov	r4, r1
 800a118:	469a      	mov	sl, r3
 800a11a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a11e:	d807      	bhi.n	800a130 <_printf_i+0x28>
 800a120:	2f62      	cmp	r7, #98	; 0x62
 800a122:	d80a      	bhi.n	800a13a <_printf_i+0x32>
 800a124:	2f00      	cmp	r7, #0
 800a126:	f000 80d8 	beq.w	800a2da <_printf_i+0x1d2>
 800a12a:	2f58      	cmp	r7, #88	; 0x58
 800a12c:	f000 80a3 	beq.w	800a276 <_printf_i+0x16e>
 800a130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a138:	e03a      	b.n	800a1b0 <_printf_i+0xa8>
 800a13a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a13e:	2b15      	cmp	r3, #21
 800a140:	d8f6      	bhi.n	800a130 <_printf_i+0x28>
 800a142:	a101      	add	r1, pc, #4	; (adr r1, 800a148 <_printf_i+0x40>)
 800a144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a148:	0800a1a1 	.word	0x0800a1a1
 800a14c:	0800a1b5 	.word	0x0800a1b5
 800a150:	0800a131 	.word	0x0800a131
 800a154:	0800a131 	.word	0x0800a131
 800a158:	0800a131 	.word	0x0800a131
 800a15c:	0800a131 	.word	0x0800a131
 800a160:	0800a1b5 	.word	0x0800a1b5
 800a164:	0800a131 	.word	0x0800a131
 800a168:	0800a131 	.word	0x0800a131
 800a16c:	0800a131 	.word	0x0800a131
 800a170:	0800a131 	.word	0x0800a131
 800a174:	0800a2c1 	.word	0x0800a2c1
 800a178:	0800a1e5 	.word	0x0800a1e5
 800a17c:	0800a2a3 	.word	0x0800a2a3
 800a180:	0800a131 	.word	0x0800a131
 800a184:	0800a131 	.word	0x0800a131
 800a188:	0800a2e3 	.word	0x0800a2e3
 800a18c:	0800a131 	.word	0x0800a131
 800a190:	0800a1e5 	.word	0x0800a1e5
 800a194:	0800a131 	.word	0x0800a131
 800a198:	0800a131 	.word	0x0800a131
 800a19c:	0800a2ab 	.word	0x0800a2ab
 800a1a0:	682b      	ldr	r3, [r5, #0]
 800a1a2:	1d1a      	adds	r2, r3, #4
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	602a      	str	r2, [r5, #0]
 800a1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e0a3      	b.n	800a2fc <_printf_i+0x1f4>
 800a1b4:	6820      	ldr	r0, [r4, #0]
 800a1b6:	6829      	ldr	r1, [r5, #0]
 800a1b8:	0606      	lsls	r6, r0, #24
 800a1ba:	f101 0304 	add.w	r3, r1, #4
 800a1be:	d50a      	bpl.n	800a1d6 <_printf_i+0xce>
 800a1c0:	680e      	ldr	r6, [r1, #0]
 800a1c2:	602b      	str	r3, [r5, #0]
 800a1c4:	2e00      	cmp	r6, #0
 800a1c6:	da03      	bge.n	800a1d0 <_printf_i+0xc8>
 800a1c8:	232d      	movs	r3, #45	; 0x2d
 800a1ca:	4276      	negs	r6, r6
 800a1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1d0:	485e      	ldr	r0, [pc, #376]	; (800a34c <_printf_i+0x244>)
 800a1d2:	230a      	movs	r3, #10
 800a1d4:	e019      	b.n	800a20a <_printf_i+0x102>
 800a1d6:	680e      	ldr	r6, [r1, #0]
 800a1d8:	602b      	str	r3, [r5, #0]
 800a1da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1de:	bf18      	it	ne
 800a1e0:	b236      	sxthne	r6, r6
 800a1e2:	e7ef      	b.n	800a1c4 <_printf_i+0xbc>
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	6820      	ldr	r0, [r4, #0]
 800a1e8:	1d19      	adds	r1, r3, #4
 800a1ea:	6029      	str	r1, [r5, #0]
 800a1ec:	0601      	lsls	r1, r0, #24
 800a1ee:	d501      	bpl.n	800a1f4 <_printf_i+0xec>
 800a1f0:	681e      	ldr	r6, [r3, #0]
 800a1f2:	e002      	b.n	800a1fa <_printf_i+0xf2>
 800a1f4:	0646      	lsls	r6, r0, #25
 800a1f6:	d5fb      	bpl.n	800a1f0 <_printf_i+0xe8>
 800a1f8:	881e      	ldrh	r6, [r3, #0]
 800a1fa:	4854      	ldr	r0, [pc, #336]	; (800a34c <_printf_i+0x244>)
 800a1fc:	2f6f      	cmp	r7, #111	; 0x6f
 800a1fe:	bf0c      	ite	eq
 800a200:	2308      	moveq	r3, #8
 800a202:	230a      	movne	r3, #10
 800a204:	2100      	movs	r1, #0
 800a206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a20a:	6865      	ldr	r5, [r4, #4]
 800a20c:	60a5      	str	r5, [r4, #8]
 800a20e:	2d00      	cmp	r5, #0
 800a210:	bfa2      	ittt	ge
 800a212:	6821      	ldrge	r1, [r4, #0]
 800a214:	f021 0104 	bicge.w	r1, r1, #4
 800a218:	6021      	strge	r1, [r4, #0]
 800a21a:	b90e      	cbnz	r6, 800a220 <_printf_i+0x118>
 800a21c:	2d00      	cmp	r5, #0
 800a21e:	d04d      	beq.n	800a2bc <_printf_i+0x1b4>
 800a220:	4615      	mov	r5, r2
 800a222:	fbb6 f1f3 	udiv	r1, r6, r3
 800a226:	fb03 6711 	mls	r7, r3, r1, r6
 800a22a:	5dc7      	ldrb	r7, [r0, r7]
 800a22c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a230:	4637      	mov	r7, r6
 800a232:	42bb      	cmp	r3, r7
 800a234:	460e      	mov	r6, r1
 800a236:	d9f4      	bls.n	800a222 <_printf_i+0x11a>
 800a238:	2b08      	cmp	r3, #8
 800a23a:	d10b      	bne.n	800a254 <_printf_i+0x14c>
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	07de      	lsls	r6, r3, #31
 800a240:	d508      	bpl.n	800a254 <_printf_i+0x14c>
 800a242:	6923      	ldr	r3, [r4, #16]
 800a244:	6861      	ldr	r1, [r4, #4]
 800a246:	4299      	cmp	r1, r3
 800a248:	bfde      	ittt	le
 800a24a:	2330      	movle	r3, #48	; 0x30
 800a24c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a250:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a254:	1b52      	subs	r2, r2, r5
 800a256:	6122      	str	r2, [r4, #16]
 800a258:	f8cd a000 	str.w	sl, [sp]
 800a25c:	464b      	mov	r3, r9
 800a25e:	aa03      	add	r2, sp, #12
 800a260:	4621      	mov	r1, r4
 800a262:	4640      	mov	r0, r8
 800a264:	f7ff fee2 	bl	800a02c <_printf_common>
 800a268:	3001      	adds	r0, #1
 800a26a:	d14c      	bne.n	800a306 <_printf_i+0x1fe>
 800a26c:	f04f 30ff 	mov.w	r0, #4294967295
 800a270:	b004      	add	sp, #16
 800a272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a276:	4835      	ldr	r0, [pc, #212]	; (800a34c <_printf_i+0x244>)
 800a278:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a27c:	6829      	ldr	r1, [r5, #0]
 800a27e:	6823      	ldr	r3, [r4, #0]
 800a280:	f851 6b04 	ldr.w	r6, [r1], #4
 800a284:	6029      	str	r1, [r5, #0]
 800a286:	061d      	lsls	r5, r3, #24
 800a288:	d514      	bpl.n	800a2b4 <_printf_i+0x1ac>
 800a28a:	07df      	lsls	r7, r3, #31
 800a28c:	bf44      	itt	mi
 800a28e:	f043 0320 	orrmi.w	r3, r3, #32
 800a292:	6023      	strmi	r3, [r4, #0]
 800a294:	b91e      	cbnz	r6, 800a29e <_printf_i+0x196>
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	f023 0320 	bic.w	r3, r3, #32
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	2310      	movs	r3, #16
 800a2a0:	e7b0      	b.n	800a204 <_printf_i+0xfc>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	f043 0320 	orr.w	r3, r3, #32
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	2378      	movs	r3, #120	; 0x78
 800a2ac:	4828      	ldr	r0, [pc, #160]	; (800a350 <_printf_i+0x248>)
 800a2ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2b2:	e7e3      	b.n	800a27c <_printf_i+0x174>
 800a2b4:	0659      	lsls	r1, r3, #25
 800a2b6:	bf48      	it	mi
 800a2b8:	b2b6      	uxthmi	r6, r6
 800a2ba:	e7e6      	b.n	800a28a <_printf_i+0x182>
 800a2bc:	4615      	mov	r5, r2
 800a2be:	e7bb      	b.n	800a238 <_printf_i+0x130>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	6826      	ldr	r6, [r4, #0]
 800a2c4:	6961      	ldr	r1, [r4, #20]
 800a2c6:	1d18      	adds	r0, r3, #4
 800a2c8:	6028      	str	r0, [r5, #0]
 800a2ca:	0635      	lsls	r5, r6, #24
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	d501      	bpl.n	800a2d4 <_printf_i+0x1cc>
 800a2d0:	6019      	str	r1, [r3, #0]
 800a2d2:	e002      	b.n	800a2da <_printf_i+0x1d2>
 800a2d4:	0670      	lsls	r0, r6, #25
 800a2d6:	d5fb      	bpl.n	800a2d0 <_printf_i+0x1c8>
 800a2d8:	8019      	strh	r1, [r3, #0]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	6123      	str	r3, [r4, #16]
 800a2de:	4615      	mov	r5, r2
 800a2e0:	e7ba      	b.n	800a258 <_printf_i+0x150>
 800a2e2:	682b      	ldr	r3, [r5, #0]
 800a2e4:	1d1a      	adds	r2, r3, #4
 800a2e6:	602a      	str	r2, [r5, #0]
 800a2e8:	681d      	ldr	r5, [r3, #0]
 800a2ea:	6862      	ldr	r2, [r4, #4]
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	f7f5 ff6e 	bl	80001d0 <memchr>
 800a2f4:	b108      	cbz	r0, 800a2fa <_printf_i+0x1f2>
 800a2f6:	1b40      	subs	r0, r0, r5
 800a2f8:	6060      	str	r0, [r4, #4]
 800a2fa:	6863      	ldr	r3, [r4, #4]
 800a2fc:	6123      	str	r3, [r4, #16]
 800a2fe:	2300      	movs	r3, #0
 800a300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a304:	e7a8      	b.n	800a258 <_printf_i+0x150>
 800a306:	6923      	ldr	r3, [r4, #16]
 800a308:	462a      	mov	r2, r5
 800a30a:	4649      	mov	r1, r9
 800a30c:	4640      	mov	r0, r8
 800a30e:	47d0      	blx	sl
 800a310:	3001      	adds	r0, #1
 800a312:	d0ab      	beq.n	800a26c <_printf_i+0x164>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	079b      	lsls	r3, r3, #30
 800a318:	d413      	bmi.n	800a342 <_printf_i+0x23a>
 800a31a:	68e0      	ldr	r0, [r4, #12]
 800a31c:	9b03      	ldr	r3, [sp, #12]
 800a31e:	4298      	cmp	r0, r3
 800a320:	bfb8      	it	lt
 800a322:	4618      	movlt	r0, r3
 800a324:	e7a4      	b.n	800a270 <_printf_i+0x168>
 800a326:	2301      	movs	r3, #1
 800a328:	4632      	mov	r2, r6
 800a32a:	4649      	mov	r1, r9
 800a32c:	4640      	mov	r0, r8
 800a32e:	47d0      	blx	sl
 800a330:	3001      	adds	r0, #1
 800a332:	d09b      	beq.n	800a26c <_printf_i+0x164>
 800a334:	3501      	adds	r5, #1
 800a336:	68e3      	ldr	r3, [r4, #12]
 800a338:	9903      	ldr	r1, [sp, #12]
 800a33a:	1a5b      	subs	r3, r3, r1
 800a33c:	42ab      	cmp	r3, r5
 800a33e:	dcf2      	bgt.n	800a326 <_printf_i+0x21e>
 800a340:	e7eb      	b.n	800a31a <_printf_i+0x212>
 800a342:	2500      	movs	r5, #0
 800a344:	f104 0619 	add.w	r6, r4, #25
 800a348:	e7f5      	b.n	800a336 <_printf_i+0x22e>
 800a34a:	bf00      	nop
 800a34c:	0800b7e5 	.word	0x0800b7e5
 800a350:	0800b7f6 	.word	0x0800b7f6

0800a354 <__sread>:
 800a354:	b510      	push	{r4, lr}
 800a356:	460c      	mov	r4, r1
 800a358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a35c:	f000 f89c 	bl	800a498 <_read_r>
 800a360:	2800      	cmp	r0, #0
 800a362:	bfab      	itete	ge
 800a364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a366:	89a3      	ldrhlt	r3, [r4, #12]
 800a368:	181b      	addge	r3, r3, r0
 800a36a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a36e:	bfac      	ite	ge
 800a370:	6563      	strge	r3, [r4, #84]	; 0x54
 800a372:	81a3      	strhlt	r3, [r4, #12]
 800a374:	bd10      	pop	{r4, pc}

0800a376 <__swrite>:
 800a376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a37a:	461f      	mov	r7, r3
 800a37c:	898b      	ldrh	r3, [r1, #12]
 800a37e:	05db      	lsls	r3, r3, #23
 800a380:	4605      	mov	r5, r0
 800a382:	460c      	mov	r4, r1
 800a384:	4616      	mov	r6, r2
 800a386:	d505      	bpl.n	800a394 <__swrite+0x1e>
 800a388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a38c:	2302      	movs	r3, #2
 800a38e:	2200      	movs	r2, #0
 800a390:	f000 f870 	bl	800a474 <_lseek_r>
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a39a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a39e:	81a3      	strh	r3, [r4, #12]
 800a3a0:	4632      	mov	r2, r6
 800a3a2:	463b      	mov	r3, r7
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3aa:	f000 b817 	b.w	800a3dc <_write_r>

0800a3ae <__sseek>:
 800a3ae:	b510      	push	{r4, lr}
 800a3b0:	460c      	mov	r4, r1
 800a3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b6:	f000 f85d 	bl	800a474 <_lseek_r>
 800a3ba:	1c43      	adds	r3, r0, #1
 800a3bc:	89a3      	ldrh	r3, [r4, #12]
 800a3be:	bf15      	itete	ne
 800a3c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3ca:	81a3      	strheq	r3, [r4, #12]
 800a3cc:	bf18      	it	ne
 800a3ce:	81a3      	strhne	r3, [r4, #12]
 800a3d0:	bd10      	pop	{r4, pc}

0800a3d2 <__sclose>:
 800a3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d6:	f000 b81b 	b.w	800a410 <_close_r>
	...

0800a3dc <_write_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	4d07      	ldr	r5, [pc, #28]	; (800a3fc <_write_r+0x20>)
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	4608      	mov	r0, r1
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	602a      	str	r2, [r5, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	f7f8 fce5 	bl	8002dba <_write>
 800a3f0:	1c43      	adds	r3, r0, #1
 800a3f2:	d102      	bne.n	800a3fa <_write_r+0x1e>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	b103      	cbz	r3, 800a3fa <_write_r+0x1e>
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	bd38      	pop	{r3, r4, r5, pc}
 800a3fc:	20008cac 	.word	0x20008cac

0800a400 <abort>:
 800a400:	b508      	push	{r3, lr}
 800a402:	2006      	movs	r0, #6
 800a404:	f000 f882 	bl	800a50c <raise>
 800a408:	2001      	movs	r0, #1
 800a40a:	f7f8 fcaf 	bl	8002d6c <_exit>
	...

0800a410 <_close_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	4d06      	ldr	r5, [pc, #24]	; (800a42c <_close_r+0x1c>)
 800a414:	2300      	movs	r3, #0
 800a416:	4604      	mov	r4, r0
 800a418:	4608      	mov	r0, r1
 800a41a:	602b      	str	r3, [r5, #0]
 800a41c:	f7f8 fce9 	bl	8002df2 <_close>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d102      	bne.n	800a42a <_close_r+0x1a>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	b103      	cbz	r3, 800a42a <_close_r+0x1a>
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	bd38      	pop	{r3, r4, r5, pc}
 800a42c:	20008cac 	.word	0x20008cac

0800a430 <_fstat_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4d07      	ldr	r5, [pc, #28]	; (800a450 <_fstat_r+0x20>)
 800a434:	2300      	movs	r3, #0
 800a436:	4604      	mov	r4, r0
 800a438:	4608      	mov	r0, r1
 800a43a:	4611      	mov	r1, r2
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	f7f8 fce4 	bl	8002e0a <_fstat>
 800a442:	1c43      	adds	r3, r0, #1
 800a444:	d102      	bne.n	800a44c <_fstat_r+0x1c>
 800a446:	682b      	ldr	r3, [r5, #0]
 800a448:	b103      	cbz	r3, 800a44c <_fstat_r+0x1c>
 800a44a:	6023      	str	r3, [r4, #0]
 800a44c:	bd38      	pop	{r3, r4, r5, pc}
 800a44e:	bf00      	nop
 800a450:	20008cac 	.word	0x20008cac

0800a454 <_isatty_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d06      	ldr	r5, [pc, #24]	; (800a470 <_isatty_r+0x1c>)
 800a458:	2300      	movs	r3, #0
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	602b      	str	r3, [r5, #0]
 800a460:	f7f8 fce3 	bl	8002e2a <_isatty>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_isatty_r+0x1a>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_isatty_r+0x1a>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	20008cac 	.word	0x20008cac

0800a474 <_lseek_r>:
 800a474:	b538      	push	{r3, r4, r5, lr}
 800a476:	4d07      	ldr	r5, [pc, #28]	; (800a494 <_lseek_r+0x20>)
 800a478:	4604      	mov	r4, r0
 800a47a:	4608      	mov	r0, r1
 800a47c:	4611      	mov	r1, r2
 800a47e:	2200      	movs	r2, #0
 800a480:	602a      	str	r2, [r5, #0]
 800a482:	461a      	mov	r2, r3
 800a484:	f7f8 fcdc 	bl	8002e40 <_lseek>
 800a488:	1c43      	adds	r3, r0, #1
 800a48a:	d102      	bne.n	800a492 <_lseek_r+0x1e>
 800a48c:	682b      	ldr	r3, [r5, #0]
 800a48e:	b103      	cbz	r3, 800a492 <_lseek_r+0x1e>
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	bd38      	pop	{r3, r4, r5, pc}
 800a494:	20008cac 	.word	0x20008cac

0800a498 <_read_r>:
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	4d07      	ldr	r5, [pc, #28]	; (800a4b8 <_read_r+0x20>)
 800a49c:	4604      	mov	r4, r0
 800a49e:	4608      	mov	r0, r1
 800a4a0:	4611      	mov	r1, r2
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	602a      	str	r2, [r5, #0]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	f7f8 fc6a 	bl	8002d80 <_read>
 800a4ac:	1c43      	adds	r3, r0, #1
 800a4ae:	d102      	bne.n	800a4b6 <_read_r+0x1e>
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	b103      	cbz	r3, 800a4b6 <_read_r+0x1e>
 800a4b4:	6023      	str	r3, [r4, #0]
 800a4b6:	bd38      	pop	{r3, r4, r5, pc}
 800a4b8:	20008cac 	.word	0x20008cac

0800a4bc <_raise_r>:
 800a4bc:	291f      	cmp	r1, #31
 800a4be:	b538      	push	{r3, r4, r5, lr}
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	460d      	mov	r5, r1
 800a4c4:	d904      	bls.n	800a4d0 <_raise_r+0x14>
 800a4c6:	2316      	movs	r3, #22
 800a4c8:	6003      	str	r3, [r0, #0]
 800a4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ce:	bd38      	pop	{r3, r4, r5, pc}
 800a4d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4d2:	b112      	cbz	r2, 800a4da <_raise_r+0x1e>
 800a4d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4d8:	b94b      	cbnz	r3, 800a4ee <_raise_r+0x32>
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f000 f830 	bl	800a540 <_getpid_r>
 800a4e0:	462a      	mov	r2, r5
 800a4e2:	4601      	mov	r1, r0
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4ea:	f000 b817 	b.w	800a51c <_kill_r>
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d00a      	beq.n	800a508 <_raise_r+0x4c>
 800a4f2:	1c59      	adds	r1, r3, #1
 800a4f4:	d103      	bne.n	800a4fe <_raise_r+0x42>
 800a4f6:	2316      	movs	r3, #22
 800a4f8:	6003      	str	r3, [r0, #0]
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	e7e7      	b.n	800a4ce <_raise_r+0x12>
 800a4fe:	2400      	movs	r4, #0
 800a500:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a504:	4628      	mov	r0, r5
 800a506:	4798      	blx	r3
 800a508:	2000      	movs	r0, #0
 800a50a:	e7e0      	b.n	800a4ce <_raise_r+0x12>

0800a50c <raise>:
 800a50c:	4b02      	ldr	r3, [pc, #8]	; (800a518 <raise+0xc>)
 800a50e:	4601      	mov	r1, r0
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	f7ff bfd3 	b.w	800a4bc <_raise_r>
 800a516:	bf00      	nop
 800a518:	20000010 	.word	0x20000010

0800a51c <_kill_r>:
 800a51c:	b538      	push	{r3, r4, r5, lr}
 800a51e:	4d07      	ldr	r5, [pc, #28]	; (800a53c <_kill_r+0x20>)
 800a520:	2300      	movs	r3, #0
 800a522:	4604      	mov	r4, r0
 800a524:	4608      	mov	r0, r1
 800a526:	4611      	mov	r1, r2
 800a528:	602b      	str	r3, [r5, #0]
 800a52a:	f7f8 fc0f 	bl	8002d4c <_kill>
 800a52e:	1c43      	adds	r3, r0, #1
 800a530:	d102      	bne.n	800a538 <_kill_r+0x1c>
 800a532:	682b      	ldr	r3, [r5, #0]
 800a534:	b103      	cbz	r3, 800a538 <_kill_r+0x1c>
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	bd38      	pop	{r3, r4, r5, pc}
 800a53a:	bf00      	nop
 800a53c:	20008cac 	.word	0x20008cac

0800a540 <_getpid_r>:
 800a540:	f7f8 bbfc 	b.w	8002d3c <_getpid>

0800a544 <pow>:
 800a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a546:	ed2d 8b02 	vpush	{d8}
 800a54a:	eeb0 8a40 	vmov.f32	s16, s0
 800a54e:	eef0 8a60 	vmov.f32	s17, s1
 800a552:	ec55 4b11 	vmov	r4, r5, d1
 800a556:	f000 f867 	bl	800a628 <__ieee754_pow>
 800a55a:	4622      	mov	r2, r4
 800a55c:	462b      	mov	r3, r5
 800a55e:	4620      	mov	r0, r4
 800a560:	4629      	mov	r1, r5
 800a562:	ec57 6b10 	vmov	r6, r7, d0
 800a566:	f7f6 fad9 	bl	8000b1c <__aeabi_dcmpun>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d13b      	bne.n	800a5e6 <pow+0xa2>
 800a56e:	ec51 0b18 	vmov	r0, r1, d8
 800a572:	2200      	movs	r2, #0
 800a574:	2300      	movs	r3, #0
 800a576:	f7f6 fa9f 	bl	8000ab8 <__aeabi_dcmpeq>
 800a57a:	b1b8      	cbz	r0, 800a5ac <pow+0x68>
 800a57c:	2200      	movs	r2, #0
 800a57e:	2300      	movs	r3, #0
 800a580:	4620      	mov	r0, r4
 800a582:	4629      	mov	r1, r5
 800a584:	f7f6 fa98 	bl	8000ab8 <__aeabi_dcmpeq>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d146      	bne.n	800a61a <pow+0xd6>
 800a58c:	ec45 4b10 	vmov	d0, r4, r5
 800a590:	f000 fe63 	bl	800b25a <finite>
 800a594:	b338      	cbz	r0, 800a5e6 <pow+0xa2>
 800a596:	2200      	movs	r2, #0
 800a598:	2300      	movs	r3, #0
 800a59a:	4620      	mov	r0, r4
 800a59c:	4629      	mov	r1, r5
 800a59e:	f7f6 fa95 	bl	8000acc <__aeabi_dcmplt>
 800a5a2:	b300      	cbz	r0, 800a5e6 <pow+0xa2>
 800a5a4:	f7fe feb2 	bl	800930c <__errno>
 800a5a8:	2322      	movs	r3, #34	; 0x22
 800a5aa:	e01b      	b.n	800a5e4 <pow+0xa0>
 800a5ac:	ec47 6b10 	vmov	d0, r6, r7
 800a5b0:	f000 fe53 	bl	800b25a <finite>
 800a5b4:	b9e0      	cbnz	r0, 800a5f0 <pow+0xac>
 800a5b6:	eeb0 0a48 	vmov.f32	s0, s16
 800a5ba:	eef0 0a68 	vmov.f32	s1, s17
 800a5be:	f000 fe4c 	bl	800b25a <finite>
 800a5c2:	b1a8      	cbz	r0, 800a5f0 <pow+0xac>
 800a5c4:	ec45 4b10 	vmov	d0, r4, r5
 800a5c8:	f000 fe47 	bl	800b25a <finite>
 800a5cc:	b180      	cbz	r0, 800a5f0 <pow+0xac>
 800a5ce:	4632      	mov	r2, r6
 800a5d0:	463b      	mov	r3, r7
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	f7f6 faa1 	bl	8000b1c <__aeabi_dcmpun>
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	d0e2      	beq.n	800a5a4 <pow+0x60>
 800a5de:	f7fe fe95 	bl	800930c <__errno>
 800a5e2:	2321      	movs	r3, #33	; 0x21
 800a5e4:	6003      	str	r3, [r0, #0]
 800a5e6:	ecbd 8b02 	vpop	{d8}
 800a5ea:	ec47 6b10 	vmov	d0, r6, r7
 800a5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	4639      	mov	r1, r7
 800a5f8:	f7f6 fa5e 	bl	8000ab8 <__aeabi_dcmpeq>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d0f2      	beq.n	800a5e6 <pow+0xa2>
 800a600:	eeb0 0a48 	vmov.f32	s0, s16
 800a604:	eef0 0a68 	vmov.f32	s1, s17
 800a608:	f000 fe27 	bl	800b25a <finite>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d0ea      	beq.n	800a5e6 <pow+0xa2>
 800a610:	ec45 4b10 	vmov	d0, r4, r5
 800a614:	f000 fe21 	bl	800b25a <finite>
 800a618:	e7c3      	b.n	800a5a2 <pow+0x5e>
 800a61a:	4f01      	ldr	r7, [pc, #4]	; (800a620 <pow+0xdc>)
 800a61c:	2600      	movs	r6, #0
 800a61e:	e7e2      	b.n	800a5e6 <pow+0xa2>
 800a620:	3ff00000 	.word	0x3ff00000
 800a624:	00000000 	.word	0x00000000

0800a628 <__ieee754_pow>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	ed2d 8b06 	vpush	{d8-d10}
 800a630:	b089      	sub	sp, #36	; 0x24
 800a632:	ed8d 1b00 	vstr	d1, [sp]
 800a636:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a63a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a63e:	ea58 0102 	orrs.w	r1, r8, r2
 800a642:	ec57 6b10 	vmov	r6, r7, d0
 800a646:	d115      	bne.n	800a674 <__ieee754_pow+0x4c>
 800a648:	19b3      	adds	r3, r6, r6
 800a64a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a64e:	4152      	adcs	r2, r2
 800a650:	4299      	cmp	r1, r3
 800a652:	4b89      	ldr	r3, [pc, #548]	; (800a878 <__ieee754_pow+0x250>)
 800a654:	4193      	sbcs	r3, r2
 800a656:	f080 84d2 	bcs.w	800affe <__ieee754_pow+0x9d6>
 800a65a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a65e:	4630      	mov	r0, r6
 800a660:	4639      	mov	r1, r7
 800a662:	f7f5 fe0b 	bl	800027c <__adddf3>
 800a666:	ec41 0b10 	vmov	d0, r0, r1
 800a66a:	b009      	add	sp, #36	; 0x24
 800a66c:	ecbd 8b06 	vpop	{d8-d10}
 800a670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a674:	4b81      	ldr	r3, [pc, #516]	; (800a87c <__ieee754_pow+0x254>)
 800a676:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a67a:	429c      	cmp	r4, r3
 800a67c:	ee10 aa10 	vmov	sl, s0
 800a680:	463d      	mov	r5, r7
 800a682:	dc06      	bgt.n	800a692 <__ieee754_pow+0x6a>
 800a684:	d101      	bne.n	800a68a <__ieee754_pow+0x62>
 800a686:	2e00      	cmp	r6, #0
 800a688:	d1e7      	bne.n	800a65a <__ieee754_pow+0x32>
 800a68a:	4598      	cmp	r8, r3
 800a68c:	dc01      	bgt.n	800a692 <__ieee754_pow+0x6a>
 800a68e:	d10f      	bne.n	800a6b0 <__ieee754_pow+0x88>
 800a690:	b172      	cbz	r2, 800a6b0 <__ieee754_pow+0x88>
 800a692:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a696:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a69a:	ea55 050a 	orrs.w	r5, r5, sl
 800a69e:	d1dc      	bne.n	800a65a <__ieee754_pow+0x32>
 800a6a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6a4:	18db      	adds	r3, r3, r3
 800a6a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a6aa:	4152      	adcs	r2, r2
 800a6ac:	429d      	cmp	r5, r3
 800a6ae:	e7d0      	b.n	800a652 <__ieee754_pow+0x2a>
 800a6b0:	2d00      	cmp	r5, #0
 800a6b2:	da3b      	bge.n	800a72c <__ieee754_pow+0x104>
 800a6b4:	4b72      	ldr	r3, [pc, #456]	; (800a880 <__ieee754_pow+0x258>)
 800a6b6:	4598      	cmp	r8, r3
 800a6b8:	dc51      	bgt.n	800a75e <__ieee754_pow+0x136>
 800a6ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a6be:	4598      	cmp	r8, r3
 800a6c0:	f340 84ac 	ble.w	800b01c <__ieee754_pow+0x9f4>
 800a6c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a6c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a6cc:	2b14      	cmp	r3, #20
 800a6ce:	dd0f      	ble.n	800a6f0 <__ieee754_pow+0xc8>
 800a6d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a6d4:	fa22 f103 	lsr.w	r1, r2, r3
 800a6d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	f040 849d 	bne.w	800b01c <__ieee754_pow+0x9f4>
 800a6e2:	f001 0101 	and.w	r1, r1, #1
 800a6e6:	f1c1 0302 	rsb	r3, r1, #2
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	b182      	cbz	r2, 800a710 <__ieee754_pow+0xe8>
 800a6ee:	e05f      	b.n	800a7b0 <__ieee754_pow+0x188>
 800a6f0:	2a00      	cmp	r2, #0
 800a6f2:	d15b      	bne.n	800a7ac <__ieee754_pow+0x184>
 800a6f4:	f1c3 0314 	rsb	r3, r3, #20
 800a6f8:	fa48 f103 	asr.w	r1, r8, r3
 800a6fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a700:	4543      	cmp	r3, r8
 800a702:	f040 8488 	bne.w	800b016 <__ieee754_pow+0x9ee>
 800a706:	f001 0101 	and.w	r1, r1, #1
 800a70a:	f1c1 0302 	rsb	r3, r1, #2
 800a70e:	9304      	str	r3, [sp, #16]
 800a710:	4b5c      	ldr	r3, [pc, #368]	; (800a884 <__ieee754_pow+0x25c>)
 800a712:	4598      	cmp	r8, r3
 800a714:	d132      	bne.n	800a77c <__ieee754_pow+0x154>
 800a716:	f1b9 0f00 	cmp.w	r9, #0
 800a71a:	f280 8478 	bge.w	800b00e <__ieee754_pow+0x9e6>
 800a71e:	4959      	ldr	r1, [pc, #356]	; (800a884 <__ieee754_pow+0x25c>)
 800a720:	4632      	mov	r2, r6
 800a722:	463b      	mov	r3, r7
 800a724:	2000      	movs	r0, #0
 800a726:	f7f6 f889 	bl	800083c <__aeabi_ddiv>
 800a72a:	e79c      	b.n	800a666 <__ieee754_pow+0x3e>
 800a72c:	2300      	movs	r3, #0
 800a72e:	9304      	str	r3, [sp, #16]
 800a730:	2a00      	cmp	r2, #0
 800a732:	d13d      	bne.n	800a7b0 <__ieee754_pow+0x188>
 800a734:	4b51      	ldr	r3, [pc, #324]	; (800a87c <__ieee754_pow+0x254>)
 800a736:	4598      	cmp	r8, r3
 800a738:	d1ea      	bne.n	800a710 <__ieee754_pow+0xe8>
 800a73a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a73e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a742:	ea53 030a 	orrs.w	r3, r3, sl
 800a746:	f000 845a 	beq.w	800affe <__ieee754_pow+0x9d6>
 800a74a:	4b4f      	ldr	r3, [pc, #316]	; (800a888 <__ieee754_pow+0x260>)
 800a74c:	429c      	cmp	r4, r3
 800a74e:	dd08      	ble.n	800a762 <__ieee754_pow+0x13a>
 800a750:	f1b9 0f00 	cmp.w	r9, #0
 800a754:	f2c0 8457 	blt.w	800b006 <__ieee754_pow+0x9de>
 800a758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a75c:	e783      	b.n	800a666 <__ieee754_pow+0x3e>
 800a75e:	2302      	movs	r3, #2
 800a760:	e7e5      	b.n	800a72e <__ieee754_pow+0x106>
 800a762:	f1b9 0f00 	cmp.w	r9, #0
 800a766:	f04f 0000 	mov.w	r0, #0
 800a76a:	f04f 0100 	mov.w	r1, #0
 800a76e:	f6bf af7a 	bge.w	800a666 <__ieee754_pow+0x3e>
 800a772:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a776:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a77a:	e774      	b.n	800a666 <__ieee754_pow+0x3e>
 800a77c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a780:	d106      	bne.n	800a790 <__ieee754_pow+0x168>
 800a782:	4632      	mov	r2, r6
 800a784:	463b      	mov	r3, r7
 800a786:	4630      	mov	r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	f7f5 ff2d 	bl	80005e8 <__aeabi_dmul>
 800a78e:	e76a      	b.n	800a666 <__ieee754_pow+0x3e>
 800a790:	4b3e      	ldr	r3, [pc, #248]	; (800a88c <__ieee754_pow+0x264>)
 800a792:	4599      	cmp	r9, r3
 800a794:	d10c      	bne.n	800a7b0 <__ieee754_pow+0x188>
 800a796:	2d00      	cmp	r5, #0
 800a798:	db0a      	blt.n	800a7b0 <__ieee754_pow+0x188>
 800a79a:	ec47 6b10 	vmov	d0, r6, r7
 800a79e:	b009      	add	sp, #36	; 0x24
 800a7a0:	ecbd 8b06 	vpop	{d8-d10}
 800a7a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a8:	f000 bc6c 	b.w	800b084 <__ieee754_sqrt>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	9304      	str	r3, [sp, #16]
 800a7b0:	ec47 6b10 	vmov	d0, r6, r7
 800a7b4:	f000 fd48 	bl	800b248 <fabs>
 800a7b8:	ec51 0b10 	vmov	r0, r1, d0
 800a7bc:	f1ba 0f00 	cmp.w	sl, #0
 800a7c0:	d129      	bne.n	800a816 <__ieee754_pow+0x1ee>
 800a7c2:	b124      	cbz	r4, 800a7ce <__ieee754_pow+0x1a6>
 800a7c4:	4b2f      	ldr	r3, [pc, #188]	; (800a884 <__ieee754_pow+0x25c>)
 800a7c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d123      	bne.n	800a816 <__ieee754_pow+0x1ee>
 800a7ce:	f1b9 0f00 	cmp.w	r9, #0
 800a7d2:	da05      	bge.n	800a7e0 <__ieee754_pow+0x1b8>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	2000      	movs	r0, #0
 800a7da:	492a      	ldr	r1, [pc, #168]	; (800a884 <__ieee754_pow+0x25c>)
 800a7dc:	f7f6 f82e 	bl	800083c <__aeabi_ddiv>
 800a7e0:	2d00      	cmp	r5, #0
 800a7e2:	f6bf af40 	bge.w	800a666 <__ieee754_pow+0x3e>
 800a7e6:	9b04      	ldr	r3, [sp, #16]
 800a7e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a7ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a7f0:	4323      	orrs	r3, r4
 800a7f2:	d108      	bne.n	800a806 <__ieee754_pow+0x1de>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	f7f5 fd3c 	bl	8000278 <__aeabi_dsub>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	e78f      	b.n	800a726 <__ieee754_pow+0xfe>
 800a806:	9b04      	ldr	r3, [sp, #16]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	f47f af2c 	bne.w	800a666 <__ieee754_pow+0x3e>
 800a80e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a812:	4619      	mov	r1, r3
 800a814:	e727      	b.n	800a666 <__ieee754_pow+0x3e>
 800a816:	0feb      	lsrs	r3, r5, #31
 800a818:	3b01      	subs	r3, #1
 800a81a:	9306      	str	r3, [sp, #24]
 800a81c:	9a06      	ldr	r2, [sp, #24]
 800a81e:	9b04      	ldr	r3, [sp, #16]
 800a820:	4313      	orrs	r3, r2
 800a822:	d102      	bne.n	800a82a <__ieee754_pow+0x202>
 800a824:	4632      	mov	r2, r6
 800a826:	463b      	mov	r3, r7
 800a828:	e7e6      	b.n	800a7f8 <__ieee754_pow+0x1d0>
 800a82a:	4b19      	ldr	r3, [pc, #100]	; (800a890 <__ieee754_pow+0x268>)
 800a82c:	4598      	cmp	r8, r3
 800a82e:	f340 80fb 	ble.w	800aa28 <__ieee754_pow+0x400>
 800a832:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a836:	4598      	cmp	r8, r3
 800a838:	4b13      	ldr	r3, [pc, #76]	; (800a888 <__ieee754_pow+0x260>)
 800a83a:	dd0c      	ble.n	800a856 <__ieee754_pow+0x22e>
 800a83c:	429c      	cmp	r4, r3
 800a83e:	dc0f      	bgt.n	800a860 <__ieee754_pow+0x238>
 800a840:	f1b9 0f00 	cmp.w	r9, #0
 800a844:	da0f      	bge.n	800a866 <__ieee754_pow+0x23e>
 800a846:	2000      	movs	r0, #0
 800a848:	b009      	add	sp, #36	; 0x24
 800a84a:	ecbd 8b06 	vpop	{d8-d10}
 800a84e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a852:	f000 bcf0 	b.w	800b236 <__math_oflow>
 800a856:	429c      	cmp	r4, r3
 800a858:	dbf2      	blt.n	800a840 <__ieee754_pow+0x218>
 800a85a:	4b0a      	ldr	r3, [pc, #40]	; (800a884 <__ieee754_pow+0x25c>)
 800a85c:	429c      	cmp	r4, r3
 800a85e:	dd19      	ble.n	800a894 <__ieee754_pow+0x26c>
 800a860:	f1b9 0f00 	cmp.w	r9, #0
 800a864:	dcef      	bgt.n	800a846 <__ieee754_pow+0x21e>
 800a866:	2000      	movs	r0, #0
 800a868:	b009      	add	sp, #36	; 0x24
 800a86a:	ecbd 8b06 	vpop	{d8-d10}
 800a86e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a872:	f000 bcd7 	b.w	800b224 <__math_uflow>
 800a876:	bf00      	nop
 800a878:	fff00000 	.word	0xfff00000
 800a87c:	7ff00000 	.word	0x7ff00000
 800a880:	433fffff 	.word	0x433fffff
 800a884:	3ff00000 	.word	0x3ff00000
 800a888:	3fefffff 	.word	0x3fefffff
 800a88c:	3fe00000 	.word	0x3fe00000
 800a890:	41e00000 	.word	0x41e00000
 800a894:	4b60      	ldr	r3, [pc, #384]	; (800aa18 <__ieee754_pow+0x3f0>)
 800a896:	2200      	movs	r2, #0
 800a898:	f7f5 fcee 	bl	8000278 <__aeabi_dsub>
 800a89c:	a354      	add	r3, pc, #336	; (adr r3, 800a9f0 <__ieee754_pow+0x3c8>)
 800a89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	f7f5 fe9f 	bl	80005e8 <__aeabi_dmul>
 800a8aa:	a353      	add	r3, pc, #332	; (adr r3, 800a9f8 <__ieee754_pow+0x3d0>)
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	460f      	mov	r7, r1
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	f7f5 fe96 	bl	80005e8 <__aeabi_dmul>
 800a8bc:	4b57      	ldr	r3, [pc, #348]	; (800aa1c <__ieee754_pow+0x3f4>)
 800a8be:	4682      	mov	sl, r0
 800a8c0:	468b      	mov	fp, r1
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	f7f5 fe8e 	bl	80005e8 <__aeabi_dmul>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	a14b      	add	r1, pc, #300	; (adr r1, 800aa00 <__ieee754_pow+0x3d8>)
 800a8d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8d6:	f7f5 fccf 	bl	8000278 <__aeabi_dsub>
 800a8da:	4622      	mov	r2, r4
 800a8dc:	462b      	mov	r3, r5
 800a8de:	f7f5 fe83 	bl	80005e8 <__aeabi_dmul>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	494d      	ldr	r1, [pc, #308]	; (800aa20 <__ieee754_pow+0x3f8>)
 800a8ea:	f7f5 fcc5 	bl	8000278 <__aeabi_dsub>
 800a8ee:	4622      	mov	r2, r4
 800a8f0:	4680      	mov	r8, r0
 800a8f2:	4689      	mov	r9, r1
 800a8f4:	462b      	mov	r3, r5
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	f7f5 fe75 	bl	80005e8 <__aeabi_dmul>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	4640      	mov	r0, r8
 800a904:	4649      	mov	r1, r9
 800a906:	f7f5 fe6f 	bl	80005e8 <__aeabi_dmul>
 800a90a:	a33f      	add	r3, pc, #252	; (adr r3, 800aa08 <__ieee754_pow+0x3e0>)
 800a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a910:	f7f5 fe6a 	bl	80005e8 <__aeabi_dmul>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	4650      	mov	r0, sl
 800a91a:	4659      	mov	r1, fp
 800a91c:	f7f5 fcac 	bl	8000278 <__aeabi_dsub>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	4680      	mov	r8, r0
 800a926:	4689      	mov	r9, r1
 800a928:	4630      	mov	r0, r6
 800a92a:	4639      	mov	r1, r7
 800a92c:	f7f5 fca6 	bl	800027c <__adddf3>
 800a930:	2000      	movs	r0, #0
 800a932:	4632      	mov	r2, r6
 800a934:	463b      	mov	r3, r7
 800a936:	4604      	mov	r4, r0
 800a938:	460d      	mov	r5, r1
 800a93a:	f7f5 fc9d 	bl	8000278 <__aeabi_dsub>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	4640      	mov	r0, r8
 800a944:	4649      	mov	r1, r9
 800a946:	f7f5 fc97 	bl	8000278 <__aeabi_dsub>
 800a94a:	9b04      	ldr	r3, [sp, #16]
 800a94c:	9a06      	ldr	r2, [sp, #24]
 800a94e:	3b01      	subs	r3, #1
 800a950:	4313      	orrs	r3, r2
 800a952:	4682      	mov	sl, r0
 800a954:	468b      	mov	fp, r1
 800a956:	f040 81e7 	bne.w	800ad28 <__ieee754_pow+0x700>
 800a95a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800aa10 <__ieee754_pow+0x3e8>
 800a95e:	eeb0 8a47 	vmov.f32	s16, s14
 800a962:	eef0 8a67 	vmov.f32	s17, s15
 800a966:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a96a:	2600      	movs	r6, #0
 800a96c:	4632      	mov	r2, r6
 800a96e:	463b      	mov	r3, r7
 800a970:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a974:	f7f5 fc80 	bl	8000278 <__aeabi_dsub>
 800a978:	4622      	mov	r2, r4
 800a97a:	462b      	mov	r3, r5
 800a97c:	f7f5 fe34 	bl	80005e8 <__aeabi_dmul>
 800a980:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a984:	4680      	mov	r8, r0
 800a986:	4689      	mov	r9, r1
 800a988:	4650      	mov	r0, sl
 800a98a:	4659      	mov	r1, fp
 800a98c:	f7f5 fe2c 	bl	80005e8 <__aeabi_dmul>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4640      	mov	r0, r8
 800a996:	4649      	mov	r1, r9
 800a998:	f7f5 fc70 	bl	800027c <__adddf3>
 800a99c:	4632      	mov	r2, r6
 800a99e:	463b      	mov	r3, r7
 800a9a0:	4680      	mov	r8, r0
 800a9a2:	4689      	mov	r9, r1
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	f7f5 fe1e 	bl	80005e8 <__aeabi_dmul>
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	f7f5 fc60 	bl	800027c <__adddf3>
 800a9bc:	4b19      	ldr	r3, [pc, #100]	; (800aa24 <__ieee754_pow+0x3fc>)
 800a9be:	4299      	cmp	r1, r3
 800a9c0:	ec45 4b19 	vmov	d9, r4, r5
 800a9c4:	4606      	mov	r6, r0
 800a9c6:	460f      	mov	r7, r1
 800a9c8:	468b      	mov	fp, r1
 800a9ca:	f340 82f1 	ble.w	800afb0 <__ieee754_pow+0x988>
 800a9ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a9d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a9d6:	4303      	orrs	r3, r0
 800a9d8:	f000 81e4 	beq.w	800ada4 <__ieee754_pow+0x77c>
 800a9dc:	ec51 0b18 	vmov	r0, r1, d8
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f7f6 f872 	bl	8000acc <__aeabi_dcmplt>
 800a9e8:	3800      	subs	r0, #0
 800a9ea:	bf18      	it	ne
 800a9ec:	2001      	movne	r0, #1
 800a9ee:	e72b      	b.n	800a848 <__ieee754_pow+0x220>
 800a9f0:	60000000 	.word	0x60000000
 800a9f4:	3ff71547 	.word	0x3ff71547
 800a9f8:	f85ddf44 	.word	0xf85ddf44
 800a9fc:	3e54ae0b 	.word	0x3e54ae0b
 800aa00:	55555555 	.word	0x55555555
 800aa04:	3fd55555 	.word	0x3fd55555
 800aa08:	652b82fe 	.word	0x652b82fe
 800aa0c:	3ff71547 	.word	0x3ff71547
 800aa10:	00000000 	.word	0x00000000
 800aa14:	bff00000 	.word	0xbff00000
 800aa18:	3ff00000 	.word	0x3ff00000
 800aa1c:	3fd00000 	.word	0x3fd00000
 800aa20:	3fe00000 	.word	0x3fe00000
 800aa24:	408fffff 	.word	0x408fffff
 800aa28:	4bd5      	ldr	r3, [pc, #852]	; (800ad80 <__ieee754_pow+0x758>)
 800aa2a:	402b      	ands	r3, r5
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	b92b      	cbnz	r3, 800aa3c <__ieee754_pow+0x414>
 800aa30:	4bd4      	ldr	r3, [pc, #848]	; (800ad84 <__ieee754_pow+0x75c>)
 800aa32:	f7f5 fdd9 	bl	80005e8 <__aeabi_dmul>
 800aa36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	1523      	asrs	r3, r4, #20
 800aa3e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa42:	4413      	add	r3, r2
 800aa44:	9305      	str	r3, [sp, #20]
 800aa46:	4bd0      	ldr	r3, [pc, #832]	; (800ad88 <__ieee754_pow+0x760>)
 800aa48:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aa4c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aa50:	429c      	cmp	r4, r3
 800aa52:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa56:	dd08      	ble.n	800aa6a <__ieee754_pow+0x442>
 800aa58:	4bcc      	ldr	r3, [pc, #816]	; (800ad8c <__ieee754_pow+0x764>)
 800aa5a:	429c      	cmp	r4, r3
 800aa5c:	f340 8162 	ble.w	800ad24 <__ieee754_pow+0x6fc>
 800aa60:	9b05      	ldr	r3, [sp, #20]
 800aa62:	3301      	adds	r3, #1
 800aa64:	9305      	str	r3, [sp, #20]
 800aa66:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aa6a:	2400      	movs	r4, #0
 800aa6c:	00e3      	lsls	r3, r4, #3
 800aa6e:	9307      	str	r3, [sp, #28]
 800aa70:	4bc7      	ldr	r3, [pc, #796]	; (800ad90 <__ieee754_pow+0x768>)
 800aa72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa76:	ed93 7b00 	vldr	d7, [r3]
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	ec53 2b17 	vmov	r2, r3, d7
 800aa80:	eeb0 9a47 	vmov.f32	s18, s14
 800aa84:	eef0 9a67 	vmov.f32	s19, s15
 800aa88:	4682      	mov	sl, r0
 800aa8a:	f7f5 fbf5 	bl	8000278 <__aeabi_dsub>
 800aa8e:	4652      	mov	r2, sl
 800aa90:	4606      	mov	r6, r0
 800aa92:	460f      	mov	r7, r1
 800aa94:	462b      	mov	r3, r5
 800aa96:	ec51 0b19 	vmov	r0, r1, d9
 800aa9a:	f7f5 fbef 	bl	800027c <__adddf3>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	49bb      	ldr	r1, [pc, #748]	; (800ad94 <__ieee754_pow+0x76c>)
 800aaa6:	f7f5 fec9 	bl	800083c <__aeabi_ddiv>
 800aaaa:	ec41 0b1a 	vmov	d10, r0, r1
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	4630      	mov	r0, r6
 800aab4:	4639      	mov	r1, r7
 800aab6:	f7f5 fd97 	bl	80005e8 <__aeabi_dmul>
 800aaba:	2300      	movs	r3, #0
 800aabc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aac0:	9302      	str	r3, [sp, #8]
 800aac2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aac6:	46ab      	mov	fp, r5
 800aac8:	106d      	asrs	r5, r5, #1
 800aaca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aace:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800aad2:	ec41 0b18 	vmov	d8, r0, r1
 800aad6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800aada:	2200      	movs	r2, #0
 800aadc:	4640      	mov	r0, r8
 800aade:	4649      	mov	r1, r9
 800aae0:	4614      	mov	r4, r2
 800aae2:	461d      	mov	r5, r3
 800aae4:	f7f5 fd80 	bl	80005e8 <__aeabi_dmul>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	4630      	mov	r0, r6
 800aaee:	4639      	mov	r1, r7
 800aaf0:	f7f5 fbc2 	bl	8000278 <__aeabi_dsub>
 800aaf4:	ec53 2b19 	vmov	r2, r3, d9
 800aaf8:	4606      	mov	r6, r0
 800aafa:	460f      	mov	r7, r1
 800aafc:	4620      	mov	r0, r4
 800aafe:	4629      	mov	r1, r5
 800ab00:	f7f5 fbba 	bl	8000278 <__aeabi_dsub>
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4650      	mov	r0, sl
 800ab0a:	4659      	mov	r1, fp
 800ab0c:	f7f5 fbb4 	bl	8000278 <__aeabi_dsub>
 800ab10:	4642      	mov	r2, r8
 800ab12:	464b      	mov	r3, r9
 800ab14:	f7f5 fd68 	bl	80005e8 <__aeabi_dmul>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	4639      	mov	r1, r7
 800ab20:	f7f5 fbaa 	bl	8000278 <__aeabi_dsub>
 800ab24:	ec53 2b1a 	vmov	r2, r3, d10
 800ab28:	f7f5 fd5e 	bl	80005e8 <__aeabi_dmul>
 800ab2c:	ec53 2b18 	vmov	r2, r3, d8
 800ab30:	ec41 0b19 	vmov	d9, r0, r1
 800ab34:	ec51 0b18 	vmov	r0, r1, d8
 800ab38:	f7f5 fd56 	bl	80005e8 <__aeabi_dmul>
 800ab3c:	a37c      	add	r3, pc, #496	; (adr r3, 800ad30 <__ieee754_pow+0x708>)
 800ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab42:	4604      	mov	r4, r0
 800ab44:	460d      	mov	r5, r1
 800ab46:	f7f5 fd4f 	bl	80005e8 <__aeabi_dmul>
 800ab4a:	a37b      	add	r3, pc, #492	; (adr r3, 800ad38 <__ieee754_pow+0x710>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	f7f5 fb94 	bl	800027c <__adddf3>
 800ab54:	4622      	mov	r2, r4
 800ab56:	462b      	mov	r3, r5
 800ab58:	f7f5 fd46 	bl	80005e8 <__aeabi_dmul>
 800ab5c:	a378      	add	r3, pc, #480	; (adr r3, 800ad40 <__ieee754_pow+0x718>)
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	f7f5 fb8b 	bl	800027c <__adddf3>
 800ab66:	4622      	mov	r2, r4
 800ab68:	462b      	mov	r3, r5
 800ab6a:	f7f5 fd3d 	bl	80005e8 <__aeabi_dmul>
 800ab6e:	a376      	add	r3, pc, #472	; (adr r3, 800ad48 <__ieee754_pow+0x720>)
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	f7f5 fb82 	bl	800027c <__adddf3>
 800ab78:	4622      	mov	r2, r4
 800ab7a:	462b      	mov	r3, r5
 800ab7c:	f7f5 fd34 	bl	80005e8 <__aeabi_dmul>
 800ab80:	a373      	add	r3, pc, #460	; (adr r3, 800ad50 <__ieee754_pow+0x728>)
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	f7f5 fb79 	bl	800027c <__adddf3>
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	462b      	mov	r3, r5
 800ab8e:	f7f5 fd2b 	bl	80005e8 <__aeabi_dmul>
 800ab92:	a371      	add	r3, pc, #452	; (adr r3, 800ad58 <__ieee754_pow+0x730>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fb70 	bl	800027c <__adddf3>
 800ab9c:	4622      	mov	r2, r4
 800ab9e:	4606      	mov	r6, r0
 800aba0:	460f      	mov	r7, r1
 800aba2:	462b      	mov	r3, r5
 800aba4:	4620      	mov	r0, r4
 800aba6:	4629      	mov	r1, r5
 800aba8:	f7f5 fd1e 	bl	80005e8 <__aeabi_dmul>
 800abac:	4602      	mov	r2, r0
 800abae:	460b      	mov	r3, r1
 800abb0:	4630      	mov	r0, r6
 800abb2:	4639      	mov	r1, r7
 800abb4:	f7f5 fd18 	bl	80005e8 <__aeabi_dmul>
 800abb8:	4642      	mov	r2, r8
 800abba:	4604      	mov	r4, r0
 800abbc:	460d      	mov	r5, r1
 800abbe:	464b      	mov	r3, r9
 800abc0:	ec51 0b18 	vmov	r0, r1, d8
 800abc4:	f7f5 fb5a 	bl	800027c <__adddf3>
 800abc8:	ec53 2b19 	vmov	r2, r3, d9
 800abcc:	f7f5 fd0c 	bl	80005e8 <__aeabi_dmul>
 800abd0:	4622      	mov	r2, r4
 800abd2:	462b      	mov	r3, r5
 800abd4:	f7f5 fb52 	bl	800027c <__adddf3>
 800abd8:	4642      	mov	r2, r8
 800abda:	4682      	mov	sl, r0
 800abdc:	468b      	mov	fp, r1
 800abde:	464b      	mov	r3, r9
 800abe0:	4640      	mov	r0, r8
 800abe2:	4649      	mov	r1, r9
 800abe4:	f7f5 fd00 	bl	80005e8 <__aeabi_dmul>
 800abe8:	4b6b      	ldr	r3, [pc, #428]	; (800ad98 <__ieee754_pow+0x770>)
 800abea:	2200      	movs	r2, #0
 800abec:	4606      	mov	r6, r0
 800abee:	460f      	mov	r7, r1
 800abf0:	f7f5 fb44 	bl	800027c <__adddf3>
 800abf4:	4652      	mov	r2, sl
 800abf6:	465b      	mov	r3, fp
 800abf8:	f7f5 fb40 	bl	800027c <__adddf3>
 800abfc:	2000      	movs	r0, #0
 800abfe:	4604      	mov	r4, r0
 800ac00:	460d      	mov	r5, r1
 800ac02:	4602      	mov	r2, r0
 800ac04:	460b      	mov	r3, r1
 800ac06:	4640      	mov	r0, r8
 800ac08:	4649      	mov	r1, r9
 800ac0a:	f7f5 fced 	bl	80005e8 <__aeabi_dmul>
 800ac0e:	4b62      	ldr	r3, [pc, #392]	; (800ad98 <__ieee754_pow+0x770>)
 800ac10:	4680      	mov	r8, r0
 800ac12:	4689      	mov	r9, r1
 800ac14:	2200      	movs	r2, #0
 800ac16:	4620      	mov	r0, r4
 800ac18:	4629      	mov	r1, r5
 800ac1a:	f7f5 fb2d 	bl	8000278 <__aeabi_dsub>
 800ac1e:	4632      	mov	r2, r6
 800ac20:	463b      	mov	r3, r7
 800ac22:	f7f5 fb29 	bl	8000278 <__aeabi_dsub>
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	4650      	mov	r0, sl
 800ac2c:	4659      	mov	r1, fp
 800ac2e:	f7f5 fb23 	bl	8000278 <__aeabi_dsub>
 800ac32:	ec53 2b18 	vmov	r2, r3, d8
 800ac36:	f7f5 fcd7 	bl	80005e8 <__aeabi_dmul>
 800ac3a:	4622      	mov	r2, r4
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	460f      	mov	r7, r1
 800ac40:	462b      	mov	r3, r5
 800ac42:	ec51 0b19 	vmov	r0, r1, d9
 800ac46:	f7f5 fccf 	bl	80005e8 <__aeabi_dmul>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4630      	mov	r0, r6
 800ac50:	4639      	mov	r1, r7
 800ac52:	f7f5 fb13 	bl	800027c <__adddf3>
 800ac56:	4606      	mov	r6, r0
 800ac58:	460f      	mov	r7, r1
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4640      	mov	r0, r8
 800ac60:	4649      	mov	r1, r9
 800ac62:	f7f5 fb0b 	bl	800027c <__adddf3>
 800ac66:	a33e      	add	r3, pc, #248	; (adr r3, 800ad60 <__ieee754_pow+0x738>)
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	4604      	mov	r4, r0
 800ac70:	460d      	mov	r5, r1
 800ac72:	f7f5 fcb9 	bl	80005e8 <__aeabi_dmul>
 800ac76:	4642      	mov	r2, r8
 800ac78:	ec41 0b18 	vmov	d8, r0, r1
 800ac7c:	464b      	mov	r3, r9
 800ac7e:	4620      	mov	r0, r4
 800ac80:	4629      	mov	r1, r5
 800ac82:	f7f5 faf9 	bl	8000278 <__aeabi_dsub>
 800ac86:	4602      	mov	r2, r0
 800ac88:	460b      	mov	r3, r1
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	4639      	mov	r1, r7
 800ac8e:	f7f5 faf3 	bl	8000278 <__aeabi_dsub>
 800ac92:	a335      	add	r3, pc, #212	; (adr r3, 800ad68 <__ieee754_pow+0x740>)
 800ac94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac98:	f7f5 fca6 	bl	80005e8 <__aeabi_dmul>
 800ac9c:	a334      	add	r3, pc, #208	; (adr r3, 800ad70 <__ieee754_pow+0x748>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	4606      	mov	r6, r0
 800aca4:	460f      	mov	r7, r1
 800aca6:	4620      	mov	r0, r4
 800aca8:	4629      	mov	r1, r5
 800acaa:	f7f5 fc9d 	bl	80005e8 <__aeabi_dmul>
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
 800acb2:	4630      	mov	r0, r6
 800acb4:	4639      	mov	r1, r7
 800acb6:	f7f5 fae1 	bl	800027c <__adddf3>
 800acba:	9a07      	ldr	r2, [sp, #28]
 800acbc:	4b37      	ldr	r3, [pc, #220]	; (800ad9c <__ieee754_pow+0x774>)
 800acbe:	4413      	add	r3, r2
 800acc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc4:	f7f5 fada 	bl	800027c <__adddf3>
 800acc8:	4682      	mov	sl, r0
 800acca:	9805      	ldr	r0, [sp, #20]
 800accc:	468b      	mov	fp, r1
 800acce:	f7f5 fc21 	bl	8000514 <__aeabi_i2d>
 800acd2:	9a07      	ldr	r2, [sp, #28]
 800acd4:	4b32      	ldr	r3, [pc, #200]	; (800ada0 <__ieee754_pow+0x778>)
 800acd6:	4413      	add	r3, r2
 800acd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acdc:	4606      	mov	r6, r0
 800acde:	460f      	mov	r7, r1
 800ace0:	4652      	mov	r2, sl
 800ace2:	465b      	mov	r3, fp
 800ace4:	ec51 0b18 	vmov	r0, r1, d8
 800ace8:	f7f5 fac8 	bl	800027c <__adddf3>
 800acec:	4642      	mov	r2, r8
 800acee:	464b      	mov	r3, r9
 800acf0:	f7f5 fac4 	bl	800027c <__adddf3>
 800acf4:	4632      	mov	r2, r6
 800acf6:	463b      	mov	r3, r7
 800acf8:	f7f5 fac0 	bl	800027c <__adddf3>
 800acfc:	2000      	movs	r0, #0
 800acfe:	4632      	mov	r2, r6
 800ad00:	463b      	mov	r3, r7
 800ad02:	4604      	mov	r4, r0
 800ad04:	460d      	mov	r5, r1
 800ad06:	f7f5 fab7 	bl	8000278 <__aeabi_dsub>
 800ad0a:	4642      	mov	r2, r8
 800ad0c:	464b      	mov	r3, r9
 800ad0e:	f7f5 fab3 	bl	8000278 <__aeabi_dsub>
 800ad12:	ec53 2b18 	vmov	r2, r3, d8
 800ad16:	f7f5 faaf 	bl	8000278 <__aeabi_dsub>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4650      	mov	r0, sl
 800ad20:	4659      	mov	r1, fp
 800ad22:	e610      	b.n	800a946 <__ieee754_pow+0x31e>
 800ad24:	2401      	movs	r4, #1
 800ad26:	e6a1      	b.n	800aa6c <__ieee754_pow+0x444>
 800ad28:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ad78 <__ieee754_pow+0x750>
 800ad2c:	e617      	b.n	800a95e <__ieee754_pow+0x336>
 800ad2e:	bf00      	nop
 800ad30:	4a454eef 	.word	0x4a454eef
 800ad34:	3fca7e28 	.word	0x3fca7e28
 800ad38:	93c9db65 	.word	0x93c9db65
 800ad3c:	3fcd864a 	.word	0x3fcd864a
 800ad40:	a91d4101 	.word	0xa91d4101
 800ad44:	3fd17460 	.word	0x3fd17460
 800ad48:	518f264d 	.word	0x518f264d
 800ad4c:	3fd55555 	.word	0x3fd55555
 800ad50:	db6fabff 	.word	0xdb6fabff
 800ad54:	3fdb6db6 	.word	0x3fdb6db6
 800ad58:	33333303 	.word	0x33333303
 800ad5c:	3fe33333 	.word	0x3fe33333
 800ad60:	e0000000 	.word	0xe0000000
 800ad64:	3feec709 	.word	0x3feec709
 800ad68:	dc3a03fd 	.word	0xdc3a03fd
 800ad6c:	3feec709 	.word	0x3feec709
 800ad70:	145b01f5 	.word	0x145b01f5
 800ad74:	be3e2fe0 	.word	0xbe3e2fe0
 800ad78:	00000000 	.word	0x00000000
 800ad7c:	3ff00000 	.word	0x3ff00000
 800ad80:	7ff00000 	.word	0x7ff00000
 800ad84:	43400000 	.word	0x43400000
 800ad88:	0003988e 	.word	0x0003988e
 800ad8c:	000bb679 	.word	0x000bb679
 800ad90:	0800b808 	.word	0x0800b808
 800ad94:	3ff00000 	.word	0x3ff00000
 800ad98:	40080000 	.word	0x40080000
 800ad9c:	0800b828 	.word	0x0800b828
 800ada0:	0800b818 	.word	0x0800b818
 800ada4:	a3b5      	add	r3, pc, #724	; (adr r3, 800b07c <__ieee754_pow+0xa54>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	4640      	mov	r0, r8
 800adac:	4649      	mov	r1, r9
 800adae:	f7f5 fa65 	bl	800027c <__adddf3>
 800adb2:	4622      	mov	r2, r4
 800adb4:	ec41 0b1a 	vmov	d10, r0, r1
 800adb8:	462b      	mov	r3, r5
 800adba:	4630      	mov	r0, r6
 800adbc:	4639      	mov	r1, r7
 800adbe:	f7f5 fa5b 	bl	8000278 <__aeabi_dsub>
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	ec51 0b1a 	vmov	r0, r1, d10
 800adca:	f7f5 fe9d 	bl	8000b08 <__aeabi_dcmpgt>
 800adce:	2800      	cmp	r0, #0
 800add0:	f47f ae04 	bne.w	800a9dc <__ieee754_pow+0x3b4>
 800add4:	4aa4      	ldr	r2, [pc, #656]	; (800b068 <__ieee754_pow+0xa40>)
 800add6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800adda:	4293      	cmp	r3, r2
 800addc:	f340 8108 	ble.w	800aff0 <__ieee754_pow+0x9c8>
 800ade0:	151b      	asrs	r3, r3, #20
 800ade2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ade6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800adea:	fa4a f303 	asr.w	r3, sl, r3
 800adee:	445b      	add	r3, fp
 800adf0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800adf4:	4e9d      	ldr	r6, [pc, #628]	; (800b06c <__ieee754_pow+0xa44>)
 800adf6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800adfa:	4116      	asrs	r6, r2
 800adfc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ae00:	2000      	movs	r0, #0
 800ae02:	ea23 0106 	bic.w	r1, r3, r6
 800ae06:	f1c2 0214 	rsb	r2, r2, #20
 800ae0a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ae0e:	fa4a fa02 	asr.w	sl, sl, r2
 800ae12:	f1bb 0f00 	cmp.w	fp, #0
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	bfb8      	it	lt
 800ae20:	f1ca 0a00 	rsblt	sl, sl, #0
 800ae24:	f7f5 fa28 	bl	8000278 <__aeabi_dsub>
 800ae28:	ec41 0b19 	vmov	d9, r0, r1
 800ae2c:	4642      	mov	r2, r8
 800ae2e:	464b      	mov	r3, r9
 800ae30:	ec51 0b19 	vmov	r0, r1, d9
 800ae34:	f7f5 fa22 	bl	800027c <__adddf3>
 800ae38:	a37b      	add	r3, pc, #492	; (adr r3, 800b028 <__ieee754_pow+0xa00>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	2000      	movs	r0, #0
 800ae40:	4604      	mov	r4, r0
 800ae42:	460d      	mov	r5, r1
 800ae44:	f7f5 fbd0 	bl	80005e8 <__aeabi_dmul>
 800ae48:	ec53 2b19 	vmov	r2, r3, d9
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	460f      	mov	r7, r1
 800ae50:	4620      	mov	r0, r4
 800ae52:	4629      	mov	r1, r5
 800ae54:	f7f5 fa10 	bl	8000278 <__aeabi_dsub>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	4649      	mov	r1, r9
 800ae60:	f7f5 fa0a 	bl	8000278 <__aeabi_dsub>
 800ae64:	a372      	add	r3, pc, #456	; (adr r3, 800b030 <__ieee754_pow+0xa08>)
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	f7f5 fbbd 	bl	80005e8 <__aeabi_dmul>
 800ae6e:	a372      	add	r3, pc, #456	; (adr r3, 800b038 <__ieee754_pow+0xa10>)
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	4680      	mov	r8, r0
 800ae76:	4689      	mov	r9, r1
 800ae78:	4620      	mov	r0, r4
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	f7f5 fbb4 	bl	80005e8 <__aeabi_dmul>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4640      	mov	r0, r8
 800ae86:	4649      	mov	r1, r9
 800ae88:	f7f5 f9f8 	bl	800027c <__adddf3>
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	460d      	mov	r5, r1
 800ae90:	4602      	mov	r2, r0
 800ae92:	460b      	mov	r3, r1
 800ae94:	4630      	mov	r0, r6
 800ae96:	4639      	mov	r1, r7
 800ae98:	f7f5 f9f0 	bl	800027c <__adddf3>
 800ae9c:	4632      	mov	r2, r6
 800ae9e:	463b      	mov	r3, r7
 800aea0:	4680      	mov	r8, r0
 800aea2:	4689      	mov	r9, r1
 800aea4:	f7f5 f9e8 	bl	8000278 <__aeabi_dsub>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4620      	mov	r0, r4
 800aeae:	4629      	mov	r1, r5
 800aeb0:	f7f5 f9e2 	bl	8000278 <__aeabi_dsub>
 800aeb4:	4642      	mov	r2, r8
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	460f      	mov	r7, r1
 800aeba:	464b      	mov	r3, r9
 800aebc:	4640      	mov	r0, r8
 800aebe:	4649      	mov	r1, r9
 800aec0:	f7f5 fb92 	bl	80005e8 <__aeabi_dmul>
 800aec4:	a35e      	add	r3, pc, #376	; (adr r3, 800b040 <__ieee754_pow+0xa18>)
 800aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeca:	4604      	mov	r4, r0
 800aecc:	460d      	mov	r5, r1
 800aece:	f7f5 fb8b 	bl	80005e8 <__aeabi_dmul>
 800aed2:	a35d      	add	r3, pc, #372	; (adr r3, 800b048 <__ieee754_pow+0xa20>)
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f7f5 f9ce 	bl	8000278 <__aeabi_dsub>
 800aedc:	4622      	mov	r2, r4
 800aede:	462b      	mov	r3, r5
 800aee0:	f7f5 fb82 	bl	80005e8 <__aeabi_dmul>
 800aee4:	a35a      	add	r3, pc, #360	; (adr r3, 800b050 <__ieee754_pow+0xa28>)
 800aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeea:	f7f5 f9c7 	bl	800027c <__adddf3>
 800aeee:	4622      	mov	r2, r4
 800aef0:	462b      	mov	r3, r5
 800aef2:	f7f5 fb79 	bl	80005e8 <__aeabi_dmul>
 800aef6:	a358      	add	r3, pc, #352	; (adr r3, 800b058 <__ieee754_pow+0xa30>)
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	f7f5 f9bc 	bl	8000278 <__aeabi_dsub>
 800af00:	4622      	mov	r2, r4
 800af02:	462b      	mov	r3, r5
 800af04:	f7f5 fb70 	bl	80005e8 <__aeabi_dmul>
 800af08:	a355      	add	r3, pc, #340	; (adr r3, 800b060 <__ieee754_pow+0xa38>)
 800af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0e:	f7f5 f9b5 	bl	800027c <__adddf3>
 800af12:	4622      	mov	r2, r4
 800af14:	462b      	mov	r3, r5
 800af16:	f7f5 fb67 	bl	80005e8 <__aeabi_dmul>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4640      	mov	r0, r8
 800af20:	4649      	mov	r1, r9
 800af22:	f7f5 f9a9 	bl	8000278 <__aeabi_dsub>
 800af26:	4604      	mov	r4, r0
 800af28:	460d      	mov	r5, r1
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
 800af2e:	4640      	mov	r0, r8
 800af30:	4649      	mov	r1, r9
 800af32:	f7f5 fb59 	bl	80005e8 <__aeabi_dmul>
 800af36:	2200      	movs	r2, #0
 800af38:	ec41 0b19 	vmov	d9, r0, r1
 800af3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af40:	4620      	mov	r0, r4
 800af42:	4629      	mov	r1, r5
 800af44:	f7f5 f998 	bl	8000278 <__aeabi_dsub>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	ec51 0b19 	vmov	r0, r1, d9
 800af50:	f7f5 fc74 	bl	800083c <__aeabi_ddiv>
 800af54:	4632      	mov	r2, r6
 800af56:	4604      	mov	r4, r0
 800af58:	460d      	mov	r5, r1
 800af5a:	463b      	mov	r3, r7
 800af5c:	4640      	mov	r0, r8
 800af5e:	4649      	mov	r1, r9
 800af60:	f7f5 fb42 	bl	80005e8 <__aeabi_dmul>
 800af64:	4632      	mov	r2, r6
 800af66:	463b      	mov	r3, r7
 800af68:	f7f5 f988 	bl	800027c <__adddf3>
 800af6c:	4602      	mov	r2, r0
 800af6e:	460b      	mov	r3, r1
 800af70:	4620      	mov	r0, r4
 800af72:	4629      	mov	r1, r5
 800af74:	f7f5 f980 	bl	8000278 <__aeabi_dsub>
 800af78:	4642      	mov	r2, r8
 800af7a:	464b      	mov	r3, r9
 800af7c:	f7f5 f97c 	bl	8000278 <__aeabi_dsub>
 800af80:	460b      	mov	r3, r1
 800af82:	4602      	mov	r2, r0
 800af84:	493a      	ldr	r1, [pc, #232]	; (800b070 <__ieee754_pow+0xa48>)
 800af86:	2000      	movs	r0, #0
 800af88:	f7f5 f976 	bl	8000278 <__aeabi_dsub>
 800af8c:	ec41 0b10 	vmov	d0, r0, r1
 800af90:	ee10 3a90 	vmov	r3, s1
 800af94:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800af98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af9c:	da2b      	bge.n	800aff6 <__ieee754_pow+0x9ce>
 800af9e:	4650      	mov	r0, sl
 800afa0:	f000 f966 	bl	800b270 <scalbn>
 800afa4:	ec51 0b10 	vmov	r0, r1, d0
 800afa8:	ec53 2b18 	vmov	r2, r3, d8
 800afac:	f7ff bbed 	b.w	800a78a <__ieee754_pow+0x162>
 800afb0:	4b30      	ldr	r3, [pc, #192]	; (800b074 <__ieee754_pow+0xa4c>)
 800afb2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800afb6:	429e      	cmp	r6, r3
 800afb8:	f77f af0c 	ble.w	800add4 <__ieee754_pow+0x7ac>
 800afbc:	4b2e      	ldr	r3, [pc, #184]	; (800b078 <__ieee754_pow+0xa50>)
 800afbe:	440b      	add	r3, r1
 800afc0:	4303      	orrs	r3, r0
 800afc2:	d009      	beq.n	800afd8 <__ieee754_pow+0x9b0>
 800afc4:	ec51 0b18 	vmov	r0, r1, d8
 800afc8:	2200      	movs	r2, #0
 800afca:	2300      	movs	r3, #0
 800afcc:	f7f5 fd7e 	bl	8000acc <__aeabi_dcmplt>
 800afd0:	3800      	subs	r0, #0
 800afd2:	bf18      	it	ne
 800afd4:	2001      	movne	r0, #1
 800afd6:	e447      	b.n	800a868 <__ieee754_pow+0x240>
 800afd8:	4622      	mov	r2, r4
 800afda:	462b      	mov	r3, r5
 800afdc:	f7f5 f94c 	bl	8000278 <__aeabi_dsub>
 800afe0:	4642      	mov	r2, r8
 800afe2:	464b      	mov	r3, r9
 800afe4:	f7f5 fd86 	bl	8000af4 <__aeabi_dcmpge>
 800afe8:	2800      	cmp	r0, #0
 800afea:	f43f aef3 	beq.w	800add4 <__ieee754_pow+0x7ac>
 800afee:	e7e9      	b.n	800afc4 <__ieee754_pow+0x99c>
 800aff0:	f04f 0a00 	mov.w	sl, #0
 800aff4:	e71a      	b.n	800ae2c <__ieee754_pow+0x804>
 800aff6:	ec51 0b10 	vmov	r0, r1, d0
 800affa:	4619      	mov	r1, r3
 800affc:	e7d4      	b.n	800afa8 <__ieee754_pow+0x980>
 800affe:	491c      	ldr	r1, [pc, #112]	; (800b070 <__ieee754_pow+0xa48>)
 800b000:	2000      	movs	r0, #0
 800b002:	f7ff bb30 	b.w	800a666 <__ieee754_pow+0x3e>
 800b006:	2000      	movs	r0, #0
 800b008:	2100      	movs	r1, #0
 800b00a:	f7ff bb2c 	b.w	800a666 <__ieee754_pow+0x3e>
 800b00e:	4630      	mov	r0, r6
 800b010:	4639      	mov	r1, r7
 800b012:	f7ff bb28 	b.w	800a666 <__ieee754_pow+0x3e>
 800b016:	9204      	str	r2, [sp, #16]
 800b018:	f7ff bb7a 	b.w	800a710 <__ieee754_pow+0xe8>
 800b01c:	2300      	movs	r3, #0
 800b01e:	f7ff bb64 	b.w	800a6ea <__ieee754_pow+0xc2>
 800b022:	bf00      	nop
 800b024:	f3af 8000 	nop.w
 800b028:	00000000 	.word	0x00000000
 800b02c:	3fe62e43 	.word	0x3fe62e43
 800b030:	fefa39ef 	.word	0xfefa39ef
 800b034:	3fe62e42 	.word	0x3fe62e42
 800b038:	0ca86c39 	.word	0x0ca86c39
 800b03c:	be205c61 	.word	0xbe205c61
 800b040:	72bea4d0 	.word	0x72bea4d0
 800b044:	3e663769 	.word	0x3e663769
 800b048:	c5d26bf1 	.word	0xc5d26bf1
 800b04c:	3ebbbd41 	.word	0x3ebbbd41
 800b050:	af25de2c 	.word	0xaf25de2c
 800b054:	3f11566a 	.word	0x3f11566a
 800b058:	16bebd93 	.word	0x16bebd93
 800b05c:	3f66c16c 	.word	0x3f66c16c
 800b060:	5555553e 	.word	0x5555553e
 800b064:	3fc55555 	.word	0x3fc55555
 800b068:	3fe00000 	.word	0x3fe00000
 800b06c:	000fffff 	.word	0x000fffff
 800b070:	3ff00000 	.word	0x3ff00000
 800b074:	4090cbff 	.word	0x4090cbff
 800b078:	3f6f3400 	.word	0x3f6f3400
 800b07c:	652b82fe 	.word	0x652b82fe
 800b080:	3c971547 	.word	0x3c971547

0800b084 <__ieee754_sqrt>:
 800b084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b088:	ec55 4b10 	vmov	r4, r5, d0
 800b08c:	4e55      	ldr	r6, [pc, #340]	; (800b1e4 <__ieee754_sqrt+0x160>)
 800b08e:	43ae      	bics	r6, r5
 800b090:	ee10 0a10 	vmov	r0, s0
 800b094:	ee10 3a10 	vmov	r3, s0
 800b098:	462a      	mov	r2, r5
 800b09a:	4629      	mov	r1, r5
 800b09c:	d110      	bne.n	800b0c0 <__ieee754_sqrt+0x3c>
 800b09e:	ee10 2a10 	vmov	r2, s0
 800b0a2:	462b      	mov	r3, r5
 800b0a4:	f7f5 faa0 	bl	80005e8 <__aeabi_dmul>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	f7f5 f8e4 	bl	800027c <__adddf3>
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	460d      	mov	r5, r1
 800b0b8:	ec45 4b10 	vmov	d0, r4, r5
 800b0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c0:	2d00      	cmp	r5, #0
 800b0c2:	dc10      	bgt.n	800b0e6 <__ieee754_sqrt+0x62>
 800b0c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b0c8:	4330      	orrs	r0, r6
 800b0ca:	d0f5      	beq.n	800b0b8 <__ieee754_sqrt+0x34>
 800b0cc:	b15d      	cbz	r5, 800b0e6 <__ieee754_sqrt+0x62>
 800b0ce:	ee10 2a10 	vmov	r2, s0
 800b0d2:	462b      	mov	r3, r5
 800b0d4:	ee10 0a10 	vmov	r0, s0
 800b0d8:	f7f5 f8ce 	bl	8000278 <__aeabi_dsub>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	f7f5 fbac 	bl	800083c <__aeabi_ddiv>
 800b0e4:	e7e6      	b.n	800b0b4 <__ieee754_sqrt+0x30>
 800b0e6:	1512      	asrs	r2, r2, #20
 800b0e8:	d074      	beq.n	800b1d4 <__ieee754_sqrt+0x150>
 800b0ea:	07d4      	lsls	r4, r2, #31
 800b0ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b0f0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b0f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b0f8:	bf5e      	ittt	pl
 800b0fa:	0fda      	lsrpl	r2, r3, #31
 800b0fc:	005b      	lslpl	r3, r3, #1
 800b0fe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b102:	2400      	movs	r4, #0
 800b104:	0fda      	lsrs	r2, r3, #31
 800b106:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b10a:	107f      	asrs	r7, r7, #1
 800b10c:	005b      	lsls	r3, r3, #1
 800b10e:	2516      	movs	r5, #22
 800b110:	4620      	mov	r0, r4
 800b112:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b116:	1886      	adds	r6, r0, r2
 800b118:	428e      	cmp	r6, r1
 800b11a:	bfde      	ittt	le
 800b11c:	1b89      	suble	r1, r1, r6
 800b11e:	18b0      	addle	r0, r6, r2
 800b120:	18a4      	addle	r4, r4, r2
 800b122:	0049      	lsls	r1, r1, #1
 800b124:	3d01      	subs	r5, #1
 800b126:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b12a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b12e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b132:	d1f0      	bne.n	800b116 <__ieee754_sqrt+0x92>
 800b134:	462a      	mov	r2, r5
 800b136:	f04f 0e20 	mov.w	lr, #32
 800b13a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b13e:	4281      	cmp	r1, r0
 800b140:	eb06 0c05 	add.w	ip, r6, r5
 800b144:	dc02      	bgt.n	800b14c <__ieee754_sqrt+0xc8>
 800b146:	d113      	bne.n	800b170 <__ieee754_sqrt+0xec>
 800b148:	459c      	cmp	ip, r3
 800b14a:	d811      	bhi.n	800b170 <__ieee754_sqrt+0xec>
 800b14c:	f1bc 0f00 	cmp.w	ip, #0
 800b150:	eb0c 0506 	add.w	r5, ip, r6
 800b154:	da43      	bge.n	800b1de <__ieee754_sqrt+0x15a>
 800b156:	2d00      	cmp	r5, #0
 800b158:	db41      	blt.n	800b1de <__ieee754_sqrt+0x15a>
 800b15a:	f100 0801 	add.w	r8, r0, #1
 800b15e:	1a09      	subs	r1, r1, r0
 800b160:	459c      	cmp	ip, r3
 800b162:	bf88      	it	hi
 800b164:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b168:	eba3 030c 	sub.w	r3, r3, ip
 800b16c:	4432      	add	r2, r6
 800b16e:	4640      	mov	r0, r8
 800b170:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b174:	f1be 0e01 	subs.w	lr, lr, #1
 800b178:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b17c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b180:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b184:	d1db      	bne.n	800b13e <__ieee754_sqrt+0xba>
 800b186:	430b      	orrs	r3, r1
 800b188:	d006      	beq.n	800b198 <__ieee754_sqrt+0x114>
 800b18a:	1c50      	adds	r0, r2, #1
 800b18c:	bf13      	iteet	ne
 800b18e:	3201      	addne	r2, #1
 800b190:	3401      	addeq	r4, #1
 800b192:	4672      	moveq	r2, lr
 800b194:	f022 0201 	bicne.w	r2, r2, #1
 800b198:	1063      	asrs	r3, r4, #1
 800b19a:	0852      	lsrs	r2, r2, #1
 800b19c:	07e1      	lsls	r1, r4, #31
 800b19e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b1a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b1a6:	bf48      	it	mi
 800b1a8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b1ac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b1b0:	4614      	mov	r4, r2
 800b1b2:	e781      	b.n	800b0b8 <__ieee754_sqrt+0x34>
 800b1b4:	0ad9      	lsrs	r1, r3, #11
 800b1b6:	3815      	subs	r0, #21
 800b1b8:	055b      	lsls	r3, r3, #21
 800b1ba:	2900      	cmp	r1, #0
 800b1bc:	d0fa      	beq.n	800b1b4 <__ieee754_sqrt+0x130>
 800b1be:	02cd      	lsls	r5, r1, #11
 800b1c0:	d50a      	bpl.n	800b1d8 <__ieee754_sqrt+0x154>
 800b1c2:	f1c2 0420 	rsb	r4, r2, #32
 800b1c6:	fa23 f404 	lsr.w	r4, r3, r4
 800b1ca:	1e55      	subs	r5, r2, #1
 800b1cc:	4093      	lsls	r3, r2
 800b1ce:	4321      	orrs	r1, r4
 800b1d0:	1b42      	subs	r2, r0, r5
 800b1d2:	e78a      	b.n	800b0ea <__ieee754_sqrt+0x66>
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	e7f0      	b.n	800b1ba <__ieee754_sqrt+0x136>
 800b1d8:	0049      	lsls	r1, r1, #1
 800b1da:	3201      	adds	r2, #1
 800b1dc:	e7ef      	b.n	800b1be <__ieee754_sqrt+0x13a>
 800b1de:	4680      	mov	r8, r0
 800b1e0:	e7bd      	b.n	800b15e <__ieee754_sqrt+0xda>
 800b1e2:	bf00      	nop
 800b1e4:	7ff00000 	.word	0x7ff00000

0800b1e8 <with_errno>:
 800b1e8:	b570      	push	{r4, r5, r6, lr}
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	460d      	mov	r5, r1
 800b1ee:	4616      	mov	r6, r2
 800b1f0:	f7fe f88c 	bl	800930c <__errno>
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	6006      	str	r6, [r0, #0]
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}

0800b1fc <xflow>:
 800b1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1fe:	4614      	mov	r4, r2
 800b200:	461d      	mov	r5, r3
 800b202:	b108      	cbz	r0, 800b208 <xflow+0xc>
 800b204:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b208:	e9cd 2300 	strd	r2, r3, [sp]
 800b20c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b210:	4620      	mov	r0, r4
 800b212:	4629      	mov	r1, r5
 800b214:	f7f5 f9e8 	bl	80005e8 <__aeabi_dmul>
 800b218:	2222      	movs	r2, #34	; 0x22
 800b21a:	b003      	add	sp, #12
 800b21c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b220:	f7ff bfe2 	b.w	800b1e8 <with_errno>

0800b224 <__math_uflow>:
 800b224:	b508      	push	{r3, lr}
 800b226:	2200      	movs	r2, #0
 800b228:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b22c:	f7ff ffe6 	bl	800b1fc <xflow>
 800b230:	ec41 0b10 	vmov	d0, r0, r1
 800b234:	bd08      	pop	{r3, pc}

0800b236 <__math_oflow>:
 800b236:	b508      	push	{r3, lr}
 800b238:	2200      	movs	r2, #0
 800b23a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b23e:	f7ff ffdd 	bl	800b1fc <xflow>
 800b242:	ec41 0b10 	vmov	d0, r0, r1
 800b246:	bd08      	pop	{r3, pc}

0800b248 <fabs>:
 800b248:	ec51 0b10 	vmov	r0, r1, d0
 800b24c:	ee10 2a10 	vmov	r2, s0
 800b250:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b254:	ec43 2b10 	vmov	d0, r2, r3
 800b258:	4770      	bx	lr

0800b25a <finite>:
 800b25a:	b082      	sub	sp, #8
 800b25c:	ed8d 0b00 	vstr	d0, [sp]
 800b260:	9801      	ldr	r0, [sp, #4]
 800b262:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b266:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b26a:	0fc0      	lsrs	r0, r0, #31
 800b26c:	b002      	add	sp, #8
 800b26e:	4770      	bx	lr

0800b270 <scalbn>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	ec55 4b10 	vmov	r4, r5, d0
 800b276:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b27a:	4606      	mov	r6, r0
 800b27c:	462b      	mov	r3, r5
 800b27e:	b99a      	cbnz	r2, 800b2a8 <scalbn+0x38>
 800b280:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b284:	4323      	orrs	r3, r4
 800b286:	d036      	beq.n	800b2f6 <scalbn+0x86>
 800b288:	4b39      	ldr	r3, [pc, #228]	; (800b370 <scalbn+0x100>)
 800b28a:	4629      	mov	r1, r5
 800b28c:	ee10 0a10 	vmov	r0, s0
 800b290:	2200      	movs	r2, #0
 800b292:	f7f5 f9a9 	bl	80005e8 <__aeabi_dmul>
 800b296:	4b37      	ldr	r3, [pc, #220]	; (800b374 <scalbn+0x104>)
 800b298:	429e      	cmp	r6, r3
 800b29a:	4604      	mov	r4, r0
 800b29c:	460d      	mov	r5, r1
 800b29e:	da10      	bge.n	800b2c2 <scalbn+0x52>
 800b2a0:	a32b      	add	r3, pc, #172	; (adr r3, 800b350 <scalbn+0xe0>)
 800b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a6:	e03a      	b.n	800b31e <scalbn+0xae>
 800b2a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b2ac:	428a      	cmp	r2, r1
 800b2ae:	d10c      	bne.n	800b2ca <scalbn+0x5a>
 800b2b0:	ee10 2a10 	vmov	r2, s0
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	f7f4 ffe0 	bl	800027c <__adddf3>
 800b2bc:	4604      	mov	r4, r0
 800b2be:	460d      	mov	r5, r1
 800b2c0:	e019      	b.n	800b2f6 <scalbn+0x86>
 800b2c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	3a36      	subs	r2, #54	; 0x36
 800b2ca:	4432      	add	r2, r6
 800b2cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b2d0:	428a      	cmp	r2, r1
 800b2d2:	dd08      	ble.n	800b2e6 <scalbn+0x76>
 800b2d4:	2d00      	cmp	r5, #0
 800b2d6:	a120      	add	r1, pc, #128	; (adr r1, 800b358 <scalbn+0xe8>)
 800b2d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2dc:	da1c      	bge.n	800b318 <scalbn+0xa8>
 800b2de:	a120      	add	r1, pc, #128	; (adr r1, 800b360 <scalbn+0xf0>)
 800b2e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e4:	e018      	b.n	800b318 <scalbn+0xa8>
 800b2e6:	2a00      	cmp	r2, #0
 800b2e8:	dd08      	ble.n	800b2fc <scalbn+0x8c>
 800b2ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b2f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b2f6:	ec45 4b10 	vmov	d0, r4, r5
 800b2fa:	bd70      	pop	{r4, r5, r6, pc}
 800b2fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b300:	da19      	bge.n	800b336 <scalbn+0xc6>
 800b302:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b306:	429e      	cmp	r6, r3
 800b308:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b30c:	dd0a      	ble.n	800b324 <scalbn+0xb4>
 800b30e:	a112      	add	r1, pc, #72	; (adr r1, 800b358 <scalbn+0xe8>)
 800b310:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1e2      	bne.n	800b2de <scalbn+0x6e>
 800b318:	a30f      	add	r3, pc, #60	; (adr r3, 800b358 <scalbn+0xe8>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	f7f5 f963 	bl	80005e8 <__aeabi_dmul>
 800b322:	e7cb      	b.n	800b2bc <scalbn+0x4c>
 800b324:	a10a      	add	r1, pc, #40	; (adr r1, 800b350 <scalbn+0xe0>)
 800b326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d0b8      	beq.n	800b2a0 <scalbn+0x30>
 800b32e:	a10e      	add	r1, pc, #56	; (adr r1, 800b368 <scalbn+0xf8>)
 800b330:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b334:	e7b4      	b.n	800b2a0 <scalbn+0x30>
 800b336:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b33a:	3236      	adds	r2, #54	; 0x36
 800b33c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b340:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b344:	4620      	mov	r0, r4
 800b346:	4b0c      	ldr	r3, [pc, #48]	; (800b378 <scalbn+0x108>)
 800b348:	2200      	movs	r2, #0
 800b34a:	e7e8      	b.n	800b31e <scalbn+0xae>
 800b34c:	f3af 8000 	nop.w
 800b350:	c2f8f359 	.word	0xc2f8f359
 800b354:	01a56e1f 	.word	0x01a56e1f
 800b358:	8800759c 	.word	0x8800759c
 800b35c:	7e37e43c 	.word	0x7e37e43c
 800b360:	8800759c 	.word	0x8800759c
 800b364:	fe37e43c 	.word	0xfe37e43c
 800b368:	c2f8f359 	.word	0xc2f8f359
 800b36c:	81a56e1f 	.word	0x81a56e1f
 800b370:	43500000 	.word	0x43500000
 800b374:	ffff3cb0 	.word	0xffff3cb0
 800b378:	3c900000 	.word	0x3c900000

0800b37c <_init>:
 800b37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37e:	bf00      	nop
 800b380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b382:	bc08      	pop	{r3}
 800b384:	469e      	mov	lr, r3
 800b386:	4770      	bx	lr

0800b388 <_fini>:
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	bf00      	nop
 800b38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b38e:	bc08      	pop	{r3}
 800b390:	469e      	mov	lr, r3
 800b392:	4770      	bx	lr
