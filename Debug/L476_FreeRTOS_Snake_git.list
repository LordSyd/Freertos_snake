
L476_FreeRTOS_Snake_git.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b28c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800b420  0800b420  0001b420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8c0  0800b8c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8c0  0800b8c0  0001b8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8c8  0800b8c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8c8  0800b8c8  0001b8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8cc  0800b8cc  0001b8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b8d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c3c  20000074  0800b944  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008cb0  0800b944  00028cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002014a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004055  00000000  00000000  000401ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  00044248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  00045d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005bbc  00000000  00000000  00047670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db2d  00000000  00000000  0004d22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103a38  00000000  00000000  0006ad59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008028  00000000  00000000  0016e7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0017680c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00176830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b404 	.word	0x0800b404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800b404 	.word	0x0800b404

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <llist_create>:
#include <stdio.h>
#include <string.h>
#include "llist.h"

llist *llist_create(void *new_data)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    struct node *new_node;

    llist *new_list = (llist *)malloc(sizeof (llist));
 8000ea4:	2004      	movs	r0, #4
 8000ea6:	f008 fadd 	bl	8009464 <malloc>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60fb      	str	r3, [r7, #12]
    *new_list = (struct node *)malloc(sizeof (struct node));
 8000eae:	2010      	movs	r0, #16
 8000eb0:	f008 fad8 	bl	8009464 <malloc>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	601a      	str	r2, [r3, #0]


    new_node = *new_list;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60bb      	str	r3, [r7, #8]
    new_node->display = 0;
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
    new_node->x = 0;
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
    new_node->y = 4;
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	609a      	str	r2, [r3, #8]
    new_node->next = NULL;
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
    return new_list;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <llist_push>:

// Returns 0 on failure


void llist_push(llist *list, int display, int y, int x /*void *data*/)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
    struct node *head;
    struct node *new_node;
    if (list == NULL || *list == NULL) {
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <llist_push+0x1c>
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d107      	bne.n	8000f10 <llist_push+0x2c>
        fprintf(stderr, "llist_add_inorder: list is null\n");
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <llist_push+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2220      	movs	r2, #32
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4810      	ldr	r0, [pc, #64]	; (8000f4c <llist_push+0x68>)
 8000f0c:	f008 fa74 	bl	80093f8 <fwrite>
    }

    head = *list;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	617b      	str	r3, [r7, #20]

    // Head is not empty, add new node to front



        new_node = malloc(sizeof (struct node));
 8000f16:	2010      	movs	r0, #16
 8000f18:	f008 faa4 	bl	8009464 <malloc>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	613b      	str	r3, [r7, #16]
        new_node->display = display;
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	601a      	str	r2, [r3, #0]
        new_node->x = x;
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
        new_node->y = y;
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	609a      	str	r2, [r3, #8]
        new_node->next = head;
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	60da      	str	r2, [r3, #12]
        *list = new_node;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	601a      	str	r2, [r3, #0]

}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000010 	.word	0x20000010
 8000f4c:	0800b420 	.word	0x0800b420

08000f50 <llist_printSnake>:


void llist_printSnake(llist *list, int board[][8][8]) {
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]

	 struct node *curr = *list;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	617b      	str	r3, [r7, #20]
	 int display ;
	int x;
	int y;


	    while (curr != NULL) {
 8000f60:	e016      	b.n	8000f90 <llist_printSnake+0x40>
	    	int display = curr->display;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	613b      	str	r3, [r7, #16]
			int x = curr->x;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]
			int y = curr->y;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	60bb      	str	r3, [r7, #8]


	    	board[display][y][x] = 1;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	00d1      	lsls	r1, r2, #3
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	440a      	add	r2, r1
 8000f84:	2101      	movs	r1, #1
 8000f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	        curr = curr->next;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	617b      	str	r3, [r7, #20]
	    while (curr != NULL) {
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1e5      	bne.n	8000f62 <llist_printSnake+0x12>
	    }

}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <checkOccupiedRight>:
}




int checkOccupiedRight(llist *list, int boardState[][8][8]) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fb0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000fb4:	6018      	str	r0, [r3, #0]
 8000fb6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fba:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8000fbe:	6019      	str	r1, [r3, #0]
	struct node *head = *list;
 8000fc0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fc4:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	int nextCellState = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int display = head->display;
 8000fd6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	int x = head->x;
 8000fe0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	int y = head->y;
 8000fea:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	int temp[4][8][8];
	memcpy(temp, boardState, sizeof(temp));
 8000ff4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000ff8:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8000ffc:	f107 000c 	add.w	r0, r7, #12
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	6819      	ldr	r1, [r3, #0]
 8001006:	f008 fa3d 	bl	8009484 <memcpy>
	if (x == 7){
 800100a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800100e:	2b07      	cmp	r3, #7
 8001010:	d117      	bne.n	8001042 <checkOccupiedRight+0x9e>
		 if (display == 3) return -1;// ran into wall
 8001012:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001016:	2b03      	cmp	r3, #3
 8001018:	d102      	bne.n	8001020 <checkOccupiedRight+0x7c>
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e025      	b.n	800106c <checkOccupiedRight+0xc8>


		 nextCellState = temp[display+1][y][0];
 8001020:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001024:	3301      	adds	r3, #1
 8001026:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800102a:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 800102e:	00d9      	lsls	r1, r3, #3
 8001030:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001034:	440b      	add	r3, r1
 8001036:	015b      	lsls	r3, r3, #5
 8001038:	4413      	add	r3, r2
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001040:	e012      	b.n	8001068 <checkOccupiedRight+0xc4>

	} else {
		nextCellState = temp[display][y][x+1];//todo change all to +1 and -1
 8001042:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800104c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8001050:	f8d7 1414 	ldr.w	r1, [r7, #1044]	; 0x414
 8001054:	00c8      	lsls	r0, r1, #3
 8001056:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 800105a:	4401      	add	r1, r0
 800105c:	00c9      	lsls	r1, r1, #3
 800105e:	440a      	add	r2, r1
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c


	}


	return nextCellState;
 8001068:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
}
 800106c:	4618      	mov	r0, r3
 800106e:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <checkOccupiedLeft>:

int checkOccupiedLeft(llist *list, int boardState[][8][8]) {
 8001076:	b580      	push	{r7, lr}
 8001078:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 800107c:	af00      	add	r7, sp, #0
 800107e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001082:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8001086:	6018      	str	r0, [r3, #0]
 8001088:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800108c:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001090:	6019      	str	r1, [r3, #0]
	struct node *head = *list;
 8001092:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001096:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

	int nextCellState=0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int display = head->display;
 80010a8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		int x = head->x;
 80010b2:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
		int y = head->y;
 80010bc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	int temp[4][8][8];
		memcpy(temp, boardState, sizeof(temp));
 80010c6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80010ca:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80010ce:	f107 000c 	add.w	r0, r7, #12
 80010d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	f008 f9d4 	bl	8009484 <memcpy>
	if (head->x == 0){
 80010dc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d119      	bne.n	800111a <checkOccupiedLeft+0xa4>
		 if (head->display == 0) return -1;// ran into wall
 80010e6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <checkOccupiedLeft+0x80>
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	e026      	b.n	8001144 <checkOccupiedLeft+0xce>

		 nextCellState = temp[display-1][y][7];
 80010f6:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8001100:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 8001104:	00d9      	lsls	r1, r3, #3
 8001106:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800110a:	440b      	add	r3, r1
 800110c:	015b      	lsls	r3, r3, #5
 800110e:	4413      	add	r3, r2
 8001110:	331c      	adds	r3, #28
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001118:	e012      	b.n	8001140 <checkOccupiedLeft+0xca>

	} else {

		nextCellState = temp[display][y][x-1];
 800111a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001124:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8001128:	f8d7 1414 	ldr.w	r1, [r7, #1044]	; 0x414
 800112c:	00c8      	lsls	r0, r1, #3
 800112e:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8001132:	4401      	add	r1, r0
 8001134:	00c9      	lsls	r1, r1, #3
 8001136:	440a      	add	r2, r1
 8001138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

	}


	return nextCellState;
 8001140:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
}
 8001144:	4618      	mov	r0, r3
 8001146:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <checkOccupiedUp>:

int checkOccupiedUp(llist *list, int boardState[][8][8]) {
 800114e:	b580      	push	{r7, lr}
 8001150:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8001154:	af00      	add	r7, sp, #0
 8001156:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800115a:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800115e:	6018      	str	r0, [r3, #0]
 8001160:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001164:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001168:	6019      	str	r1, [r3, #0]
	struct node *head = *list;
 800116a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800116e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int display = head->display;
 800117a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		int x = head->x;
 8001184:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		int y = head->y;
 800118e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	int nextCellState=0;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	int temp[4][8][8];
			memcpy(temp, boardState, sizeof(temp));
 800119e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80011a2:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80011a6:	f107 000c 	add.w	r0, r7, #12
 80011aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	f008 f968 	bl	8009484 <memcpy>
	if (head->y == 0) return -1;// ran into wall
 80011b4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d102      	bne.n	80011c4 <checkOccupiedUp+0x76>
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e014      	b.n	80011ee <checkOccupiedUp+0xa0>

	nextCellState = temp[display][y-1][x];
 80011c4:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80011ce:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80011d2:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 80011d6:	00c9      	lsls	r1, r1, #3
 80011d8:	440a      	add	r2, r1
 80011da:	00d1      	lsls	r1, r2, #3
 80011dc:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80011e0:	440a      	add	r2, r1
 80011e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e6:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	return nextCellState;
 80011ea:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <checkOccupiedDown>:

int checkOccupiedDown(llist *list, int boardState[][8][8]) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80011fe:	af00      	add	r7, sp, #0
 8001200:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001204:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8001208:	6018      	str	r0, [r3, #0]
 800120a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800120e:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001212:	6019      	str	r1, [r3, #0]
	struct node *head = *list;
 8001214:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001218:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int display = head->display;
 8001224:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		int x = head->x;
 800122e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		int y = head->y;
 8001238:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

	int temp[4][8][8];
				memcpy(temp, boardState, sizeof(temp));
 8001242:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001246:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800124a:	f107 000c 	add.w	r0, r7, #12
 800124e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	f008 f916 	bl	8009484 <memcpy>

	int nextCellState=0;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	if (head->y == 7) return -1;// ran into wall
 800125e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b07      	cmp	r3, #7
 8001266:	d102      	bne.n	800126e <checkOccupiedDown+0x76>
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	e014      	b.n	8001298 <checkOccupiedDown+0xa0>

	nextCellState = temp[display][y+1][x];
 800126e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001278:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800127c:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 8001280:	00c9      	lsls	r1, r1, #3
 8001282:	440a      	add	r2, r1
 8001284:	00d1      	lsls	r1, r2, #3
 8001286:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 800128a:	440a      	add	r2, r1
 800128c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001290:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	return nextCellState;
 8001294:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 8001298:	4618      	mov	r0, r3
 800129a:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <deleteLastNode>:

void deleteLastNode(llist *list) {
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	struct node *curr = *list;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]
	while (curr->next->next != NULL) {
 80012b0:	e002      	b.n	80012b8 <deleteLastNode+0x16>

		curr = curr->next;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	60fb      	str	r3, [r7, #12]
	while (curr->next->next != NULL) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f7      	bne.n	80012b2 <deleteLastNode+0x10>
	}
	struct node* lastNode = curr->next;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	60bb      	str	r3, [r7, #8]
	curr->next = NULL;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
	free(lastNode);
 80012ce:	68b8      	ldr	r0, [r7, #8]
 80012d0:	f008 f8d0 	bl	8009474 <free>
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <moveRight>:


void moveRight(llist *list,  int grow) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]

	struct node *head = *list;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	617b      	str	r3, [r7, #20]

	int display = head->display;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	613b      	str	r3, [r7, #16]
	int x = head->x;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	60fb      	str	r3, [r7, #12]
	int y = head->y;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	60bb      	str	r3, [r7, #8]

	if (x == 7) {
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b07      	cmp	r3, #7
 8001302:	d107      	bne.n	8001314 <moveRight+0x38>
		llist_push(list, display+1, y, 0 );
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1c59      	adds	r1, r3, #1
 8001308:	2300      	movs	r3, #0
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fde9 	bl	8000ee4 <llist_push>
 8001312:	e006      	b.n	8001322 <moveRight+0x46>
	} else {
		llist_push(list, display, y, x+1 );
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fde1 	bl	8000ee4 <llist_push>
	}


		if (grow == 0) deleteLastNode(list);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <moveRight+0x52>
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ffba 	bl	80012a2 <deleteLastNode>





}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <moveLeft>:


void moveLeft(llist *list,  int grow) {
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]

	struct node *head = *list;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	617b      	str	r3, [r7, #20]

	int display = head->display;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	613b      	str	r3, [r7, #16]
	int x = head->x;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	60fb      	str	r3, [r7, #12]
	int y = head->y;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	60bb      	str	r3, [r7, #8]

		if (head->x == 0) {
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d107      	bne.n	8001370 <moveLeft+0x3a>
			llist_push(list, display-1, y, 7 );
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1e59      	subs	r1, r3, #1
 8001364:	2307      	movs	r3, #7
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fdbb 	bl	8000ee4 <llist_push>
 800136e:	e006      	b.n	800137e <moveLeft+0x48>
		} else {
			llist_push(list, display, y, x-1 );
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3b01      	subs	r3, #1
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	6939      	ldr	r1, [r7, #16]
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fdb3 	bl	8000ee4 <llist_push>
		}

		if (grow == 0) deleteLastNode(list);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <moveLeft+0x54>
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff8c 	bl	80012a2 <deleteLastNode>
//		    free (second_last->next);
//
//		    // Change next of second last
//		    second_last->next = NULL;

}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <moveDown>:

void moveDown(llist *list,  int grow) {
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]

	struct node *head = *list;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	617b      	str	r3, [r7, #20]

	int display = head->display;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	613b      	str	r3, [r7, #16]
		int x = head->x;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	60fb      	str	r3, [r7, #12]
		int y = head->y;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	60bb      	str	r3, [r7, #8]
	llist_push(list, display, y+1, x );
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6939      	ldr	r1, [r7, #16]
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fd91 	bl	8000ee4 <llist_push>

	if (grow == 0) deleteLastNode(list);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <moveDown+0x3c>
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff6a 	bl	80012a2 <deleteLastNode>
//	free (second_last->next);
//
//	// Change next of second last
//	second_last->next = NULL;

}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <moveUp>:

void moveUp(llist *list,  int grow) {
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]


	struct node *head = *list;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	617b      	str	r3, [r7, #20]

	int display = head->display;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	613b      	str	r3, [r7, #16]
			int x = head->x;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	60fb      	str	r3, [r7, #12]
			int y = head->y;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	60bb      	str	r3, [r7, #8]

	llist_push(list, display, y-1, x );
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1e5a      	subs	r2, r3, #1
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6939      	ldr	r1, [r7, #16]
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff fd6f 	bl	8000ee4 <llist_push>

	if (grow == 0) deleteLastNode(list);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <moveUp+0x3c>
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff48 	bl	80012a2 <deleteLastNode>
//	// Delete last node
//	free (second_last->next);
//
//	// Change next of second last
//	second_last->next = NULL;
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	//srand(212321);
	srand((unsigned int) time(NULL));
 8001422:	2000      	movs	r0, #0
 8001424:	f008 f9a0 	bl	8009768 <time>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4613      	mov	r3, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f008 f91e 	bl	8009670 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001434:	f001 fd98 	bl	8002f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001438:	f000 f93e 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143c:	f000 f9fc 	bl	8001838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001440:	f000 f9ca 	bl	80017d8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001444:	f000 f98a 	bl	800175c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_MatrixInit(&hspi1, SPI_CS_GPIO_Port, SPI_CS_Pin);
 8001448:	2210      	movs	r2, #16
 800144a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800144e:	4875      	ldr	r0, [pc, #468]	; (8001624 <main+0x208>)
 8001450:	f001 fa5c 	bl	800290c <MAX7219_MatrixInit>
  MAX7219_MatrixUpdate();
 8001454:	f001 faf0 	bl	8002a38 <MAX7219_MatrixUpdate>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001458:	f004 fefe 	bl	8006258 <osKernelInitialize>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  xButtonPressedSem = xSemaphoreCreateBinary();
 800145c:	2203      	movs	r2, #3
 800145e:	2100      	movs	r1, #0
 8001460:	2001      	movs	r0, #1
 8001462:	f005 f9b9 	bl	80067d8 <xQueueGenericCreate>
 8001466:	4603      	mov	r3, r0
 8001468:	4a6f      	ldr	r2, [pc, #444]	; (8001628 <main+0x20c>)
 800146a:	6013      	str	r3, [r2, #0]
  xGameOverSem = xSemaphoreCreateBinary();
 800146c:	2203      	movs	r2, #3
 800146e:	2100      	movs	r1, #0
 8001470:	2001      	movs	r0, #1
 8001472:	f005 f9b1 	bl	80067d8 <xQueueGenericCreate>
 8001476:	4603      	mov	r3, r0
 8001478:	4a6c      	ldr	r2, [pc, #432]	; (800162c <main+0x210>)
 800147a:	6013      	str	r3, [r2, #0]
  xCheckCollison = xSemaphoreCreateBinary();
 800147c:	2203      	movs	r2, #3
 800147e:	2100      	movs	r1, #0
 8001480:	2001      	movs	r0, #1
 8001482:	f005 f9a9 	bl	80067d8 <xQueueGenericCreate>
 8001486:	4603      	mov	r3, r0
 8001488:	4a69      	ldr	r2, [pc, #420]	; (8001630 <main+0x214>)
 800148a:	6013      	str	r3, [r2, #0]
  xCollisionChecked = xSemaphoreCreateBinary();
 800148c:	2203      	movs	r2, #3
 800148e:	2100      	movs	r1, #0
 8001490:	2001      	movs	r0, #1
 8001492:	f005 f9a1 	bl	80067d8 <xQueueGenericCreate>
 8001496:	4603      	mov	r3, r0
 8001498:	4a66      	ldr	r2, [pc, #408]	; (8001634 <main+0x218>)
 800149a:	6013      	str	r3, [r2, #0]
  xGenerateFood = xSemaphoreCreateBinary();
 800149c:	2203      	movs	r2, #3
 800149e:	2100      	movs	r1, #0
 80014a0:	2001      	movs	r0, #1
 80014a2:	f005 f999 	bl	80067d8 <xQueueGenericCreate>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a63      	ldr	r2, [pc, #396]	; (8001638 <main+0x21c>)
 80014aa:	6013      	str	r3, [r2, #0]
  xFoodGenerated = xSemaphoreCreateBinary();
 80014ac:	2203      	movs	r2, #3
 80014ae:	2100      	movs	r1, #0
 80014b0:	2001      	movs	r0, #1
 80014b2:	f005 f991 	bl	80067d8 <xQueueGenericCreate>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a60      	ldr	r2, [pc, #384]	; (800163c <main+0x220>)
 80014ba:	6013      	str	r3, [r2, #0]
  xHandleButtonPressA = xSemaphoreCreateBinary();
 80014bc:	2203      	movs	r2, #3
 80014be:	2100      	movs	r1, #0
 80014c0:	2001      	movs	r0, #1
 80014c2:	f005 f989 	bl	80067d8 <xQueueGenericCreate>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4a5d      	ldr	r2, [pc, #372]	; (8001640 <main+0x224>)
 80014ca:	6013      	str	r3, [r2, #0]
  xHandleButtonPressB = xSemaphoreCreateBinary();
 80014cc:	2203      	movs	r2, #3
 80014ce:	2100      	movs	r1, #0
 80014d0:	2001      	movs	r0, #1
 80014d2:	f005 f981 	bl	80067d8 <xQueueGenericCreate>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a5a      	ldr	r2, [pc, #360]	; (8001644 <main+0x228>)
 80014da:	6013      	str	r3, [r2, #0]
  xHandleButtonPressC = xSemaphoreCreateBinary();
 80014dc:	2203      	movs	r2, #3
 80014de:	2100      	movs	r1, #0
 80014e0:	2001      	movs	r0, #1
 80014e2:	f005 f979 	bl	80067d8 <xQueueGenericCreate>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a57      	ldr	r2, [pc, #348]	; (8001648 <main+0x22c>)
 80014ea:	6013      	str	r3, [r2, #0]
  xHandleButtonPressD = xSemaphoreCreateBinary();
 80014ec:	2203      	movs	r2, #3
 80014ee:	2100      	movs	r1, #0
 80014f0:	2001      	movs	r0, #1
 80014f2:	f005 f971 	bl	80067d8 <xQueueGenericCreate>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a54      	ldr	r2, [pc, #336]	; (800164c <main+0x230>)
 80014fa:	6013      	str	r3, [r2, #0]
  xRepaintScreen = xSemaphoreCreateBinary();
 80014fc:	2203      	movs	r2, #3
 80014fe:	2100      	movs	r1, #0
 8001500:	2001      	movs	r0, #1
 8001502:	f005 f969 	bl	80067d8 <xQueueGenericCreate>
 8001506:	4603      	mov	r3, r0
 8001508:	4a51      	ldr	r2, [pc, #324]	; (8001650 <main+0x234>)
 800150a:	6013      	str	r3, [r2, #0]

  xScreenDriverMutex = xSemaphoreCreateMutex();
 800150c:	2001      	movs	r0, #1
 800150e:	f005 f9da 	bl	80068c6 <xQueueCreateMutex>
 8001512:	4603      	mov	r3, r0
 8001514:	4a4f      	ldr	r2, [pc, #316]	; (8001654 <main+0x238>)
 8001516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

//  int test[4][8][8];
//  memset(test, 0, sizeof(test));
  xDirectionQ = xQueueCreate( 10, sizeof( char ) );
 8001518:	2200      	movs	r2, #0
 800151a:	2101      	movs	r1, #1
 800151c:	200a      	movs	r0, #10
 800151e:	f005 f95b 	bl	80067d8 <xQueueGenericCreate>
 8001522:	4603      	mov	r3, r0
 8001524:	4a4c      	ldr	r2, [pc, #304]	; (8001658 <main+0x23c>)
 8001526:	6013      	str	r3, [r2, #0]
  xBoardQ = xQueueCreate( 2, sizeof( int ) *4 *8 *8 );
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152e:	2002      	movs	r0, #2
 8001530:	f005 f952 	bl	80067d8 <xQueueGenericCreate>
 8001534:	4603      	mov	r3, r0
 8001536:	4a49      	ldr	r2, [pc, #292]	; (800165c <main+0x240>)
 8001538:	6013      	str	r3, [r2, #0]
  xSnakeQ = xQueueCreate( 2, sizeof(  llist ) );
 800153a:	2200      	movs	r2, #0
 800153c:	2104      	movs	r1, #4
 800153e:	2002      	movs	r0, #2
 8001540:	f005 f94a 	bl	80067d8 <xQueueGenericCreate>
 8001544:	4603      	mov	r3, r0
 8001546:	4a46      	ldr	r2, [pc, #280]	; (8001660 <main+0x244>)
 8001548:	6013      	str	r3, [r2, #0]
  xCellStateQ = xQueueCreate( 5, sizeof( int ));
 800154a:	2200      	movs	r2, #0
 800154c:	2104      	movs	r1, #4
 800154e:	2005      	movs	r0, #5
 8001550:	f005 f942 	bl	80067d8 <xQueueGenericCreate>
 8001554:	4603      	mov	r3, r0
 8001556:	4a43      	ldr	r2, [pc, #268]	; (8001664 <main+0x248>)
 8001558:	6013      	str	r3, [r2, #0]
  xFoodPositionQ = xQueueCreate( 5, sizeof( int ) * 3);
 800155a:	2200      	movs	r2, #0
 800155c:	210c      	movs	r1, #12
 800155e:	2005      	movs	r0, #5
 8001560:	f005 f93a 	bl	80067d8 <xQueueGenericCreate>
 8001564:	4603      	mov	r3, r0
 8001566:	4a40      	ldr	r2, [pc, #256]	; (8001668 <main+0x24c>)
 8001568:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800156a:	4a40      	ldr	r2, [pc, #256]	; (800166c <main+0x250>)
 800156c:	2100      	movs	r1, #0
 800156e:	4840      	ldr	r0, [pc, #256]	; (8001670 <main+0x254>)
 8001570:	f004 febc 	bl	80062ec <osThreadNew>
 8001574:	4603      	mov	r3, r0
 8001576:	4a3f      	ldr	r2, [pc, #252]	; (8001674 <main+0x258>)
 8001578:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(GameLoop, "GameLoop", configMINIMAL_STACK_SIZE*8, NULL, 1, NULL );
 800157a:	2300      	movs	r3, #0
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	2301      	movs	r3, #1
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2300      	movs	r3, #0
 8001584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001588:	493b      	ldr	r1, [pc, #236]	; (8001678 <main+0x25c>)
 800158a:	483c      	ldr	r0, [pc, #240]	; (800167c <main+0x260>)
 800158c:	f005 ffa9 	bl	80074e2 <xTaskCreate>
  //xTaskCreate(ButtonHandler, "ButtonHandler", configMINIMAL_STACK_SIZE, NULL, 2, NULL );
  //xTaskCreate(CollisionCheck, "CollisionCheck", configMINIMAL_STACK_SIZE*8, NULL, 2, NULL );
  xTaskCreate(Task3, "Task3", configMINIMAL_STACK_SIZE, NULL, 5, NULL );
 8001590:	2300      	movs	r3, #0
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	2305      	movs	r3, #5
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2300      	movs	r3, #0
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	4938      	ldr	r1, [pc, #224]	; (8001680 <main+0x264>)
 800159e:	4839      	ldr	r0, [pc, #228]	; (8001684 <main+0x268>)
 80015a0:	f005 ff9f 	bl	80074e2 <xTaskCreate>
  xTaskCreate(FoodPositionGenerator, "FoodPositionGenerator", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80015a4:	2300      	movs	r3, #0
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	2301      	movs	r3, #1
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2300      	movs	r3, #0
 80015ae:	2280      	movs	r2, #128	; 0x80
 80015b0:	4935      	ldr	r1, [pc, #212]	; (8001688 <main+0x26c>)
 80015b2:	4836      	ldr	r0, [pc, #216]	; (800168c <main+0x270>)
 80015b4:	f005 ff95 	bl	80074e2 <xTaskCreate>
  xTaskCreate(ButtonHandler_A, "ButtonHandler_A", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 80015b8:	2300      	movs	r3, #0
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	2303      	movs	r3, #3
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	2280      	movs	r2, #128	; 0x80
 80015c4:	4932      	ldr	r1, [pc, #200]	; (8001690 <main+0x274>)
 80015c6:	4833      	ldr	r0, [pc, #204]	; (8001694 <main+0x278>)
 80015c8:	f005 ff8b 	bl	80074e2 <xTaskCreate>
  xTaskCreate(ButtonHandler_B, "ButtonHandler_B", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 80015cc:	2300      	movs	r3, #0
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	2303      	movs	r3, #3
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2300      	movs	r3, #0
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	492f      	ldr	r1, [pc, #188]	; (8001698 <main+0x27c>)
 80015da:	4830      	ldr	r0, [pc, #192]	; (800169c <main+0x280>)
 80015dc:	f005 ff81 	bl	80074e2 <xTaskCreate>
  xTaskCreate(ButtonHandler_C, "ButtonHandler_C", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 80015e0:	2300      	movs	r3, #0
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	2303      	movs	r3, #3
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2300      	movs	r3, #0
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	492c      	ldr	r1, [pc, #176]	; (80016a0 <main+0x284>)
 80015ee:	482d      	ldr	r0, [pc, #180]	; (80016a4 <main+0x288>)
 80015f0:	f005 ff77 	bl	80074e2 <xTaskCreate>
  xTaskCreate(ButtonHandler_D, "ButtonHandler_D", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 80015f4:	2300      	movs	r3, #0
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	2303      	movs	r3, #3
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	4929      	ldr	r1, [pc, #164]	; (80016a8 <main+0x28c>)
 8001602:	482a      	ldr	r0, [pc, #168]	; (80016ac <main+0x290>)
 8001604:	f005 ff6d 	bl	80074e2 <xTaskCreate>
  xTaskCreate(ScreenDriver, "ScreenDriver", configMINIMAL_STACK_SIZE*8, NULL, 1, NULL );
 8001608:	2300      	movs	r3, #0
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	2301      	movs	r3, #1
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001616:	4926      	ldr	r1, [pc, #152]	; (80016b0 <main+0x294>)
 8001618:	4826      	ldr	r0, [pc, #152]	; (80016b4 <main+0x298>)
 800161a:	f005 ff62 	bl	80074e2 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800161e:	f004 fe3f 	bl	80062a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001622:	e7fe      	b.n	8001622 <main+0x206>
 8001624:	20000090 	.word	0x20000090
 8001628:	20000190 	.word	0x20000190
 800162c:	20000194 	.word	0x20000194
 8001630:	20000198 	.word	0x20000198
 8001634:	2000019c 	.word	0x2000019c
 8001638:	200001a0 	.word	0x200001a0
 800163c:	200001a4 	.word	0x200001a4
 8001640:	200001ac 	.word	0x200001ac
 8001644:	200001b0 	.word	0x200001b0
 8001648:	200001b4 	.word	0x200001b4
 800164c:	200001b8 	.word	0x200001b8
 8001650:	200001a8 	.word	0x200001a8
 8001654:	200001bc 	.word	0x200001bc
 8001658:	2000017c 	.word	0x2000017c
 800165c:	20000180 	.word	0x20000180
 8001660:	20000184 	.word	0x20000184
 8001664:	20000188 	.word	0x20000188
 8001668:	2000018c 	.word	0x2000018c
 800166c:	0800b530 	.word	0x0800b530
 8001670:	080023fd 	.word	0x080023fd
 8001674:	20000178 	.word	0x20000178
 8001678:	0800b454 	.word	0x0800b454
 800167c:	08001cc5 	.word	0x08001cc5
 8001680:	0800b460 	.word	0x0800b460
 8001684:	08002309 	.word	0x08002309
 8001688:	0800b468 	.word	0x0800b468
 800168c:	080021c1 	.word	0x080021c1
 8001690:	0800b480 	.word	0x0800b480
 8001694:	08001b29 	.word	0x08001b29
 8001698:	0800b490 	.word	0x0800b490
 800169c:	08001b71 	.word	0x08001b71
 80016a0:	0800b4a0 	.word	0x0800b4a0
 80016a4:	08001bb9 	.word	0x08001bb9
 80016a8:	0800b4b0 	.word	0x0800b4b0
 80016ac:	08001c01 	.word	0x08001c01
 80016b0:	0800b4c0 	.word	0x0800b4c0
 80016b4:	08001c49 	.word	0x08001c49

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b096      	sub	sp, #88	; 0x58
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	2244      	movs	r2, #68	; 0x44
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f007 feea 	bl	80094a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	463b      	mov	r3, r7
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016de:	f001 ff35 	bl	800354c <HAL_PWREx_ControlVoltageScaling>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016e8:	f000 fea2 	bl	8002430 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ec:	2302      	movs	r3, #2
 80016ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f6:	2310      	movs	r3, #16
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fa:	2302      	movs	r3, #2
 80016fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016fe:	2302      	movs	r3, #2
 8001700:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001702:	2301      	movs	r3, #1
 8001704:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001706:	230a      	movs	r3, #10
 8001708:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800170a:	2307      	movs	r3, #7
 800170c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800170e:	2302      	movs	r3, #2
 8001710:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001712:	2302      	movs	r3, #2
 8001714:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4618      	mov	r0, r3
 800171c:	f001 ff6c 	bl	80035f8 <HAL_RCC_OscConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001726:	f000 fe83 	bl	8002430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172a:	230f      	movs	r3, #15
 800172c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172e:	2303      	movs	r3, #3
 8001730:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800173e:	463b      	mov	r3, r7
 8001740:	2104      	movs	r1, #4
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fb34 	bl	8003db0 <HAL_RCC_ClockConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800174e:	f000 fe6f 	bl	8002430 <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	3758      	adds	r7, #88	; 0x58
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001762:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <MX_SPI1_Init+0x78>)
 8001764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800176c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001776:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800177a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <MX_SPI1_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_SPI1_Init+0x74>)
 800178a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001792:	2218      	movs	r2, #24
 8001794:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_SPI1_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <MX_SPI1_Init+0x74>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_SPI1_Init+0x74>)
 80017aa:	2207      	movs	r2, #7
 80017ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <MX_SPI1_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_SPI1_Init+0x74>)
 80017b6:	2208      	movs	r2, #8
 80017b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_SPI1_Init+0x74>)
 80017bc:	f003 fa0a 	bl	8004bd4 <HAL_SPI_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017c6:	f000 fe33 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000090 	.word	0x20000090
 80017d4:	40013000 	.word	0x40013000

080017d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_USART2_UART_Init+0x58>)
 80017de:	4a15      	ldr	r2, [pc, #84]	; (8001834 <MX_USART2_UART_Init+0x5c>)
 80017e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <MX_USART2_UART_Init+0x58>)
 80017e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART2_UART_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_USART2_UART_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART2_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_USART2_UART_Init+0x58>)
 80017fe:	220c      	movs	r2, #12
 8001800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART2_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_USART2_UART_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART2_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_USART2_UART_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_USART2_UART_Init+0x58>)
 800181c:	f004 f822 	bl	8005864 <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001826:	f000 fe03 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200000f4 	.word	0x200000f4
 8001834:	40004400 	.word	0x40004400

08001838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184e:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <MX_GPIO_Init+0x1c0>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a69      	ldr	r2, [pc, #420]	; (80019f8 <MX_GPIO_Init+0x1c0>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <MX_GPIO_Init+0x1c0>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001866:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <MX_GPIO_Init+0x1c0>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	4a63      	ldr	r2, [pc, #396]	; (80019f8 <MX_GPIO_Init+0x1c0>)
 800186c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001872:	4b61      	ldr	r3, [pc, #388]	; (80019f8 <MX_GPIO_Init+0x1c0>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <MX_GPIO_Init+0x1c0>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	4a5d      	ldr	r2, [pc, #372]	; (80019f8 <MX_GPIO_Init+0x1c0>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188a:	4b5b      	ldr	r3, [pc, #364]	; (80019f8 <MX_GPIO_Init+0x1c0>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <MX_GPIO_Init+0x1c0>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4a57      	ldr	r2, [pc, #348]	; (80019f8 <MX_GPIO_Init+0x1c0>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a2:	4b55      	ldr	r3, [pc, #340]	; (80019f8 <MX_GPIO_Init+0x1c0>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2107      	movs	r1, #7
 80018b2:	4852      	ldr	r0, [pc, #328]	; (80019fc <MX_GPIO_Init+0x1c4>)
 80018b4:	f001 fe24 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2150      	movs	r1, #80	; 0x50
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c0:	f001 fe1e 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2140      	movs	r1, #64	; 0x40
 80018c8:	484d      	ldr	r0, [pc, #308]	; (8001a00 <MX_GPIO_Init+0x1c8>)
 80018ca:	f001 fe19 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4845      	ldr	r0, [pc, #276]	; (80019fc <MX_GPIO_Init+0x1c4>)
 80018e6:	f001 fc61 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80018ea:	2307      	movs	r3, #7
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	483e      	ldr	r0, [pc, #248]	; (80019fc <MX_GPIO_Init+0x1c4>)
 8001902:	f001 fc53 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001906:	f44f 7381 	mov.w	r3, #258	; 0x102
 800190a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800191e:	f001 fc45 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin PA6 */
  GPIO_InitStruct.Pin = SPI_CS_Pin|GPIO_PIN_6;
 8001922:	2350      	movs	r3, #80	; 0x50
 8001924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001926:	2301      	movs	r3, #1
 8001928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193c:	f001 fc36 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_A3_Pin PB10 */
  GPIO_InitStruct.Pin = Button_A3_Pin|GPIO_PIN_10;
 8001940:	f240 4301 	movw	r3, #1025	; 0x401
 8001944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	482a      	ldr	r0, [pc, #168]	; (8001a00 <MX_GPIO_Init+0x1c8>)
 8001956:	f001 fc29 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800195a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001960:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001974:	f001 fc1a 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_B_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = Button_B_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8001978:	2338      	movs	r3, #56	; 0x38
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	481c      	ldr	r0, [pc, #112]	; (8001a00 <MX_GPIO_Init+0x1c8>)
 800198e:	f001 fc0d 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001992:	2340      	movs	r3, #64	; 0x40
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4815      	ldr	r0, [pc, #84]	; (8001a00 <MX_GPIO_Init+0x1c8>)
 80019aa:	f001 fbff 	bl	80031ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2105      	movs	r1, #5
 80019b2:	2009      	movs	r0, #9
 80019b4:	f001 fbd0 	bl	8003158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80019b8:	2009      	movs	r0, #9
 80019ba:	f001 fbe9 	bl	8003190 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2105      	movs	r1, #5
 80019c2:	200a      	movs	r0, #10
 80019c4:	f001 fbc8 	bl	8003158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019c8:	200a      	movs	r0, #10
 80019ca:	f001 fbe1 	bl	8003190 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2105      	movs	r1, #5
 80019d2:	2017      	movs	r0, #23
 80019d4:	f001 fbc0 	bl	8003158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019d8:	2017      	movs	r0, #23
 80019da:	f001 fbd9 	bl	8003190 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2105      	movs	r1, #5
 80019e2:	2028      	movs	r0, #40	; 0x28
 80019e4:	f001 fbb8 	bl	8003158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019e8:	2028      	movs	r0, #40	; 0x28
 80019ea:	f001 fbd1 	bl	8003190 <HAL_NVIC_EnableIRQ>

}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000800 	.word	0x48000800
 8001a00:	48000400 	.word	0x48000400

08001a04 <EXTI3_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI3_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	static  BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <EXTI3_IRQHandler+0x38>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <EXTI3_IRQHandler+0x3c>)
 8001a10:	2208      	movs	r2, #8
 8001a12:	615a      	str	r2, [r3, #20]


	xSemaphoreGiveFromISR( xHandleButtonPressB, &xHigherPriorityTaskWoken );
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <EXTI3_IRQHandler+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4908      	ldr	r1, [pc, #32]	; (8001a3c <EXTI3_IRQHandler+0x38>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 f905 	bl	8006c2a <xQueueGiveFromISR>

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <EXTI3_IRQHandler+0x38>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d007      	beq.n	8001a38 <EXTI3_IRQHandler+0x34>
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <EXTI3_IRQHandler+0x44>)
 8001a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	f3bf 8f4f 	dsb	sy
 8001a34:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI3_IRQn 0 */

  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200001c0 	.word	0x200001c0
 8001a40:	40010400 	.word	0x40010400
 8001a44:	200001b0 	.word	0x200001b0
 8001a48:	e000ed04 	.word	0xe000ed04

08001a4c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	static  BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <EXTI4_IRQHandler+0x38>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <EXTI4_IRQHandler+0x3c>)
 8001a58:	2210      	movs	r2, #16
 8001a5a:	615a      	str	r2, [r3, #20]


		xSemaphoreGiveFromISR( xHandleButtonPressD, &xHigherPriorityTaskWoken );
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <EXTI4_IRQHandler+0x40>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4908      	ldr	r1, [pc, #32]	; (8001a84 <EXTI4_IRQHandler+0x38>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f005 f8e1 	bl	8006c2a <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <EXTI4_IRQHandler+0x38>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <EXTI4_IRQHandler+0x34>
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <EXTI4_IRQHandler+0x44>)
 8001a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	f3bf 8f4f 	dsb	sy
 8001a7c:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI4_IRQn 0 */
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200001c4 	.word	0x200001c4
 8001a88:	40010400 	.word	0x40010400
 8001a8c:	200001b8 	.word	0x200001b8
 8001a90:	e000ed04 	.word	0xe000ed04

08001a94 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	static  BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <EXTI9_5_IRQHandler+0x38>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <EXTI9_5_IRQHandler+0x3c>)
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	615a      	str	r2, [r3, #20]


		xSemaphoreGiveFromISR( xHandleButtonPressC, &xHigherPriorityTaskWoken );
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <EXTI9_5_IRQHandler+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4908      	ldr	r1, [pc, #32]	; (8001acc <EXTI9_5_IRQHandler+0x38>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 f8bd 	bl	8006c2a <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <EXTI9_5_IRQHandler+0x38>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <EXTI9_5_IRQHandler+0x34>
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <EXTI9_5_IRQHandler+0x44>)
 8001aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f3bf 8f4f 	dsb	sy
 8001ac4:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI9_5_IRQn 0 */
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200001c8 	.word	0x200001c8
 8001ad0:	40010400 	.word	0x40010400
 8001ad4:	200001b4 	.word	0x200001b4
 8001ad8:	e000ed04 	.word	0xe000ed04

08001adc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	static  BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <EXTI15_10_IRQHandler+0x3c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <EXTI15_10_IRQHandler+0x40>)
 8001ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aec:	615a      	str	r2, [r3, #20]


		xSemaphoreGiveFromISR( xHandleButtonPressA, &xHigherPriorityTaskWoken );
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <EXTI15_10_IRQHandler+0x44>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4909      	ldr	r1, [pc, #36]	; (8001b18 <EXTI15_10_IRQHandler+0x3c>)
 8001af4:	4618      	mov	r0, r3
 8001af6:	f005 f898 	bl	8006c2a <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <EXTI15_10_IRQHandler+0x3c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <EXTI15_10_IRQHandler+0x36>
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <EXTI15_10_IRQHandler+0x48>)
 8001b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200001cc 	.word	0x200001cc
 8001b1c:	40010400 	.word	0x40010400
 8001b20:	200001ac 	.word	0x200001ac
 8001b24:	e000ed04 	.word	0xe000ed04

08001b28 <ButtonHandler_A>:

void ButtonHandler_A( void *pvParameters ){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	char buttonLetter = 'a';
 8001b30:	2361      	movs	r3, #97	; 0x61
 8001b32:	73fb      	strb	r3, [r7, #15]

	for(;;)
	    {

			if( xSemaphoreTake( xHandleButtonPressA, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <ButtonHandler_A+0x3c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f005 f9e1 	bl	8006f04 <xQueueSemaphoreTake>
			xQueueSend( xDirectionQ, ( void * ) &buttonLetter,  portMAX_DELAY );
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <ButtonHandler_A+0x40>)
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	f107 010f 	add.w	r1, r7, #15
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b50:	f004 fed2 	bl	80068f8 <xQueueGenericSend>
			xSemaphoreGive( xButtonPressedSem );
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <ButtonHandler_A+0x44>)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	f004 fecb 	bl	80068f8 <xQueueGenericSend>
			if( xSemaphoreTake( xHandleButtonPressA, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001b62:	e7e7      	b.n	8001b34 <ButtonHandler_A+0xc>
 8001b64:	200001ac 	.word	0x200001ac
 8001b68:	2000017c 	.word	0x2000017c
 8001b6c:	20000190 	.word	0x20000190

08001b70 <ButtonHandler_B>:
	    }
};
void ButtonHandler_B( void *pvParameters ){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	char buttonLetter = 'b';
 8001b78:	2362      	movs	r3, #98	; 0x62
 8001b7a:	73fb      	strb	r3, [r7, #15]
	for(;;)
		    {

				if( xSemaphoreTake( xHandleButtonPressB, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <ButtonHandler_B+0x3c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	4618      	mov	r0, r3
 8001b86:	f005 f9bd 	bl	8006f04 <xQueueSemaphoreTake>
				xQueueSend( xDirectionQ, ( void * ) &buttonLetter,  portMAX_DELAY );
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <ButtonHandler_B+0x40>)
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	f107 010f 	add.w	r1, r7, #15
 8001b92:	2300      	movs	r3, #0
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295
 8001b98:	f004 feae 	bl	80068f8 <xQueueGenericSend>
				xSemaphoreGive( xButtonPressedSem );
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <ButtonHandler_B+0x44>)
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	f004 fea7 	bl	80068f8 <xQueueGenericSend>
				if( xSemaphoreTake( xHandleButtonPressB, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001baa:	e7e7      	b.n	8001b7c <ButtonHandler_B+0xc>
 8001bac:	200001b0 	.word	0x200001b0
 8001bb0:	2000017c 	.word	0x2000017c
 8001bb4:	20000190 	.word	0x20000190

08001bb8 <ButtonHandler_C>:
		    }
};
void ButtonHandler_C( void *pvParameters ){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	char buttonLetter = 'c';
 8001bc0:	2363      	movs	r3, #99	; 0x63
 8001bc2:	73fb      	strb	r3, [r7, #15]
	for(;;)
		    {

				if( xSemaphoreTake( xHandleButtonPressC, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <ButtonHandler_C+0x3c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f005 f999 	bl	8006f04 <xQueueSemaphoreTake>
				xQueueSend( xDirectionQ, ( void * ) &buttonLetter,  portMAX_DELAY );
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <ButtonHandler_C+0x40>)
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	f107 010f 	add.w	r1, r7, #15
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	f004 fe8a 	bl	80068f8 <xQueueGenericSend>
				xSemaphoreGive( xButtonPressedSem );
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <ButtonHandler_C+0x44>)
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	2300      	movs	r3, #0
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	f004 fe83 	bl	80068f8 <xQueueGenericSend>
				if( xSemaphoreTake( xHandleButtonPressC, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001bf2:	e7e7      	b.n	8001bc4 <ButtonHandler_C+0xc>
 8001bf4:	200001b4 	.word	0x200001b4
 8001bf8:	2000017c 	.word	0x2000017c
 8001bfc:	20000190 	.word	0x20000190

08001c00 <ButtonHandler_D>:
		    }
};
void ButtonHandler_D( void *pvParameters ){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	char buttonLetter = 'd';
 8001c08:	2364      	movs	r3, #100	; 0x64
 8001c0a:	73fb      	strb	r3, [r7, #15]
	for(;;)
		    {

				if( xSemaphoreTake( xHandleButtonPressD, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <ButtonHandler_D+0x3c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	4618      	mov	r0, r3
 8001c16:	f005 f975 	bl	8006f04 <xQueueSemaphoreTake>
				xQueueSend( xDirectionQ, ( void * ) &buttonLetter,  portMAX_DELAY );
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <ButtonHandler_D+0x40>)
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	f107 010f 	add.w	r1, r7, #15
 8001c22:	2300      	movs	r3, #0
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	f004 fe66 	bl	80068f8 <xQueueGenericSend>
				xSemaphoreGive( xButtonPressedSem );
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <ButtonHandler_D+0x44>)
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	2300      	movs	r3, #0
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	f004 fe5f 	bl	80068f8 <xQueueGenericSend>
				if( xSemaphoreTake( xHandleButtonPressD, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001c3a:	e7e7      	b.n	8001c0c <ButtonHandler_D+0xc>
 8001c3c:	200001b8 	.word	0x200001b8
 8001c40:	2000017c 	.word	0x2000017c
 8001c44:	20000190 	.word	0x20000190

08001c48 <ScreenDriver>:
		    }

};

void ScreenDriver( void * pvParameters ){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001c54:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001c58:	6018      	str	r0, [r3, #0]
	int board[4][8][8];

	for(;;)
			    {
		if( xSemaphoreTake( xRepaintScreen, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <ScreenDriver+0x74>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c62:	4618      	mov	r0, r3
 8001c64:	f005 f94e 	bl	8006f04 <xQueueSemaphoreTake>
		xQueueReceive( xBoardQ, &board, ( TickType_t ) 10 );
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <ScreenDriver+0x78>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f107 0108 	add.w	r1, r7, #8
 8001c70:	220a      	movs	r2, #10
 8001c72:	4618      	mov	r0, r3
 8001c74:	f005 f866 	bl	8006d44 <xQueueReceive>

		MAX7219_paintPoints(0, board[0]);
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f000 fe1a 	bl	80028b8 <MAX7219_paintPoints>
		MAX7219_paintPoints(1, board[1]);
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f000 fe12 	bl	80028b8 <MAX7219_paintPoints>
		MAX7219_paintPoints(2, board[2]);
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f000 fe0a 	bl	80028b8 <MAX7219_paintPoints>
		MAX7219_paintPoints(3, board[3]);
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001cac:	4619      	mov	r1, r3
 8001cae:	2003      	movs	r0, #3
 8001cb0:	f000 fe02 	bl	80028b8 <MAX7219_paintPoints>
		MAX7219_MatrixUpdate();
 8001cb4:	f000 fec0 	bl	8002a38 <MAX7219_MatrixUpdate>
		if( xSemaphoreTake( xRepaintScreen, ( TickType_t ) portMAX_DELAY) == pdTRUE );
 8001cb8:	e7cf      	b.n	8001c5a <ScreenDriver+0x12>
 8001cba:	bf00      	nop
 8001cbc:	200001a8 	.word	0x200001a8
 8001cc0:	20000180 	.word	0x20000180

08001cc4 <GameLoop>:
};


void GameLoop( void * pvParameters )

{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001cd0:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8001cd4:	6018      	str	r0, [r3, #0]
	int board[4][8][8];
	char direction = 'a';
 8001cd6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001cda:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001cde:	2261      	movs	r2, #97	; 0x61
 8001ce0:	701a      	strb	r2, [r3, #0]
	char previousDirection = 'a';
 8001ce2:	2361      	movs	r3, #97	; 0x61
 8001ce4:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
	int delay = 350;
 8001ce8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001cec:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
	int cellState = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int foodTimeout = 3;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	int food[3];
	int grow = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

	memset(board, 0, sizeof(board));
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f007 fbc7 	bl	80094a0 <memset>

	llist *snake = llist_create(NULL);
 8001d12:	2000      	movs	r0, #0
 8001d14:	f7ff f8c2 	bl	8000e9c <llist_create>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d1e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001d22:	601a      	str	r2, [r3, #0]
	llist_push(snake, 0,4,1);
 8001d24:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d28:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	2204      	movs	r2, #4
 8001d32:	2100      	movs	r1, #0
 8001d34:	f7ff f8d6 	bl	8000ee4 <llist_push>
	llist_push(snake, 0,4,2);
 8001d38:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d3c:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	2302      	movs	r3, #2
 8001d44:	2204      	movs	r2, #4
 8001d46:	2100      	movs	r1, #0
 8001d48:	f7ff f8cc 	bl	8000ee4 <llist_push>

	llist_printSnake(snake, board);
 8001d4c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d50:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f107 021c 	add.w	r2, r7, #28
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f8f7 	bl	8000f50 <llist_printSnake>

	if( xSemaphoreTake( xScreenDriverMutex, ( TickType_t ) portMAX_DELAY) == pdTRUE ) ;
 8001d62:	4bc1      	ldr	r3, [pc, #772]	; (8002068 <GameLoop+0x3a4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f005 f8ca 	bl	8006f04 <xQueueSemaphoreTake>

	xQueueSend( xBoardQ, ( void * ) &board,  1 );
 8001d70:	4bbe      	ldr	r3, [pc, #760]	; (800206c <GameLoop+0x3a8>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	f107 011c 	add.w	r1, r7, #28
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f004 fdbc 	bl	80068f8 <xQueueGenericSend>
	xSemaphoreGive( xRepaintScreen );
 8001d80:	4bbb      	ldr	r3, [pc, #748]	; (8002070 <GameLoop+0x3ac>)
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	2300      	movs	r3, #0
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	f004 fdb5 	bl	80068f8 <xQueueGenericSend>

	xSemaphoreGive(xScreenDriverMutex);
 8001d8e:	4bb6      	ldr	r3, [pc, #728]	; (8002068 <GameLoop+0x3a4>)
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	2300      	movs	r3, #0
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	f004 fdae 	bl	80068f8 <xQueueGenericSend>

	vTaskDelay(delay);
 8001d9c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001da0:	4618      	mov	r0, r3
 8001da2:	f005 fce3 	bl	800776c <vTaskDelay>

    for(;;)
    {

    	if( xSemaphoreTake( xButtonPressedSem, ( TickType_t ) 1) == pdTRUE ){
 8001da6:	4bb3      	ldr	r3, [pc, #716]	; (8002074 <GameLoop+0x3b0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2101      	movs	r1, #1
 8001dac:	4618      	mov	r0, r3
 8001dae:	f005 f8a9 	bl	8006f04 <xQueueSemaphoreTake>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d161      	bne.n	8001e7c <GameLoop+0x1b8>
    		previousDirection = direction;
 8001db8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001dbc:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
    		xQueueReceive( xDirectionQ, &direction, ( TickType_t ) 10 );
 8001dc6:	4bac      	ldr	r3, [pc, #688]	; (8002078 <GameLoop+0x3b4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f107 011b 	add.w	r1, r7, #27
 8001dce:	220a      	movs	r2, #10
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f004 ffb7 	bl	8006d44 <xQueueReceive>
    		switch (direction)
 8001dd6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001dda:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	3b61      	subs	r3, #97	; 0x61
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d83a      	bhi.n	8001e5c <GameLoop+0x198>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <GameLoop+0x128>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e45 	.word	0x08001e45
 8001df0:	08001dfd 	.word	0x08001dfd
 8001df4:	08001e2d 	.word	0x08001e2d
 8001df8:	08001e15 	.word	0x08001e15
			{
				case 'b':
					if (previousDirection == 'd') direction = previousDirection;
 8001dfc:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001e00:	2b64      	cmp	r3, #100	; 0x64
 8001e02:	d12d      	bne.n	8001e60 <GameLoop+0x19c>
 8001e04:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e08:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e0c:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8001e10:	701a      	strb	r2, [r3, #0]

					break;
 8001e12:	e025      	b.n	8001e60 <GameLoop+0x19c>
				case 'd':

					if (previousDirection == 'b') direction = previousDirection;
 8001e14:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001e18:	2b62      	cmp	r3, #98	; 0x62
 8001e1a:	d123      	bne.n	8001e64 <GameLoop+0x1a0>
 8001e1c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e20:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e24:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8001e28:	701a      	strb	r2, [r3, #0]
					break;
 8001e2a:	e01b      	b.n	8001e64 <GameLoop+0x1a0>
				case 'c':

					if (previousDirection == 'a') direction = previousDirection;
 8001e2c:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001e30:	2b61      	cmp	r3, #97	; 0x61
 8001e32:	d119      	bne.n	8001e68 <GameLoop+0x1a4>
 8001e34:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e38:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e3c:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8001e40:	701a      	strb	r2, [r3, #0]
					break;
 8001e42:	e011      	b.n	8001e68 <GameLoop+0x1a4>
				case 'a':

					if (previousDirection == 'c') direction = previousDirection;
 8001e44:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001e48:	2b63      	cmp	r3, #99	; 0x63
 8001e4a:	d10f      	bne.n	8001e6c <GameLoop+0x1a8>
 8001e4c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e50:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e54:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8001e58:	701a      	strb	r2, [r3, #0]

					break;
 8001e5a:	e007      	b.n	8001e6c <GameLoop+0x1a8>
				default:
					break;
 8001e5c:	bf00      	nop
 8001e5e:	e006      	b.n	8001e6e <GameLoop+0x1aa>
					break;
 8001e60:	bf00      	nop
 8001e62:	e004      	b.n	8001e6e <GameLoop+0x1aa>
					break;
 8001e64:	bf00      	nop
 8001e66:	e002      	b.n	8001e6e <GameLoop+0x1aa>
					break;
 8001e68:	bf00      	nop
 8001e6a:	e000      	b.n	8001e6e <GameLoop+0x1aa>
					break;
 8001e6c:	bf00      	nop
			}

    		xQueueReset(xDirectionQ);
 8001e6e:	4b82      	ldr	r3, [pc, #520]	; (8002078 <GameLoop+0x3b4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 fbcf 	bl	8006618 <xQueueGenericReset>
 8001e7a:	e794      	b.n	8001da6 <GameLoop+0xe2>
    	}else {


    		switch (direction)
 8001e7c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001e80:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	3b61      	subs	r3, #97	; 0x61
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	f200 80e5 	bhi.w	8002058 <GameLoop+0x394>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <GameLoop+0x1d0>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001fed 	.word	0x08001fed
 8001e98:	08001ea5 	.word	0x08001ea5
 8001e9c:	08001f81 	.word	0x08001f81
 8001ea0:	08001f13 	.word	0x08001f13
			{
			case 'b':
				cellState = checkOccupiedDown( snake, board);
 8001ea4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001ea8:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f107 021c 	add.w	r2, r7, #28
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff f99f 	bl	80011f8 <checkOccupiedDown>
 8001eba:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
				if (previousDirection != 'd'){
 8001ebe:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	f000 80ca 	beq.w	800205c <GameLoop+0x398>
					if (cellState == 1 || cellState == -1) xSemaphoreGive( xGameOverSem );
 8001ec8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d004      	beq.n	8001eda <GameLoop+0x216>
 8001ed0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d106      	bne.n	8001ee8 <GameLoop+0x224>
 8001eda:	4b68      	ldr	r3, [pc, #416]	; (800207c <GameLoop+0x3b8>)
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	f004 fd08 	bl	80068f8 <xQueueGenericSend>
					if (cellState == 2 ) {
 8001ee8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d105      	bne.n	8001efc <GameLoop+0x238>
						foodTimeout = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
						grow = 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
					}
					 moveDown(snake, grow);
 8001efc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001f00:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fa41 	bl	8001392 <moveDown>
				}
				break;
 8001f10:	e0a4      	b.n	800205c <GameLoop+0x398>
			case 'd':
				cellState = checkOccupiedUp( snake, board);
 8001f12:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001f16:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f107 021c 	add.w	r2, r7, #28
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f913 	bl	800114e <checkOccupiedUp>
 8001f28:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c

				if (previousDirection != 'b') {
 8001f2c:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001f30:	2b62      	cmp	r3, #98	; 0x62
 8001f32:	f000 8095 	beq.w	8002060 <GameLoop+0x39c>

					if (cellState == 1 || cellState == -1) xSemaphoreGive( xGameOverSem );
 8001f36:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d004      	beq.n	8001f48 <GameLoop+0x284>
 8001f3e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d106      	bne.n	8001f56 <GameLoop+0x292>
 8001f48:	4b4c      	ldr	r3, [pc, #304]	; (800207c <GameLoop+0x3b8>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	f004 fcd1 	bl	80068f8 <xQueueGenericSend>
					if (cellState == 2 ) {
 8001f56:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d105      	bne.n	8001f6a <GameLoop+0x2a6>
										foodTimeout = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
										grow = 1;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
									}
					moveUp(snake, grow);
 8001f6a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001f6e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fa2c 	bl	80013d6 <moveUp>
				}
				break;
 8001f7e:	e06f      	b.n	8002060 <GameLoop+0x39c>
			case 'c':
				cellState = checkOccupiedLeft( snake, board);
 8001f80:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001f84:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f107 021c 	add.w	r2, r7, #28
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff f870 	bl	8001076 <checkOccupiedLeft>
 8001f96:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
				if (previousDirection != 'a'){
 8001f9a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001f9e:	2b61      	cmp	r3, #97	; 0x61
 8001fa0:	d060      	beq.n	8002064 <GameLoop+0x3a0>
					if (cellState == 1 || cellState == -1) xSemaphoreGive( xGameOverSem );
 8001fa2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d004      	beq.n	8001fb4 <GameLoop+0x2f0>
 8001faa:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb2:	d106      	bne.n	8001fc2 <GameLoop+0x2fe>
 8001fb4:	4b31      	ldr	r3, [pc, #196]	; (800207c <GameLoop+0x3b8>)
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	f004 fc9b 	bl	80068f8 <xQueueGenericSend>
					if (cellState == 2 ) {
 8001fc2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d105      	bne.n	8001fd6 <GameLoop+0x312>
										foodTimeout = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
										grow = 1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
									}
					 moveLeft(snake, grow);
 8001fd6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001fda:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff f9a6 	bl	8001336 <moveLeft>
				}
				break;
 8001fea:	e03b      	b.n	8002064 <GameLoop+0x3a0>
			case 'a':
				cellState = checkOccupiedRight( snake, board);
 8001fec:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001ff0:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f107 021c 	add.w	r2, r7, #28
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe ffd1 	bl	8000fa4 <checkOccupiedRight>
 8002002:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c


				if (previousDirection != 'c'){
 8002006:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800200a:	2b63      	cmp	r3, #99	; 0x63
 800200c:	d038      	beq.n	8002080 <GameLoop+0x3bc>
					if (cellState == 1 || cellState == -1) xSemaphoreGive( xGameOverSem );
 800200e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d004      	beq.n	8002020 <GameLoop+0x35c>
 8002016:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800201a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201e:	d106      	bne.n	800202e <GameLoop+0x36a>
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <GameLoop+0x3b8>)
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	2300      	movs	r3, #0
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	f004 fc65 	bl	80068f8 <xQueueGenericSend>
					if (cellState == 2 ) {
 800202e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002032:	2b02      	cmp	r3, #2
 8002034:	d105      	bne.n	8002042 <GameLoop+0x37e>
						foodTimeout = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
						grow = 1;
 800203c:	2301      	movs	r3, #1
 800203e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
					}
					moveRight(snake, grow);
 8002042:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002046:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f943 	bl	80012dc <moveRight>
//				xQueueSend( xBoardQ, ( void * ) &board,  1 );
//				xQueueSend( xSnakeQ, ( void * ) &snake,  1 );
//				xSemaphoreGive( xCheckCollison );
//				if(xSemaphoreTake( xCollisionChecked, ( TickType_t ) portMAX_DELAY) == pdTRUE);
//				xQueueReceive( xCellStateQ, &cellState, ( TickType_t ) 10 );
				break;
 8002056:	e013      	b.n	8002080 <GameLoop+0x3bc>
			default:
				break;
 8002058:	bf00      	nop
 800205a:	e012      	b.n	8002082 <GameLoop+0x3be>
				break;
 800205c:	bf00      	nop
 800205e:	e010      	b.n	8002082 <GameLoop+0x3be>
				break;
 8002060:	bf00      	nop
 8002062:	e00e      	b.n	8002082 <GameLoop+0x3be>
				break;
 8002064:	bf00      	nop
 8002066:	e00c      	b.n	8002082 <GameLoop+0x3be>
 8002068:	200001bc 	.word	0x200001bc
 800206c:	20000180 	.word	0x20000180
 8002070:	200001a8 	.word	0x200001a8
 8002074:	20000190 	.word	0x20000190
 8002078:	2000017c 	.word	0x2000017c
 800207c:	20000194 	.word	0x20000194
				break;
 8002080:	bf00      	nop
			}
    		if (grow == 1) if (delay > 150) delay = delay - 5;
 8002082:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8002086:	2b01      	cmp	r3, #1
 8002088:	d108      	bne.n	800209c <GameLoop+0x3d8>
 800208a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800208e:	2b96      	cmp	r3, #150	; 0x96
 8002090:	dd04      	ble.n	800209c <GameLoop+0x3d8>
 8002092:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8002096:	3b05      	subs	r3, #5
 8002098:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
    		grow = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

    		memset(board, 0, sizeof(board));
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f007 f9f7 	bl	80094a0 <memset>

    		if (foodTimeout == 6){
 80020b2:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d123      	bne.n	8002102 <GameLoop+0x43e>
    			xQueueReset(xSnakeQ);
 80020ba:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <GameLoop+0x4e0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 faa9 	bl	8006618 <xQueueGenericReset>
				xQueueSend( xSnakeQ, ( void * ) &snake,  10 );
 80020c6:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <GameLoop+0x4e0>)
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	f107 0108 	add.w	r1, r7, #8
 80020ce:	2300      	movs	r3, #0
 80020d0:	220a      	movs	r2, #10
 80020d2:	f004 fc11 	bl	80068f8 <xQueueGenericSend>
				xSemaphoreGive( xGenerateFood );
 80020d6:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <GameLoop+0x4e4>)
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	2300      	movs	r3, #0
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	f004 fc0a 	bl	80068f8 <xQueueGenericSend>

				if(xSemaphoreTake( xFoodGenerated, ( TickType_t ) portMAX_DELAY) == pdTRUE);
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <GameLoop+0x4e8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	4618      	mov	r0, r3
 80020ee:	f004 ff09 	bl	8006f04 <xQueueSemaphoreTake>
				xQueueReceive( xFoodPositionQ, &food, ( TickType_t ) 10 );
 80020f2:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <GameLoop+0x4ec>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f107 010c 	add.w	r1, r7, #12
 80020fa:	220a      	movs	r2, #10
 80020fc:	4618      	mov	r0, r3
 80020fe:	f004 fe21 	bl	8006d44 <xQueueReceive>

			}
    		if (foodTimeout >= 6) board[food[0]][food[2]][food[1]] = 2;
 8002102:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8002106:	2b05      	cmp	r3, #5
 8002108:	dd19      	ble.n	800213e <GameLoop+0x47a>
 800210a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800210e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002118:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800211c:	6899      	ldr	r1, [r3, #8]
 800211e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002122:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800212c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002130:	00c0      	lsls	r0, r0, #3
 8002132:	4401      	add	r1, r0
 8002134:	00c9      	lsls	r1, r1, #3
 8002136:	440a      	add	r2, r1
 8002138:	2102      	movs	r1, #2
 800213a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        	llist_printSnake(snake, board);
 800213e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002142:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f107 021c 	add.w	r2, r7, #28
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fefe 	bl	8000f50 <llist_printSnake>

//        	board[3][0][0] = 1; test code
//        	board[3][0][1] = 1;
//        	board[3][2][0] = 1;

        	if( xSemaphoreTake( xScreenDriverMutex, ( TickType_t ) portMAX_DELAY) == pdTRUE ) ;
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <GameLoop+0x4f0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	4618      	mov	r0, r3
 800215e:	f004 fed1 	bl	8006f04 <xQueueSemaphoreTake>


			xQueueSend( xBoardQ, ( void * ) &board,  1 );
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <GameLoop+0x4f4>)
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	f107 011c 	add.w	r1, r7, #28
 800216a:	2300      	movs	r3, #0
 800216c:	2201      	movs	r2, #1
 800216e:	f004 fbc3 	bl	80068f8 <xQueueGenericSend>
			xSemaphoreGive( xRepaintScreen );
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <GameLoop+0x4f8>)
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	2300      	movs	r3, #0
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	f004 fbbc 	bl	80068f8 <xQueueGenericSend>

			xSemaphoreGive(xScreenDriverMutex);
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <GameLoop+0x4f0>)
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	2300      	movs	r3, #0
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	f004 fbb5 	bl	80068f8 <xQueueGenericSend>


    		vTaskDelay(delay);
 800218e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8002192:	4618      	mov	r0, r3
 8002194:	f005 faea 	bl	800776c <vTaskDelay>
    		foodTimeout++;
 8002198:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800219c:	3301      	adds	r3, #1
 800219e:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
    	if( xSemaphoreTake( xButtonPressedSem, ( TickType_t ) 1) == pdTRUE ){
 80021a2:	e600      	b.n	8001da6 <GameLoop+0xe2>
 80021a4:	20000184 	.word	0x20000184
 80021a8:	200001a0 	.word	0x200001a0
 80021ac:	200001a4 	.word	0x200001a4
 80021b0:	2000018c 	.word	0x2000018c
 80021b4:	200001bc 	.word	0x200001bc
 80021b8:	20000180 	.word	0x20000180
 80021bc:	200001a8 	.word	0x200001a8

080021c0 <FoodPositionGenerator>:

    }

}

void FoodPositionGenerator(void *  pvParameters){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08c      	sub	sp, #48	; 0x30
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

	llist *snakeBody;
	int display;
	int x;
	int y;
	int valid = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
	int food[3];
	for (int i = 0; i < 50; ++i) {
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	e004      	b.n	80021dc <FoodPositionGenerator+0x1c>
		rand();
 80021d2:	f007 fa7b 	bl	80096cc <rand>
	for (int i = 0; i < 50; ++i) {
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3301      	adds	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b31      	cmp	r3, #49	; 0x31
 80021e0:	ddf7      	ble.n	80021d2 <FoodPositionGenerator+0x12>
	for(;;) {




		if(xSemaphoreTake( xGenerateFood, ( TickType_t ) portMAX_DELAY) == pdTRUE);
 80021e2:	4b45      	ldr	r3, [pc, #276]	; (80022f8 <FoodPositionGenerator+0x138>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f04f 31ff 	mov.w	r1, #4294967295
 80021ea:	4618      	mov	r0, r3
 80021ec:	f004 fe8a 	bl	8006f04 <xQueueSemaphoreTake>

		xQueueReceive( xSnakeQ, &snakeBody, ( TickType_t ) portMAX_DELAY );
 80021f0:	4b42      	ldr	r3, [pc, #264]	; (80022fc <FoodPositionGenerator+0x13c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f107 0114 	add.w	r1, r7, #20
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	4618      	mov	r0, r3
 80021fe:	f004 fda1 	bl	8006d44 <xQueueReceive>

		display = rand() % 4;
 8002202:	f007 fa63 	bl	80096cc <rand>
 8002206:	4603      	mov	r3, r0
 8002208:	425a      	negs	r2, r3
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	f002 0203 	and.w	r2, r2, #3
 8002212:	bf58      	it	pl
 8002214:	4253      	negpl	r3, r2
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c

		x = rand() % 8;
 8002218:	f007 fa58 	bl	80096cc <rand>
 800221c:	4603      	mov	r3, r0
 800221e:	425a      	negs	r2, r3
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	f002 0207 	and.w	r2, r2, #7
 8002228:	bf58      	it	pl
 800222a:	4253      	negpl	r3, r2
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
		y = rand() % 8;
 800222e:	f007 fa4d 	bl	80096cc <rand>
 8002232:	4603      	mov	r3, r0
 8002234:	425a      	negs	r2, r3
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	f002 0207 	and.w	r2, r2, #7
 800223e:	bf58      	it	pl
 8002240:	4253      	negpl	r3, r2
 8002242:	627b      	str	r3, [r7, #36]	; 0x24


		while(valid == 0 ){
 8002244:	e03e      	b.n	80022c4 <FoodPositionGenerator+0x104>
			struct node *curr = *snakeBody;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	61bb      	str	r3, [r7, #24]
			valid = 1;
 800224c:	2301      	movs	r3, #1
 800224e:	623b      	str	r3, [r7, #32]

			display = rand() % 4;
 8002250:	f007 fa3c 	bl	80096cc <rand>
 8002254:	4603      	mov	r3, r0
 8002256:	425a      	negs	r2, r3
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	f002 0203 	and.w	r2, r2, #3
 8002260:	bf58      	it	pl
 8002262:	4253      	negpl	r3, r2
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c

			x = rand() % 8;
 8002266:	f007 fa31 	bl	80096cc <rand>
 800226a:	4603      	mov	r3, r0
 800226c:	425a      	negs	r2, r3
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	f002 0207 	and.w	r2, r2, #7
 8002276:	bf58      	it	pl
 8002278:	4253      	negpl	r3, r2
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
			y = rand() % 8;
 800227c:	f007 fa26 	bl	80096cc <rand>
 8002280:	4603      	mov	r3, r0
 8002282:	425a      	negs	r2, r3
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	f002 0207 	and.w	r2, r2, #7
 800228c:	bf58      	it	pl
 800228e:	4253      	negpl	r3, r2
 8002290:	627b      	str	r3, [r7, #36]	; 0x24

			while (curr != NULL) {
 8002292:	e014      	b.n	80022be <FoodPositionGenerator+0xfe>

				if (curr->x == x  && curr->y == y && curr->display == display) {
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800229a:	429a      	cmp	r2, r3
 800229c:	d10c      	bne.n	80022b8 <FoodPositionGenerator+0xf8>
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d107      	bne.n	80022b8 <FoodPositionGenerator+0xf8>
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d102      	bne.n	80022b8 <FoodPositionGenerator+0xf8>
					valid = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
					break;
 80022b6:	e005      	b.n	80022c4 <FoodPositionGenerator+0x104>
				};

				curr = curr->next;
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	61bb      	str	r3, [r7, #24]
			while (curr != NULL) {
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e7      	bne.n	8002294 <FoodPositionGenerator+0xd4>
		while(valid == 0 ){
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0bd      	beq.n	8002246 <FoodPositionGenerator+0x86>
			}
		}

		food[0] = display;
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	60bb      	str	r3, [r7, #8]
		food[1] = x;
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	60fb      	str	r3, [r7, #12]
		food[2] = y;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	613b      	str	r3, [r7, #16]

		xQueueSend( xFoodPositionQ, (void *) &food,  1 );
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <FoodPositionGenerator+0x140>)
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	f107 0108 	add.w	r1, r7, #8
 80022de:	2300      	movs	r3, #0
 80022e0:	2201      	movs	r2, #1
 80022e2:	f004 fb09 	bl	80068f8 <xQueueGenericSend>
		xSemaphoreGive( xFoodGenerated );
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <FoodPositionGenerator+0x144>)
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	2300      	movs	r3, #0
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	f004 fb02 	bl	80068f8 <xQueueGenericSend>
		if(xSemaphoreTake( xGenerateFood, ( TickType_t ) portMAX_DELAY) == pdTRUE);
 80022f4:	e775      	b.n	80021e2 <FoodPositionGenerator+0x22>
 80022f6:	bf00      	nop
 80022f8:	200001a0 	.word	0x200001a0
 80022fc:	20000184 	.word	0x20000184
 8002300:	2000018c 	.word	0x2000018c
 8002304:	200001a4 	.word	0x200001a4

08002308 <Task3>:

    }
}

void Task3( void * pvParameters )
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b096      	sub	sp, #88	; 0x58
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	const uint64_t IMAGES[] = {
 8002310:	4a36      	ldr	r2, [pc, #216]	; (80023ec <Task3+0xe4>)
 8002312:	f107 0308 	add.w	r3, r7, #8
 8002316:	4611      	mov	r1, r2
 8002318:	2248      	movs	r2, #72	; 0x48
 800231a:	4618      	mov	r0, r3
 800231c:	f007 f8b2 	bl	8009484 <memcpy>
	  0xff7e7e5a24180000,
	  0xff5a7e7e5a241800,
	  0xff5a5a7e7e5a2418,
	  0xff5a5a7e7e5a2418
	};
	const int IMAGES_LEN = sizeof(IMAGES)/8;
 8002320:	2309      	movs	r3, #9
 8002322:	653b      	str	r3, [r7, #80]	; 0x50

	if(xSemaphoreTake( xGameOverSem, ( TickType_t ) portMAX_DELAY) == pdTRUE);
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <Task3+0xe8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f04f 31ff 	mov.w	r1, #4294967295
 800232c:	4618      	mov	r0, r3
 800232e:	f004 fde9 	bl	8006f04 <xQueueSemaphoreTake>
	if( xSemaphoreTake( xScreenDriverMutex, ( TickType_t ) portMAX_DELAY) == pdTRUE ) ;
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <Task3+0xec>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f04f 31ff 	mov.w	r1, #4294967295
 800233a:	4618      	mov	r0, r3
 800233c:	f004 fde2 	bl	8006f04 <xQueueSemaphoreTake>
	for (int i = 0; i < IMAGES_LEN; ++i) {
 8002340:	2300      	movs	r3, #0
 8002342:	657b      	str	r3, [r7, #84]	; 0x54
 8002344:	e02f      	b.n	80023a6 <Task3+0x9e>
		MAX7219_MatrixSetRow64(0, IMAGES[i]);
 8002346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	3358      	adds	r3, #88	; 0x58
 800234c:	443b      	add	r3, r7
 800234e:	3b50      	subs	r3, #80	; 0x50
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	2000      	movs	r0, #0
 8002356:	f000 fb3d 	bl	80029d4 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(1, IMAGES[i]);
 800235a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	3358      	adds	r3, #88	; 0x58
 8002360:	443b      	add	r3, r7
 8002362:	3b50      	subs	r3, #80	; 0x50
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	2001      	movs	r0, #1
 800236a:	f000 fb33 	bl	80029d4 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(2, IMAGES[i]);
 800236e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	3358      	adds	r3, #88	; 0x58
 8002374:	443b      	add	r3, r7
 8002376:	3b50      	subs	r3, #80	; 0x50
 8002378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237c:	2002      	movs	r0, #2
 800237e:	f000 fb29 	bl	80029d4 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(3, IMAGES[i]);
 8002382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	3358      	adds	r3, #88	; 0x58
 8002388:	443b      	add	r3, r7
 800238a:	3b50      	subs	r3, #80	; 0x50
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	2003      	movs	r0, #3
 8002392:	f000 fb1f 	bl	80029d4 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 8002396:	f000 fb4f 	bl	8002a38 <MAX7219_MatrixUpdate>
		vTaskDelay(150);
 800239a:	2096      	movs	r0, #150	; 0x96
 800239c:	f005 f9e6 	bl	800776c <vTaskDelay>
	for (int i = 0; i < IMAGES_LEN; ++i) {
 80023a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a2:	3301      	adds	r3, #1
 80023a4:	657b      	str	r3, [r7, #84]	; 0x54
 80023a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023aa:	429a      	cmp	r2, r3
 80023ac:	dbcb      	blt.n	8002346 <Task3+0x3e>

	}
	vTaskDelay(500);
 80023ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023b2:	f005 f9db 	bl	800776c <vTaskDelay>
    for(;;)
    {

    	 MAX7219_MatrixSetRow64(0, CHR('D'));
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <Task3+0xf0>)
 80023b8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023bc:	2000      	movs	r0, #0
 80023be:	f000 fb09 	bl	80029d4 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(1, CHR('E'));
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <Task3+0xf0>)
 80023c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80023c8:	2001      	movs	r0, #1
 80023ca:	f000 fb03 	bl	80029d4 <MAX7219_MatrixSetRow64>
		  MAX7219_MatrixSetRow64(2, CHR('A'));
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <Task3+0xf0>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	2002      	movs	r0, #2
 80023d6:	f000 fafd 	bl	80029d4 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(3, CHR('D'));
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <Task3+0xf0>)
 80023dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023e0:	2003      	movs	r0, #3
 80023e2:	f000 faf7 	bl	80029d4 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 80023e6:	f000 fb27 	bl	8002a38 <MAX7219_MatrixUpdate>
    	 MAX7219_MatrixSetRow64(0, CHR('D'));
 80023ea:	e7e4      	b.n	80023b6 <Task3+0xae>
 80023ec:	0800b4d0 	.word	0x0800b4d0
 80023f0:	20000194 	.word	0x20000194
 80023f4:	200001bc 	.word	0x200001bc
 80023f8:	0800b558 	.word	0x0800b558

080023fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002404:	2001      	movs	r0, #1
 8002406:	f004 f803 	bl	8006410 <osDelay>
 800240a:	e7fb      	b.n	8002404 <StartDefaultTask+0x8>

0800240c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800241e:	f000 fdc3 	bl	8002fa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40001400 	.word	0x40001400

08002430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002434:	b672      	cpsid	i
}
 8002436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002438:	e7fe      	b.n	8002438 <Error_Handler+0x8>
	...

0800243c <MAX7219_Init>:
static bool SPI_Tx(uint8_t data);
static void DelayInit(void);
static void DelayUS(uint32_t);

void MAX7219_Init(SPI_HandleTypeDef* spi, GPIO_TypeDef* ss_port, uint16_t ss_pin)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
	Max7219_SPI = spi;
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <MAX7219_Init+0x30>)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6013      	str	r3, [r2, #0]
	Max7219_SS_Port = ss_port;
 8002450:	4a07      	ldr	r2, [pc, #28]	; (8002470 <MAX7219_Init+0x34>)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	6013      	str	r3, [r2, #0]
	Max7219_SS_Pin = ss_pin;
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <MAX7219_Init+0x38>)
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	8013      	strh	r3, [r2, #0]

	/* Us delay */
	DelayInit();
 800245c:	f000 f998 	bl	8002790 <DelayInit>

	/* Deselect SS */
	SS_Deselect();
 8002460:	f000 f968 	bl	8002734 <SS_Deselect>
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	200001d0 	.word	0x200001d0
 8002470:	200001d4 	.word	0x200001d4
 8002474:	200001d8 	.word	0x200001d8

08002478 <MAX7219_Write>:

bool MAX7219_Write(uint8_t index, uint8_t reg, uint8_t data)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
 8002482:	460b      	mov	r3, r1
 8002484:	71bb      	strb	r3, [r7, #6]
 8002486:	4613      	mov	r3, r2
 8002488:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d901      	bls.n	8002494 <MAX7219_Write+0x1c>
 8002490:	2300      	movs	r3, #0
 8002492:	e05b      	b.n	800254c <MAX7219_Write+0xd4>

	SS_Select();
 8002494:	f000 f93a 	bl	800270c <SS_Select>

	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e018      	b.n	80024d0 <MAX7219_Write+0x58>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 800249e:	2000      	movs	r0, #0
 80024a0:	f000 f95c 	bl	800275c <SPI_Tx>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f083 0301 	eor.w	r3, r3, #1
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MAX7219_Write+0x3c>
 80024b0:	2300      	movs	r3, #0
 80024b2:	e04b      	b.n	800254c <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 80024b4:	2000      	movs	r0, #0
 80024b6:	f000 f951 	bl	800275c <SPI_Tx>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f083 0301 	eor.w	r3, r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MAX7219_Write+0x52>
 80024c6:	2300      	movs	r3, #0
 80024c8:	e040      	b.n	800254c <MAX7219_Write+0xd4>
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3301      	adds	r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	dde3      	ble.n	800249e <MAX7219_Write+0x26>
	}

	/* Write register */
	if(!SPI_Tx(reg)) return false;
 80024d6:	79bb      	ldrb	r3, [r7, #6]
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 f93f 	bl	800275c <SPI_Tx>
 80024de:	4603      	mov	r3, r0
 80024e0:	f083 0301 	eor.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MAX7219_Write+0x76>
 80024ea:	2300      	movs	r3, #0
 80024ec:	e02e      	b.n	800254c <MAX7219_Write+0xd4>
	if(!SPI_Tx(data)) return false;
 80024ee:	797b      	ldrb	r3, [r7, #5]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f933 	bl	800275c <SPI_Tx>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f083 0301 	eor.w	r3, r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MAX7219_Write+0x8e>
 8002502:	2300      	movs	r3, #0
 8002504:	e022      	b.n	800254c <MAX7219_Write+0xd4>

	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	e018      	b.n	800253e <MAX7219_Write+0xc6>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 800250c:	2000      	movs	r0, #0
 800250e:	f000 f925 	bl	800275c <SPI_Tx>
 8002512:	4603      	mov	r3, r0
 8002514:	f083 0301 	eor.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MAX7219_Write+0xaa>
 800251e:	2300      	movs	r3, #0
 8002520:	e014      	b.n	800254c <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 8002522:	2000      	movs	r0, #0
 8002524:	f000 f91a 	bl	800275c <SPI_Tx>
 8002528:	4603      	mov	r3, r0
 800252a:	f083 0301 	eor.w	r3, r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MAX7219_Write+0xc0>
 8002534:	2300      	movs	r3, #0
 8002536:	e009      	b.n	800254c <MAX7219_Write+0xd4>
	for(int i = 0; i < index; i++)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	3301      	adds	r3, #1
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	429a      	cmp	r2, r3
 8002544:	dbe2      	blt.n	800250c <MAX7219_Write+0x94>
	}

	SS_Deselect();
 8002546:	f000 f8f5 	bl	8002734 <SS_Deselect>

	return true;
 800254a:	2301      	movs	r3, #1
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <MAX7219_Digit>:

bool MAX7219_Digit(uint8_t index, uint8_t digit, int8_t value)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
 800255e:	460b      	mov	r3, r1
 8002560:	71bb      	strb	r3, [r7, #6]
 8002562:	4613      	mov	r3, r2
 8002564:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d901      	bls.n	8002570 <MAX7219_Digit+0x1c>
 800256c:	2300      	movs	r3, #0
 800256e:	e015      	b.n	800259c <MAX7219_Digit+0x48>
	if(digit > 0x07) return false;
 8002570:	79bb      	ldrb	r3, [r7, #6]
 8002572:	2b07      	cmp	r3, #7
 8002574:	d901      	bls.n	800257a <MAX7219_Digit+0x26>
 8002576:	2300      	movs	r3, #0
 8002578:	e010      	b.n	800259c <MAX7219_Digit+0x48>

	if(!MAX7219_Write(index, digit+1, value)) return false;
 800257a:	79bb      	ldrb	r3, [r7, #6]
 800257c:	3301      	adds	r3, #1
 800257e:	b2d9      	uxtb	r1, r3
 8002580:	797a      	ldrb	r2, [r7, #5]
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff77 	bl	8002478 <MAX7219_Write>
 800258a:	4603      	mov	r3, r0
 800258c:	f083 0301 	eor.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MAX7219_Digit+0x46>
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <MAX7219_Digit+0x48>

	return true;
 800259a:	2301      	movs	r3, #1
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <MAX7219_Decode>:

bool MAX7219_Decode(uint8_t index, uint8_t value)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	460a      	mov	r2, r1
 80025ae:	71fb      	strb	r3, [r7, #7]
 80025b0:	4613      	mov	r3, r2
 80025b2:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d901      	bls.n	80025be <MAX7219_Decode+0x1a>
 80025ba:	2300      	movs	r3, #0
 80025bc:	e00e      	b.n	80025dc <MAX7219_Decode+0x38>

	if(!MAX7219_Write(index, MAX7219_REG_DECODE, value)) return false;
 80025be:	79ba      	ldrb	r2, [r7, #6]
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2109      	movs	r1, #9
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff57 	bl	8002478 <MAX7219_Write>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f083 0301 	eor.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MAX7219_Decode+0x36>
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <MAX7219_Decode+0x38>

	return true;
 80025da:	2301      	movs	r3, #1
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <MAX7219_Intensity>:

bool MAX7219_Intensity(uint8_t index, uint8_t value)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	460a      	mov	r2, r1
 80025ee:	71fb      	strb	r3, [r7, #7]
 80025f0:	4613      	mov	r3, r2
 80025f2:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d901      	bls.n	80025fe <MAX7219_Intensity+0x1a>
 80025fa:	2300      	movs	r3, #0
 80025fc:	e013      	b.n	8002626 <MAX7219_Intensity+0x42>
	if(value > 0x0F) value = 0x0F;
 80025fe:	79bb      	ldrb	r3, [r7, #6]
 8002600:	2b0f      	cmp	r3, #15
 8002602:	d901      	bls.n	8002608 <MAX7219_Intensity+0x24>
 8002604:	230f      	movs	r3, #15
 8002606:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_INTENSITY, value)) return false;
 8002608:	79ba      	ldrb	r2, [r7, #6]
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	210a      	movs	r1, #10
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff32 	bl	8002478 <MAX7219_Write>
 8002614:	4603      	mov	r3, r0
 8002616:	f083 0301 	eor.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MAX7219_Intensity+0x40>
 8002620:	2300      	movs	r3, #0
 8002622:	e000      	b.n	8002626 <MAX7219_Intensity+0x42>

	return true;
 8002624:	2301      	movs	r3, #1
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <MAX7219_ScanLimit>:

bool MAX7219_ScanLimit(uint8_t index, uint8_t value)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	460a      	mov	r2, r1
 8002638:	71fb      	strb	r3, [r7, #7]
 800263a:	4613      	mov	r3, r2
 800263c:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	2b03      	cmp	r3, #3
 8002642:	d901      	bls.n	8002648 <MAX7219_ScanLimit+0x1a>
 8002644:	2300      	movs	r3, #0
 8002646:	e013      	b.n	8002670 <MAX7219_ScanLimit+0x42>
	if(value > 0x07) value = 0x07;
 8002648:	79bb      	ldrb	r3, [r7, #6]
 800264a:	2b07      	cmp	r3, #7
 800264c:	d901      	bls.n	8002652 <MAX7219_ScanLimit+0x24>
 800264e:	2307      	movs	r3, #7
 8002650:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_SCANLIMIT, value)) return false;
 8002652:	79ba      	ldrb	r2, [r7, #6]
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	210b      	movs	r1, #11
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff0d 	bl	8002478 <MAX7219_Write>
 800265e:	4603      	mov	r3, r0
 8002660:	f083 0301 	eor.w	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MAX7219_ScanLimit+0x40>
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <MAX7219_ScanLimit+0x42>

	return true;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <MAX7219_ShutDown>:

bool MAX7219_ShutDown(uint8_t index, uint8_t value)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	460a      	mov	r2, r1
 8002682:	71fb      	strb	r3, [r7, #7]
 8002684:	4613      	mov	r3, r2
 8002686:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d901      	bls.n	8002692 <MAX7219_ShutDown+0x1a>
 800268e:	2300      	movs	r3, #0
 8002690:	e013      	b.n	80026ba <MAX7219_ShutDown+0x42>
	if(value > 0x01) value = 0x01;
 8002692:	79bb      	ldrb	r3, [r7, #6]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d901      	bls.n	800269c <MAX7219_ShutDown+0x24>
 8002698:	2301      	movs	r3, #1
 800269a:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_SHUTDOWN, value)) return false;
 800269c:	79ba      	ldrb	r2, [r7, #6]
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	210c      	movs	r1, #12
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fee8 	bl	8002478 <MAX7219_Write>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f083 0301 	eor.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MAX7219_ShutDown+0x40>
 80026b4:	2300      	movs	r3, #0
 80026b6:	e000      	b.n	80026ba <MAX7219_ShutDown+0x42>

	return true;
 80026b8:	2301      	movs	r3, #1
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <MAX7219_Test>:

bool MAX7219_Test(uint8_t index, uint8_t value)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	460a      	mov	r2, r1
 80026cc:	71fb      	strb	r3, [r7, #7]
 80026ce:	4613      	mov	r3, r2
 80026d0:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d901      	bls.n	80026dc <MAX7219_Test+0x1a>
 80026d8:	2300      	movs	r3, #0
 80026da:	e013      	b.n	8002704 <MAX7219_Test+0x42>
	if(value > 0x01) value = 0x01;
 80026dc:	79bb      	ldrb	r3, [r7, #6]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d901      	bls.n	80026e6 <MAX7219_Test+0x24>
 80026e2:	2301      	movs	r3, #1
 80026e4:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_TEST, value)) return false;
 80026e6:	79ba      	ldrb	r2, [r7, #6]
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	210f      	movs	r1, #15
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fec3 	bl	8002478 <MAX7219_Write>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f083 0301 	eor.w	r3, r3, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MAX7219_Test+0x40>
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <MAX7219_Test+0x42>

	return true;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <SS_Select>:

static void SS_Select()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_RESET);
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <SS_Select+0x20>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a06      	ldr	r2, [pc, #24]	; (8002730 <SS_Select+0x24>)
 8002716:	8811      	ldrh	r1, [r2, #0]
 8002718:	2200      	movs	r2, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fef0 	bl	8003500 <HAL_GPIO_WritePin>
	DelayUS(1);
 8002720:	2001      	movs	r0, #1
 8002722:	f000 f85f 	bl	80027e4 <DelayUS>
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200001d4 	.word	0x200001d4
 8002730:	200001d8 	.word	0x200001d8

08002734 <SS_Deselect>:

static void SS_Deselect()
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_SET);
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <SS_Deselect+0x20>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a06      	ldr	r2, [pc, #24]	; (8002758 <SS_Deselect+0x24>)
 800273e:	8811      	ldrh	r1, [r2, #0]
 8002740:	2201      	movs	r2, #1
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fedc 	bl	8003500 <HAL_GPIO_WritePin>
	DelayUS(1);
 8002748:	2001      	movs	r0, #1
 800274a:	f000 f84b 	bl	80027e4 <DelayUS>
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200001d4 	.word	0x200001d4
 8002758:	200001d8 	.word	0x200001d8

0800275c <SPI_Tx>:

static bool SPI_Tx(uint8_t data)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_Transmit(Max7219_SPI, &data, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <SPI_Tx+0x30>)
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	1df9      	adds	r1, r7, #7
 800276c:	f04f 33ff 	mov.w	r3, #4294967295
 8002770:	2201      	movs	r2, #1
 8002772:	f002 fad2 	bl	8004d1a <HAL_SPI_Transmit>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <SPI_Tx+0x24>
 800277c:	2300      	movs	r3, #0
 800277e:	e000      	b.n	8002782 <SPI_Tx+0x26>
	return true;
 8002780:	2301      	movs	r3, #1
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200001d0 	.word	0x200001d0

08002790 <DelayInit>:

static void DelayInit(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <DelayInit+0x4c>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a10      	ldr	r2, [pc, #64]	; (80027dc <DelayInit+0x4c>)
 800279a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800279e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <DelayInit+0x4c>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <DelayInit+0x4c>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027aa:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <DelayInit+0x50>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <DelayInit+0x50>)
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <DelayInit+0x50>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a08      	ldr	r2, [pc, #32]	; (80027e0 <DelayInit+0x50>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <DelayInit+0x50>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80027ca:	bf00      	nop
  __ASM volatile ("NOP");
 80027cc:	bf00      	nop
  __ASM volatile ("NOP");
 80027ce:	bf00      	nop
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000edf0 	.word	0xe000edf0
 80027e0:	e0001000 	.word	0xe0001000

080027e4 <DelayUS>:

static void DelayUS(uint32_t us) {
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <DelayUS+0x44>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <DelayUS+0x48>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	0c9a      	lsrs	r2, r3, #18
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <DelayUS+0x4c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <DelayUS+0x4c>)
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	429a      	cmp	r2, r3
 8002816:	d8f6      	bhi.n	8002806 <DelayUS+0x22>
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000000 	.word	0x20000000
 800282c:	431bde83 	.word	0x431bde83
 8002830:	e0001000 	.word	0xe0001000
 8002834:	00000000 	.word	0x00000000

08002838 <MAX7219_paintPointsInRow>:
};

volatile uint8_t FrameBuffer[MAX7219_IC_NUM][8];


uint8_t MAX7219_paintPointsInRow(int rowArray[]){
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

	uint8_t row = 0x0;
 8002840:	2300      	movs	r3, #0
 8002842:	75fb      	strb	r3, [r7, #23]
	for (int i = 0;  i < 8; ++ i) {
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	e02a      	b.n	80028a0 <MAX7219_paintPointsInRow+0x68>
		int colPosition = pow(2, i);
 800284a:	6938      	ldr	r0, [r7, #16]
 800284c:	f7fd fe62 	bl	8000514 <__aeabi_i2d>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	ec43 2b11 	vmov	d1, r2, r3
 8002858:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80028b0 <MAX7219_paintPointsInRow+0x78>
 800285c:	f007 feb0 	bl	800a5c0 <pow>
 8002860:	ec53 2b10 	vmov	r2, r3, d0
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	f7fe f96e 	bl	8000b48 <__aeabi_d2iz>
 800286c:	4603      	mov	r3, r0
 800286e:	60fb      	str	r3, [r7, #12]
		int ledActive = rowArray[i] > 0 ? 1 : 0;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	4413      	add	r3, r2
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	bfcc      	ite	gt
 800287e:	2301      	movgt	r3, #1
 8002880:	2300      	movle	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	60bb      	str	r3, [r7, #8]
		row += ledActive * colPosition;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	fb12 f303 	smulbb	r3, r2, r3
 8002892:	b2da      	uxtb	r2, r3
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	4413      	add	r3, r2
 8002898:	75fb      	strb	r3, [r7, #23]
	for (int i = 0;  i < 8; ++ i) {
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	3301      	adds	r3, #1
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b07      	cmp	r3, #7
 80028a4:	ddd1      	ble.n	800284a <MAX7219_paintPointsInRow+0x12>
	}
	return row;
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	00000000 	.word	0x00000000
 80028b4:	40000000 	.word	0x40000000

080028b8 <MAX7219_paintPoints>:

void MAX7219_paintPoints(uint8_t displayIndex, int matrixArray[][8]){
 80028b8:	b5b0      	push	{r4, r5, r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]

	for (int i = 0;  i < 8; ++ i) {
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	e015      	b.n	80028f6 <MAX7219_paintPoints+0x3e>

		FrameBuffer[displayIndex][7-i] = MAX7219_paintPointsInRow(matrixArray[i]);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	015b      	lsls	r3, r3, #5
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	441a      	add	r2, r3
 80028d2:	79fd      	ldrb	r5, [r7, #7]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f1c3 0407 	rsb	r4, r3, #7
 80028da:	4610      	mov	r0, r2
 80028dc:	f7ff ffac 	bl	8002838 <MAX7219_paintPointsInRow>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4619      	mov	r1, r3
 80028e4:	4a08      	ldr	r2, [pc, #32]	; (8002908 <MAX7219_paintPoints+0x50>)
 80028e6:	00eb      	lsls	r3, r5, #3
 80028e8:	4413      	add	r3, r2
 80028ea:	4423      	add	r3, r4
 80028ec:	460a      	mov	r2, r1
 80028ee:	701a      	strb	r2, [r3, #0]
	for (int i = 0;  i < 8; ++ i) {
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b07      	cmp	r3, #7
 80028fa:	dde6      	ble.n	80028ca <MAX7219_paintPoints+0x12>

	}

}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bdb0      	pop	{r4, r5, r7, pc}
 8002906:	bf00      	nop
 8002908:	200001dc 	.word	0x200001dc

0800290c <MAX7219_MatrixInit>:

void MAX7219_MatrixInit(SPI_HandleTypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	4613      	mov	r3, r2
 8002918:	80fb      	strh	r3, [r7, #6]
	MAX7219_Init(spi, cs_port, cs_pin);
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	461a      	mov	r2, r3
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7ff fd8b 	bl	800243c <MAX7219_Init>

	for(int i = 0; i < MAX7219_IC_NUM; i++)
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e02a      	b.n	8002982 <MAX7219_MatrixInit+0x76>
	{
		MAX7219_MatrixClear(i);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4618      	mov	r0, r3
 8002932:	f000 f82f 	bl	8002994 <MAX7219_MatrixClear>
		MAX7219_ShutDown(i, 1);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fe9b 	bl	8002678 <MAX7219_ShutDown>
		MAX7219_Test(i, 0);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff feba 	bl	80026c2 <MAX7219_Test>
		MAX7219_Decode(i, 0);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fe25 	bl	80025a4 <MAX7219_Decode>
		MAX7219_Intensity(i, 1);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2101      	movs	r1, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fe3f 	bl	80025e4 <MAX7219_Intensity>
		MAX7219_ScanLimit(i, 7);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2107      	movs	r1, #7
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fe5e 	bl	800262e <MAX7219_ScanLimit>
		MAX7219_MatrixClear(i);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f80c 	bl	8002994 <MAX7219_MatrixClear>
	for(int i = 0; i < MAX7219_IC_NUM; i++)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	3301      	adds	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b03      	cmp	r3, #3
 8002986:	ddd1      	ble.n	800292c <MAX7219_MatrixInit+0x20>
	}
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <MAX7219_MatrixClear>:

void MAX7219_MatrixClear(uint8_t index)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
	for(int i =0; i < 8; i++)
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e00a      	b.n	80029ba <MAX7219_MatrixClear+0x26>
	{
		FrameBuffer[index][i] = 0;
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <MAX7219_MatrixClear+0x3c>)
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	441a      	add	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
	for(int i =0; i < 8; i++)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3301      	adds	r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b07      	cmp	r3, #7
 80029be:	ddf1      	ble.n	80029a4 <MAX7219_MatrixClear+0x10>
	}
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	200001dc 	.word	0x200001dc

080029d4 <MAX7219_MatrixSetRow64>:
		FrameBuffer[index][i] = rows[i];
	}
}

void MAX7219_MatrixSetRow64(uint8_t index,  uint64_t rows)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4601      	mov	r1, r0
 80029dc:	e9c7 2300 	strd	r2, r3, [r7]
 80029e0:	460b      	mov	r3, r1
 80029e2:	73fb      	strb	r3, [r7, #15]
	for(int i =0; i < 8; i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e01a      	b.n	8002a20 <MAX7219_MatrixSetRow64+0x4c>
	{
		uint8_t row = rows & 0xFF;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	74fb      	strb	r3, [r7, #19]
		FrameBuffer[index][7-i] = row;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f1c3 0307 	rsb	r3, r3, #7
 80029f6:	490f      	ldr	r1, [pc, #60]	; (8002a34 <MAX7219_MatrixSetRow64+0x60>)
 80029f8:	00d2      	lsls	r2, r2, #3
 80029fa:	440a      	add	r2, r1
 80029fc:	4413      	add	r3, r2
 80029fe:	7cfa      	ldrb	r2, [r7, #19]
 8002a00:	701a      	strb	r2, [r3, #0]
		rows = rows >> 8;
 8002a02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	0a02      	lsrs	r2, r0, #8
 8002a10:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a14:	0a0b      	lsrs	r3, r1, #8
 8002a16:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i =0; i < 8; i++)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b07      	cmp	r3, #7
 8002a24:	dde1      	ble.n	80029ea <MAX7219_MatrixSetRow64+0x16>
	}
}
 8002a26:	bf00      	nop
 8002a28:	bf00      	nop
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	200001dc 	.word	0x200001dc

08002a38 <MAX7219_MatrixUpdate>:
		FrameBuffer[3][i] |= lsbD0;
	}
}

bool MAX7219_MatrixUpdate()
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e024      	b.n	8002a8e <MAX7219_MatrixUpdate+0x56>
	{
		for(int digit = 0; digit < 8; digit++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	e01b      	b.n	8002a82 <MAX7219_MatrixUpdate+0x4a>
		{

			uint8_t row = FrameBuffer[index][digit];
 8002a4a:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <MAX7219_MatrixUpdate+0x68>)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	441a      	add	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4413      	add	r3, r2
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	71fb      	strb	r3, [r7, #7]
			if(!MAX7219_Digit(index, digit, row)) return false;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	b2d1      	uxtb	r1, r2
 8002a62:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fd74 	bl	8002554 <MAX7219_Digit>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f083 0301 	eor.w	r3, r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MAX7219_MatrixUpdate+0x44>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e00c      	b.n	8002a96 <MAX7219_MatrixUpdate+0x5e>
		for(int digit = 0; digit < 8; digit++)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b07      	cmp	r3, #7
 8002a86:	dde0      	ble.n	8002a4a <MAX7219_MatrixUpdate+0x12>
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	ddd7      	ble.n	8002a44 <MAX7219_MatrixUpdate+0xc>
		}
	}

	return true;
 8002a94:	2301      	movs	r3, #1
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200001dc 	.word	0x200001dc

08002aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_MspInit+0x4c>)
 8002aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aae:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <HAL_MspInit+0x4c>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_MspInit+0x4c>)
 8002ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_MspInit+0x4c>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_MspInit+0x4c>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_MspInit+0x4c>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	210f      	movs	r1, #15
 8002ade:	f06f 0001 	mvn.w	r0, #1
 8002ae2:	f000 fb39 	bl	8003158 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <HAL_SPI_MspInit+0x7c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d128      	bne.n	8002b68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b16:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <HAL_SPI_MspInit+0x80>)
 8002b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <HAL_SPI_MspInit+0x80>)
 8002b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b20:	6613      	str	r3, [r2, #96]	; 0x60
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <HAL_SPI_MspInit+0x80>)
 8002b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_SPI_MspInit+0x80>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <HAL_SPI_MspInit+0x80>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_SPI_MspInit+0x80>)
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b46:	23a0      	movs	r3, #160	; 0xa0
 8002b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b56:	2305      	movs	r3, #5
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b64:	f000 fb22 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b68:	bf00      	nop
 8002b6a:	3728      	adds	r7, #40	; 0x28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40013000 	.word	0x40013000
 8002b74:	40021000 	.word	0x40021000

08002b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b0ac      	sub	sp, #176	; 0xb0
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	2288      	movs	r2, #136	; 0x88
 8002b96:	2100      	movs	r1, #0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f006 fc81 	bl	80094a0 <memset>
  if(huart->Instance==USART2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a21      	ldr	r2, [pc, #132]	; (8002c28 <HAL_UART_MspInit+0xb0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d13b      	bne.n	8002c20 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bac:	2300      	movs	r3, #0
 8002bae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 fb51 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bc0:	f7ff fc36 	bl	8002430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_UART_MspInit+0xb4>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <HAL_UART_MspInit+0xb4>)
 8002bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bce:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <HAL_UART_MspInit+0xb4>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_UART_MspInit+0xb4>)
 8002bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be0:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <HAL_UART_MspInit+0xb4>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be8:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_UART_MspInit+0xb4>)
 8002bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bf4:	230c      	movs	r3, #12
 8002bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c0c:	2307      	movs	r3, #7
 8002c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c16:	4619      	mov	r1, r3
 8002c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c1c:	f000 fac6 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c20:	bf00      	nop
 8002c22:	37b0      	adds	r7, #176	; 0xb0
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40004400 	.word	0x40004400
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	; 0x38
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002c3e:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_InitTick+0xe0>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	4a33      	ldr	r2, [pc, #204]	; (8002d10 <HAL_InitTick+0xe0>)
 8002c44:	f043 0320 	orr.w	r3, r3, #32
 8002c48:	6593      	str	r3, [r2, #88]	; 0x58
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_InitTick+0xe0>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c56:	f107 0210 	add.w	r2, r7, #16
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 fa69 	bl	8004138 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d103      	bne.n	8002c78 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c70:	f001 fa36 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8002c74:	6378      	str	r0, [r7, #52]	; 0x34
 8002c76:	e004      	b.n	8002c82 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c78:	f001 fa32 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c84:	4a23      	ldr	r2, [pc, #140]	; (8002d14 <HAL_InitTick+0xe4>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0c9b      	lsrs	r3, r3, #18
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002c90:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_InitTick+0xe8>)
 8002c92:	4a22      	ldr	r2, [pc, #136]	; (8002d1c <HAL_InitTick+0xec>)
 8002c94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_InitTick+0xe8>)
 8002c98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c9c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002c9e:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <HAL_InitTick+0xe8>)
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002ca4:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <HAL_InitTick+0xe8>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_InitTick+0xe8>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb0:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <HAL_InitTick+0xe8>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002cb6:	4818      	ldr	r0, [pc, #96]	; (8002d18 <HAL_InitTick+0xe8>)
 8002cb8:	f002 fb02 	bl	80052c0 <HAL_TIM_Base_Init>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d11b      	bne.n	8002d02 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002cca:	4813      	ldr	r0, [pc, #76]	; (8002d18 <HAL_InitTick+0xe8>)
 8002ccc:	f002 fb5a 	bl	8005384 <HAL_TIM_Base_Start_IT>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d111      	bne.n	8002d02 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002cde:	2037      	movs	r0, #55	; 0x37
 8002ce0:	f000 fa56 	bl	8003190 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b0f      	cmp	r3, #15
 8002ce8:	d808      	bhi.n	8002cfc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002cea:	2200      	movs	r2, #0
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	2037      	movs	r0, #55	; 0x37
 8002cf0:	f000 fa32 	bl	8003158 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cf4:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <HAL_InitTick+0xf0>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e002      	b.n	8002d02 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3738      	adds	r7, #56	; 0x38
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	431bde83 	.word	0x431bde83
 8002d18:	200001fc 	.word	0x200001fc
 8002d1c:	40001400 	.word	0x40001400
 8002d20:	20000004 	.word	0x20000004

08002d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <NMI_Handler+0x4>

08002d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <HardFault_Handler+0x4>

08002d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <MemManage_Handler+0x4>

08002d36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3a:	e7fe      	b.n	8002d3a <BusFault_Handler+0x4>

08002d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <UsageFault_Handler+0x4>

08002d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <TIM7_IRQHandler>:
/**
  * @brief This function handles EXTI line3 interrupt.
  */

void TIM7_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <TIM7_IRQHandler+0x10>)
 8002d56:	f002 fb85 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	200001fc 	.word	0x200001fc

08002d64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
	return 1;
 8002d68:	2301      	movs	r3, #1
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <_kill>:

int _kill(int pid, int sig)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d7e:	f006 fad5 	bl	800932c <__errno>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2216      	movs	r2, #22
 8002d86:	601a      	str	r2, [r3, #0]
	return -1;
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <_exit>:

void _exit (int status)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ffe7 	bl	8002d74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002da6:	e7fe      	b.n	8002da6 <_exit+0x12>

08002da8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e00a      	b.n	8002dd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dba:	f3af 8000 	nop.w
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	60ba      	str	r2, [r7, #8]
 8002dc6:	b2ca      	uxtb	r2, r1
 8002dc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	dbf0      	blt.n	8002dba <_read+0x12>
	}

return len;
 8002dd8:	687b      	ldr	r3, [r7, #4]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	e009      	b.n	8002e08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	60ba      	str	r2, [r7, #8]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	3301      	adds	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	dbf1      	blt.n	8002df4 <_write+0x12>
	}
	return len;
 8002e10:	687b      	ldr	r3, [r7, #4]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <_close>:

int _close(int file)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
	return -1;
 8002e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e42:	605a      	str	r2, [r3, #4]
	return 0;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <_isatty>:

int _isatty(int file)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
	return 1;
 8002e5a:	2301      	movs	r3, #1
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
	return 0;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e8c:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <_sbrk+0x5c>)
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <_sbrk+0x60>)
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <_sbrk+0x64>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <_sbrk+0x64>)
 8002ea2:	4a12      	ldr	r2, [pc, #72]	; (8002eec <_sbrk+0x68>)
 8002ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <_sbrk+0x64>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d207      	bcs.n	8002ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eb4:	f006 fa3a 	bl	800932c <__errno>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	220c      	movs	r2, #12
 8002ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec2:	e009      	b.n	8002ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ec4:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <_sbrk+0x64>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <_sbrk+0x64>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <_sbrk+0x64>)
 8002ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20018000 	.word	0x20018000
 8002ee4:	00000400 	.word	0x00000400
 8002ee8:	20000248 	.word	0x20000248
 8002eec:	20008cb0 	.word	0x20008cb0

08002ef0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <SystemInit+0x20>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	4a05      	ldr	r2, [pc, #20]	; (8002f10 <SystemInit+0x20>)
 8002efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f18:	f7ff ffea 	bl	8002ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f1c:	480c      	ldr	r0, [pc, #48]	; (8002f50 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f1e:	490d      	ldr	r1, [pc, #52]	; (8002f54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f20:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <LoopForever+0xe>)
  movs r3, #0
 8002f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f24:	e002      	b.n	8002f2c <LoopCopyDataInit>

08002f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2a:	3304      	adds	r3, #4

08002f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f30:	d3f9      	bcc.n	8002f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f34:	4c0a      	ldr	r4, [pc, #40]	; (8002f60 <LoopForever+0x16>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f38:	e001      	b.n	8002f3e <LoopFillZerobss>

08002f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f3c:	3204      	adds	r2, #4

08002f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f40:	d3fb      	bcc.n	8002f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f42:	f006 fa67 	bl	8009414 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f46:	f7fe fa69 	bl	800141c <main>

08002f4a <LoopForever>:

LoopForever:
    b LoopForever
 8002f4a:	e7fe      	b.n	8002f4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f54:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002f58:	0800b8d0 	.word	0x0800b8d0
  ldr r2, =_sbss
 8002f5c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002f60:	20008cb0 	.word	0x20008cb0

08002f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f64:	e7fe      	b.n	8002f64 <ADC1_2_IRQHandler>
	...

08002f68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_Init+0x3c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <HAL_Init+0x3c>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7e:	2003      	movs	r0, #3
 8002f80:	f000 f8df 	bl	8003142 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f84:	200f      	movs	r0, #15
 8002f86:	f7ff fe53 	bl	8002c30 <HAL_InitTick>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	71fb      	strb	r3, [r7, #7]
 8002f94:	e001      	b.n	8002f9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f96:	f7ff fd85 	bl	8002aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40022000 	.word	0x40022000

08002fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x20>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_IncTick+0x24>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <HAL_IncTick+0x24>)
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000008 	.word	0x20000008
 8002fcc:	2000024c 	.word	0x2000024c

08002fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <HAL_GetTick+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	2000024c 	.word	0x2000024c

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	; (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ff4c 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800316a:	f7ff ff61 	bl	8003030 <__NVIC_GetPriorityGrouping>
 800316e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	6978      	ldr	r0, [r7, #20]
 8003176:	f7ff ffb1 	bl	80030dc <NVIC_EncodePriority>
 800317a:	4602      	mov	r2, r0
 800317c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff80 	bl	8003088 <__NVIC_SetPriority>
}
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff54 	bl	800304c <__NVIC_EnableIRQ>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ba:	e17f      	b.n	80034bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2101      	movs	r1, #1
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8171 	beq.w	80034b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d005      	beq.n	80031ec <HAL_GPIO_Init+0x40>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d130      	bne.n	800324e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	2203      	movs	r2, #3
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003222:	2201      	movs	r2, #1
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 0201 	and.w	r2, r3, #1
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b03      	cmp	r3, #3
 8003258:	d118      	bne.n	800328c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003260:	2201      	movs	r2, #1
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	08db      	lsrs	r3, r3, #3
 8003276:	f003 0201 	and.w	r2, r3, #1
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b03      	cmp	r3, #3
 8003296:	d017      	beq.n	80032c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4013      	ands	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d123      	bne.n	800331c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	08da      	lsrs	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3208      	adds	r2, #8
 80032dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	220f      	movs	r2, #15
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	08da      	lsrs	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3208      	adds	r2, #8
 8003316:	6939      	ldr	r1, [r7, #16]
 8003318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0203 	and.w	r2, r3, #3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80ac 	beq.w	80034b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335e:	4b5f      	ldr	r3, [pc, #380]	; (80034dc <HAL_GPIO_Init+0x330>)
 8003360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003362:	4a5e      	ldr	r2, [pc, #376]	; (80034dc <HAL_GPIO_Init+0x330>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6613      	str	r3, [r2, #96]	; 0x60
 800336a:	4b5c      	ldr	r3, [pc, #368]	; (80034dc <HAL_GPIO_Init+0x330>)
 800336c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003376:	4a5a      	ldr	r2, [pc, #360]	; (80034e0 <HAL_GPIO_Init+0x334>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033a0:	d025      	beq.n	80033ee <HAL_GPIO_Init+0x242>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4f      	ldr	r2, [pc, #316]	; (80034e4 <HAL_GPIO_Init+0x338>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01f      	beq.n	80033ea <HAL_GPIO_Init+0x23e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4e      	ldr	r2, [pc, #312]	; (80034e8 <HAL_GPIO_Init+0x33c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d019      	beq.n	80033e6 <HAL_GPIO_Init+0x23a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a4d      	ldr	r2, [pc, #308]	; (80034ec <HAL_GPIO_Init+0x340>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_GPIO_Init+0x236>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4c      	ldr	r2, [pc, #304]	; (80034f0 <HAL_GPIO_Init+0x344>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00d      	beq.n	80033de <HAL_GPIO_Init+0x232>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4b      	ldr	r2, [pc, #300]	; (80034f4 <HAL_GPIO_Init+0x348>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_Init+0x22e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4a      	ldr	r2, [pc, #296]	; (80034f8 <HAL_GPIO_Init+0x34c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_GPIO_Init+0x22a>
 80033d2:	2306      	movs	r3, #6
 80033d4:	e00c      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033d6:	2307      	movs	r3, #7
 80033d8:	e00a      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033da:	2305      	movs	r3, #5
 80033dc:	e008      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033de:	2304      	movs	r3, #4
 80033e0:	e006      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033e2:	2303      	movs	r3, #3
 80033e4:	e004      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e002      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033ee:	2300      	movs	r3, #0
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	f002 0203 	and.w	r2, r2, #3
 80033f6:	0092      	lsls	r2, r2, #2
 80033f8:	4093      	lsls	r3, r2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003400:	4937      	ldr	r1, [pc, #220]	; (80034e0 <HAL_GPIO_Init+0x334>)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	3302      	adds	r3, #2
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_GPIO_Init+0x350>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	43db      	mvns	r3, r3
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003432:	4a32      	ldr	r2, [pc, #200]	; (80034fc <HAL_GPIO_Init+0x350>)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003438:	4b30      	ldr	r3, [pc, #192]	; (80034fc <HAL_GPIO_Init+0x350>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	43db      	mvns	r3, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800345c:	4a27      	ldr	r2, [pc, #156]	; (80034fc <HAL_GPIO_Init+0x350>)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003462:	4b26      	ldr	r3, [pc, #152]	; (80034fc <HAL_GPIO_Init+0x350>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	43db      	mvns	r3, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003486:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <HAL_GPIO_Init+0x350>)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800348c:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_GPIO_Init+0x350>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <HAL_GPIO_Init+0x350>)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	3301      	adds	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f47f ae78 	bne.w	80031bc <HAL_GPIO_Init+0x10>
  }
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40010000 	.word	0x40010000
 80034e4:	48000400 	.word	0x48000400
 80034e8:	48000800 	.word	0x48000800
 80034ec:	48000c00 	.word	0x48000c00
 80034f0:	48001000 	.word	0x48001000
 80034f4:	48001400 	.word	0x48001400
 80034f8:	48001800 	.word	0x48001800
 80034fc:	40010400 	.word	0x40010400

08003500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
 800350c:	4613      	mov	r3, r2
 800350e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003510:	787b      	ldrb	r3, [r7, #1]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800351c:	e002      	b.n	8003524 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800351e:	887a      	ldrh	r2, [r7, #2]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_PWREx_GetVoltageRange+0x18>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40007000 	.word	0x40007000

0800354c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355a:	d130      	bne.n	80035be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800355c:	4b23      	ldr	r3, [pc, #140]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003568:	d038      	beq.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003572:	4a1e      	ldr	r2, [pc, #120]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003578:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2232      	movs	r2, #50	; 0x32
 8003580:	fb02 f303 	mul.w	r3, r2, r3
 8003584:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	0c9b      	lsrs	r3, r3, #18
 800358c:	3301      	adds	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003590:	e002      	b.n	8003598 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3b01      	subs	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003598:	4b14      	ldr	r3, [pc, #80]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a4:	d102      	bne.n	80035ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f2      	bne.n	8003592 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b8:	d110      	bne.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e00f      	b.n	80035de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ca:	d007      	beq.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035cc:	4b07      	ldr	r3, [pc, #28]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035d4:	4a05      	ldr	r2, [pc, #20]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40007000 	.word	0x40007000
 80035f0:	20000000 	.word	0x20000000
 80035f4:	431bde83 	.word	0x431bde83

080035f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e3ca      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800360a:	4b97      	ldr	r3, [pc, #604]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003614:	4b94      	ldr	r3, [pc, #592]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80e4 	beq.w	80037f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <HAL_RCC_OscConfig+0x4a>
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b0c      	cmp	r3, #12
 8003636:	f040 808b 	bne.w	8003750 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b01      	cmp	r3, #1
 800363e:	f040 8087 	bne.w	8003750 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003642:	4b89      	ldr	r3, [pc, #548]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_RCC_OscConfig+0x62>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e3a2      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1a      	ldr	r2, [r3, #32]
 800365e:	4b82      	ldr	r3, [pc, #520]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <HAL_RCC_OscConfig+0x7c>
 800366a:	4b7f      	ldr	r3, [pc, #508]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003672:	e005      	b.n	8003680 <HAL_RCC_OscConfig+0x88>
 8003674:	4b7c      	ldr	r3, [pc, #496]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003680:	4293      	cmp	r3, r2
 8003682:	d223      	bcs.n	80036cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fd87 	bl	800419c <RCC_SetFlashLatencyFromMSIRange>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e383      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003698:	4b73      	ldr	r3, [pc, #460]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a72      	ldr	r2, [pc, #456]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800369e:	f043 0308 	orr.w	r3, r3, #8
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b70      	ldr	r3, [pc, #448]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	496d      	ldr	r1, [pc, #436]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b6:	4b6c      	ldr	r3, [pc, #432]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	4968      	ldr	r1, [pc, #416]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]
 80036ca:	e025      	b.n	8003718 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036cc:	4b66      	ldr	r3, [pc, #408]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a65      	ldr	r2, [pc, #404]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036d2:	f043 0308 	orr.w	r3, r3, #8
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b63      	ldr	r3, [pc, #396]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4960      	ldr	r1, [pc, #384]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ea:	4b5f      	ldr	r3, [pc, #380]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	495b      	ldr	r1, [pc, #364]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fd47 	bl	800419c <RCC_SetFlashLatencyFromMSIRange>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e343      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003718:	f000 fc4a 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 800371c:	4602      	mov	r2, r0
 800371e:	4b52      	ldr	r3, [pc, #328]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	4950      	ldr	r1, [pc, #320]	; (800386c <HAL_RCC_OscConfig+0x274>)
 800372a:	5ccb      	ldrb	r3, [r1, r3]
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	fa22 f303 	lsr.w	r3, r2, r3
 8003734:	4a4e      	ldr	r2, [pc, #312]	; (8003870 <HAL_RCC_OscConfig+0x278>)
 8003736:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003738:	4b4e      	ldr	r3, [pc, #312]	; (8003874 <HAL_RCC_OscConfig+0x27c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fa77 	bl	8002c30 <HAL_InitTick>
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d052      	beq.n	80037f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	e327      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d032      	beq.n	80037be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003758:	4b43      	ldr	r3, [pc, #268]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a42      	ldr	r2, [pc, #264]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003764:	f7ff fc34 	bl	8002fd0 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800376c:	f7ff fc30 	bl	8002fd0 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e310      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800377e:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800378a:	4b37      	ldr	r3, [pc, #220]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a36      	ldr	r2, [pc, #216]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003790:	f043 0308 	orr.w	r3, r3, #8
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b34      	ldr	r3, [pc, #208]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4931      	ldr	r1, [pc, #196]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037a8:	4b2f      	ldr	r3, [pc, #188]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	492c      	ldr	r1, [pc, #176]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
 80037bc:	e01a      	b.n	80037f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037be:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a29      	ldr	r2, [pc, #164]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037c4:	f023 0301 	bic.w	r3, r3, #1
 80037c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037ca:	f7ff fc01 	bl	8002fd0 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037d2:	f7ff fbfd 	bl	8002fd0 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e2dd      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037e4:	4b20      	ldr	r3, [pc, #128]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f0      	bne.n	80037d2 <HAL_RCC_OscConfig+0x1da>
 80037f0:	e000      	b.n	80037f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d074      	beq.n	80038ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b08      	cmp	r3, #8
 8003804:	d005      	beq.n	8003812 <HAL_RCC_OscConfig+0x21a>
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b0c      	cmp	r3, #12
 800380a:	d10e      	bne.n	800382a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d10b      	bne.n	800382a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d064      	beq.n	80038e8 <HAL_RCC_OscConfig+0x2f0>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d160      	bne.n	80038e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e2ba      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x24a>
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800383a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	e026      	b.n	8003890 <HAL_RCC_OscConfig+0x298>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800384a:	d115      	bne.n	8003878 <HAL_RCC_OscConfig+0x280>
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a05      	ldr	r2, [pc, #20]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a02      	ldr	r2, [pc, #8]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800385e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	e014      	b.n	8003890 <HAL_RCC_OscConfig+0x298>
 8003866:	bf00      	nop
 8003868:	40021000 	.word	0x40021000
 800386c:	0800b700 	.word	0x0800b700
 8003870:	20000000 	.word	0x20000000
 8003874:	20000004 	.word	0x20000004
 8003878:	4ba0      	ldr	r3, [pc, #640]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a9f      	ldr	r2, [pc, #636]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 800387e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	4b9d      	ldr	r3, [pc, #628]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a9c      	ldr	r2, [pc, #624]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 800388a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d013      	beq.n	80038c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7ff fb9a 	bl	8002fd0 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a0:	f7ff fb96 	bl	8002fd0 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e276      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038b2:	4b92      	ldr	r3, [pc, #584]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x2a8>
 80038be:	e014      	b.n	80038ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7ff fb86 	bl	8002fd0 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7ff fb82 	bl	8002fd0 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e262      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038da:	4b88      	ldr	r3, [pc, #544]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x2d0>
 80038e6:	e000      	b.n	80038ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d060      	beq.n	80039b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_OscConfig+0x310>
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	d119      	bne.n	8003936 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d116      	bne.n	8003936 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003908:	4b7c      	ldr	r3, [pc, #496]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_OscConfig+0x328>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e23f      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003920:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	4973      	ldr	r1, [pc, #460]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003934:	e040      	b.n	80039b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d023      	beq.n	8003986 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800393e:	4b6f      	ldr	r3, [pc, #444]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a6e      	ldr	r2, [pc, #440]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394a:	f7ff fb41 	bl	8002fd0 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003952:	f7ff fb3d 	bl	8002fd0 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e21d      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003964:	4b65      	ldr	r3, [pc, #404]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003970:	4b62      	ldr	r3, [pc, #392]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	495f      	ldr	r1, [pc, #380]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
 8003984:	e018      	b.n	80039b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003986:	4b5d      	ldr	r3, [pc, #372]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a5c      	ldr	r2, [pc, #368]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 800398c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7ff fb1d 	bl	8002fd0 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800399a:	f7ff fb19 	bl	8002fd0 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e1f9      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ac:	4b53      	ldr	r3, [pc, #332]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d03c      	beq.n	8003a3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01c      	beq.n	8003a06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039cc:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	4a4a      	ldr	r2, [pc, #296]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7ff faf8 	bl	8002fd0 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7ff faf4 	bl	8002fd0 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e1d4      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039f6:	4b41      	ldr	r3, [pc, #260]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 80039f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ef      	beq.n	80039e4 <HAL_RCC_OscConfig+0x3ec>
 8003a04:	e01b      	b.n	8003a3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a06:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0c:	4a3b      	ldr	r2, [pc, #236]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7ff fadb 	bl	8002fd0 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7ff fad7 	bl	8002fd0 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e1b7      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a30:	4b32      	ldr	r3, [pc, #200]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1ef      	bne.n	8003a1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80a6 	beq.w	8003b98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a50:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10d      	bne.n	8003a78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5c:	4b27      	ldr	r3, [pc, #156]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	4a26      	ldr	r2, [pc, #152]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6593      	str	r3, [r2, #88]	; 0x58
 8003a68:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a74:	2301      	movs	r3, #1
 8003a76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a78:	4b21      	ldr	r3, [pc, #132]	; (8003b00 <HAL_RCC_OscConfig+0x508>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d118      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a84:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <HAL_RCC_OscConfig+0x508>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <HAL_RCC_OscConfig+0x508>)
 8003a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a90:	f7ff fa9e 	bl	8002fd0 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a98:	f7ff fa9a 	bl	8002fd0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e17a      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aaa:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <HAL_RCC_OscConfig+0x508>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d108      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x4d8>
 8003abe:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ace:	e029      	b.n	8003b24 <HAL_RCC_OscConfig+0x52c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b05      	cmp	r3, #5
 8003ad6:	d115      	bne.n	8003b04 <HAL_RCC_OscConfig+0x50c>
 8003ad8:	4b08      	ldr	r3, [pc, #32]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	4a07      	ldr	r2, [pc, #28]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003ae0:	f043 0304 	orr.w	r3, r3, #4
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	4a03      	ldr	r2, [pc, #12]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af8:	e014      	b.n	8003b24 <HAL_RCC_OscConfig+0x52c>
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40007000 	.word	0x40007000
 8003b04:	4b9c      	ldr	r3, [pc, #624]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	4a9b      	ldr	r2, [pc, #620]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b14:	4b98      	ldr	r3, [pc, #608]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	4a97      	ldr	r2, [pc, #604]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b1c:	f023 0304 	bic.w	r3, r3, #4
 8003b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d016      	beq.n	8003b5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7ff fa50 	bl	8002fd0 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7ff fa4c 	bl	8002fd0 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e12a      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b4a:	4b8b      	ldr	r3, [pc, #556]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ed      	beq.n	8003b34 <HAL_RCC_OscConfig+0x53c>
 8003b58:	e015      	b.n	8003b86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7ff fa39 	bl	8002fd0 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7ff fa35 	bl	8002fd0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e113      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b78:	4b7f      	ldr	r3, [pc, #508]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1ed      	bne.n	8003b62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b86:	7ffb      	ldrb	r3, [r7, #31]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8c:	4b7a      	ldr	r3, [pc, #488]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	4a79      	ldr	r2, [pc, #484]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80fe 	beq.w	8003d9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	f040 80d0 	bne.w	8003d4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bac:	4b72      	ldr	r3, [pc, #456]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 0203 	and.w	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d130      	bne.n	8003c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d127      	bne.n	8003c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d11f      	bne.n	8003c22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bec:	2a07      	cmp	r2, #7
 8003bee:	bf14      	ite	ne
 8003bf0:	2201      	movne	r2, #1
 8003bf2:	2200      	moveq	r2, #0
 8003bf4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d113      	bne.n	8003c22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	3b01      	subs	r3, #1
 8003c08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d109      	bne.n	8003c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d06e      	beq.n	8003d00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	d069      	beq.n	8003cfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c28:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d105      	bne.n	8003c40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c34:	4b50      	ldr	r3, [pc, #320]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0ad      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c44:	4b4c      	ldr	r3, [pc, #304]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a4b      	ldr	r2, [pc, #300]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c50:	f7ff f9be 	bl	8002fd0 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c58:	f7ff f9ba 	bl	8002fd0 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e09a      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c6a:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c76:	4b40      	ldr	r3, [pc, #256]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	4b40      	ldr	r3, [pc, #256]	; (8003d7c <HAL_RCC_OscConfig+0x784>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c86:	3a01      	subs	r2, #1
 8003c88:	0112      	lsls	r2, r2, #4
 8003c8a:	4311      	orrs	r1, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c90:	0212      	lsls	r2, r2, #8
 8003c92:	4311      	orrs	r1, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c98:	0852      	lsrs	r2, r2, #1
 8003c9a:	3a01      	subs	r2, #1
 8003c9c:	0552      	lsls	r2, r2, #21
 8003c9e:	4311      	orrs	r1, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ca4:	0852      	lsrs	r2, r2, #1
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	0652      	lsls	r2, r2, #25
 8003caa:	4311      	orrs	r1, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cb0:	0912      	lsrs	r2, r2, #4
 8003cb2:	0452      	lsls	r2, r2, #17
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	4930      	ldr	r1, [pc, #192]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a2d      	ldr	r2, [pc, #180]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cd4:	f7ff f97c 	bl	8002fd0 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7ff f978 	bl	8002fd0 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e058      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cfa:	e050      	b.n	8003d9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e04f      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d148      	bne.n	8003d9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d18:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d24:	f7ff f954 	bl	8002fd0 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7ff f950 	bl	8002fd0 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e030      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x734>
 8003d4a:	e028      	b.n	8003d9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b0c      	cmp	r3, #12
 8003d50:	d023      	beq.n	8003d9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7ff f937 	bl	8002fd0 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d64:	e00c      	b.n	8003d80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d66:	f7ff f933 	bl	8002fd0 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d905      	bls.n	8003d80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e013      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_RCC_OscConfig+0x7b0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1ec      	bne.n	8003d66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_RCC_OscConfig+0x7b0>)
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	4905      	ldr	r1, [pc, #20]	; (8003da8 <HAL_RCC_OscConfig+0x7b0>)
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_RCC_OscConfig+0x7b4>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	60cb      	str	r3, [r1, #12]
 8003d98:	e001      	b.n	8003d9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3720      	adds	r7, #32
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000
 8003dac:	feeefffc 	.word	0xfeeefffc

08003db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0e7      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b75      	ldr	r3, [pc, #468]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d910      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b72      	ldr	r3, [pc, #456]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 0207 	bic.w	r2, r3, #7
 8003dda:	4970      	ldr	r1, [pc, #448]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b6e      	ldr	r3, [pc, #440]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0cf      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d010      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	4b66      	ldr	r3, [pc, #408]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d908      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e10:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4960      	ldr	r1, [pc, #384]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d04c      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e36:	4b5a      	ldr	r3, [pc, #360]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d121      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0a6      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d107      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e4e:	4b54      	ldr	r3, [pc, #336]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d115      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e09a      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d107      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e66:	4b4e      	ldr	r3, [pc, #312]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e08e      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e76:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e086      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e86:	4b46      	ldr	r3, [pc, #280]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 0203 	bic.w	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4943      	ldr	r1, [pc, #268]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e98:	f7ff f89a 	bl	8002fd0 <HAL_GetTick>
 8003e9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea0:	f7ff f896 	bl	8002fd0 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e06e      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb6:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 020c 	and.w	r2, r3, #12
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d1eb      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d010      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d208      	bcs.n	8003ef6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	492b      	ldr	r1, [pc, #172]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef6:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d210      	bcs.n	8003f26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 0207 	bic.w	r2, r3, #7
 8003f0c:	4923      	ldr	r1, [pc, #140]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f14:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e036      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f32:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	4918      	ldr	r1, [pc, #96]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f50:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4910      	ldr	r1, [pc, #64]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f64:	f000 f824 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	490b      	ldr	r1, [pc, #44]	; (8003fa4 <HAL_RCC_ClockConfig+0x1f4>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f80:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8003f82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1fc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe fe51 	bl	8002c30 <HAL_InitTick>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f92:	7afb      	ldrb	r3, [r7, #11]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40022000 	.word	0x40022000
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	0800b700 	.word	0x0800b700
 8003fa8:	20000000 	.word	0x20000000
 8003fac:	20000004 	.word	0x20000004

08003fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	; 0x24
 8003fb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fbe:	4b3e      	ldr	r3, [pc, #248]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b0c      	cmp	r3, #12
 8003fdc:	d121      	bne.n	8004022 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d11e      	bne.n	8004022 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fe4:	4b34      	ldr	r3, [pc, #208]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d107      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ff0:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	e005      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004000:	4b2d      	ldr	r3, [pc, #180]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800400c:	4a2b      	ldr	r2, [pc, #172]	; (80040bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004014:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10d      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d102      	bne.n	800402e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004028:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	e004      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d101      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004034:	4b23      	ldr	r3, [pc, #140]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004036:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d134      	bne.n	80040a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800403e:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d003      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0xa6>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d003      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0xac>
 8004054:	e005      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004056:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004058:	617b      	str	r3, [r7, #20]
      break;
 800405a:	e005      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800405c:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800405e:	617b      	str	r3, [r7, #20]
      break;
 8004060:	e002      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	617b      	str	r3, [r7, #20]
      break;
 8004066:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004068:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	3301      	adds	r3, #1
 8004074:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	fb03 f202 	mul.w	r2, r3, r2
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800408e:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	0e5b      	lsrs	r3, r3, #25
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	3301      	adds	r3, #1
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040a8:	69bb      	ldr	r3, [r7, #24]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3724      	adds	r7, #36	; 0x24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	0800b718 	.word	0x0800b718
 80040c0:	00f42400 	.word	0x00f42400
 80040c4:	007a1200 	.word	0x007a1200

080040c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040cc:	4b03      	ldr	r3, [pc, #12]	; (80040dc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000000 	.word	0x20000000

080040e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040e4:	f7ff fff0 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4904      	ldr	r1, [pc, #16]	; (8004108 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40021000 	.word	0x40021000
 8004108:	0800b710 	.word	0x0800b710

0800410c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004110:	f7ff ffda 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 8004114:	4602      	mov	r2, r0
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	0adb      	lsrs	r3, r3, #11
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	4904      	ldr	r1, [pc, #16]	; (8004134 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004122:	5ccb      	ldrb	r3, [r1, r3]
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000
 8004134:	0800b710 	.word	0x0800b710

08004138 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	220f      	movs	r2, #15
 8004146:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <HAL_RCC_GetClockConfig+0x5c>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0203 	and.w	r2, r3, #3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <HAL_RCC_GetClockConfig+0x5c>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <HAL_RCC_GetClockConfig+0x5c>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_RCC_GetClockConfig+0x5c>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	08db      	lsrs	r3, r3, #3
 8004172:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <HAL_RCC_GetClockConfig+0x60>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0207 	and.w	r2, r3, #7
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	601a      	str	r2, [r3, #0]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	40022000 	.word	0x40022000

0800419c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041a8:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041b4:	f7ff f9bc 	bl	8003530 <HAL_PWREx_GetVoltageRange>
 80041b8:	6178      	str	r0, [r7, #20]
 80041ba:	e014      	b.n	80041e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	4b25      	ldr	r3, [pc, #148]	; (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	4a24      	ldr	r2, [pc, #144]	; (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6593      	str	r3, [r2, #88]	; 0x58
 80041c8:	4b22      	ldr	r3, [pc, #136]	; (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041d4:	f7ff f9ac 	bl	8003530 <HAL_PWREx_GetVoltageRange>
 80041d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041da:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041de:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ec:	d10b      	bne.n	8004206 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d919      	bls.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2ba0      	cmp	r3, #160	; 0xa0
 80041f8:	d902      	bls.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041fa:	2302      	movs	r3, #2
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	e013      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004200:	2301      	movs	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e010      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d902      	bls.n	8004212 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800420c:	2303      	movs	r3, #3
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	e00a      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d102      	bne.n	800421e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004218:	2302      	movs	r3, #2
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	e004      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b70      	cmp	r3, #112	; 0x70
 8004222:	d101      	bne.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004224:	2301      	movs	r3, #1
 8004226:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f023 0207 	bic.w	r2, r3, #7
 8004230:	4909      	ldr	r1, [pc, #36]	; (8004258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004238:	4b07      	ldr	r3, [pc, #28]	; (8004258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	429a      	cmp	r2, r3
 8004244:	d001      	beq.n	800424a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000
 8004258:	40022000 	.word	0x40022000

0800425c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004264:	2300      	movs	r3, #0
 8004266:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004268:	2300      	movs	r3, #0
 800426a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004274:	2b00      	cmp	r3, #0
 8004276:	d041      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800427c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004280:	d02a      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004282:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004286:	d824      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004288:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800428c:	d008      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800428e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004292:	d81e      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429c:	d010      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800429e:	e018      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042a0:	4b86      	ldr	r3, [pc, #536]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4a85      	ldr	r2, [pc, #532]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ac:	e015      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	2100      	movs	r1, #0
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fabb 	bl	8004830 <RCCEx_PLLSAI1_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042be:	e00c      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3320      	adds	r3, #32
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fba6 	bl	8004a18 <RCCEx_PLLSAI2_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	74fb      	strb	r3, [r7, #19]
      break;
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042e0:	4b76      	ldr	r3, [pc, #472]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ee:	4973      	ldr	r1, [pc, #460]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042f6:	e001      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d041      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004310:	d02a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004312:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004316:	d824      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004318:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800431c:	d008      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800431e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004322:	d81e      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800432c:	d010      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800432e:	e018      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004330:	4b62      	ldr	r3, [pc, #392]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a61      	ldr	r2, [pc, #388]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800433c:	e015      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fa73 	bl	8004830 <RCCEx_PLLSAI1_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800434e:	e00c      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3320      	adds	r3, #32
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fb5e 	bl	8004a18 <RCCEx_PLLSAI2_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004360:	e003      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	74fb      	strb	r3, [r7, #19]
      break;
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004370:	4b52      	ldr	r3, [pc, #328]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800437e:	494f      	ldr	r1, [pc, #316]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004386:	e001      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a0 	beq.w	80044da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439a:	2300      	movs	r3, #0
 800439c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800439e:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043ae:	2300      	movs	r3, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00d      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b4:	4b41      	ldr	r3, [pc, #260]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	4a40      	ldr	r2, [pc, #256]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043be:	6593      	str	r3, [r2, #88]	; 0x58
 80043c0:	4b3e      	ldr	r3, [pc, #248]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043cc:	2301      	movs	r3, #1
 80043ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d0:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3a      	ldr	r2, [pc, #232]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043dc:	f7fe fdf8 	bl	8002fd0 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043e2:	e009      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e4:	f7fe fdf4 	bl	8002fd0 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d902      	bls.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	74fb      	strb	r3, [r7, #19]
        break;
 80043f6:	e005      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043f8:	4b31      	ldr	r3, [pc, #196]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ef      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004404:	7cfb      	ldrb	r3, [r7, #19]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d15c      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800440a:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004414:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01f      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	429a      	cmp	r2, r3
 8004426:	d019      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004428:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004432:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004434:	4b21      	ldr	r3, [pc, #132]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	4a20      	ldr	r2, [pc, #128]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004444:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	4a1c      	ldr	r2, [pc, #112]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004454:	4a19      	ldr	r2, [pc, #100]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004466:	f7fe fdb3 	bl	8002fd0 <HAL_GetTick>
 800446a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446c:	e00b      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fe fdaf 	bl	8002fd0 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	; 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d902      	bls.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	74fb      	strb	r3, [r7, #19]
            break;
 8004484:	e006      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ec      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10c      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044aa:	4904      	ldr	r1, [pc, #16]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044b2:	e009      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	74bb      	strb	r3, [r7, #18]
 80044b8:	e006      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044c8:	7c7b      	ldrb	r3, [r7, #17]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ce:	4b9e      	ldr	r3, [pc, #632]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	4a9d      	ldr	r2, [pc, #628]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e6:	4b98      	ldr	r3, [pc, #608]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f023 0203 	bic.w	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	4994      	ldr	r1, [pc, #592]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004508:	4b8f      	ldr	r3, [pc, #572]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f023 020c 	bic.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	498c      	ldr	r1, [pc, #560]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800452a:	4b87      	ldr	r3, [pc, #540]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	4983      	ldr	r1, [pc, #524]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800454c:	4b7e      	ldr	r3, [pc, #504]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	497b      	ldr	r1, [pc, #492]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800456e:	4b76      	ldr	r3, [pc, #472]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457c:	4972      	ldr	r1, [pc, #456]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004590:	4b6d      	ldr	r3, [pc, #436]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459e:	496a      	ldr	r1, [pc, #424]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045b2:	4b65      	ldr	r3, [pc, #404]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c0:	4961      	ldr	r1, [pc, #388]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045d4:	4b5c      	ldr	r3, [pc, #368]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e2:	4959      	ldr	r1, [pc, #356]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f6:	4b54      	ldr	r3, [pc, #336]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004604:	4950      	ldr	r1, [pc, #320]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004618:	4b4b      	ldr	r3, [pc, #300]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	4948      	ldr	r1, [pc, #288]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800463a:	4b43      	ldr	r3, [pc, #268]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	493f      	ldr	r1, [pc, #252]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d028      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800465c:	4b3a      	ldr	r3, [pc, #232]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800466a:	4937      	ldr	r1, [pc, #220]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800467a:	d106      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800467c:	4b32      	ldr	r3, [pc, #200]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a31      	ldr	r2, [pc, #196]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004686:	60d3      	str	r3, [r2, #12]
 8004688:	e011      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800468e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004692:	d10c      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f8c8 	bl	8004830 <RCCEx_PLLSAI1_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d028      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	491f      	ldr	r1, [pc, #124]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d8:	d106      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046e4:	60d3      	str	r3, [r2, #12]
 80046e6:	e011      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f0:	d10c      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2101      	movs	r1, #1
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 f899 	bl	8004830 <RCCEx_PLLSAI1_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02b      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004726:	4908      	ldr	r1, [pc, #32]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004736:	d109      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a02      	ldr	r2, [pc, #8]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004742:	60d3      	str	r3, [r2, #12]
 8004744:	e014      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004754:	d10c      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3304      	adds	r3, #4
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f000 f867 	bl	8004830 <RCCEx_PLLSAI1_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d02f      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800477c:	4b2b      	ldr	r3, [pc, #172]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478a:	4928      	ldr	r1, [pc, #160]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479a:	d10d      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	2102      	movs	r1, #2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f844 	bl	8004830 <RCCEx_PLLSAI1_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d014      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	74bb      	strb	r3, [r7, #18]
 80047b6:	e011      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047c0:	d10c      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3320      	adds	r3, #32
 80047c6:	2102      	movs	r1, #2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f925 	bl	8004a18 <RCCEx_PLLSAI2_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047e8:	4b10      	ldr	r3, [pc, #64]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f6:	490d      	ldr	r1, [pc, #52]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800480a:	4b08      	ldr	r3, [pc, #32]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800481a:	4904      	ldr	r1, [pc, #16]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004822:	7cbb      	ldrb	r3, [r7, #18]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40021000 	.word	0x40021000

08004830 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800483e:	4b75      	ldr	r3, [pc, #468]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d018      	beq.n	800487c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800484a:	4b72      	ldr	r3, [pc, #456]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0203 	and.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d10d      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
       ||
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004862:	4b6c      	ldr	r3, [pc, #432]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	091b      	lsrs	r3, r3, #4
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
       ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d047      	beq.n	8004906 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
 800487a:	e044      	b.n	8004906 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d018      	beq.n	80048b6 <RCCEx_PLLSAI1_Config+0x86>
 8004884:	2b03      	cmp	r3, #3
 8004886:	d825      	bhi.n	80048d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004888:	2b01      	cmp	r3, #1
 800488a:	d002      	beq.n	8004892 <RCCEx_PLLSAI1_Config+0x62>
 800488c:	2b02      	cmp	r3, #2
 800488e:	d009      	beq.n	80048a4 <RCCEx_PLLSAI1_Config+0x74>
 8004890:	e020      	b.n	80048d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004892:	4b60      	ldr	r3, [pc, #384]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d11d      	bne.n	80048da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a2:	e01a      	b.n	80048da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048a4:	4b5b      	ldr	r3, [pc, #364]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d116      	bne.n	80048de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b4:	e013      	b.n	80048de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048b6:	4b57      	ldr	r3, [pc, #348]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048c2:	4b54      	ldr	r3, [pc, #336]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048d2:	e006      	b.n	80048e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e004      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048da:	bf00      	nop
 80048dc:	e002      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048de:	bf00      	nop
 80048e0:	e000      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10d      	bne.n	8004906 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ea:	4b4a      	ldr	r3, [pc, #296]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6819      	ldr	r1, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	430b      	orrs	r3, r1
 8004900:	4944      	ldr	r1, [pc, #272]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d17d      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800490c:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a40      	ldr	r2, [pc, #256]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004912:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004918:	f7fe fb5a 	bl	8002fd0 <HAL_GetTick>
 800491c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800491e:	e009      	b.n	8004934 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004920:	f7fe fb56 	bl	8002fd0 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d902      	bls.n	8004934 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	73fb      	strb	r3, [r7, #15]
        break;
 8004932:	e005      	b.n	8004940 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004934:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ef      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d160      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d111      	bne.n	8004970 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494c:	4b31      	ldr	r3, [pc, #196]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6892      	ldr	r2, [r2, #8]
 800495c:	0211      	lsls	r1, r2, #8
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68d2      	ldr	r2, [r2, #12]
 8004962:	0912      	lsrs	r2, r2, #4
 8004964:	0452      	lsls	r2, r2, #17
 8004966:	430a      	orrs	r2, r1
 8004968:	492a      	ldr	r1, [pc, #168]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	610b      	str	r3, [r1, #16]
 800496e:	e027      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d112      	bne.n	800499c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004976:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800497e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6892      	ldr	r2, [r2, #8]
 8004986:	0211      	lsls	r1, r2, #8
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6912      	ldr	r2, [r2, #16]
 800498c:	0852      	lsrs	r2, r2, #1
 800498e:	3a01      	subs	r2, #1
 8004990:	0552      	lsls	r2, r2, #21
 8004992:	430a      	orrs	r2, r1
 8004994:	491f      	ldr	r1, [pc, #124]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	610b      	str	r3, [r1, #16]
 800499a:	e011      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800499c:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6892      	ldr	r2, [r2, #8]
 80049ac:	0211      	lsls	r1, r2, #8
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6952      	ldr	r2, [r2, #20]
 80049b2:	0852      	lsrs	r2, r2, #1
 80049b4:	3a01      	subs	r2, #1
 80049b6:	0652      	lsls	r2, r2, #25
 80049b8:	430a      	orrs	r2, r1
 80049ba:	4916      	ldr	r1, [pc, #88]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049c0:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049cc:	f7fe fb00 	bl	8002fd0 <HAL_GetTick>
 80049d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049d2:	e009      	b.n	80049e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049d4:	f7fe fafc 	bl	8002fd0 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d902      	bls.n	80049e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	73fb      	strb	r3, [r7, #15]
          break;
 80049e6:	e005      	b.n	80049f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ef      	beq.n	80049d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	4904      	ldr	r1, [pc, #16]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000

08004a18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a26:	4b6a      	ldr	r3, [pc, #424]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d018      	beq.n	8004a64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a32:	4b67      	ldr	r3, [pc, #412]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0203 	and.w	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d10d      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
       ||
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a4a:	4b61      	ldr	r3, [pc, #388]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
       ||
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d047      	beq.n	8004aee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
 8004a62:	e044      	b.n	8004aee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d018      	beq.n	8004a9e <RCCEx_PLLSAI2_Config+0x86>
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d825      	bhi.n	8004abc <RCCEx_PLLSAI2_Config+0xa4>
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d002      	beq.n	8004a7a <RCCEx_PLLSAI2_Config+0x62>
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d009      	beq.n	8004a8c <RCCEx_PLLSAI2_Config+0x74>
 8004a78:	e020      	b.n	8004abc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a7a:	4b55      	ldr	r3, [pc, #340]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d11d      	bne.n	8004ac2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a8a:	e01a      	b.n	8004ac2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a8c:	4b50      	ldr	r3, [pc, #320]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d116      	bne.n	8004ac6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a9c:	e013      	b.n	8004ac6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a9e:	4b4c      	ldr	r3, [pc, #304]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aaa:	4b49      	ldr	r3, [pc, #292]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004aba:	e006      	b.n	8004aca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac0:	e004      	b.n	8004acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ac2:	bf00      	nop
 8004ac4:	e002      	b.n	8004acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ac6:	bf00      	nop
 8004ac8:	e000      	b.n	8004acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aca:	bf00      	nop
    }

    if(status == HAL_OK)
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10d      	bne.n	8004aee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ad2:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6819      	ldr	r1, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	4939      	ldr	r1, [pc, #228]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d167      	bne.n	8004bc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004af4:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a35      	ldr	r2, [pc, #212]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b00:	f7fe fa66 	bl	8002fd0 <HAL_GetTick>
 8004b04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b06:	e009      	b.n	8004b1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b08:	f7fe fa62 	bl	8002fd0 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d902      	bls.n	8004b1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	73fb      	strb	r3, [r7, #15]
        break;
 8004b1a:	e005      	b.n	8004b28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b1c:	4b2c      	ldr	r3, [pc, #176]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ef      	bne.n	8004b08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d14a      	bne.n	8004bc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d111      	bne.n	8004b58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b34:	4b26      	ldr	r3, [pc, #152]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6892      	ldr	r2, [r2, #8]
 8004b44:	0211      	lsls	r1, r2, #8
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68d2      	ldr	r2, [r2, #12]
 8004b4a:	0912      	lsrs	r2, r2, #4
 8004b4c:	0452      	lsls	r2, r2, #17
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	491f      	ldr	r1, [pc, #124]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	614b      	str	r3, [r1, #20]
 8004b56:	e011      	b.n	8004b7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6892      	ldr	r2, [r2, #8]
 8004b68:	0211      	lsls	r1, r2, #8
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6912      	ldr	r2, [r2, #16]
 8004b6e:	0852      	lsrs	r2, r2, #1
 8004b70:	3a01      	subs	r2, #1
 8004b72:	0652      	lsls	r2, r2, #25
 8004b74:	430a      	orrs	r2, r1
 8004b76:	4916      	ldr	r1, [pc, #88]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b7c:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fe fa22 	bl	8002fd0 <HAL_GetTick>
 8004b8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b8e:	e009      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b90:	f7fe fa1e 	bl	8002fd0 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d902      	bls.n	8004ba4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ba2:	e005      	b.n	8004bb0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0ef      	beq.n	8004b90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	4904      	ldr	r1, [pc, #16]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000

08004bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e095      	b.n	8004d12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d108      	bne.n	8004c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf6:	d009      	beq.n	8004c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	61da      	str	r2, [r3, #28]
 8004bfe:	e005      	b.n	8004c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fd ff64 	bl	8002af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c4c:	d902      	bls.n	8004c54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e002      	b.n	8004c5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c62:	d007      	beq.n	8004c74 <HAL_SPI_Init+0xa0>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c6c:	d002      	beq.n	8004c74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb6:	ea42 0103 	orr.w	r1, r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	0c1b      	lsrs	r3, r3, #16
 8004cd0:	f003 0204 	and.w	r2, r3, #4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004cf0:	ea42 0103 	orr.w	r1, r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b088      	sub	sp, #32
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_SPI_Transmit+0x22>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e158      	b.n	8004fee <HAL_SPI_Transmit+0x2d4>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d44:	f7fe f944 	bl	8002fd0 <HAL_GetTick>
 8004d48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d002      	beq.n	8004d60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d5e:	e13d      	b.n	8004fdc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <HAL_SPI_Transmit+0x52>
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d70:	e134      	b.n	8004fdc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2203      	movs	r2, #3
 8004d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dbc:	d10f      	bne.n	8004dde <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ddc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d007      	beq.n	8004dfc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e04:	d94b      	bls.n	8004e9e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_SPI_Transmit+0xfa>
 8004e0e:	8afb      	ldrh	r3, [r7, #22]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d13e      	bne.n	8004e92 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e38:	e02b      	b.n	8004e92 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d112      	bne.n	8004e6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	881a      	ldrh	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e6c:	e011      	b.n	8004e92 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6e:	f7fe f8af 	bl	8002fd0 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d803      	bhi.n	8004e86 <HAL_SPI_Transmit+0x16c>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d102      	bne.n	8004e8c <HAL_SPI_Transmit+0x172>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d102      	bne.n	8004e92 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e90:	e0a4      	b.n	8004fdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1ce      	bne.n	8004e3a <HAL_SPI_Transmit+0x120>
 8004e9c:	e07c      	b.n	8004f98 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_SPI_Transmit+0x192>
 8004ea6:	8afb      	ldrh	r3, [r7, #22]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d170      	bne.n	8004f8e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d912      	bls.n	8004edc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	881a      	ldrh	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	1c9a      	adds	r2, r3, #2
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b02      	subs	r3, #2
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eda:	e058      	b.n	8004f8e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	7812      	ldrb	r2, [r2, #0]
 8004ee8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f02:	e044      	b.n	8004f8e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d12b      	bne.n	8004f6a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d912      	bls.n	8004f42 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	881a      	ldrh	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	1c9a      	adds	r2, r3, #2
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b02      	subs	r3, #2
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f40:	e025      	b.n	8004f8e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	7812      	ldrb	r2, [r2, #0]
 8004f4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f68:	e011      	b.n	8004f8e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f6a:	f7fe f831 	bl	8002fd0 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d803      	bhi.n	8004f82 <HAL_SPI_Transmit+0x268>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f80:	d102      	bne.n	8004f88 <HAL_SPI_Transmit+0x26e>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f8c:	e026      	b.n	8004fdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1b5      	bne.n	8004f04 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f949 	bl	8005234 <SPI_EndRxTxTransaction>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10a      	bne.n	8004fcc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e000      	b.n	8004fdc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004fda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005008:	f7fd ffe2 	bl	8002fd0 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	4413      	add	r3, r2
 8005016:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005018:	f7fd ffda 	bl	8002fd0 <HAL_GetTick>
 800501c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800501e:	4b39      	ldr	r3, [pc, #228]	; (8005104 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	015b      	lsls	r3, r3, #5
 8005024:	0d1b      	lsrs	r3, r3, #20
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	fb02 f303 	mul.w	r3, r2, r3
 800502c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800502e:	e054      	b.n	80050da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d050      	beq.n	80050da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005038:	f7fd ffca 	bl	8002fd0 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	429a      	cmp	r2, r3
 8005046:	d902      	bls.n	800504e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d13d      	bne.n	80050ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800505c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005066:	d111      	bne.n	800508c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005070:	d004      	beq.n	800507c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507a:	d107      	bne.n	800508c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005094:	d10f      	bne.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e017      	b.n	80050fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4013      	ands	r3, r2
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	bf0c      	ite	eq
 80050ea:	2301      	moveq	r3, #1
 80050ec:	2300      	movne	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d19b      	bne.n	8005030 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000000 	.word	0x20000000

08005108 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800511a:	f7fd ff59 	bl	8002fd0 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	4413      	add	r3, r2
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800512a:	f7fd ff51 	bl	8002fd0 <HAL_GetTick>
 800512e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005138:	4b3d      	ldr	r3, [pc, #244]	; (8005230 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	00da      	lsls	r2, r3, #3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	0d1b      	lsrs	r3, r3, #20
 8005148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514a:	fb02 f303 	mul.w	r3, r2, r3
 800514e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005150:	e060      	b.n	8005214 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005158:	d107      	bne.n	800516a <SPI_WaitFifoStateUntilTimeout+0x62>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005168:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d050      	beq.n	8005214 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005172:	f7fd ff2d 	bl	8002fd0 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517e:	429a      	cmp	r2, r3
 8005180:	d902      	bls.n	8005188 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	2b00      	cmp	r3, #0
 8005186:	d13d      	bne.n	8005204 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005196:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a0:	d111      	bne.n	80051c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051aa:	d004      	beq.n	80051b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b4:	d107      	bne.n	80051c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ce:	d10f      	bne.n	80051f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e010      	b.n	8005226 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	3b01      	subs	r3, #1
 8005212:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4013      	ands	r3, r2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d196      	bne.n	8005152 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3728      	adds	r7, #40	; 0x28
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20000000 	.word	0x20000000

08005234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2200      	movs	r2, #0
 8005248:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f7ff ff5b 	bl	8005108 <SPI_WaitFifoStateUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d007      	beq.n	8005268 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800525c:	f043 0220 	orr.w	r2, r3, #32
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e027      	b.n	80052b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2200      	movs	r2, #0
 8005270:	2180      	movs	r1, #128	; 0x80
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7ff fec0 	bl	8004ff8 <SPI_WaitFlagStateUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e014      	b.n	80052b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2200      	movs	r2, #0
 8005296:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f7ff ff34 	bl	8005108 <SPI_WaitFifoStateUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e000      	b.n	80052b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e049      	b.n	8005366 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f841 	bl	800536e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 f9f8 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	d001      	beq.n	800539c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e04f      	b.n	800543c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a23      	ldr	r2, [pc, #140]	; (8005448 <HAL_TIM_Base_Start_IT+0xc4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01d      	beq.n	80053fa <HAL_TIM_Base_Start_IT+0x76>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c6:	d018      	beq.n	80053fa <HAL_TIM_Base_Start_IT+0x76>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1f      	ldr	r2, [pc, #124]	; (800544c <HAL_TIM_Base_Start_IT+0xc8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_TIM_Base_Start_IT+0x76>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <HAL_TIM_Base_Start_IT+0xcc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIM_Base_Start_IT+0x76>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <HAL_TIM_Base_Start_IT+0xd0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIM_Base_Start_IT+0x76>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <HAL_TIM_Base_Start_IT+0xd4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIM_Base_Start_IT+0x76>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a19      	ldr	r2, [pc, #100]	; (800545c <HAL_TIM_Base_Start_IT+0xd8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d115      	bne.n	8005426 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	4b17      	ldr	r3, [pc, #92]	; (8005460 <HAL_TIM_Base_Start_IT+0xdc>)
 8005402:	4013      	ands	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b06      	cmp	r3, #6
 800540a:	d015      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0xb4>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005412:	d011      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005424:	e008      	b.n	8005438 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0201 	orr.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e000      	b.n	800543a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005438:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40000c00 	.word	0x40000c00
 8005458:	40013400 	.word	0x40013400
 800545c:	40014000 	.word	0x40014000
 8005460:	00010007 	.word	0x00010007

08005464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b02      	cmp	r3, #2
 8005478:	d122      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b02      	cmp	r3, #2
 8005486:	d11b      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0202 	mvn.w	r2, #2
 8005490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f905 	bl	80056b6 <HAL_TIM_IC_CaptureCallback>
 80054ac:	e005      	b.n	80054ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f8f7 	bl	80056a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f908 	bl	80056ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d122      	bne.n	8005514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d11b      	bne.n	8005514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0204 	mvn.w	r2, #4
 80054e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2202      	movs	r2, #2
 80054ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f8db 	bl	80056b6 <HAL_TIM_IC_CaptureCallback>
 8005500:	e005      	b.n	800550e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f8cd 	bl	80056a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f8de 	bl	80056ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b08      	cmp	r3, #8
 8005520:	d122      	bne.n	8005568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b08      	cmp	r3, #8
 800552e:	d11b      	bne.n	8005568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0208 	mvn.w	r2, #8
 8005538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2204      	movs	r2, #4
 800553e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f8b1 	bl	80056b6 <HAL_TIM_IC_CaptureCallback>
 8005554:	e005      	b.n	8005562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8a3 	bl	80056a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f8b4 	bl	80056ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	2b10      	cmp	r3, #16
 8005574:	d122      	bne.n	80055bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	2b10      	cmp	r3, #16
 8005582:	d11b      	bne.n	80055bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0210 	mvn.w	r2, #16
 800558c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2208      	movs	r2, #8
 8005592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f887 	bl	80056b6 <HAL_TIM_IC_CaptureCallback>
 80055a8:	e005      	b.n	80055b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f879 	bl	80056a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f88a 	bl	80056ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d10e      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d107      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0201 	mvn.w	r2, #1
 80055e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fc ff12 	bl	800240c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f2:	2b80      	cmp	r3, #128	; 0x80
 80055f4:	d10e      	bne.n	8005614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005600:	2b80      	cmp	r3, #128	; 0x80
 8005602:	d107      	bne.n	8005614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800560c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f914 	bl	800583c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005622:	d10e      	bne.n	8005642 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	2b80      	cmp	r3, #128	; 0x80
 8005630:	d107      	bne.n	8005642 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800563a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f907 	bl	8005850 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b40      	cmp	r3, #64	; 0x40
 800564e:	d10e      	bne.n	800566e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565a:	2b40      	cmp	r3, #64	; 0x40
 800565c:	d107      	bne.n	800566e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f838 	bl	80056de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b20      	cmp	r3, #32
 800567a:	d10e      	bne.n	800569a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b20      	cmp	r3, #32
 8005688:	d107      	bne.n	800569a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f06f 0220 	mvn.w	r2, #32
 8005692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f8c7 	bl	8005828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a40      	ldr	r2, [pc, #256]	; (8005808 <TIM_Base_SetConfig+0x114>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d013      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005712:	d00f      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a3d      	ldr	r2, [pc, #244]	; (800580c <TIM_Base_SetConfig+0x118>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00b      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a3c      	ldr	r2, [pc, #240]	; (8005810 <TIM_Base_SetConfig+0x11c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a3b      	ldr	r2, [pc, #236]	; (8005814 <TIM_Base_SetConfig+0x120>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a3a      	ldr	r2, [pc, #232]	; (8005818 <TIM_Base_SetConfig+0x124>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2f      	ldr	r2, [pc, #188]	; (8005808 <TIM_Base_SetConfig+0x114>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01f      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005754:	d01b      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2c      	ldr	r2, [pc, #176]	; (800580c <TIM_Base_SetConfig+0x118>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d017      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2b      	ldr	r2, [pc, #172]	; (8005810 <TIM_Base_SetConfig+0x11c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a2a      	ldr	r2, [pc, #168]	; (8005814 <TIM_Base_SetConfig+0x120>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00f      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a29      	ldr	r2, [pc, #164]	; (8005818 <TIM_Base_SetConfig+0x124>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00b      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a28      	ldr	r2, [pc, #160]	; (800581c <TIM_Base_SetConfig+0x128>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d007      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a27      	ldr	r2, [pc, #156]	; (8005820 <TIM_Base_SetConfig+0x12c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a26      	ldr	r2, [pc, #152]	; (8005824 <TIM_Base_SetConfig+0x130>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d108      	bne.n	80057a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a10      	ldr	r2, [pc, #64]	; (8005808 <TIM_Base_SetConfig+0x114>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00f      	beq.n	80057ec <TIM_Base_SetConfig+0xf8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a12      	ldr	r2, [pc, #72]	; (8005818 <TIM_Base_SetConfig+0x124>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00b      	beq.n	80057ec <TIM_Base_SetConfig+0xf8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a11      	ldr	r2, [pc, #68]	; (800581c <TIM_Base_SetConfig+0x128>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d007      	beq.n	80057ec <TIM_Base_SetConfig+0xf8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a10      	ldr	r2, [pc, #64]	; (8005820 <TIM_Base_SetConfig+0x12c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_Base_SetConfig+0xf8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a0f      	ldr	r2, [pc, #60]	; (8005824 <TIM_Base_SetConfig+0x130>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d103      	bne.n	80057f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	615a      	str	r2, [r3, #20]
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40014000 	.word	0x40014000
 8005820:	40014400 	.word	0x40014400
 8005824:	40014800 	.word	0x40014800

08005828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e040      	b.n	80058f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fd f976 	bl	8002b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2224      	movs	r2, #36	; 0x24
 8005890:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0201 	bic.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f82c 	bl	8005900 <UART_SetConfig>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e022      	b.n	80058f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fad8 	bl	8005e70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fb5f 	bl	8005fb4 <UART_CheckIdleState>
 80058f6:	4603      	mov	r3, r0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005904:	b08a      	sub	sp, #40	; 0x28
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	431a      	orrs	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	431a      	orrs	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	4313      	orrs	r3, r2
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4ba4      	ldr	r3, [pc, #656]	; (8005bc0 <UART_SetConfig+0x2c0>)
 8005930:	4013      	ands	r3, r2
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005938:	430b      	orrs	r3, r1
 800593a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a99      	ldr	r2, [pc, #612]	; (8005bc4 <UART_SetConfig+0x2c4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005968:	4313      	orrs	r3, r2
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597c:	430a      	orrs	r2, r1
 800597e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a90      	ldr	r2, [pc, #576]	; (8005bc8 <UART_SetConfig+0x2c8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d126      	bne.n	80059d8 <UART_SetConfig+0xd8>
 800598a:	4b90      	ldr	r3, [pc, #576]	; (8005bcc <UART_SetConfig+0x2cc>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	2b03      	cmp	r3, #3
 8005996:	d81b      	bhi.n	80059d0 <UART_SetConfig+0xd0>
 8005998:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <UART_SetConfig+0xa0>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	080059b1 	.word	0x080059b1
 80059a4:	080059c1 	.word	0x080059c1
 80059a8:	080059b9 	.word	0x080059b9
 80059ac:	080059c9 	.word	0x080059c9
 80059b0:	2301      	movs	r3, #1
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b6:	e116      	b.n	8005be6 <UART_SetConfig+0x2e6>
 80059b8:	2302      	movs	r3, #2
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059be:	e112      	b.n	8005be6 <UART_SetConfig+0x2e6>
 80059c0:	2304      	movs	r3, #4
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c6:	e10e      	b.n	8005be6 <UART_SetConfig+0x2e6>
 80059c8:	2308      	movs	r3, #8
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ce:	e10a      	b.n	8005be6 <UART_SetConfig+0x2e6>
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d6:	e106      	b.n	8005be6 <UART_SetConfig+0x2e6>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a7c      	ldr	r2, [pc, #496]	; (8005bd0 <UART_SetConfig+0x2d0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d138      	bne.n	8005a54 <UART_SetConfig+0x154>
 80059e2:	4b7a      	ldr	r3, [pc, #488]	; (8005bcc <UART_SetConfig+0x2cc>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e8:	f003 030c 	and.w	r3, r3, #12
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	d82d      	bhi.n	8005a4c <UART_SetConfig+0x14c>
 80059f0:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <UART_SetConfig+0xf8>)
 80059f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f6:	bf00      	nop
 80059f8:	08005a2d 	.word	0x08005a2d
 80059fc:	08005a4d 	.word	0x08005a4d
 8005a00:	08005a4d 	.word	0x08005a4d
 8005a04:	08005a4d 	.word	0x08005a4d
 8005a08:	08005a3d 	.word	0x08005a3d
 8005a0c:	08005a4d 	.word	0x08005a4d
 8005a10:	08005a4d 	.word	0x08005a4d
 8005a14:	08005a4d 	.word	0x08005a4d
 8005a18:	08005a35 	.word	0x08005a35
 8005a1c:	08005a4d 	.word	0x08005a4d
 8005a20:	08005a4d 	.word	0x08005a4d
 8005a24:	08005a4d 	.word	0x08005a4d
 8005a28:	08005a45 	.word	0x08005a45
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a32:	e0d8      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005a34:	2302      	movs	r3, #2
 8005a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a3a:	e0d4      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005a3c:	2304      	movs	r3, #4
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a42:	e0d0      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005a44:	2308      	movs	r3, #8
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4a:	e0cc      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005a4c:	2310      	movs	r3, #16
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a52:	e0c8      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a5e      	ldr	r2, [pc, #376]	; (8005bd4 <UART_SetConfig+0x2d4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d125      	bne.n	8005aaa <UART_SetConfig+0x1aa>
 8005a5e:	4b5b      	ldr	r3, [pc, #364]	; (8005bcc <UART_SetConfig+0x2cc>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a68:	2b30      	cmp	r3, #48	; 0x30
 8005a6a:	d016      	beq.n	8005a9a <UART_SetConfig+0x19a>
 8005a6c:	2b30      	cmp	r3, #48	; 0x30
 8005a6e:	d818      	bhi.n	8005aa2 <UART_SetConfig+0x1a2>
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d00a      	beq.n	8005a8a <UART_SetConfig+0x18a>
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d814      	bhi.n	8005aa2 <UART_SetConfig+0x1a2>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <UART_SetConfig+0x182>
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d008      	beq.n	8005a92 <UART_SetConfig+0x192>
 8005a80:	e00f      	b.n	8005aa2 <UART_SetConfig+0x1a2>
 8005a82:	2300      	movs	r3, #0
 8005a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a88:	e0ad      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a90:	e0a9      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005a92:	2304      	movs	r3, #4
 8005a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a98:	e0a5      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa0:	e0a1      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005aa2:	2310      	movs	r3, #16
 8005aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa8:	e09d      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a4a      	ldr	r2, [pc, #296]	; (8005bd8 <UART_SetConfig+0x2d8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d125      	bne.n	8005b00 <UART_SetConfig+0x200>
 8005ab4:	4b45      	ldr	r3, [pc, #276]	; (8005bcc <UART_SetConfig+0x2cc>)
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005abe:	2bc0      	cmp	r3, #192	; 0xc0
 8005ac0:	d016      	beq.n	8005af0 <UART_SetConfig+0x1f0>
 8005ac2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ac4:	d818      	bhi.n	8005af8 <UART_SetConfig+0x1f8>
 8005ac6:	2b80      	cmp	r3, #128	; 0x80
 8005ac8:	d00a      	beq.n	8005ae0 <UART_SetConfig+0x1e0>
 8005aca:	2b80      	cmp	r3, #128	; 0x80
 8005acc:	d814      	bhi.n	8005af8 <UART_SetConfig+0x1f8>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <UART_SetConfig+0x1d8>
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d008      	beq.n	8005ae8 <UART_SetConfig+0x1e8>
 8005ad6:	e00f      	b.n	8005af8 <UART_SetConfig+0x1f8>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ade:	e082      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae6:	e07e      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005ae8:	2304      	movs	r3, #4
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aee:	e07a      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005af0:	2308      	movs	r3, #8
 8005af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af6:	e076      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005af8:	2310      	movs	r3, #16
 8005afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afe:	e072      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a35      	ldr	r2, [pc, #212]	; (8005bdc <UART_SetConfig+0x2dc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d12a      	bne.n	8005b60 <UART_SetConfig+0x260>
 8005b0a:	4b30      	ldr	r3, [pc, #192]	; (8005bcc <UART_SetConfig+0x2cc>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b18:	d01a      	beq.n	8005b50 <UART_SetConfig+0x250>
 8005b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b1e:	d81b      	bhi.n	8005b58 <UART_SetConfig+0x258>
 8005b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b24:	d00c      	beq.n	8005b40 <UART_SetConfig+0x240>
 8005b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b2a:	d815      	bhi.n	8005b58 <UART_SetConfig+0x258>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <UART_SetConfig+0x238>
 8005b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b34:	d008      	beq.n	8005b48 <UART_SetConfig+0x248>
 8005b36:	e00f      	b.n	8005b58 <UART_SetConfig+0x258>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3e:	e052      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005b40:	2302      	movs	r3, #2
 8005b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b46:	e04e      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005b48:	2304      	movs	r3, #4
 8005b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b4e:	e04a      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005b50:	2308      	movs	r3, #8
 8005b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b56:	e046      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005b58:	2310      	movs	r3, #16
 8005b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b5e:	e042      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a17      	ldr	r2, [pc, #92]	; (8005bc4 <UART_SetConfig+0x2c4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d13a      	bne.n	8005be0 <UART_SetConfig+0x2e0>
 8005b6a:	4b18      	ldr	r3, [pc, #96]	; (8005bcc <UART_SetConfig+0x2cc>)
 8005b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b78:	d01a      	beq.n	8005bb0 <UART_SetConfig+0x2b0>
 8005b7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b7e:	d81b      	bhi.n	8005bb8 <UART_SetConfig+0x2b8>
 8005b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b84:	d00c      	beq.n	8005ba0 <UART_SetConfig+0x2a0>
 8005b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b8a:	d815      	bhi.n	8005bb8 <UART_SetConfig+0x2b8>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <UART_SetConfig+0x298>
 8005b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b94:	d008      	beq.n	8005ba8 <UART_SetConfig+0x2a8>
 8005b96:	e00f      	b.n	8005bb8 <UART_SetConfig+0x2b8>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b9e:	e022      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba6:	e01e      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005ba8:	2304      	movs	r3, #4
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bae:	e01a      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005bb0:	2308      	movs	r3, #8
 8005bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bb6:	e016      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bbe:	e012      	b.n	8005be6 <UART_SetConfig+0x2e6>
 8005bc0:	efff69f3 	.word	0xefff69f3
 8005bc4:	40008000 	.word	0x40008000
 8005bc8:	40013800 	.word	0x40013800
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40004400 	.word	0x40004400
 8005bd4:	40004800 	.word	0x40004800
 8005bd8:	40004c00 	.word	0x40004c00
 8005bdc:	40005000 	.word	0x40005000
 8005be0:	2310      	movs	r3, #16
 8005be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a9f      	ldr	r2, [pc, #636]	; (8005e68 <UART_SetConfig+0x568>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d17a      	bne.n	8005ce6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d824      	bhi.n	8005c42 <UART_SetConfig+0x342>
 8005bf8:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <UART_SetConfig+0x300>)
 8005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005c25 	.word	0x08005c25
 8005c04:	08005c43 	.word	0x08005c43
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c43 	.word	0x08005c43
 8005c10:	08005c33 	.word	0x08005c33
 8005c14:	08005c43 	.word	0x08005c43
 8005c18:	08005c43 	.word	0x08005c43
 8005c1c:	08005c43 	.word	0x08005c43
 8005c20:	08005c3b 	.word	0x08005c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c24:	f7fe fa5c 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8005c28:	61f8      	str	r0, [r7, #28]
        break;
 8005c2a:	e010      	b.n	8005c4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c2c:	4b8f      	ldr	r3, [pc, #572]	; (8005e6c <UART_SetConfig+0x56c>)
 8005c2e:	61fb      	str	r3, [r7, #28]
        break;
 8005c30:	e00d      	b.n	8005c4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c32:	f7fe f9bd 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8005c36:	61f8      	str	r0, [r7, #28]
        break;
 8005c38:	e009      	b.n	8005c4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3e:	61fb      	str	r3, [r7, #28]
        break;
 8005c40:	e005      	b.n	8005c4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 80fb 	beq.w	8005e4c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	4413      	add	r3, r2
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d305      	bcc.n	8005c72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d903      	bls.n	8005c7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c78:	e0e8      	b.n	8005e4c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	461c      	mov	r4, r3
 8005c80:	4615      	mov	r5, r2
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	022b      	lsls	r3, r5, #8
 8005c8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c90:	0222      	lsls	r2, r4, #8
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	6849      	ldr	r1, [r1, #4]
 8005c96:	0849      	lsrs	r1, r1, #1
 8005c98:	2000      	movs	r0, #0
 8005c9a:	4688      	mov	r8, r1
 8005c9c:	4681      	mov	r9, r0
 8005c9e:	eb12 0a08 	adds.w	sl, r2, r8
 8005ca2:	eb43 0b09 	adc.w	fp, r3, r9
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb4:	4650      	mov	r0, sl
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	f7fa ff6e 	bl	8000b98 <__aeabi_uldivmod>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cca:	d308      	bcc.n	8005cde <UART_SetConfig+0x3de>
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cd2:	d204      	bcs.n	8005cde <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	60da      	str	r2, [r3, #12]
 8005cdc:	e0b6      	b.n	8005e4c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ce4:	e0b2      	b.n	8005e4c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cee:	d15e      	bne.n	8005dae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d828      	bhi.n	8005d4a <UART_SetConfig+0x44a>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <UART_SetConfig+0x400>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d25 	.word	0x08005d25
 8005d04:	08005d2d 	.word	0x08005d2d
 8005d08:	08005d35 	.word	0x08005d35
 8005d0c:	08005d4b 	.word	0x08005d4b
 8005d10:	08005d3b 	.word	0x08005d3b
 8005d14:	08005d4b 	.word	0x08005d4b
 8005d18:	08005d4b 	.word	0x08005d4b
 8005d1c:	08005d4b 	.word	0x08005d4b
 8005d20:	08005d43 	.word	0x08005d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d24:	f7fe f9dc 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8005d28:	61f8      	str	r0, [r7, #28]
        break;
 8005d2a:	e014      	b.n	8005d56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d2c:	f7fe f9ee 	bl	800410c <HAL_RCC_GetPCLK2Freq>
 8005d30:	61f8      	str	r0, [r7, #28]
        break;
 8005d32:	e010      	b.n	8005d56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d34:	4b4d      	ldr	r3, [pc, #308]	; (8005e6c <UART_SetConfig+0x56c>)
 8005d36:	61fb      	str	r3, [r7, #28]
        break;
 8005d38:	e00d      	b.n	8005d56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d3a:	f7fe f939 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8005d3e:	61f8      	str	r0, [r7, #28]
        break;
 8005d40:	e009      	b.n	8005d56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d46:	61fb      	str	r3, [r7, #28]
        break;
 8005d48:	e005      	b.n	8005d56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d077      	beq.n	8005e4c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	005a      	lsls	r2, r3, #1
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	441a      	add	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	2b0f      	cmp	r3, #15
 8005d76:	d916      	bls.n	8005da6 <UART_SetConfig+0x4a6>
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d7e:	d212      	bcs.n	8005da6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f023 030f 	bic.w	r3, r3, #15
 8005d88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	8afb      	ldrh	r3, [r7, #22]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	8afa      	ldrh	r2, [r7, #22]
 8005da2:	60da      	str	r2, [r3, #12]
 8005da4:	e052      	b.n	8005e4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005dac:	e04e      	b.n	8005e4c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d827      	bhi.n	8005e06 <UART_SetConfig+0x506>
 8005db6:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <UART_SetConfig+0x4bc>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005de1 	.word	0x08005de1
 8005dc0:	08005de9 	.word	0x08005de9
 8005dc4:	08005df1 	.word	0x08005df1
 8005dc8:	08005e07 	.word	0x08005e07
 8005dcc:	08005df7 	.word	0x08005df7
 8005dd0:	08005e07 	.word	0x08005e07
 8005dd4:	08005e07 	.word	0x08005e07
 8005dd8:	08005e07 	.word	0x08005e07
 8005ddc:	08005dff 	.word	0x08005dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de0:	f7fe f97e 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8005de4:	61f8      	str	r0, [r7, #28]
        break;
 8005de6:	e014      	b.n	8005e12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de8:	f7fe f990 	bl	800410c <HAL_RCC_GetPCLK2Freq>
 8005dec:	61f8      	str	r0, [r7, #28]
        break;
 8005dee:	e010      	b.n	8005e12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005df0:	4b1e      	ldr	r3, [pc, #120]	; (8005e6c <UART_SetConfig+0x56c>)
 8005df2:	61fb      	str	r3, [r7, #28]
        break;
 8005df4:	e00d      	b.n	8005e12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005df6:	f7fe f8db 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8005dfa:	61f8      	str	r0, [r7, #28]
        break;
 8005dfc:	e009      	b.n	8005e12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e02:	61fb      	str	r3, [r7, #28]
        break;
 8005e04:	e005      	b.n	8005e12 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e10:	bf00      	nop
    }

    if (pclk != 0U)
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d019      	beq.n	8005e4c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	085a      	lsrs	r2, r3, #1
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	441a      	add	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	2b0f      	cmp	r3, #15
 8005e30:	d909      	bls.n	8005e46 <UART_SetConfig+0x546>
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e38:	d205      	bcs.n	8005e46 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60da      	str	r2, [r3, #12]
 8005e44:	e002      	b.n	8005e4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3728      	adds	r7, #40	; 0x28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e66:	bf00      	nop
 8005e68:	40008000 	.word	0x40008000
 8005e6c:	00f42400 	.word	0x00f42400

08005e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	f003 0310 	and.w	r3, r3, #16
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01a      	beq.n	8005f86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f6e:	d10a      	bne.n	8005f86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	605a      	str	r2, [r3, #4]
  }
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fc4:	f7fd f804 	bl	8002fd0 <HAL_GetTick>
 8005fc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d10e      	bne.n	8005ff6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f82d 	bl	8006046 <UART_WaitOnFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e023      	b.n	800603e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b04      	cmp	r3, #4
 8006002:	d10e      	bne.n	8006022 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f817 	bl	8006046 <UART_WaitOnFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e00d      	b.n	800603e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b09c      	sub	sp, #112	; 0x70
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	603b      	str	r3, [r7, #0]
 8006052:	4613      	mov	r3, r2
 8006054:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006056:	e0a5      	b.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	f000 80a1 	beq.w	80061a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006062:	f7fc ffb5 	bl	8002fd0 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800606e:	429a      	cmp	r2, r3
 8006070:	d302      	bcc.n	8006078 <UART_WaitOnFlagUntilTimeout+0x32>
 8006072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006074:	2b00      	cmp	r3, #0
 8006076:	d13e      	bne.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006088:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800608c:	667b      	str	r3, [r7, #100]	; 0x64
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006098:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800609c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e6      	bne.n	8006078 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3308      	adds	r3, #8
 80060b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	663b      	str	r3, [r7, #96]	; 0x60
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3308      	adds	r3, #8
 80060c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80060cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e5      	bne.n	80060aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e067      	b.n	80061c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d04f      	beq.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800610e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006112:	d147      	bne.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800611c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006132:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
 800613e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e6      	bne.n	800611e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3308      	adds	r3, #8
 8006156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	613b      	str	r3, [r7, #16]
   return(result);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 0301 	bic.w	r3, r3, #1
 8006166:	66bb      	str	r3, [r7, #104]	; 0x68
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3308      	adds	r3, #8
 800616e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006170:	623a      	str	r2, [r7, #32]
 8006172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	69f9      	ldr	r1, [r7, #28]
 8006176:	6a3a      	ldr	r2, [r7, #32]
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	61bb      	str	r3, [r7, #24]
   return(result);
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e5      	bne.n	8006150 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2220      	movs	r2, #32
 800618e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2220      	movs	r2, #32
 8006194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e010      	b.n	80061c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	69da      	ldr	r2, [r3, #28]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4013      	ands	r3, r2
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	bf0c      	ite	eq
 80061b4:	2301      	moveq	r3, #1
 80061b6:	2300      	movne	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	429a      	cmp	r2, r3
 80061c0:	f43f af4a 	beq.w	8006058 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3770      	adds	r7, #112	; 0x70
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <__NVIC_SetPriority>:
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4603      	mov	r3, r0
 80061d8:	6039      	str	r1, [r7, #0]
 80061da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	db0a      	blt.n	80061fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	490c      	ldr	r1, [pc, #48]	; (800621c <__NVIC_SetPriority+0x4c>)
 80061ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ee:	0112      	lsls	r2, r2, #4
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	440b      	add	r3, r1
 80061f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061f8:	e00a      	b.n	8006210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	4908      	ldr	r1, [pc, #32]	; (8006220 <__NVIC_SetPriority+0x50>)
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	3b04      	subs	r3, #4
 8006208:	0112      	lsls	r2, r2, #4
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	440b      	add	r3, r1
 800620e:	761a      	strb	r2, [r3, #24]
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	e000e100 	.word	0xe000e100
 8006220:	e000ed00 	.word	0xe000ed00

08006224 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006228:	4b05      	ldr	r3, [pc, #20]	; (8006240 <SysTick_Handler+0x1c>)
 800622a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800622c:	f001 ff1a 	bl	8008064 <xTaskGetSchedulerState>
 8006230:	4603      	mov	r3, r0
 8006232:	2b01      	cmp	r3, #1
 8006234:	d001      	beq.n	800623a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006236:	f002 fdff 	bl	8008e38 <xPortSysTickHandler>
  }
}
 800623a:	bf00      	nop
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	e000e010 	.word	0xe000e010

08006244 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006248:	2100      	movs	r1, #0
 800624a:	f06f 0004 	mvn.w	r0, #4
 800624e:	f7ff ffbf 	bl	80061d0 <__NVIC_SetPriority>
#endif
}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800625e:	f3ef 8305 	mrs	r3, IPSR
 8006262:	603b      	str	r3, [r7, #0]
  return(result);
 8006264:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800626a:	f06f 0305 	mvn.w	r3, #5
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	e00c      	b.n	800628c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006272:	4b0a      	ldr	r3, [pc, #40]	; (800629c <osKernelInitialize+0x44>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d105      	bne.n	8006286 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800627a:	4b08      	ldr	r3, [pc, #32]	; (800629c <osKernelInitialize+0x44>)
 800627c:	2201      	movs	r2, #1
 800627e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006280:	2300      	movs	r3, #0
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	e002      	b.n	800628c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006286:	f04f 33ff 	mov.w	r3, #4294967295
 800628a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800628c:	687b      	ldr	r3, [r7, #4]
}
 800628e:	4618      	mov	r0, r3
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000250 	.word	0x20000250

080062a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062a6:	f3ef 8305 	mrs	r3, IPSR
 80062aa:	603b      	str	r3, [r7, #0]
  return(result);
 80062ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80062b2:	f06f 0305 	mvn.w	r3, #5
 80062b6:	607b      	str	r3, [r7, #4]
 80062b8:	e010      	b.n	80062dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <osKernelStart+0x48>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d109      	bne.n	80062d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80062c2:	f7ff ffbf 	bl	8006244 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <osKernelStart+0x48>)
 80062c8:	2202      	movs	r2, #2
 80062ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80062cc:	f001 fa82 	bl	80077d4 <vTaskStartScheduler>
      stat = osOK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	607b      	str	r3, [r7, #4]
 80062d4:	e002      	b.n	80062dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80062d6:	f04f 33ff 	mov.w	r3, #4294967295
 80062da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062dc:	687b      	ldr	r3, [r7, #4]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000250 	.word	0x20000250

080062ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08e      	sub	sp, #56	; 0x38
 80062f0:	af04      	add	r7, sp, #16
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062f8:	2300      	movs	r3, #0
 80062fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062fc:	f3ef 8305 	mrs	r3, IPSR
 8006300:	617b      	str	r3, [r7, #20]
  return(result);
 8006302:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006304:	2b00      	cmp	r3, #0
 8006306:	d17e      	bne.n	8006406 <osThreadNew+0x11a>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d07b      	beq.n	8006406 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800630e:	2380      	movs	r3, #128	; 0x80
 8006310:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006312:	2318      	movs	r3, #24
 8006314:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800631a:	f04f 33ff 	mov.w	r3, #4294967295
 800631e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d045      	beq.n	80063b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <osThreadNew+0x48>
        name = attr->name;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <osThreadNew+0x6e>
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	2b38      	cmp	r3, #56	; 0x38
 800634c:	d805      	bhi.n	800635a <osThreadNew+0x6e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <osThreadNew+0x72>
        return (NULL);
 800635a:	2300      	movs	r3, #0
 800635c:	e054      	b.n	8006408 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	089b      	lsrs	r3, r3, #2
 800636c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00e      	beq.n	8006394 <osThreadNew+0xa8>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	2b5b      	cmp	r3, #91	; 0x5b
 800637c:	d90a      	bls.n	8006394 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006382:	2b00      	cmp	r3, #0
 8006384:	d006      	beq.n	8006394 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <osThreadNew+0xa8>
        mem = 1;
 800638e:	2301      	movs	r3, #1
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	e010      	b.n	80063b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10c      	bne.n	80063b6 <osThreadNew+0xca>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d108      	bne.n	80063b6 <osThreadNew+0xca>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <osThreadNew+0xca>
          mem = 0;
 80063ac:	2300      	movs	r3, #0
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	e001      	b.n	80063b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d110      	bne.n	80063de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063c4:	9202      	str	r2, [sp, #8]
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6a3a      	ldr	r2, [r7, #32]
 80063d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f001 f828 	bl	8007428 <xTaskCreateStatic>
 80063d8:	4603      	mov	r3, r0
 80063da:	613b      	str	r3, [r7, #16]
 80063dc:	e013      	b.n	8006406 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d110      	bne.n	8006406 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	f107 0310 	add.w	r3, r7, #16
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f001 f873 	bl	80074e2 <xTaskCreate>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d001      	beq.n	8006406 <osThreadNew+0x11a>
            hTask = NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006406:	693b      	ldr	r3, [r7, #16]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3728      	adds	r7, #40	; 0x28
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006418:	f3ef 8305 	mrs	r3, IPSR
 800641c:	60bb      	str	r3, [r7, #8]
  return(result);
 800641e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <osDelay+0x1c>
    stat = osErrorISR;
 8006424:	f06f 0305 	mvn.w	r3, #5
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	e007      	b.n	800643c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 f998 	bl	800776c <vTaskDelay>
    }
  }

  return (stat);
 800643c:	68fb      	ldr	r3, [r7, #12]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4a07      	ldr	r2, [pc, #28]	; (8006474 <vApplicationGetIdleTaskMemory+0x2c>)
 8006458:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4a06      	ldr	r2, [pc, #24]	; (8006478 <vApplicationGetIdleTaskMemory+0x30>)
 800645e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2280      	movs	r2, #128	; 0x80
 8006464:	601a      	str	r2, [r3, #0]
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	20000254 	.word	0x20000254
 8006478:	200002b0 	.word	0x200002b0

0800647c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4a07      	ldr	r2, [pc, #28]	; (80064a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800648c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4a06      	ldr	r2, [pc, #24]	; (80064ac <vApplicationGetTimerTaskMemory+0x30>)
 8006492:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800649a:	601a      	str	r2, [r3, #0]
}
 800649c:	bf00      	nop
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	200004b0 	.word	0x200004b0
 80064ac:	2000050c 	.word	0x2000050c

080064b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f103 0208 	add.w	r2, r3, #8
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f04f 32ff 	mov.w	r2, #4294967295
 80064c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f103 0208 	add.w	r2, r3, #8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f103 0208 	add.w	r2, r3, #8
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	601a      	str	r2, [r3, #0]
}
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006568:	d103      	bne.n	8006572 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e00c      	b.n	800658c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3308      	adds	r3, #8
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e002      	b.n	8006580 <vListInsert+0x2e>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	429a      	cmp	r2, r3
 800658a:	d2f6      	bcs.n	800657a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	601a      	str	r2, [r3, #0]
}
 80065b8:	bf00      	nop
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6892      	ldr	r2, [r2, #8]
 80065da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6852      	ldr	r2, [r2, #4]
 80065e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d103      	bne.n	80065f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	1e5a      	subs	r2, r3, #1
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006642:	f002 fb67 	bl	8008d14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664e:	68f9      	ldr	r1, [r7, #12]
 8006650:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006652:	fb01 f303 	mul.w	r3, r1, r3
 8006656:	441a      	add	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006672:	3b01      	subs	r3, #1
 8006674:	68f9      	ldr	r1, [r7, #12]
 8006676:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006678:	fb01 f303 	mul.w	r3, r1, r3
 800667c:	441a      	add	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	22ff      	movs	r2, #255	; 0xff
 8006686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	22ff      	movs	r2, #255	; 0xff
 800668e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d114      	bne.n	80066c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01a      	beq.n	80066d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3310      	adds	r3, #16
 80066a4:	4618      	mov	r0, r3
 80066a6:	f001 fb1f 	bl	8007ce8 <xTaskRemoveFromEventList>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d012      	beq.n	80066d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066b0:	4b0c      	ldr	r3, [pc, #48]	; (80066e4 <xQueueGenericReset+0xcc>)
 80066b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	e009      	b.n	80066d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3310      	adds	r3, #16
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff fef2 	bl	80064b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3324      	adds	r3, #36	; 0x24
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff feed 	bl	80064b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066d6:	f002 fb4d 	bl	8008d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066da:	2301      	movs	r3, #1
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	e000ed04 	.word	0xe000ed04

080066e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08e      	sub	sp, #56	; 0x38
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <xQueueGenericCreateStatic+0x52>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <xQueueGenericCreateStatic+0x56>
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <xQueueGenericCreateStatic+0x58>
 800673e:	2300      	movs	r3, #0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10a      	bne.n	800675a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	623b      	str	r3, [r7, #32]
}
 8006756:	bf00      	nop
 8006758:	e7fe      	b.n	8006758 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d102      	bne.n	8006766 <xQueueGenericCreateStatic+0x7e>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <xQueueGenericCreateStatic+0x82>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <xQueueGenericCreateStatic+0x84>
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	61fb      	str	r3, [r7, #28]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006786:	2350      	movs	r3, #80	; 0x50
 8006788:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b50      	cmp	r3, #80	; 0x50
 800678e:	d00a      	beq.n	80067a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	61bb      	str	r3, [r7, #24]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00d      	beq.n	80067ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	4613      	mov	r3, r2
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	68b9      	ldr	r1, [r7, #8]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f83f 	bl	800684c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3730      	adds	r7, #48	; 0x30
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	; 0x28
 80067dc:	af02      	add	r7, sp, #8
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	4613      	mov	r3, r2
 80067e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <xQueueGenericCreate+0x2a>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	613b      	str	r3, [r7, #16]
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	fb02 f303 	mul.w	r3, r2, r3
 800680a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	3350      	adds	r3, #80	; 0x50
 8006810:	4618      	mov	r0, r3
 8006812:	f002 fba1 	bl	8008f58 <pvPortMalloc>
 8006816:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d011      	beq.n	8006842 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	3350      	adds	r3, #80	; 0x50
 8006826:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006830:	79fa      	ldrb	r2, [r7, #7]
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	4613      	mov	r3, r2
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f805 	bl	800684c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006842:	69bb      	ldr	r3, [r7, #24]
	}
 8006844:	4618      	mov	r0, r3
 8006846:	3720      	adds	r7, #32
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d103      	bne.n	8006868 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	e002      	b.n	800686e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800687a:	2101      	movs	r1, #1
 800687c:	69b8      	ldr	r0, [r7, #24]
 800687e:	f7ff fecb 	bl	8006618 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	78fa      	ldrb	r2, [r7, #3]
 8006886:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00e      	beq.n	80068be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80068b2:	2300      	movs	r3, #0
 80068b4:	2200      	movs	r2, #0
 80068b6:	2100      	movs	r1, #0
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f81d 	bl	80068f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b086      	sub	sp, #24
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	4603      	mov	r3, r0
 80068ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80068d0:	2301      	movs	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	461a      	mov	r2, r3
 80068dc:	6939      	ldr	r1, [r7, #16]
 80068de:	6978      	ldr	r0, [r7, #20]
 80068e0:	f7ff ff7a 	bl	80067d8 <xQueueGenericCreate>
 80068e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f7ff ffd3 	bl	8006892 <prvInitialiseMutex>

		return xNewQueue;
 80068ec:	68fb      	ldr	r3, [r7, #12]
	}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08e      	sub	sp, #56	; 0x38
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006906:	2300      	movs	r3, #0
 8006908:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <xQueueGenericSend+0x32>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d103      	bne.n	8006938 <xQueueGenericSend+0x40>
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <xQueueGenericSend+0x44>
 8006938:	2301      	movs	r3, #1
 800693a:	e000      	b.n	800693e <xQueueGenericSend+0x46>
 800693c:	2300      	movs	r3, #0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <xQueueGenericSend+0x60>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d103      	bne.n	8006966 <xQueueGenericSend+0x6e>
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <xQueueGenericSend+0x72>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <xQueueGenericSend+0x74>
 800696a:	2300      	movs	r3, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <xQueueGenericSend+0x8e>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	623b      	str	r3, [r7, #32]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006986:	f001 fb6d 	bl	8008064 <xTaskGetSchedulerState>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d102      	bne.n	8006996 <xQueueGenericSend+0x9e>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <xQueueGenericSend+0xa2>
 8006996:	2301      	movs	r3, #1
 8006998:	e000      	b.n	800699c <xQueueGenericSend+0xa4>
 800699a:	2300      	movs	r3, #0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	61fb      	str	r3, [r7, #28]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069b6:	f002 f9ad 	bl	8008d14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d302      	bcc.n	80069cc <xQueueGenericSend+0xd4>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d129      	bne.n	8006a20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069d2:	f000 fbbb 	bl	800714c <prvCopyDataToQueue>
 80069d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d010      	beq.n	8006a02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	3324      	adds	r3, #36	; 0x24
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 f97f 	bl	8007ce8 <xTaskRemoveFromEventList>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d013      	beq.n	8006a18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069f0:	4b3f      	ldr	r3, [pc, #252]	; (8006af0 <xQueueGenericSend+0x1f8>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	e00a      	b.n	8006a18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a08:	4b39      	ldr	r3, [pc, #228]	; (8006af0 <xQueueGenericSend+0x1f8>)
 8006a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a18:	f002 f9ac 	bl	8008d74 <vPortExitCritical>
				return pdPASS;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e063      	b.n	8006ae8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d103      	bne.n	8006a2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a26:	f002 f9a5 	bl	8008d74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e05c      	b.n	8006ae8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d106      	bne.n	8006a42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a34:	f107 0314 	add.w	r3, r7, #20
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 f9b9 	bl	8007db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a42:	f002 f997 	bl	8008d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a46:	f000 ff2b 	bl	80078a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a4a:	f002 f963 	bl	8008d14 <vPortEnterCritical>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d103      	bne.n	8006a64 <xQueueGenericSend+0x16c>
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a6a:	b25b      	sxtb	r3, r3
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a70:	d103      	bne.n	8006a7a <xQueueGenericSend+0x182>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a7a:	f002 f97b 	bl	8008d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a7e:	1d3a      	adds	r2, r7, #4
 8006a80:	f107 0314 	add.w	r3, r7, #20
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 f9a8 	bl	8007ddc <xTaskCheckForTimeOut>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d124      	bne.n	8006adc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a94:	f000 fc52 	bl	800733c <prvIsQueueFull>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d018      	beq.n	8006ad0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	3310      	adds	r3, #16
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f8ce 	bl	8007c48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aae:	f000 fbdd 	bl	800726c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ab2:	f000 ff03 	bl	80078bc <xTaskResumeAll>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f47f af7c 	bne.w	80069b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <xQueueGenericSend+0x1f8>)
 8006ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	e772      	b.n	80069b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ad2:	f000 fbcb 	bl	800726c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ad6:	f000 fef1 	bl	80078bc <xTaskResumeAll>
 8006ada:	e76c      	b.n	80069b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ade:	f000 fbc5 	bl	800726c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ae2:	f000 feeb 	bl	80078bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3738      	adds	r7, #56	; 0x38
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	e000ed04 	.word	0xe000ed04

08006af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b090      	sub	sp, #64	; 0x40
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <xQueueGenericSendFromISR+0x3c>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <xQueueGenericSendFromISR+0x40>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <xQueueGenericSendFromISR+0x42>
 8006b34:	2300      	movs	r3, #0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d103      	bne.n	8006b5e <xQueueGenericSendFromISR+0x6a>
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <xQueueGenericSendFromISR+0x6e>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <xQueueGenericSendFromISR+0x70>
 8006b62:	2300      	movs	r3, #0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10a      	bne.n	8006b7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	623b      	str	r3, [r7, #32]
}
 8006b7a:	bf00      	nop
 8006b7c:	e7fe      	b.n	8006b7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b7e:	f002 f9ab 	bl	8008ed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b82:	f3ef 8211 	mrs	r2, BASEPRI
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	61fa      	str	r2, [r7, #28]
 8006b98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d302      	bcc.n	8006bb0 <xQueueGenericSendFromISR+0xbc>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d12f      	bne.n	8006c10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bc6:	f000 fac1 	bl	800714c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd2:	d112      	bne.n	8006bfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d016      	beq.n	8006c0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	3324      	adds	r3, #36	; 0x24
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 f881 	bl	8007ce8 <xTaskRemoveFromEventList>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00e      	beq.n	8006c0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	e007      	b.n	8006c0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bfe:	3301      	adds	r3, #1
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	b25a      	sxtb	r2, r3
 8006c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c0e:	e001      	b.n	8006c14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3740      	adds	r7, #64	; 0x40
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b08e      	sub	sp, #56	; 0x38
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	623b      	str	r3, [r7, #32]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	61fb      	str	r3, [r7, #28]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d103      	bne.n	8006c82 <xQueueGiveFromISR+0x58>
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <xQueueGiveFromISR+0x5c>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <xQueueGiveFromISR+0x5e>
 8006c86:	2300      	movs	r3, #0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	61bb      	str	r3, [r7, #24]
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ca2:	f002 f919 	bl	8008ed8 <vPortValidateInterruptPriority>
	__asm volatile
 8006ca6:	f3ef 8211 	mrs	r2, BASEPRI
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	617a      	str	r2, [r7, #20]
 8006cbc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006cbe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d22b      	bcs.n	8006d2a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ce4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cec:	d112      	bne.n	8006d14 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d016      	beq.n	8006d24 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	3324      	adds	r3, #36	; 0x24
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fff4 	bl	8007ce8 <xTaskRemoveFromEventList>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00e      	beq.n	8006d24 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	e007      	b.n	8006d24 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d18:	3301      	adds	r3, #1
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	b25a      	sxtb	r2, r3
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d24:	2301      	movs	r3, #1
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
 8006d28:	e001      	b.n	8006d2e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d30:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f383 8811 	msr	BASEPRI, r3
}
 8006d38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3738      	adds	r7, #56	; 0x38
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08c      	sub	sp, #48	; 0x30
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10a      	bne.n	8006d74 <xQueueReceive+0x30>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	623b      	str	r3, [r7, #32]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <xQueueReceive+0x3e>
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <xQueueReceive+0x42>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e000      	b.n	8006d88 <xQueueReceive+0x44>
 8006d86:	2300      	movs	r3, #0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <xQueueReceive+0x5e>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	61fb      	str	r3, [r7, #28]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006da2:	f001 f95f 	bl	8008064 <xTaskGetSchedulerState>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d102      	bne.n	8006db2 <xQueueReceive+0x6e>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <xQueueReceive+0x72>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <xQueueReceive+0x74>
 8006db6:	2300      	movs	r3, #0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <xQueueReceive+0x8e>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	61bb      	str	r3, [r7, #24]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dd2:	f001 ff9f 	bl	8008d14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01f      	beq.n	8006e22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006de2:	68b9      	ldr	r1, [r7, #8]
 8006de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006de6:	f000 fa1b 	bl	8007220 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	1e5a      	subs	r2, r3, #1
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00f      	beq.n	8006e1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	3310      	adds	r3, #16
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 ff72 	bl	8007ce8 <xTaskRemoveFromEventList>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e0a:	4b3d      	ldr	r3, [pc, #244]	; (8006f00 <xQueueReceive+0x1bc>)
 8006e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e1a:	f001 ffab 	bl	8008d74 <vPortExitCritical>
				return pdPASS;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e069      	b.n	8006ef6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d103      	bne.n	8006e30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e28:	f001 ffa4 	bl	8008d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	e062      	b.n	8006ef6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d106      	bne.n	8006e44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e36:	f107 0310 	add.w	r3, r7, #16
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 ffb8 	bl	8007db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e40:	2301      	movs	r3, #1
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e44:	f001 ff96 	bl	8008d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e48:	f000 fd2a 	bl	80078a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e4c:	f001 ff62 	bl	8008d14 <vPortEnterCritical>
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e56:	b25b      	sxtb	r3, r3
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5c:	d103      	bne.n	8006e66 <xQueueReceive+0x122>
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e6c:	b25b      	sxtb	r3, r3
 8006e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e72:	d103      	bne.n	8006e7c <xQueueReceive+0x138>
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e7c:	f001 ff7a 	bl	8008d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e80:	1d3a      	adds	r2, r7, #4
 8006e82:	f107 0310 	add.w	r3, r7, #16
 8006e86:	4611      	mov	r1, r2
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 ffa7 	bl	8007ddc <xTaskCheckForTimeOut>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d123      	bne.n	8006edc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e96:	f000 fa3b 	bl	8007310 <prvIsQueueEmpty>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d017      	beq.n	8006ed0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	3324      	adds	r3, #36	; 0x24
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fecd 	bl	8007c48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb0:	f000 f9dc 	bl	800726c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006eb4:	f000 fd02 	bl	80078bc <xTaskResumeAll>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d189      	bne.n	8006dd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006ebe:	4b10      	ldr	r3, [pc, #64]	; (8006f00 <xQueueReceive+0x1bc>)
 8006ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	e780      	b.n	8006dd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed2:	f000 f9cb 	bl	800726c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ed6:	f000 fcf1 	bl	80078bc <xTaskResumeAll>
 8006eda:	e77a      	b.n	8006dd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ede:	f000 f9c5 	bl	800726c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ee2:	f000 fceb 	bl	80078bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ee8:	f000 fa12 	bl	8007310 <prvIsQueueEmpty>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f43f af6f 	beq.w	8006dd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ef4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3730      	adds	r7, #48	; 0x30
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08e      	sub	sp, #56	; 0x38
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f16:	2300      	movs	r3, #0
 8006f18:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	623b      	str	r3, [r7, #32]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	61fb      	str	r3, [r7, #28]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f54:	f001 f886 	bl	8008064 <xTaskGetSchedulerState>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d102      	bne.n	8006f64 <xQueueSemaphoreTake+0x60>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <xQueueSemaphoreTake+0x64>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <xQueueSemaphoreTake+0x66>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	61bb      	str	r3, [r7, #24]
}
 8006f80:	bf00      	nop
 8006f82:	e7fe      	b.n	8006f82 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f84:	f001 fec6 	bl	8008d14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d024      	beq.n	8006fde <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	1e5a      	subs	r2, r3, #1
 8006f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006fa4:	f001 f9d4 	bl	8008350 <pvTaskIncrementMutexHeldCount>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00f      	beq.n	8006fd6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb8:	3310      	adds	r3, #16
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fe94 	bl	8007ce8 <xTaskRemoveFromEventList>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d007      	beq.n	8006fd6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fc6:	4b54      	ldr	r3, [pc, #336]	; (8007118 <xQueueSemaphoreTake+0x214>)
 8006fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fd6:	f001 fecd 	bl	8008d74 <vPortExitCritical>
				return pdPASS;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e097      	b.n	800710e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d111      	bne.n	8007008 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	617b      	str	r3, [r7, #20]
}
 8006ffc:	bf00      	nop
 8006ffe:	e7fe      	b.n	8006ffe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007000:	f001 feb8 	bl	8008d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007004:	2300      	movs	r3, #0
 8007006:	e082      	b.n	800710e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700a:	2b00      	cmp	r3, #0
 800700c:	d106      	bne.n	800701c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800700e:	f107 030c 	add.w	r3, r7, #12
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fecc 	bl	8007db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007018:	2301      	movs	r3, #1
 800701a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800701c:	f001 feaa 	bl	8008d74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007020:	f000 fc3e 	bl	80078a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007024:	f001 fe76 	bl	8008d14 <vPortEnterCritical>
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800702e:	b25b      	sxtb	r3, r3
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007034:	d103      	bne.n	800703e <xQueueSemaphoreTake+0x13a>
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007044:	b25b      	sxtb	r3, r3
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d103      	bne.n	8007054 <xQueueSemaphoreTake+0x150>
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007054:	f001 fe8e 	bl	8008d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007058:	463a      	mov	r2, r7
 800705a:	f107 030c 	add.w	r3, r7, #12
 800705e:	4611      	mov	r1, r2
 8007060:	4618      	mov	r0, r3
 8007062:	f000 febb 	bl	8007ddc <xTaskCheckForTimeOut>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d132      	bne.n	80070d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800706c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800706e:	f000 f94f 	bl	8007310 <prvIsQueueEmpty>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d026      	beq.n	80070c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d109      	bne.n	8007094 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007080:	f001 fe48 	bl	8008d14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	4618      	mov	r0, r3
 800708a:	f001 f809 	bl	80080a0 <xTaskPriorityInherit>
 800708e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007090:	f001 fe70 	bl	8008d74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007096:	3324      	adds	r3, #36	; 0x24
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	4611      	mov	r1, r2
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fdd3 	bl	8007c48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a4:	f000 f8e2 	bl	800726c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070a8:	f000 fc08 	bl	80078bc <xTaskResumeAll>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f47f af68 	bne.w	8006f84 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80070b4:	4b18      	ldr	r3, [pc, #96]	; (8007118 <xQueueSemaphoreTake+0x214>)
 80070b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	e75e      	b.n	8006f84 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80070c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070c8:	f000 f8d0 	bl	800726c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070cc:	f000 fbf6 	bl	80078bc <xTaskResumeAll>
 80070d0:	e758      	b.n	8006f84 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80070d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070d4:	f000 f8ca 	bl	800726c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070d8:	f000 fbf0 	bl	80078bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070de:	f000 f917 	bl	8007310 <prvIsQueueEmpty>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f43f af4d 	beq.w	8006f84 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00d      	beq.n	800710c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80070f0:	f001 fe10 	bl	8008d14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070f6:	f000 f811 	bl	800711c <prvGetDisinheritPriorityAfterTimeout>
 80070fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f8a2 	bl	800824c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007108:	f001 fe34 	bl	8008d74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800710c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800710e:	4618      	mov	r0, r3
 8007110:	3738      	adds	r7, #56	; 0x38
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	e000ed04 	.word	0xe000ed04

0800711c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	d006      	beq.n	800713a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	e001      	b.n	800713e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800713e:	68fb      	ldr	r3, [r7, #12]
	}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007160:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10d      	bne.n	8007186 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d14d      	bne.n	800720e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fffa 	bl	8008170 <xTaskPriorityDisinherit>
 800717c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	609a      	str	r2, [r3, #8]
 8007184:	e043      	b.n	800720e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d119      	bne.n	80071c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6858      	ldr	r0, [r3, #4]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007194:	461a      	mov	r2, r3
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	f002 f974 	bl	8009484 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	441a      	add	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d32b      	bcc.n	800720e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	e026      	b.n	800720e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68d8      	ldr	r0, [r3, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c8:	461a      	mov	r2, r3
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	f002 f95a 	bl	8009484 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	425b      	negs	r3, r3
 80071da:	441a      	add	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d207      	bcs.n	80071fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f4:	425b      	negs	r3, r3
 80071f6:	441a      	add	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d105      	bne.n	800720e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	3b01      	subs	r3, #1
 800720c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007216:	697b      	ldr	r3, [r7, #20]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	2b00      	cmp	r3, #0
 8007230:	d018      	beq.n	8007264 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	441a      	add	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	d303      	bcc.n	8007254 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68d9      	ldr	r1, [r3, #12]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725c:	461a      	mov	r2, r3
 800725e:	6838      	ldr	r0, [r7, #0]
 8007260:	f002 f910 	bl	8009484 <memcpy>
	}
}
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007274:	f001 fd4e 	bl	8008d14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800727e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007280:	e011      	b.n	80072a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	d012      	beq.n	80072b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3324      	adds	r3, #36	; 0x24
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fd2a 	bl	8007ce8 <xTaskRemoveFromEventList>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800729a:	f000 fe01 	bl	8007ea0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	dce9      	bgt.n	8007282 <prvUnlockQueue+0x16>
 80072ae:	e000      	b.n	80072b2 <prvUnlockQueue+0x46>
					break;
 80072b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	22ff      	movs	r2, #255	; 0xff
 80072b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80072ba:	f001 fd5b 	bl	8008d74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072be:	f001 fd29 	bl	8008d14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072ca:	e011      	b.n	80072f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d012      	beq.n	80072fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3310      	adds	r3, #16
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fd05 	bl	8007ce8 <xTaskRemoveFromEventList>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072e4:	f000 fddc 	bl	8007ea0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dce9      	bgt.n	80072cc <prvUnlockQueue+0x60>
 80072f8:	e000      	b.n	80072fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	22ff      	movs	r2, #255	; 0xff
 8007300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007304:	f001 fd36 	bl	8008d74 <vPortExitCritical>
}
 8007308:	bf00      	nop
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007318:	f001 fcfc 	bl	8008d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	2b00      	cmp	r3, #0
 8007322:	d102      	bne.n	800732a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007324:	2301      	movs	r3, #1
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e001      	b.n	800732e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800732e:	f001 fd21 	bl	8008d74 <vPortExitCritical>

	return xReturn;
 8007332:	68fb      	ldr	r3, [r7, #12]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007344:	f001 fce6 	bl	8008d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007350:	429a      	cmp	r2, r3
 8007352:	d102      	bne.n	800735a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007354:	2301      	movs	r3, #1
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e001      	b.n	800735e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800735e:	f001 fd09 	bl	8008d74 <vPortExitCritical>

	return xReturn;
 8007362:	68fb      	ldr	r3, [r7, #12]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	e014      	b.n	80073a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800737c:	4a0f      	ldr	r2, [pc, #60]	; (80073bc <vQueueAddToRegistry+0x50>)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10b      	bne.n	80073a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007388:	490c      	ldr	r1, [pc, #48]	; (80073bc <vQueueAddToRegistry+0x50>)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007392:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <vQueueAddToRegistry+0x50>)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	4413      	add	r3, r2
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800739e:	e006      	b.n	80073ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b07      	cmp	r3, #7
 80073aa:	d9e7      	bls.n	800737c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	2000090c 	.word	0x2000090c

080073c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073d0:	f001 fca0 	bl	8008d14 <vPortEnterCritical>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073da:	b25b      	sxtb	r3, r3
 80073dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e0:	d103      	bne.n	80073ea <vQueueWaitForMessageRestricted+0x2a>
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073f0:	b25b      	sxtb	r3, r3
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f6:	d103      	bne.n	8007400 <vQueueWaitForMessageRestricted+0x40>
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007400:	f001 fcb8 	bl	8008d74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	3324      	adds	r3, #36	; 0x24
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fc3b 	bl	8007c90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800741a:	6978      	ldr	r0, [r7, #20]
 800741c:	f7ff ff26 	bl	800726c <prvUnlockQueue>
	}
 8007420:	bf00      	nop
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08e      	sub	sp, #56	; 0x38
 800742c:	af04      	add	r7, sp, #16
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <xTaskCreateStatic+0x2a>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	623b      	str	r3, [r7, #32]
}
 800744e:	bf00      	nop
 8007450:	e7fe      	b.n	8007450 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <xTaskCreateStatic+0x46>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	61fb      	str	r3, [r7, #28]
}
 800746a:	bf00      	nop
 800746c:	e7fe      	b.n	800746c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800746e:	235c      	movs	r3, #92	; 0x5c
 8007470:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2b5c      	cmp	r3, #92	; 0x5c
 8007476:	d00a      	beq.n	800748e <xTaskCreateStatic+0x66>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	61bb      	str	r3, [r7, #24]
}
 800748a:	bf00      	nop
 800748c:	e7fe      	b.n	800748c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800748e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01e      	beq.n	80074d4 <xTaskCreateStatic+0xac>
 8007496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01b      	beq.n	80074d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800749c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	2202      	movs	r2, #2
 80074aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074ae:	2300      	movs	r3, #0
 80074b0:	9303      	str	r3, [sp, #12]
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	9302      	str	r3, [sp, #8]
 80074b6:	f107 0314 	add.w	r3, r7, #20
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 f850 	bl	800756c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074ce:	f000 f8dd 	bl	800768c <prvAddNewTaskToReadyList>
 80074d2:	e001      	b.n	80074d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074d8:	697b      	ldr	r3, [r7, #20]
	}
 80074da:	4618      	mov	r0, r3
 80074dc:	3728      	adds	r7, #40	; 0x28
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b08c      	sub	sp, #48	; 0x30
 80074e6:	af04      	add	r7, sp, #16
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 fd2e 	bl	8008f58 <pvPortMalloc>
 80074fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00e      	beq.n	8007522 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007504:	205c      	movs	r0, #92	; 0x5c
 8007506:	f001 fd27 	bl	8008f58 <pvPortMalloc>
 800750a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	631a      	str	r2, [r3, #48]	; 0x30
 8007518:	e005      	b.n	8007526 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800751a:	6978      	ldr	r0, [r7, #20]
 800751c:	f001 fde8 	bl	80090f0 <vPortFree>
 8007520:	e001      	b.n	8007526 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d017      	beq.n	800755c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007534:	88fa      	ldrh	r2, [r7, #6]
 8007536:	2300      	movs	r3, #0
 8007538:	9303      	str	r3, [sp, #12]
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	9302      	str	r3, [sp, #8]
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68b9      	ldr	r1, [r7, #8]
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 f80e 	bl	800756c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007550:	69f8      	ldr	r0, [r7, #28]
 8007552:	f000 f89b 	bl	800768c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007556:	2301      	movs	r3, #1
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	e002      	b.n	8007562 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800755c:	f04f 33ff 	mov.w	r3, #4294967295
 8007560:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007562:	69bb      	ldr	r3, [r7, #24]
	}
 8007564:	4618      	mov	r0, r3
 8007566:	3720      	adds	r7, #32
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	461a      	mov	r2, r3
 8007584:	21a5      	movs	r1, #165	; 0xa5
 8007586:	f001 ff8b 	bl	80094a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007594:	3b01      	subs	r3, #1
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	f023 0307 	bic.w	r3, r3, #7
 80075a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	617b      	str	r3, [r7, #20]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01f      	beq.n	800760a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075ca:	2300      	movs	r3, #0
 80075cc:	61fb      	str	r3, [r7, #28]
 80075ce:	e012      	b.n	80075f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	7819      	ldrb	r1, [r3, #0]
 80075d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	3334      	adds	r3, #52	; 0x34
 80075e0:	460a      	mov	r2, r1
 80075e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	4413      	add	r3, r2
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d006      	beq.n	80075fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	3301      	adds	r3, #1
 80075f4:	61fb      	str	r3, [r7, #28]
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	2b0f      	cmp	r3, #15
 80075fa:	d9e9      	bls.n	80075d0 <prvInitialiseNewTask+0x64>
 80075fc:	e000      	b.n	8007600 <prvInitialiseNewTask+0x94>
			{
				break;
 80075fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007608:	e003      	b.n	8007612 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	2b37      	cmp	r3, #55	; 0x37
 8007616:	d901      	bls.n	800761c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007618:	2337      	movs	r3, #55	; 0x37
 800761a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007620:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007626:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	2200      	movs	r2, #0
 800762c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	3304      	adds	r3, #4
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe ff5c 	bl	80064f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	3318      	adds	r3, #24
 800763c:	4618      	mov	r0, r3
 800763e:	f7fe ff57 	bl	80064f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007646:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007656:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	2200      	movs	r2, #0
 800765c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	68f9      	ldr	r1, [r7, #12]
 800766a:	69b8      	ldr	r0, [r7, #24]
 800766c:	f001 fa26 	bl	8008abc <pxPortInitialiseStack>
 8007670:	4602      	mov	r2, r0
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007682:	bf00      	nop
 8007684:	3720      	adds	r7, #32
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007694:	f001 fb3e 	bl	8008d14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007698:	4b2d      	ldr	r3, [pc, #180]	; (8007750 <prvAddNewTaskToReadyList+0xc4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3301      	adds	r3, #1
 800769e:	4a2c      	ldr	r2, [pc, #176]	; (8007750 <prvAddNewTaskToReadyList+0xc4>)
 80076a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076a2:	4b2c      	ldr	r3, [pc, #176]	; (8007754 <prvAddNewTaskToReadyList+0xc8>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076aa:	4a2a      	ldr	r2, [pc, #168]	; (8007754 <prvAddNewTaskToReadyList+0xc8>)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076b0:	4b27      	ldr	r3, [pc, #156]	; (8007750 <prvAddNewTaskToReadyList+0xc4>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d110      	bne.n	80076da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076b8:	f000 fc16 	bl	8007ee8 <prvInitialiseTaskLists>
 80076bc:	e00d      	b.n	80076da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076be:	4b26      	ldr	r3, [pc, #152]	; (8007758 <prvAddNewTaskToReadyList+0xcc>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076c6:	4b23      	ldr	r3, [pc, #140]	; (8007754 <prvAddNewTaskToReadyList+0xc8>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d802      	bhi.n	80076da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076d4:	4a1f      	ldr	r2, [pc, #124]	; (8007754 <prvAddNewTaskToReadyList+0xc8>)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076da:	4b20      	ldr	r3, [pc, #128]	; (800775c <prvAddNewTaskToReadyList+0xd0>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3301      	adds	r3, #1
 80076e0:	4a1e      	ldr	r2, [pc, #120]	; (800775c <prvAddNewTaskToReadyList+0xd0>)
 80076e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076e4:	4b1d      	ldr	r3, [pc, #116]	; (800775c <prvAddNewTaskToReadyList+0xd0>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	4b1b      	ldr	r3, [pc, #108]	; (8007760 <prvAddNewTaskToReadyList+0xd4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d903      	bls.n	8007700 <prvAddNewTaskToReadyList+0x74>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	4a18      	ldr	r2, [pc, #96]	; (8007760 <prvAddNewTaskToReadyList+0xd4>)
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007704:	4613      	mov	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4a15      	ldr	r2, [pc, #84]	; (8007764 <prvAddNewTaskToReadyList+0xd8>)
 800770e:	441a      	add	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3304      	adds	r3, #4
 8007714:	4619      	mov	r1, r3
 8007716:	4610      	mov	r0, r2
 8007718:	f7fe fef7 	bl	800650a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800771c:	f001 fb2a 	bl	8008d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007720:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <prvAddNewTaskToReadyList+0xcc>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00e      	beq.n	8007746 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007728:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <prvAddNewTaskToReadyList+0xc8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007732:	429a      	cmp	r2, r3
 8007734:	d207      	bcs.n	8007746 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007736:	4b0c      	ldr	r3, [pc, #48]	; (8007768 <prvAddNewTaskToReadyList+0xdc>)
 8007738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007746:	bf00      	nop
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	20000e20 	.word	0x20000e20
 8007754:	2000094c 	.word	0x2000094c
 8007758:	20000e2c 	.word	0x20000e2c
 800775c:	20000e3c 	.word	0x20000e3c
 8007760:	20000e28 	.word	0x20000e28
 8007764:	20000950 	.word	0x20000950
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007774:	2300      	movs	r3, #0
 8007776:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d017      	beq.n	80077ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800777e:	4b13      	ldr	r3, [pc, #76]	; (80077cc <vTaskDelay+0x60>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00a      	beq.n	800779c <vTaskDelay+0x30>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	60bb      	str	r3, [r7, #8]
}
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800779c:	f000 f880 	bl	80078a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077a0:	2100      	movs	r1, #0
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fde8 	bl	8008378 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077a8:	f000 f888 	bl	80078bc <xTaskResumeAll>
 80077ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d107      	bne.n	80077c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80077b4:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <vTaskDelay+0x64>)
 80077b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20000e48 	.word	0x20000e48
 80077d0:	e000ed04 	.word	0xe000ed04

080077d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08a      	sub	sp, #40	; 0x28
 80077d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077e2:	463a      	mov	r2, r7
 80077e4:	1d39      	adds	r1, r7, #4
 80077e6:	f107 0308 	add.w	r3, r7, #8
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fe2c 	bl	8006448 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	9202      	str	r2, [sp, #8]
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	2300      	movs	r3, #0
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	2300      	movs	r3, #0
 8007800:	460a      	mov	r2, r1
 8007802:	4921      	ldr	r1, [pc, #132]	; (8007888 <vTaskStartScheduler+0xb4>)
 8007804:	4821      	ldr	r0, [pc, #132]	; (800788c <vTaskStartScheduler+0xb8>)
 8007806:	f7ff fe0f 	bl	8007428 <xTaskCreateStatic>
 800780a:	4603      	mov	r3, r0
 800780c:	4a20      	ldr	r2, [pc, #128]	; (8007890 <vTaskStartScheduler+0xbc>)
 800780e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007810:	4b1f      	ldr	r3, [pc, #124]	; (8007890 <vTaskStartScheduler+0xbc>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007818:	2301      	movs	r3, #1
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	e001      	b.n	8007822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d102      	bne.n	800782e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007828:	f000 fdfa 	bl	8008420 <xTimerCreateTimerTask>
 800782c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d116      	bne.n	8007862 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	613b      	str	r3, [r7, #16]
}
 8007846:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007848:	4b12      	ldr	r3, [pc, #72]	; (8007894 <vTaskStartScheduler+0xc0>)
 800784a:	f04f 32ff 	mov.w	r2, #4294967295
 800784e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007850:	4b11      	ldr	r3, [pc, #68]	; (8007898 <vTaskStartScheduler+0xc4>)
 8007852:	2201      	movs	r2, #1
 8007854:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007856:	4b11      	ldr	r3, [pc, #68]	; (800789c <vTaskStartScheduler+0xc8>)
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800785c:	f001 f9b8 	bl	8008bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007860:	e00e      	b.n	8007880 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007868:	d10a      	bne.n	8007880 <vTaskStartScheduler+0xac>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	60fb      	str	r3, [r7, #12]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <vTaskStartScheduler+0xaa>
}
 8007880:	bf00      	nop
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	0800b518 	.word	0x0800b518
 800788c:	08007eb9 	.word	0x08007eb9
 8007890:	20000e44 	.word	0x20000e44
 8007894:	20000e40 	.word	0x20000e40
 8007898:	20000e2c 	.word	0x20000e2c
 800789c:	20000e24 	.word	0x20000e24

080078a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078a4:	4b04      	ldr	r3, [pc, #16]	; (80078b8 <vTaskSuspendAll+0x18>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	4a03      	ldr	r2, [pc, #12]	; (80078b8 <vTaskSuspendAll+0x18>)
 80078ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078ae:	bf00      	nop
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	20000e48 	.word	0x20000e48

080078bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078ca:	4b42      	ldr	r3, [pc, #264]	; (80079d4 <xTaskResumeAll+0x118>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	603b      	str	r3, [r7, #0]
}
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078e8:	f001 fa14 	bl	8008d14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078ec:	4b39      	ldr	r3, [pc, #228]	; (80079d4 <xTaskResumeAll+0x118>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	4a38      	ldr	r2, [pc, #224]	; (80079d4 <xTaskResumeAll+0x118>)
 80078f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f6:	4b37      	ldr	r3, [pc, #220]	; (80079d4 <xTaskResumeAll+0x118>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d162      	bne.n	80079c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078fe:	4b36      	ldr	r3, [pc, #216]	; (80079d8 <xTaskResumeAll+0x11c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d05e      	beq.n	80079c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007906:	e02f      	b.n	8007968 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007908:	4b34      	ldr	r3, [pc, #208]	; (80079dc <xTaskResumeAll+0x120>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3318      	adds	r3, #24
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe fe55 	bl	80065c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3304      	adds	r3, #4
 800791e:	4618      	mov	r0, r3
 8007920:	f7fe fe50 	bl	80065c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007928:	4b2d      	ldr	r3, [pc, #180]	; (80079e0 <xTaskResumeAll+0x124>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	429a      	cmp	r2, r3
 800792e:	d903      	bls.n	8007938 <xTaskResumeAll+0x7c>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	4a2a      	ldr	r2, [pc, #168]	; (80079e0 <xTaskResumeAll+0x124>)
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793c:	4613      	mov	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4a27      	ldr	r2, [pc, #156]	; (80079e4 <xTaskResumeAll+0x128>)
 8007946:	441a      	add	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3304      	adds	r3, #4
 800794c:	4619      	mov	r1, r3
 800794e:	4610      	mov	r0, r2
 8007950:	f7fe fddb 	bl	800650a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007958:	4b23      	ldr	r3, [pc, #140]	; (80079e8 <xTaskResumeAll+0x12c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	429a      	cmp	r2, r3
 8007960:	d302      	bcc.n	8007968 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007962:	4b22      	ldr	r3, [pc, #136]	; (80079ec <xTaskResumeAll+0x130>)
 8007964:	2201      	movs	r2, #1
 8007966:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007968:	4b1c      	ldr	r3, [pc, #112]	; (80079dc <xTaskResumeAll+0x120>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1cb      	bne.n	8007908 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007976:	f000 fb55 	bl	8008024 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800797a:	4b1d      	ldr	r3, [pc, #116]	; (80079f0 <xTaskResumeAll+0x134>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d010      	beq.n	80079a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007986:	f000 f847 	bl	8007a18 <xTaskIncrementTick>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007990:	4b16      	ldr	r3, [pc, #88]	; (80079ec <xTaskResumeAll+0x130>)
 8007992:	2201      	movs	r2, #1
 8007994:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3b01      	subs	r3, #1
 800799a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1f1      	bne.n	8007986 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80079a2:	4b13      	ldr	r3, [pc, #76]	; (80079f0 <xTaskResumeAll+0x134>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079a8:	4b10      	ldr	r3, [pc, #64]	; (80079ec <xTaskResumeAll+0x130>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d009      	beq.n	80079c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079b0:	2301      	movs	r3, #1
 80079b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079b4:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <xTaskResumeAll+0x138>)
 80079b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079c4:	f001 f9d6 	bl	8008d74 <vPortExitCritical>

	return xAlreadyYielded;
 80079c8:	68bb      	ldr	r3, [r7, #8]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20000e48 	.word	0x20000e48
 80079d8:	20000e20 	.word	0x20000e20
 80079dc:	20000de0 	.word	0x20000de0
 80079e0:	20000e28 	.word	0x20000e28
 80079e4:	20000950 	.word	0x20000950
 80079e8:	2000094c 	.word	0x2000094c
 80079ec:	20000e34 	.word	0x20000e34
 80079f0:	20000e30 	.word	0x20000e30
 80079f4:	e000ed04 	.word	0xe000ed04

080079f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079fe:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <xTaskGetTickCount+0x1c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a04:	687b      	ldr	r3, [r7, #4]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	20000e24 	.word	0x20000e24

08007a18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a22:	4b4f      	ldr	r3, [pc, #316]	; (8007b60 <xTaskIncrementTick+0x148>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f040 808f 	bne.w	8007b4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a2c:	4b4d      	ldr	r3, [pc, #308]	; (8007b64 <xTaskIncrementTick+0x14c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3301      	adds	r3, #1
 8007a32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a34:	4a4b      	ldr	r2, [pc, #300]	; (8007b64 <xTaskIncrementTick+0x14c>)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d120      	bne.n	8007a82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a40:	4b49      	ldr	r3, [pc, #292]	; (8007b68 <xTaskIncrementTick+0x150>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	603b      	str	r3, [r7, #0]
}
 8007a5c:	bf00      	nop
 8007a5e:	e7fe      	b.n	8007a5e <xTaskIncrementTick+0x46>
 8007a60:	4b41      	ldr	r3, [pc, #260]	; (8007b68 <xTaskIncrementTick+0x150>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	4b41      	ldr	r3, [pc, #260]	; (8007b6c <xTaskIncrementTick+0x154>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a3f      	ldr	r2, [pc, #252]	; (8007b68 <xTaskIncrementTick+0x150>)
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	4a3f      	ldr	r2, [pc, #252]	; (8007b6c <xTaskIncrementTick+0x154>)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	4b3e      	ldr	r3, [pc, #248]	; (8007b70 <xTaskIncrementTick+0x158>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	4a3d      	ldr	r2, [pc, #244]	; (8007b70 <xTaskIncrementTick+0x158>)
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	f000 fad1 	bl	8008024 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a82:	4b3c      	ldr	r3, [pc, #240]	; (8007b74 <xTaskIncrementTick+0x15c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d349      	bcc.n	8007b20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a8c:	4b36      	ldr	r3, [pc, #216]	; (8007b68 <xTaskIncrementTick+0x150>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d104      	bne.n	8007aa0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a96:	4b37      	ldr	r3, [pc, #220]	; (8007b74 <xTaskIncrementTick+0x15c>)
 8007a98:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9c:	601a      	str	r2, [r3, #0]
					break;
 8007a9e:	e03f      	b.n	8007b20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa0:	4b31      	ldr	r3, [pc, #196]	; (8007b68 <xTaskIncrementTick+0x150>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d203      	bcs.n	8007ac0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ab8:	4a2e      	ldr	r2, [pc, #184]	; (8007b74 <xTaskIncrementTick+0x15c>)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007abe:	e02f      	b.n	8007b20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fe fd7d 	bl	80065c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	3318      	adds	r3, #24
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe fd74 	bl	80065c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae0:	4b25      	ldr	r3, [pc, #148]	; (8007b78 <xTaskIncrementTick+0x160>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d903      	bls.n	8007af0 <xTaskIncrementTick+0xd8>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	4a22      	ldr	r2, [pc, #136]	; (8007b78 <xTaskIncrementTick+0x160>)
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4a1f      	ldr	r2, [pc, #124]	; (8007b7c <xTaskIncrementTick+0x164>)
 8007afe:	441a      	add	r2, r3
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f7fe fcff 	bl	800650a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b10:	4b1b      	ldr	r3, [pc, #108]	; (8007b80 <xTaskIncrementTick+0x168>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d3b8      	bcc.n	8007a8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b1e:	e7b5      	b.n	8007a8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b20:	4b17      	ldr	r3, [pc, #92]	; (8007b80 <xTaskIncrementTick+0x168>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b26:	4915      	ldr	r1, [pc, #84]	; (8007b7c <xTaskIncrementTick+0x164>)
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	440b      	add	r3, r1
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d901      	bls.n	8007b3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b3c:	4b11      	ldr	r3, [pc, #68]	; (8007b84 <xTaskIncrementTick+0x16c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d007      	beq.n	8007b54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b44:	2301      	movs	r3, #1
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	e004      	b.n	8007b54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b4a:	4b0f      	ldr	r3, [pc, #60]	; (8007b88 <xTaskIncrementTick+0x170>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	4a0d      	ldr	r2, [pc, #52]	; (8007b88 <xTaskIncrementTick+0x170>)
 8007b52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b54:	697b      	ldr	r3, [r7, #20]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000e48 	.word	0x20000e48
 8007b64:	20000e24 	.word	0x20000e24
 8007b68:	20000dd8 	.word	0x20000dd8
 8007b6c:	20000ddc 	.word	0x20000ddc
 8007b70:	20000e38 	.word	0x20000e38
 8007b74:	20000e40 	.word	0x20000e40
 8007b78:	20000e28 	.word	0x20000e28
 8007b7c:	20000950 	.word	0x20000950
 8007b80:	2000094c 	.word	0x2000094c
 8007b84:	20000e34 	.word	0x20000e34
 8007b88:	20000e30 	.word	0x20000e30

08007b8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b92:	4b28      	ldr	r3, [pc, #160]	; (8007c34 <vTaskSwitchContext+0xa8>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b9a:	4b27      	ldr	r3, [pc, #156]	; (8007c38 <vTaskSwitchContext+0xac>)
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ba0:	e041      	b.n	8007c26 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007ba2:	4b25      	ldr	r3, [pc, #148]	; (8007c38 <vTaskSwitchContext+0xac>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba8:	4b24      	ldr	r3, [pc, #144]	; (8007c3c <vTaskSwitchContext+0xb0>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	e010      	b.n	8007bd2 <vTaskSwitchContext+0x46>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10a      	bne.n	8007bcc <vTaskSwitchContext+0x40>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	607b      	str	r3, [r7, #4]
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <vTaskSwitchContext+0x3e>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	491b      	ldr	r1, [pc, #108]	; (8007c40 <vTaskSwitchContext+0xb4>)
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	440b      	add	r3, r1
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0e4      	beq.n	8007bb0 <vTaskSwitchContext+0x24>
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4a13      	ldr	r2, [pc, #76]	; (8007c40 <vTaskSwitchContext+0xb4>)
 8007bf2:	4413      	add	r3, r2
 8007bf4:	60bb      	str	r3, [r7, #8]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	605a      	str	r2, [r3, #4]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	3308      	adds	r3, #8
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d104      	bne.n	8007c16 <vTaskSwitchContext+0x8a>
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	605a      	str	r2, [r3, #4]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	4a09      	ldr	r2, [pc, #36]	; (8007c44 <vTaskSwitchContext+0xb8>)
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	4a06      	ldr	r2, [pc, #24]	; (8007c3c <vTaskSwitchContext+0xb0>)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6013      	str	r3, [r2, #0]
}
 8007c26:	bf00      	nop
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	20000e48 	.word	0x20000e48
 8007c38:	20000e34 	.word	0x20000e34
 8007c3c:	20000e28 	.word	0x20000e28
 8007c40:	20000950 	.word	0x20000950
 8007c44:	2000094c 	.word	0x2000094c

08007c48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10a      	bne.n	8007c6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5c:	f383 8811 	msr	BASEPRI, r3
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	60fb      	str	r3, [r7, #12]
}
 8007c6a:	bf00      	nop
 8007c6c:	e7fe      	b.n	8007c6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c6e:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <vTaskPlaceOnEventList+0x44>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3318      	adds	r3, #24
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7fe fc6b 	bl	8006552 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	6838      	ldr	r0, [r7, #0]
 8007c80:	f000 fb7a 	bl	8008378 <prvAddCurrentTaskToDelayedList>
}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	2000094c 	.word	0x2000094c

08007c90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	617b      	str	r3, [r7, #20]
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cb8:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <vTaskPlaceOnEventListRestricted+0x54>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3318      	adds	r3, #24
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7fe fc22 	bl	800650a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	68b8      	ldr	r0, [r7, #8]
 8007cd6:	f000 fb4f 	bl	8008378 <prvAddCurrentTaskToDelayedList>
	}
 8007cda:	bf00      	nop
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	2000094c 	.word	0x2000094c

08007ce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	60fb      	str	r3, [r7, #12]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	3318      	adds	r3, #24
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fe fc53 	bl	80065c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d1e:	4b1e      	ldr	r3, [pc, #120]	; (8007d98 <xTaskRemoveFromEventList+0xb0>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d11d      	bne.n	8007d62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fc4a 	bl	80065c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d34:	4b19      	ldr	r3, [pc, #100]	; (8007d9c <xTaskRemoveFromEventList+0xb4>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d903      	bls.n	8007d44 <xTaskRemoveFromEventList+0x5c>
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	4a16      	ldr	r2, [pc, #88]	; (8007d9c <xTaskRemoveFromEventList+0xb4>)
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4a13      	ldr	r2, [pc, #76]	; (8007da0 <xTaskRemoveFromEventList+0xb8>)
 8007d52:	441a      	add	r2, r3
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	f7fe fbd5 	bl	800650a <vListInsertEnd>
 8007d60:	e005      	b.n	8007d6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	3318      	adds	r3, #24
 8007d66:	4619      	mov	r1, r3
 8007d68:	480e      	ldr	r0, [pc, #56]	; (8007da4 <xTaskRemoveFromEventList+0xbc>)
 8007d6a:	f7fe fbce 	bl	800650a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d72:	4b0d      	ldr	r3, [pc, #52]	; (8007da8 <xTaskRemoveFromEventList+0xc0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d905      	bls.n	8007d88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <xTaskRemoveFromEventList+0xc4>)
 8007d82:	2201      	movs	r2, #1
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	e001      	b.n	8007d8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d8c:	697b      	ldr	r3, [r7, #20]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20000e48 	.word	0x20000e48
 8007d9c:	20000e28 	.word	0x20000e28
 8007da0:	20000950 	.word	0x20000950
 8007da4:	20000de0 	.word	0x20000de0
 8007da8:	2000094c 	.word	0x2000094c
 8007dac:	20000e34 	.word	0x20000e34

08007db0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007db8:	4b06      	ldr	r3, [pc, #24]	; (8007dd4 <vTaskInternalSetTimeOutState+0x24>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007dc0:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <vTaskInternalSetTimeOutState+0x28>)
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	605a      	str	r2, [r3, #4]
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	20000e38 	.word	0x20000e38
 8007dd8:	20000e24 	.word	0x20000e24

08007ddc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	613b      	str	r3, [r7, #16]
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	60fb      	str	r3, [r7, #12]
}
 8007e1a:	bf00      	nop
 8007e1c:	e7fe      	b.n	8007e1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e1e:	f000 ff79 	bl	8008d14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e22:	4b1d      	ldr	r3, [pc, #116]	; (8007e98 <xTaskCheckForTimeOut+0xbc>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3a:	d102      	bne.n	8007e42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61fb      	str	r3, [r7, #28]
 8007e40:	e023      	b.n	8007e8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	4b15      	ldr	r3, [pc, #84]	; (8007e9c <xTaskCheckForTimeOut+0xc0>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d007      	beq.n	8007e5e <xTaskCheckForTimeOut+0x82>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d302      	bcc.n	8007e5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	61fb      	str	r3, [r7, #28]
 8007e5c:	e015      	b.n	8007e8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d20b      	bcs.n	8007e80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff ff9b 	bl	8007db0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	61fb      	str	r3, [r7, #28]
 8007e7e:	e004      	b.n	8007e8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e86:	2301      	movs	r3, #1
 8007e88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e8a:	f000 ff73 	bl	8008d74 <vPortExitCritical>

	return xReturn;
 8007e8e:	69fb      	ldr	r3, [r7, #28]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3720      	adds	r7, #32
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	20000e24 	.word	0x20000e24
 8007e9c:	20000e38 	.word	0x20000e38

08007ea0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ea4:	4b03      	ldr	r3, [pc, #12]	; (8007eb4 <vTaskMissedYield+0x14>)
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]
}
 8007eaa:	bf00      	nop
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	20000e34 	.word	0x20000e34

08007eb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ec0:	f000 f852 	bl	8007f68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ec4:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <prvIdleTask+0x28>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d9f9      	bls.n	8007ec0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <prvIdleTask+0x2c>)
 8007ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007edc:	e7f0      	b.n	8007ec0 <prvIdleTask+0x8>
 8007ede:	bf00      	nop
 8007ee0:	20000950 	.word	0x20000950
 8007ee4:	e000ed04 	.word	0xe000ed04

08007ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eee:	2300      	movs	r3, #0
 8007ef0:	607b      	str	r3, [r7, #4]
 8007ef2:	e00c      	b.n	8007f0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4a12      	ldr	r2, [pc, #72]	; (8007f48 <prvInitialiseTaskLists+0x60>)
 8007f00:	4413      	add	r3, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fad4 	bl	80064b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	607b      	str	r3, [r7, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b37      	cmp	r3, #55	; 0x37
 8007f12:	d9ef      	bls.n	8007ef4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f14:	480d      	ldr	r0, [pc, #52]	; (8007f4c <prvInitialiseTaskLists+0x64>)
 8007f16:	f7fe facb 	bl	80064b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f1a:	480d      	ldr	r0, [pc, #52]	; (8007f50 <prvInitialiseTaskLists+0x68>)
 8007f1c:	f7fe fac8 	bl	80064b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f20:	480c      	ldr	r0, [pc, #48]	; (8007f54 <prvInitialiseTaskLists+0x6c>)
 8007f22:	f7fe fac5 	bl	80064b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f26:	480c      	ldr	r0, [pc, #48]	; (8007f58 <prvInitialiseTaskLists+0x70>)
 8007f28:	f7fe fac2 	bl	80064b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f2c:	480b      	ldr	r0, [pc, #44]	; (8007f5c <prvInitialiseTaskLists+0x74>)
 8007f2e:	f7fe fabf 	bl	80064b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f32:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <prvInitialiseTaskLists+0x78>)
 8007f34:	4a05      	ldr	r2, [pc, #20]	; (8007f4c <prvInitialiseTaskLists+0x64>)
 8007f36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f38:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <prvInitialiseTaskLists+0x7c>)
 8007f3a:	4a05      	ldr	r2, [pc, #20]	; (8007f50 <prvInitialiseTaskLists+0x68>)
 8007f3c:	601a      	str	r2, [r3, #0]
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20000950 	.word	0x20000950
 8007f4c:	20000db0 	.word	0x20000db0
 8007f50:	20000dc4 	.word	0x20000dc4
 8007f54:	20000de0 	.word	0x20000de0
 8007f58:	20000df4 	.word	0x20000df4
 8007f5c:	20000e0c 	.word	0x20000e0c
 8007f60:	20000dd8 	.word	0x20000dd8
 8007f64:	20000ddc 	.word	0x20000ddc

08007f68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f6e:	e019      	b.n	8007fa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f70:	f000 fed0 	bl	8008d14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f74:	4b10      	ldr	r3, [pc, #64]	; (8007fb8 <prvCheckTasksWaitingTermination+0x50>)
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fb1f 	bl	80065c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f86:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <prvCheckTasksWaitingTermination+0x54>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	4a0b      	ldr	r2, [pc, #44]	; (8007fbc <prvCheckTasksWaitingTermination+0x54>)
 8007f8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <prvCheckTasksWaitingTermination+0x58>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	4a0a      	ldr	r2, [pc, #40]	; (8007fc0 <prvCheckTasksWaitingTermination+0x58>)
 8007f98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f9a:	f000 feeb 	bl	8008d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f810 	bl	8007fc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fa4:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <prvCheckTasksWaitingTermination+0x58>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e1      	bne.n	8007f70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000df4 	.word	0x20000df4
 8007fbc:	20000e20 	.word	0x20000e20
 8007fc0:	20000e08 	.word	0x20000e08

08007fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d108      	bne.n	8007fe8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 f888 	bl	80090f0 <vPortFree>
				vPortFree( pxTCB );
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 f885 	bl	80090f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fe6:	e018      	b.n	800801a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d103      	bne.n	8007ffa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f001 f87c 	bl	80090f0 <vPortFree>
	}
 8007ff8:	e00f      	b.n	800801a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008000:	2b02      	cmp	r3, #2
 8008002:	d00a      	beq.n	800801a <prvDeleteTCB+0x56>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	60fb      	str	r3, [r7, #12]
}
 8008016:	bf00      	nop
 8008018:	e7fe      	b.n	8008018 <prvDeleteTCB+0x54>
	}
 800801a:	bf00      	nop
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800802a:	4b0c      	ldr	r3, [pc, #48]	; (800805c <prvResetNextTaskUnblockTime+0x38>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d104      	bne.n	800803e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008034:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <prvResetNextTaskUnblockTime+0x3c>)
 8008036:	f04f 32ff 	mov.w	r2, #4294967295
 800803a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800803c:	e008      	b.n	8008050 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800803e:	4b07      	ldr	r3, [pc, #28]	; (800805c <prvResetNextTaskUnblockTime+0x38>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	4a04      	ldr	r2, [pc, #16]	; (8008060 <prvResetNextTaskUnblockTime+0x3c>)
 800804e:	6013      	str	r3, [r2, #0]
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	20000dd8 	.word	0x20000dd8
 8008060:	20000e40 	.word	0x20000e40

08008064 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800806a:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <xTaskGetSchedulerState+0x34>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d102      	bne.n	8008078 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008072:	2301      	movs	r3, #1
 8008074:	607b      	str	r3, [r7, #4]
 8008076:	e008      	b.n	800808a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008078:	4b08      	ldr	r3, [pc, #32]	; (800809c <xTaskGetSchedulerState+0x38>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d102      	bne.n	8008086 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008080:	2302      	movs	r3, #2
 8008082:	607b      	str	r3, [r7, #4]
 8008084:	e001      	b.n	800808a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008086:	2300      	movs	r3, #0
 8008088:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800808a:	687b      	ldr	r3, [r7, #4]
	}
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	20000e2c 	.word	0x20000e2c
 800809c:	20000e48 	.word	0x20000e48

080080a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080ac:	2300      	movs	r3, #0
 80080ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d051      	beq.n	800815a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ba:	4b2a      	ldr	r3, [pc, #168]	; (8008164 <xTaskPriorityInherit+0xc4>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d241      	bcs.n	8008148 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	db06      	blt.n	80080da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080cc:	4b25      	ldr	r3, [pc, #148]	; (8008164 <xTaskPriorityInherit+0xc4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	6959      	ldr	r1, [r3, #20]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e2:	4613      	mov	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4a1f      	ldr	r2, [pc, #124]	; (8008168 <xTaskPriorityInherit+0xc8>)
 80080ec:	4413      	add	r3, r2
 80080ee:	4299      	cmp	r1, r3
 80080f0:	d122      	bne.n	8008138 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fa64 	bl	80065c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080fc:	4b19      	ldr	r3, [pc, #100]	; (8008164 <xTaskPriorityInherit+0xc4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810a:	4b18      	ldr	r3, [pc, #96]	; (800816c <xTaskPriorityInherit+0xcc>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d903      	bls.n	800811a <xTaskPriorityInherit+0x7a>
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008116:	4a15      	ldr	r2, [pc, #84]	; (800816c <xTaskPriorityInherit+0xcc>)
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4a10      	ldr	r2, [pc, #64]	; (8008168 <xTaskPriorityInherit+0xc8>)
 8008128:	441a      	add	r2, r3
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	3304      	adds	r3, #4
 800812e:	4619      	mov	r1, r3
 8008130:	4610      	mov	r0, r2
 8008132:	f7fe f9ea 	bl	800650a <vListInsertEnd>
 8008136:	e004      	b.n	8008142 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008138:	4b0a      	ldr	r3, [pc, #40]	; (8008164 <xTaskPriorityInherit+0xc4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008142:	2301      	movs	r3, #1
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	e008      	b.n	800815a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <xTaskPriorityInherit+0xc4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	429a      	cmp	r2, r3
 8008154:	d201      	bcs.n	800815a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008156:	2301      	movs	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800815a:	68fb      	ldr	r3, [r7, #12]
	}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	2000094c 	.word	0x2000094c
 8008168:	20000950 	.word	0x20000950
 800816c:	20000e28 	.word	0x20000e28

08008170 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d056      	beq.n	8008234 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008186:	4b2e      	ldr	r3, [pc, #184]	; (8008240 <xTaskPriorityDisinherit+0xd0>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	429a      	cmp	r2, r3
 800818e:	d00a      	beq.n	80081a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	60fb      	str	r3, [r7, #12]
}
 80081a2:	bf00      	nop
 80081a4:	e7fe      	b.n	80081a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	60bb      	str	r3, [r7, #8]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c8:	1e5a      	subs	r2, r3, #1
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d02c      	beq.n	8008234 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d128      	bne.n	8008234 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	3304      	adds	r3, #4
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe f9ec 	bl	80065c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008204:	4b0f      	ldr	r3, [pc, #60]	; (8008244 <xTaskPriorityDisinherit+0xd4>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	429a      	cmp	r2, r3
 800820a:	d903      	bls.n	8008214 <xTaskPriorityDisinherit+0xa4>
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008210:	4a0c      	ldr	r2, [pc, #48]	; (8008244 <xTaskPriorityDisinherit+0xd4>)
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008218:	4613      	mov	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4a09      	ldr	r2, [pc, #36]	; (8008248 <xTaskPriorityDisinherit+0xd8>)
 8008222:	441a      	add	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	3304      	adds	r3, #4
 8008228:	4619      	mov	r1, r3
 800822a:	4610      	mov	r0, r2
 800822c:	f7fe f96d 	bl	800650a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008230:	2301      	movs	r3, #1
 8008232:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008234:	697b      	ldr	r3, [r7, #20]
	}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	2000094c 	.word	0x2000094c
 8008244:	20000e28 	.word	0x20000e28
 8008248:	20000950 	.word	0x20000950

0800824c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800824c:	b580      	push	{r7, lr}
 800824e:	b088      	sub	sp, #32
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800825a:	2301      	movs	r3, #1
 800825c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d06a      	beq.n	800833a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10a      	bne.n	8008282 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	60fb      	str	r3, [r7, #12]
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d902      	bls.n	8008292 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	61fb      	str	r3, [r7, #28]
 8008290:	e002      	b.n	8008298 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008296:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d04b      	beq.n	800833a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d146      	bne.n	800833a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80082ac:	4b25      	ldr	r3, [pc, #148]	; (8008344 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d10a      	bne.n	80082cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	60bb      	str	r3, [r7, #8]
}
 80082c8:	bf00      	nop
 80082ca:	e7fe      	b.n	80082ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	db04      	blt.n	80082ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	6959      	ldr	r1, [r3, #20]
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4613      	mov	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4a13      	ldr	r2, [pc, #76]	; (8008348 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80082fa:	4413      	add	r3, r2
 80082fc:	4299      	cmp	r1, r3
 80082fe:	d11c      	bne.n	800833a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	3304      	adds	r3, #4
 8008304:	4618      	mov	r0, r3
 8008306:	f7fe f95d 	bl	80065c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d903      	bls.n	800831e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831a:	4a0c      	ldr	r2, [pc, #48]	; (800834c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4a07      	ldr	r2, [pc, #28]	; (8008348 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800832c:	441a      	add	r2, r3
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	3304      	adds	r3, #4
 8008332:	4619      	mov	r1, r3
 8008334:	4610      	mov	r0, r2
 8008336:	f7fe f8e8 	bl	800650a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800833a:	bf00      	nop
 800833c:	3720      	adds	r7, #32
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	2000094c 	.word	0x2000094c
 8008348:	20000950 	.word	0x20000950
 800834c:	20000e28 	.word	0x20000e28

08008350 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008354:	4b07      	ldr	r3, [pc, #28]	; (8008374 <pvTaskIncrementMutexHeldCount+0x24>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d004      	beq.n	8008366 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800835c:	4b05      	ldr	r3, [pc, #20]	; (8008374 <pvTaskIncrementMutexHeldCount+0x24>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008362:	3201      	adds	r2, #1
 8008364:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008366:	4b03      	ldr	r3, [pc, #12]	; (8008374 <pvTaskIncrementMutexHeldCount+0x24>)
 8008368:	681b      	ldr	r3, [r3, #0]
	}
 800836a:	4618      	mov	r0, r3
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	2000094c 	.word	0x2000094c

08008378 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008382:	4b21      	ldr	r3, [pc, #132]	; (8008408 <prvAddCurrentTaskToDelayedList+0x90>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008388:	4b20      	ldr	r3, [pc, #128]	; (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3304      	adds	r3, #4
 800838e:	4618      	mov	r0, r3
 8008390:	f7fe f918 	bl	80065c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839a:	d10a      	bne.n	80083b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d007      	beq.n	80083b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083a2:	4b1a      	ldr	r3, [pc, #104]	; (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3304      	adds	r3, #4
 80083a8:	4619      	mov	r1, r3
 80083aa:	4819      	ldr	r0, [pc, #100]	; (8008410 <prvAddCurrentTaskToDelayedList+0x98>)
 80083ac:	f7fe f8ad 	bl	800650a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083b0:	e026      	b.n	8008400 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4413      	add	r3, r2
 80083b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083ba:	4b14      	ldr	r3, [pc, #80]	; (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d209      	bcs.n	80083de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ca:	4b12      	ldr	r3, [pc, #72]	; (8008414 <prvAddCurrentTaskToDelayedList+0x9c>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b0f      	ldr	r3, [pc, #60]	; (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3304      	adds	r3, #4
 80083d4:	4619      	mov	r1, r3
 80083d6:	4610      	mov	r0, r2
 80083d8:	f7fe f8bb 	bl	8006552 <vListInsert>
}
 80083dc:	e010      	b.n	8008400 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083de:	4b0e      	ldr	r3, [pc, #56]	; (8008418 <prvAddCurrentTaskToDelayedList+0xa0>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	4b0a      	ldr	r3, [pc, #40]	; (800840c <prvAddCurrentTaskToDelayedList+0x94>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4619      	mov	r1, r3
 80083ea:	4610      	mov	r0, r2
 80083ec:	f7fe f8b1 	bl	8006552 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083f0:	4b0a      	ldr	r3, [pc, #40]	; (800841c <prvAddCurrentTaskToDelayedList+0xa4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d202      	bcs.n	8008400 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80083fa:	4a08      	ldr	r2, [pc, #32]	; (800841c <prvAddCurrentTaskToDelayedList+0xa4>)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	6013      	str	r3, [r2, #0]
}
 8008400:	bf00      	nop
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20000e24 	.word	0x20000e24
 800840c:	2000094c 	.word	0x2000094c
 8008410:	20000e0c 	.word	0x20000e0c
 8008414:	20000ddc 	.word	0x20000ddc
 8008418:	20000dd8 	.word	0x20000dd8
 800841c:	20000e40 	.word	0x20000e40

08008420 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08a      	sub	sp, #40	; 0x28
 8008424:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800842a:	f000 fb07 	bl	8008a3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800842e:	4b1c      	ldr	r3, [pc, #112]	; (80084a0 <xTimerCreateTimerTask+0x80>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d021      	beq.n	800847a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008436:	2300      	movs	r3, #0
 8008438:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800843e:	1d3a      	adds	r2, r7, #4
 8008440:	f107 0108 	add.w	r1, r7, #8
 8008444:	f107 030c 	add.w	r3, r7, #12
 8008448:	4618      	mov	r0, r3
 800844a:	f7fe f817 	bl	800647c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	9202      	str	r2, [sp, #8]
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	2302      	movs	r3, #2
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	2300      	movs	r3, #0
 800845e:	460a      	mov	r2, r1
 8008460:	4910      	ldr	r1, [pc, #64]	; (80084a4 <xTimerCreateTimerTask+0x84>)
 8008462:	4811      	ldr	r0, [pc, #68]	; (80084a8 <xTimerCreateTimerTask+0x88>)
 8008464:	f7fe ffe0 	bl	8007428 <xTaskCreateStatic>
 8008468:	4603      	mov	r3, r0
 800846a:	4a10      	ldr	r2, [pc, #64]	; (80084ac <xTimerCreateTimerTask+0x8c>)
 800846c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800846e:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <xTimerCreateTimerTask+0x8c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008476:	2301      	movs	r3, #1
 8008478:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10a      	bne.n	8008496 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	613b      	str	r3, [r7, #16]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008496:	697b      	ldr	r3, [r7, #20]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000e7c 	.word	0x20000e7c
 80084a4:	0800b520 	.word	0x0800b520
 80084a8:	080085e5 	.word	0x080085e5
 80084ac:	20000e80 	.word	0x20000e80

080084b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08a      	sub	sp, #40	; 0x28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80084be:	2300      	movs	r3, #0
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <xTimerGenericCommand+0x2e>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	623b      	str	r3, [r7, #32]
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80084de:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <xTimerGenericCommand+0x98>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d02a      	beq.n	800853c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b05      	cmp	r3, #5
 80084f6:	dc18      	bgt.n	800852a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80084f8:	f7ff fdb4 	bl	8008064 <xTaskGetSchedulerState>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d109      	bne.n	8008516 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008502:	4b11      	ldr	r3, [pc, #68]	; (8008548 <xTimerGenericCommand+0x98>)
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f107 0110 	add.w	r1, r7, #16
 800850a:	2300      	movs	r3, #0
 800850c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850e:	f7fe f9f3 	bl	80068f8 <xQueueGenericSend>
 8008512:	6278      	str	r0, [r7, #36]	; 0x24
 8008514:	e012      	b.n	800853c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008516:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <xTimerGenericCommand+0x98>)
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	f107 0110 	add.w	r1, r7, #16
 800851e:	2300      	movs	r3, #0
 8008520:	2200      	movs	r2, #0
 8008522:	f7fe f9e9 	bl	80068f8 <xQueueGenericSend>
 8008526:	6278      	str	r0, [r7, #36]	; 0x24
 8008528:	e008      	b.n	800853c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800852a:	4b07      	ldr	r3, [pc, #28]	; (8008548 <xTimerGenericCommand+0x98>)
 800852c:	6818      	ldr	r0, [r3, #0]
 800852e:	f107 0110 	add.w	r1, r7, #16
 8008532:	2300      	movs	r3, #0
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	f7fe fadd 	bl	8006af4 <xQueueGenericSendFromISR>
 800853a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800853e:	4618      	mov	r0, r3
 8008540:	3728      	adds	r7, #40	; 0x28
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20000e7c 	.word	0x20000e7c

0800854c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af02      	add	r7, sp, #8
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008556:	4b22      	ldr	r3, [pc, #136]	; (80085e0 <prvProcessExpiredTimer+0x94>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	3304      	adds	r3, #4
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe f82d 	bl	80065c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b00      	cmp	r3, #0
 8008576:	d022      	beq.n	80085be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	699a      	ldr	r2, [r3, #24]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	18d1      	adds	r1, r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	6978      	ldr	r0, [r7, #20]
 8008586:	f000 f8d1 	bl	800872c <prvInsertTimerInActiveList>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01f      	beq.n	80085d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008590:	2300      	movs	r3, #0
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	2300      	movs	r3, #0
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	2100      	movs	r1, #0
 800859a:	6978      	ldr	r0, [r7, #20]
 800859c:	f7ff ff88 	bl	80084b0 <xTimerGenericCommand>
 80085a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d113      	bne.n	80085d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	60fb      	str	r3, [r7, #12]
}
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085c4:	f023 0301 	bic.w	r3, r3, #1
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	6a1b      	ldr	r3, [r3, #32]
 80085d4:	6978      	ldr	r0, [r7, #20]
 80085d6:	4798      	blx	r3
}
 80085d8:	bf00      	nop
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20000e74 	.word	0x20000e74

080085e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085ec:	f107 0308 	add.w	r3, r7, #8
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 f857 	bl	80086a4 <prvGetNextExpireTime>
 80085f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4619      	mov	r1, r3
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f000 f803 	bl	8008608 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008602:	f000 f8d5 	bl	80087b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008606:	e7f1      	b.n	80085ec <prvTimerTask+0x8>

08008608 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008612:	f7ff f945 	bl	80078a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008616:	f107 0308 	add.w	r3, r7, #8
 800861a:	4618      	mov	r0, r3
 800861c:	f000 f866 	bl	80086ec <prvSampleTimeNow>
 8008620:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d130      	bne.n	800868a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10a      	bne.n	8008644 <prvProcessTimerOrBlockTask+0x3c>
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	429a      	cmp	r2, r3
 8008634:	d806      	bhi.n	8008644 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008636:	f7ff f941 	bl	80078bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800863a:	68f9      	ldr	r1, [r7, #12]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7ff ff85 	bl	800854c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008642:	e024      	b.n	800868e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d008      	beq.n	800865c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800864a:	4b13      	ldr	r3, [pc, #76]	; (8008698 <prvProcessTimerOrBlockTask+0x90>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d101      	bne.n	8008658 <prvProcessTimerOrBlockTask+0x50>
 8008654:	2301      	movs	r3, #1
 8008656:	e000      	b.n	800865a <prvProcessTimerOrBlockTask+0x52>
 8008658:	2300      	movs	r3, #0
 800865a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800865c:	4b0f      	ldr	r3, [pc, #60]	; (800869c <prvProcessTimerOrBlockTask+0x94>)
 800865e:	6818      	ldr	r0, [r3, #0]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	4619      	mov	r1, r3
 800866a:	f7fe fea9 	bl	80073c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800866e:	f7ff f925 	bl	80078bc <xTaskResumeAll>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10a      	bne.n	800868e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008678:	4b09      	ldr	r3, [pc, #36]	; (80086a0 <prvProcessTimerOrBlockTask+0x98>)
 800867a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867e:	601a      	str	r2, [r3, #0]
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	f3bf 8f6f 	isb	sy
}
 8008688:	e001      	b.n	800868e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800868a:	f7ff f917 	bl	80078bc <xTaskResumeAll>
}
 800868e:	bf00      	nop
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000e78 	.word	0x20000e78
 800869c:	20000e7c 	.word	0x20000e7c
 80086a0:	e000ed04 	.word	0xe000ed04

080086a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086ac:	4b0e      	ldr	r3, [pc, #56]	; (80086e8 <prvGetNextExpireTime+0x44>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <prvGetNextExpireTime+0x16>
 80086b6:	2201      	movs	r2, #1
 80086b8:	e000      	b.n	80086bc <prvGetNextExpireTime+0x18>
 80086ba:	2200      	movs	r2, #0
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d105      	bne.n	80086d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086c8:	4b07      	ldr	r3, [pc, #28]	; (80086e8 <prvGetNextExpireTime+0x44>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	e001      	b.n	80086d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80086d8:	68fb      	ldr	r3, [r7, #12]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	20000e74 	.word	0x20000e74

080086ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80086f4:	f7ff f980 	bl	80079f8 <xTaskGetTickCount>
 80086f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80086fa:	4b0b      	ldr	r3, [pc, #44]	; (8008728 <prvSampleTimeNow+0x3c>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	429a      	cmp	r2, r3
 8008702:	d205      	bcs.n	8008710 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008704:	f000 f936 	bl	8008974 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	e002      	b.n	8008716 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008716:	4a04      	ldr	r2, [pc, #16]	; (8008728 <prvSampleTimeNow+0x3c>)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800871c:	68fb      	ldr	r3, [r7, #12]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20000e84 	.word	0x20000e84

0800872c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800873a:	2300      	movs	r3, #0
 800873c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	429a      	cmp	r2, r3
 8008750:	d812      	bhi.n	8008778 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	1ad2      	subs	r2, r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	429a      	cmp	r2, r3
 800875e:	d302      	bcc.n	8008766 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008760:	2301      	movs	r3, #1
 8008762:	617b      	str	r3, [r7, #20]
 8008764:	e01b      	b.n	800879e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <prvInsertTimerInActiveList+0x7c>)
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3304      	adds	r3, #4
 800876e:	4619      	mov	r1, r3
 8008770:	4610      	mov	r0, r2
 8008772:	f7fd feee 	bl	8006552 <vListInsert>
 8008776:	e012      	b.n	800879e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	429a      	cmp	r2, r3
 800877e:	d206      	bcs.n	800878e <prvInsertTimerInActiveList+0x62>
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	429a      	cmp	r2, r3
 8008786:	d302      	bcc.n	800878e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008788:	2301      	movs	r3, #1
 800878a:	617b      	str	r3, [r7, #20]
 800878c:	e007      	b.n	800879e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <prvInsertTimerInActiveList+0x80>)
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3304      	adds	r3, #4
 8008796:	4619      	mov	r1, r3
 8008798:	4610      	mov	r0, r2
 800879a:	f7fd feda 	bl	8006552 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800879e:	697b      	ldr	r3, [r7, #20]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	20000e78 	.word	0x20000e78
 80087ac:	20000e74 	.word	0x20000e74

080087b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08e      	sub	sp, #56	; 0x38
 80087b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087b6:	e0ca      	b.n	800894e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	da18      	bge.n	80087f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80087be:	1d3b      	adds	r3, r7, #4
 80087c0:	3304      	adds	r3, #4
 80087c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10a      	bne.n	80087e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	61fb      	str	r3, [r7, #28]
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80087e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087e6:	6850      	ldr	r0, [r2, #4]
 80087e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ea:	6892      	ldr	r2, [r2, #8]
 80087ec:	4611      	mov	r1, r2
 80087ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f2c0 80aa 	blt.w	800894c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	3304      	adds	r3, #4
 8008808:	4618      	mov	r0, r3
 800880a:	f7fd fedb 	bl	80065c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800880e:	463b      	mov	r3, r7
 8008810:	4618      	mov	r0, r3
 8008812:	f7ff ff6b 	bl	80086ec <prvSampleTimeNow>
 8008816:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b09      	cmp	r3, #9
 800881c:	f200 8097 	bhi.w	800894e <prvProcessReceivedCommands+0x19e>
 8008820:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <prvProcessReceivedCommands+0x78>)
 8008822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008826:	bf00      	nop
 8008828:	08008851 	.word	0x08008851
 800882c:	08008851 	.word	0x08008851
 8008830:	08008851 	.word	0x08008851
 8008834:	080088c5 	.word	0x080088c5
 8008838:	080088d9 	.word	0x080088d9
 800883c:	08008923 	.word	0x08008923
 8008840:	08008851 	.word	0x08008851
 8008844:	08008851 	.word	0x08008851
 8008848:	080088c5 	.word	0x080088c5
 800884c:	080088d9 	.word	0x080088d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008856:	f043 0301 	orr.w	r3, r3, #1
 800885a:	b2da      	uxtb	r2, r3
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	18d1      	adds	r1, r2, r3
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008870:	f7ff ff5c 	bl	800872c <prvInsertTimerInActiveList>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d069      	beq.n	800894e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008880:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008888:	f003 0304 	and.w	r3, r3, #4
 800888c:	2b00      	cmp	r3, #0
 800888e:	d05e      	beq.n	800894e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	441a      	add	r2, r3
 8008898:	2300      	movs	r3, #0
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	2300      	movs	r3, #0
 800889e:	2100      	movs	r1, #0
 80088a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a2:	f7ff fe05 	bl	80084b0 <xTimerGenericCommand>
 80088a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088a8:	6a3b      	ldr	r3, [r7, #32]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d14f      	bne.n	800894e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	61bb      	str	r3, [r7, #24]
}
 80088c0:	bf00      	nop
 80088c2:	e7fe      	b.n	80088c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088ca:	f023 0301 	bic.w	r3, r3, #1
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80088d6:	e03a      	b.n	800894e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80088f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	617b      	str	r3, [r7, #20]
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	18d1      	adds	r1, r2, r3
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800891a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800891c:	f7ff ff06 	bl	800872c <prvInsertTimerInActiveList>
					break;
 8008920:	e015      	b.n	800894e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008928:	f003 0302 	and.w	r3, r3, #2
 800892c:	2b00      	cmp	r3, #0
 800892e:	d103      	bne.n	8008938 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008932:	f000 fbdd 	bl	80090f0 <vPortFree>
 8008936:	e00a      	b.n	800894e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800893e:	f023 0301 	bic.w	r3, r3, #1
 8008942:	b2da      	uxtb	r2, r3
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800894a:	e000      	b.n	800894e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800894c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800894e:	4b08      	ldr	r3, [pc, #32]	; (8008970 <prvProcessReceivedCommands+0x1c0>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	1d39      	adds	r1, r7, #4
 8008954:	2200      	movs	r2, #0
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe f9f4 	bl	8006d44 <xQueueReceive>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	f47f af2a 	bne.w	80087b8 <prvProcessReceivedCommands+0x8>
	}
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop
 8008968:	3730      	adds	r7, #48	; 0x30
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20000e7c 	.word	0x20000e7c

08008974 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800897a:	e048      	b.n	8008a0e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800897c:	4b2d      	ldr	r3, [pc, #180]	; (8008a34 <prvSwitchTimerLists+0xc0>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008986:	4b2b      	ldr	r3, [pc, #172]	; (8008a34 <prvSwitchTimerLists+0xc0>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3304      	adds	r3, #4
 8008994:	4618      	mov	r0, r3
 8008996:	f7fd fe15 	bl	80065c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d02e      	beq.n	8008a0e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	4413      	add	r3, r2
 80089b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d90e      	bls.n	80089e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089ce:	4b19      	ldr	r3, [pc, #100]	; (8008a34 <prvSwitchTimerLists+0xc0>)
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3304      	adds	r3, #4
 80089d6:	4619      	mov	r1, r3
 80089d8:	4610      	mov	r0, r2
 80089da:	f7fd fdba 	bl	8006552 <vListInsert>
 80089de:	e016      	b.n	8008a0e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089e0:	2300      	movs	r3, #0
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	2300      	movs	r3, #0
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	2100      	movs	r1, #0
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f7ff fd60 	bl	80084b0 <xTimerGenericCommand>
 80089f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10a      	bne.n	8008a0e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	603b      	str	r3, [r7, #0]
}
 8008a0a:	bf00      	nop
 8008a0c:	e7fe      	b.n	8008a0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a0e:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <prvSwitchTimerLists+0xc0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1b1      	bne.n	800897c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a18:	4b06      	ldr	r3, [pc, #24]	; (8008a34 <prvSwitchTimerLists+0xc0>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a1e:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <prvSwitchTimerLists+0xc4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a04      	ldr	r2, [pc, #16]	; (8008a34 <prvSwitchTimerLists+0xc0>)
 8008a24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a26:	4a04      	ldr	r2, [pc, #16]	; (8008a38 <prvSwitchTimerLists+0xc4>)
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	6013      	str	r3, [r2, #0]
}
 8008a2c:	bf00      	nop
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20000e74 	.word	0x20000e74
 8008a38:	20000e78 	.word	0x20000e78

08008a3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a42:	f000 f967 	bl	8008d14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a46:	4b15      	ldr	r3, [pc, #84]	; (8008a9c <prvCheckForValidListAndQueue+0x60>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d120      	bne.n	8008a90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a4e:	4814      	ldr	r0, [pc, #80]	; (8008aa0 <prvCheckForValidListAndQueue+0x64>)
 8008a50:	f7fd fd2e 	bl	80064b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a54:	4813      	ldr	r0, [pc, #76]	; (8008aa4 <prvCheckForValidListAndQueue+0x68>)
 8008a56:	f7fd fd2b 	bl	80064b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a5a:	4b13      	ldr	r3, [pc, #76]	; (8008aa8 <prvCheckForValidListAndQueue+0x6c>)
 8008a5c:	4a10      	ldr	r2, [pc, #64]	; (8008aa0 <prvCheckForValidListAndQueue+0x64>)
 8008a5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a60:	4b12      	ldr	r3, [pc, #72]	; (8008aac <prvCheckForValidListAndQueue+0x70>)
 8008a62:	4a10      	ldr	r2, [pc, #64]	; (8008aa4 <prvCheckForValidListAndQueue+0x68>)
 8008a64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a66:	2300      	movs	r3, #0
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	4b11      	ldr	r3, [pc, #68]	; (8008ab0 <prvCheckForValidListAndQueue+0x74>)
 8008a6c:	4a11      	ldr	r2, [pc, #68]	; (8008ab4 <prvCheckForValidListAndQueue+0x78>)
 8008a6e:	2110      	movs	r1, #16
 8008a70:	200a      	movs	r0, #10
 8008a72:	f7fd fe39 	bl	80066e8 <xQueueGenericCreateStatic>
 8008a76:	4603      	mov	r3, r0
 8008a78:	4a08      	ldr	r2, [pc, #32]	; (8008a9c <prvCheckForValidListAndQueue+0x60>)
 8008a7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a7c:	4b07      	ldr	r3, [pc, #28]	; (8008a9c <prvCheckForValidListAndQueue+0x60>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d005      	beq.n	8008a90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a84:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <prvCheckForValidListAndQueue+0x60>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	490b      	ldr	r1, [pc, #44]	; (8008ab8 <prvCheckForValidListAndQueue+0x7c>)
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fc6e 	bl	800736c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a90:	f000 f970 	bl	8008d74 <vPortExitCritical>
}
 8008a94:	bf00      	nop
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000e7c 	.word	0x20000e7c
 8008aa0:	20000e4c 	.word	0x20000e4c
 8008aa4:	20000e60 	.word	0x20000e60
 8008aa8:	20000e74 	.word	0x20000e74
 8008aac:	20000e78 	.word	0x20000e78
 8008ab0:	20000f28 	.word	0x20000f28
 8008ab4:	20000e88 	.word	0x20000e88
 8008ab8:	0800b528 	.word	0x0800b528

08008abc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3b04      	subs	r3, #4
 8008acc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3b04      	subs	r3, #4
 8008ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	f023 0201 	bic.w	r2, r3, #1
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3b04      	subs	r3, #4
 8008aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008aec:	4a0c      	ldr	r2, [pc, #48]	; (8008b20 <pxPortInitialiseStack+0x64>)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3b14      	subs	r3, #20
 8008af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3b04      	subs	r3, #4
 8008b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f06f 0202 	mvn.w	r2, #2
 8008b0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3b20      	subs	r3, #32
 8008b10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b12:	68fb      	ldr	r3, [r7, #12]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	08008b25 	.word	0x08008b25

08008b24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b2e:	4b12      	ldr	r3, [pc, #72]	; (8008b78 <prvTaskExitError+0x54>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b36:	d00a      	beq.n	8008b4e <prvTaskExitError+0x2a>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	60fb      	str	r3, [r7, #12]
}
 8008b4a:	bf00      	nop
 8008b4c:	e7fe      	b.n	8008b4c <prvTaskExitError+0x28>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	60bb      	str	r3, [r7, #8]
}
 8008b60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b62:	bf00      	nop
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d0fc      	beq.n	8008b64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b6a:	bf00      	nop
 8008b6c:	bf00      	nop
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	2000000c 	.word	0x2000000c
 8008b7c:	00000000 	.word	0x00000000

08008b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <pxCurrentTCBConst2>)
 8008b82:	6819      	ldr	r1, [r3, #0]
 8008b84:	6808      	ldr	r0, [r1, #0]
 8008b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8a:	f380 8809 	msr	PSP, r0
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f04f 0000 	mov.w	r0, #0
 8008b96:	f380 8811 	msr	BASEPRI, r0
 8008b9a:	4770      	bx	lr
 8008b9c:	f3af 8000 	nop.w

08008ba0 <pxCurrentTCBConst2>:
 8008ba0:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop

08008ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ba8:	4808      	ldr	r0, [pc, #32]	; (8008bcc <prvPortStartFirstTask+0x24>)
 8008baa:	6800      	ldr	r0, [r0, #0]
 8008bac:	6800      	ldr	r0, [r0, #0]
 8008bae:	f380 8808 	msr	MSP, r0
 8008bb2:	f04f 0000 	mov.w	r0, #0
 8008bb6:	f380 8814 	msr	CONTROL, r0
 8008bba:	b662      	cpsie	i
 8008bbc:	b661      	cpsie	f
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	df00      	svc	0
 8008bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008bca:	bf00      	nop
 8008bcc:	e000ed08 	.word	0xe000ed08

08008bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008bd6:	4b46      	ldr	r3, [pc, #280]	; (8008cf0 <xPortStartScheduler+0x120>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a46      	ldr	r2, [pc, #280]	; (8008cf4 <xPortStartScheduler+0x124>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d10a      	bne.n	8008bf6 <xPortStartScheduler+0x26>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	613b      	str	r3, [r7, #16]
}
 8008bf2:	bf00      	nop
 8008bf4:	e7fe      	b.n	8008bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008bf6:	4b3e      	ldr	r3, [pc, #248]	; (8008cf0 <xPortStartScheduler+0x120>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a3f      	ldr	r2, [pc, #252]	; (8008cf8 <xPortStartScheduler+0x128>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d10a      	bne.n	8008c16 <xPortStartScheduler+0x46>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	60fb      	str	r3, [r7, #12]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c16:	4b39      	ldr	r3, [pc, #228]	; (8008cfc <xPortStartScheduler+0x12c>)
 8008c18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	22ff      	movs	r2, #255	; 0xff
 8008c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	4b31      	ldr	r3, [pc, #196]	; (8008d00 <xPortStartScheduler+0x130>)
 8008c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c3e:	4b31      	ldr	r3, [pc, #196]	; (8008d04 <xPortStartScheduler+0x134>)
 8008c40:	2207      	movs	r2, #7
 8008c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c44:	e009      	b.n	8008c5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c46:	4b2f      	ldr	r3, [pc, #188]	; (8008d04 <xPortStartScheduler+0x134>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	4a2d      	ldr	r2, [pc, #180]	; (8008d04 <xPortStartScheduler+0x134>)
 8008c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c62:	2b80      	cmp	r3, #128	; 0x80
 8008c64:	d0ef      	beq.n	8008c46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c66:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <xPortStartScheduler+0x134>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f1c3 0307 	rsb	r3, r3, #7
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d00a      	beq.n	8008c88 <xPortStartScheduler+0xb8>
	__asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	60bb      	str	r3, [r7, #8]
}
 8008c84:	bf00      	nop
 8008c86:	e7fe      	b.n	8008c86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c88:	4b1e      	ldr	r3, [pc, #120]	; (8008d04 <xPortStartScheduler+0x134>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	021b      	lsls	r3, r3, #8
 8008c8e:	4a1d      	ldr	r2, [pc, #116]	; (8008d04 <xPortStartScheduler+0x134>)
 8008c90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c92:	4b1c      	ldr	r3, [pc, #112]	; (8008d04 <xPortStartScheduler+0x134>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c9a:	4a1a      	ldr	r2, [pc, #104]	; (8008d04 <xPortStartScheduler+0x134>)
 8008c9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ca6:	4b18      	ldr	r3, [pc, #96]	; (8008d08 <xPortStartScheduler+0x138>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a17      	ldr	r2, [pc, #92]	; (8008d08 <xPortStartScheduler+0x138>)
 8008cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cb2:	4b15      	ldr	r3, [pc, #84]	; (8008d08 <xPortStartScheduler+0x138>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a14      	ldr	r2, [pc, #80]	; (8008d08 <xPortStartScheduler+0x138>)
 8008cb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008cbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cbe:	f000 f8dd 	bl	8008e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008cc2:	4b12      	ldr	r3, [pc, #72]	; (8008d0c <xPortStartScheduler+0x13c>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cc8:	f000 f8fc 	bl	8008ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ccc:	4b10      	ldr	r3, [pc, #64]	; (8008d10 <xPortStartScheduler+0x140>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a0f      	ldr	r2, [pc, #60]	; (8008d10 <xPortStartScheduler+0x140>)
 8008cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008cd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cd8:	f7ff ff66 	bl	8008ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cdc:	f7fe ff56 	bl	8007b8c <vTaskSwitchContext>
	prvTaskExitError();
 8008ce0:	f7ff ff20 	bl	8008b24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3718      	adds	r7, #24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	e000ed00 	.word	0xe000ed00
 8008cf4:	410fc271 	.word	0x410fc271
 8008cf8:	410fc270 	.word	0x410fc270
 8008cfc:	e000e400 	.word	0xe000e400
 8008d00:	20000f78 	.word	0x20000f78
 8008d04:	20000f7c 	.word	0x20000f7c
 8008d08:	e000ed20 	.word	0xe000ed20
 8008d0c:	2000000c 	.word	0x2000000c
 8008d10:	e000ef34 	.word	0xe000ef34

08008d14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	607b      	str	r3, [r7, #4]
}
 8008d2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d2e:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <vPortEnterCritical+0x58>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3301      	adds	r3, #1
 8008d34:	4a0d      	ldr	r2, [pc, #52]	; (8008d6c <vPortEnterCritical+0x58>)
 8008d36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d38:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <vPortEnterCritical+0x58>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d10f      	bne.n	8008d60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d40:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <vPortEnterCritical+0x5c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	603b      	str	r3, [r7, #0]
}
 8008d5c:	bf00      	nop
 8008d5e:	e7fe      	b.n	8008d5e <vPortEnterCritical+0x4a>
	}
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	2000000c 	.word	0x2000000c
 8008d70:	e000ed04 	.word	0xe000ed04

08008d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d7a:	4b12      	ldr	r3, [pc, #72]	; (8008dc4 <vPortExitCritical+0x50>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10a      	bne.n	8008d98 <vPortExitCritical+0x24>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	607b      	str	r3, [r7, #4]
}
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d98:	4b0a      	ldr	r3, [pc, #40]	; (8008dc4 <vPortExitCritical+0x50>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	4a09      	ldr	r2, [pc, #36]	; (8008dc4 <vPortExitCritical+0x50>)
 8008da0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008da2:	4b08      	ldr	r3, [pc, #32]	; (8008dc4 <vPortExitCritical+0x50>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d105      	bne.n	8008db6 <vPortExitCritical+0x42>
 8008daa:	2300      	movs	r3, #0
 8008dac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	f383 8811 	msr	BASEPRI, r3
}
 8008db4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	2000000c 	.word	0x2000000c
	...

08008dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008dd0:	f3ef 8009 	mrs	r0, PSP
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	4b15      	ldr	r3, [pc, #84]	; (8008e30 <pxCurrentTCBConst>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	f01e 0f10 	tst.w	lr, #16
 8008de0:	bf08      	it	eq
 8008de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dea:	6010      	str	r0, [r2, #0]
 8008dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008df4:	f380 8811 	msr	BASEPRI, r0
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f7fe fec4 	bl	8007b8c <vTaskSwitchContext>
 8008e04:	f04f 0000 	mov.w	r0, #0
 8008e08:	f380 8811 	msr	BASEPRI, r0
 8008e0c:	bc09      	pop	{r0, r3}
 8008e0e:	6819      	ldr	r1, [r3, #0]
 8008e10:	6808      	ldr	r0, [r1, #0]
 8008e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e16:	f01e 0f10 	tst.w	lr, #16
 8008e1a:	bf08      	it	eq
 8008e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e20:	f380 8809 	msr	PSP, r0
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	f3af 8000 	nop.w

08008e30 <pxCurrentTCBConst>:
 8008e30:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop

08008e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	607b      	str	r3, [r7, #4]
}
 8008e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e52:	f7fe fde1 	bl	8007a18 <xTaskIncrementTick>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e5c:	4b06      	ldr	r3, [pc, #24]	; (8008e78 <xPortSysTickHandler+0x40>)
 8008e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	2300      	movs	r3, #0
 8008e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	f383 8811 	msr	BASEPRI, r3
}
 8008e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e70:	bf00      	nop
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e80:	4b0b      	ldr	r3, [pc, #44]	; (8008eb0 <vPortSetupTimerInterrupt+0x34>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e86:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <vPortSetupTimerInterrupt+0x38>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <vPortSetupTimerInterrupt+0x3c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a0a      	ldr	r2, [pc, #40]	; (8008ebc <vPortSetupTimerInterrupt+0x40>)
 8008e92:	fba2 2303 	umull	r2, r3, r2, r3
 8008e96:	099b      	lsrs	r3, r3, #6
 8008e98:	4a09      	ldr	r2, [pc, #36]	; (8008ec0 <vPortSetupTimerInterrupt+0x44>)
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e9e:	4b04      	ldr	r3, [pc, #16]	; (8008eb0 <vPortSetupTimerInterrupt+0x34>)
 8008ea0:	2207      	movs	r2, #7
 8008ea2:	601a      	str	r2, [r3, #0]
}
 8008ea4:	bf00      	nop
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	e000e010 	.word	0xe000e010
 8008eb4:	e000e018 	.word	0xe000e018
 8008eb8:	20000000 	.word	0x20000000
 8008ebc:	10624dd3 	.word	0x10624dd3
 8008ec0:	e000e014 	.word	0xe000e014

08008ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ed4 <vPortEnableVFP+0x10>
 8008ec8:	6801      	ldr	r1, [r0, #0]
 8008eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008ece:	6001      	str	r1, [r0, #0]
 8008ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ed2:	bf00      	nop
 8008ed4:	e000ed88 	.word	0xe000ed88

08008ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ede:	f3ef 8305 	mrs	r3, IPSR
 8008ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b0f      	cmp	r3, #15
 8008ee8:	d914      	bls.n	8008f14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008eea:	4a17      	ldr	r2, [pc, #92]	; (8008f48 <vPortValidateInterruptPriority+0x70>)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ef4:	4b15      	ldr	r3, [pc, #84]	; (8008f4c <vPortValidateInterruptPriority+0x74>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	7afa      	ldrb	r2, [r7, #11]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d20a      	bcs.n	8008f14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	607b      	str	r3, [r7, #4]
}
 8008f10:	bf00      	nop
 8008f12:	e7fe      	b.n	8008f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f14:	4b0e      	ldr	r3, [pc, #56]	; (8008f50 <vPortValidateInterruptPriority+0x78>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f1c:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <vPortValidateInterruptPriority+0x7c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d90a      	bls.n	8008f3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	603b      	str	r3, [r7, #0]
}
 8008f36:	bf00      	nop
 8008f38:	e7fe      	b.n	8008f38 <vPortValidateInterruptPriority+0x60>
	}
 8008f3a:	bf00      	nop
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	e000e3f0 	.word	0xe000e3f0
 8008f4c:	20000f78 	.word	0x20000f78
 8008f50:	e000ed0c 	.word	0xe000ed0c
 8008f54:	20000f7c 	.word	0x20000f7c

08008f58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08a      	sub	sp, #40	; 0x28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f60:	2300      	movs	r3, #0
 8008f62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f64:	f7fe fc9c 	bl	80078a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f68:	4b5b      	ldr	r3, [pc, #364]	; (80090d8 <pvPortMalloc+0x180>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f70:	f000 f920 	bl	80091b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f74:	4b59      	ldr	r3, [pc, #356]	; (80090dc <pvPortMalloc+0x184>)
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f040 8093 	bne.w	80090a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01d      	beq.n	8008fc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008f88:	2208      	movs	r2, #8
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d014      	beq.n	8008fc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f023 0307 	bic.w	r3, r3, #7
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <pvPortMalloc+0x6c>
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	617b      	str	r3, [r7, #20]
}
 8008fc0:	bf00      	nop
 8008fc2:	e7fe      	b.n	8008fc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d06e      	beq.n	80090a8 <pvPortMalloc+0x150>
 8008fca:	4b45      	ldr	r3, [pc, #276]	; (80090e0 <pvPortMalloc+0x188>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d869      	bhi.n	80090a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008fd4:	4b43      	ldr	r3, [pc, #268]	; (80090e4 <pvPortMalloc+0x18c>)
 8008fd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008fd8:	4b42      	ldr	r3, [pc, #264]	; (80090e4 <pvPortMalloc+0x18c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fde:	e004      	b.n	8008fea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d903      	bls.n	8008ffc <pvPortMalloc+0xa4>
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1f1      	bne.n	8008fe0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ffc:	4b36      	ldr	r3, [pc, #216]	; (80090d8 <pvPortMalloc+0x180>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009002:	429a      	cmp	r2, r3
 8009004:	d050      	beq.n	80090a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2208      	movs	r2, #8
 800900c:	4413      	add	r3, r2
 800900e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	1ad2      	subs	r2, r2, r3
 8009020:	2308      	movs	r3, #8
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	429a      	cmp	r2, r3
 8009026:	d91f      	bls.n	8009068 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4413      	add	r3, r2
 800902e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	f003 0307 	and.w	r3, r3, #7
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <pvPortMalloc+0xf8>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	613b      	str	r3, [r7, #16]
}
 800904c:	bf00      	nop
 800904e:	e7fe      	b.n	800904e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	1ad2      	subs	r2, r2, r3
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009062:	69b8      	ldr	r0, [r7, #24]
 8009064:	f000 f908 	bl	8009278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009068:	4b1d      	ldr	r3, [pc, #116]	; (80090e0 <pvPortMalloc+0x188>)
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	4a1b      	ldr	r2, [pc, #108]	; (80090e0 <pvPortMalloc+0x188>)
 8009074:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009076:	4b1a      	ldr	r3, [pc, #104]	; (80090e0 <pvPortMalloc+0x188>)
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	4b1b      	ldr	r3, [pc, #108]	; (80090e8 <pvPortMalloc+0x190>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	429a      	cmp	r2, r3
 8009080:	d203      	bcs.n	800908a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009082:	4b17      	ldr	r3, [pc, #92]	; (80090e0 <pvPortMalloc+0x188>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a18      	ldr	r2, [pc, #96]	; (80090e8 <pvPortMalloc+0x190>)
 8009088:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	4b13      	ldr	r3, [pc, #76]	; (80090dc <pvPortMalloc+0x184>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	431a      	orrs	r2, r3
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	2200      	movs	r2, #0
 800909c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800909e:	4b13      	ldr	r3, [pc, #76]	; (80090ec <pvPortMalloc+0x194>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3301      	adds	r3, #1
 80090a4:	4a11      	ldr	r2, [pc, #68]	; (80090ec <pvPortMalloc+0x194>)
 80090a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090a8:	f7fe fc08 	bl	80078bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	f003 0307 	and.w	r3, r3, #7
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00a      	beq.n	80090cc <pvPortMalloc+0x174>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	60fb      	str	r3, [r7, #12]
}
 80090c8:	bf00      	nop
 80090ca:	e7fe      	b.n	80090ca <pvPortMalloc+0x172>
	return pvReturn;
 80090cc:	69fb      	ldr	r3, [r7, #28]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3728      	adds	r7, #40	; 0x28
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20008c88 	.word	0x20008c88
 80090dc:	20008c9c 	.word	0x20008c9c
 80090e0:	20008c8c 	.word	0x20008c8c
 80090e4:	20008c80 	.word	0x20008c80
 80090e8:	20008c90 	.word	0x20008c90
 80090ec:	20008c94 	.word	0x20008c94

080090f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d04d      	beq.n	800919e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009102:	2308      	movs	r3, #8
 8009104:	425b      	negs	r3, r3
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	4413      	add	r3, r2
 800910a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	4b24      	ldr	r3, [pc, #144]	; (80091a8 <vPortFree+0xb8>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4013      	ands	r3, r2
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <vPortFree+0x44>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	60fb      	str	r3, [r7, #12]
}
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <vPortFree+0x62>
	__asm volatile
 800913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	60bb      	str	r3, [r7, #8]
}
 800914e:	bf00      	nop
 8009150:	e7fe      	b.n	8009150 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <vPortFree+0xb8>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4013      	ands	r3, r2
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01e      	beq.n	800919e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d11a      	bne.n	800919e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	4b0e      	ldr	r3, [pc, #56]	; (80091a8 <vPortFree+0xb8>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	43db      	mvns	r3, r3
 8009172:	401a      	ands	r2, r3
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009178:	f7fe fb92 	bl	80078a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	685a      	ldr	r2, [r3, #4]
 8009180:	4b0a      	ldr	r3, [pc, #40]	; (80091ac <vPortFree+0xbc>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4413      	add	r3, r2
 8009186:	4a09      	ldr	r2, [pc, #36]	; (80091ac <vPortFree+0xbc>)
 8009188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800918a:	6938      	ldr	r0, [r7, #16]
 800918c:	f000 f874 	bl	8009278 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009190:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <vPortFree+0xc0>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3301      	adds	r3, #1
 8009196:	4a06      	ldr	r2, [pc, #24]	; (80091b0 <vPortFree+0xc0>)
 8009198:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800919a:	f7fe fb8f 	bl	80078bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800919e:	bf00      	nop
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20008c9c 	.word	0x20008c9c
 80091ac:	20008c8c 	.word	0x20008c8c
 80091b0:	20008c98 	.word	0x20008c98

080091b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091ba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80091be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091c0:	4b27      	ldr	r3, [pc, #156]	; (8009260 <prvHeapInit+0xac>)
 80091c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f003 0307 	and.w	r3, r3, #7
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00c      	beq.n	80091e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3307      	adds	r3, #7
 80091d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f023 0307 	bic.w	r3, r3, #7
 80091da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	4a1f      	ldr	r2, [pc, #124]	; (8009260 <prvHeapInit+0xac>)
 80091e4:	4413      	add	r3, r2
 80091e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091ec:	4a1d      	ldr	r2, [pc, #116]	; (8009264 <prvHeapInit+0xb0>)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091f2:	4b1c      	ldr	r3, [pc, #112]	; (8009264 <prvHeapInit+0xb0>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	4413      	add	r3, r2
 80091fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009200:	2208      	movs	r2, #8
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	1a9b      	subs	r3, r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 0307 	bic.w	r3, r3, #7
 800920e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4a15      	ldr	r2, [pc, #84]	; (8009268 <prvHeapInit+0xb4>)
 8009214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <prvHeapInit+0xb4>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2200      	movs	r2, #0
 800921c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800921e:	4b12      	ldr	r3, [pc, #72]	; (8009268 <prvHeapInit+0xb4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2200      	movs	r2, #0
 8009224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	1ad2      	subs	r2, r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009234:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <prvHeapInit+0xb4>)
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	4a0a      	ldr	r2, [pc, #40]	; (800926c <prvHeapInit+0xb8>)
 8009242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	4a09      	ldr	r2, [pc, #36]	; (8009270 <prvHeapInit+0xbc>)
 800924a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800924c:	4b09      	ldr	r3, [pc, #36]	; (8009274 <prvHeapInit+0xc0>)
 800924e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009252:	601a      	str	r2, [r3, #0]
}
 8009254:	bf00      	nop
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	20000f80 	.word	0x20000f80
 8009264:	20008c80 	.word	0x20008c80
 8009268:	20008c88 	.word	0x20008c88
 800926c:	20008c90 	.word	0x20008c90
 8009270:	20008c8c 	.word	0x20008c8c
 8009274:	20008c9c 	.word	0x20008c9c

08009278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009280:	4b28      	ldr	r3, [pc, #160]	; (8009324 <prvInsertBlockIntoFreeList+0xac>)
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	e002      	b.n	800928c <prvInsertBlockIntoFreeList+0x14>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	429a      	cmp	r2, r3
 8009294:	d8f7      	bhi.n	8009286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	4413      	add	r3, r2
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d108      	bne.n	80092ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	441a      	add	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	441a      	add	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d118      	bne.n	8009300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	4b15      	ldr	r3, [pc, #84]	; (8009328 <prvInsertBlockIntoFreeList+0xb0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d00d      	beq.n	80092f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	441a      	add	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	e008      	b.n	8009308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092f6:	4b0c      	ldr	r3, [pc, #48]	; (8009328 <prvInsertBlockIntoFreeList+0xb0>)
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	e003      	b.n	8009308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	429a      	cmp	r2, r3
 800930e:	d002      	beq.n	8009316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009316:	bf00      	nop
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	20008c80 	.word	0x20008c80
 8009328:	20008c88 	.word	0x20008c88

0800932c <__errno>:
 800932c:	4b01      	ldr	r3, [pc, #4]	; (8009334 <__errno+0x8>)
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	20000010 	.word	0x20000010

08009338 <_fwrite_r>:
 8009338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800933c:	9c08      	ldr	r4, [sp, #32]
 800933e:	468a      	mov	sl, r1
 8009340:	4690      	mov	r8, r2
 8009342:	fb02 f903 	mul.w	r9, r2, r3
 8009346:	4605      	mov	r5, r0
 8009348:	b118      	cbz	r0, 8009352 <_fwrite_r+0x1a>
 800934a:	6983      	ldr	r3, [r0, #24]
 800934c:	b90b      	cbnz	r3, 8009352 <_fwrite_r+0x1a>
 800934e:	f000 fc1d 	bl	8009b8c <__sinit>
 8009352:	4b26      	ldr	r3, [pc, #152]	; (80093ec <_fwrite_r+0xb4>)
 8009354:	429c      	cmp	r4, r3
 8009356:	d123      	bne.n	80093a0 <_fwrite_r+0x68>
 8009358:	686c      	ldr	r4, [r5, #4]
 800935a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800935c:	07de      	lsls	r6, r3, #31
 800935e:	d405      	bmi.n	800936c <_fwrite_r+0x34>
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	0598      	lsls	r0, r3, #22
 8009364:	d402      	bmi.n	800936c <_fwrite_r+0x34>
 8009366:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009368:	f000 f879 	bl	800945e <__retarget_lock_acquire_recursive>
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	0719      	lsls	r1, r3, #28
 8009370:	d520      	bpl.n	80093b4 <_fwrite_r+0x7c>
 8009372:	6923      	ldr	r3, [r4, #16]
 8009374:	b1f3      	cbz	r3, 80093b4 <_fwrite_r+0x7c>
 8009376:	2600      	movs	r6, #0
 8009378:	454e      	cmp	r6, r9
 800937a:	d029      	beq.n	80093d0 <_fwrite_r+0x98>
 800937c:	68a7      	ldr	r7, [r4, #8]
 800937e:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8009382:	3f01      	subs	r7, #1
 8009384:	2f00      	cmp	r7, #0
 8009386:	60a7      	str	r7, [r4, #8]
 8009388:	da04      	bge.n	8009394 <_fwrite_r+0x5c>
 800938a:	69a3      	ldr	r3, [r4, #24]
 800938c:	429f      	cmp	r7, r3
 800938e:	db19      	blt.n	80093c4 <_fwrite_r+0x8c>
 8009390:	290a      	cmp	r1, #10
 8009392:	d017      	beq.n	80093c4 <_fwrite_r+0x8c>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	1c5a      	adds	r2, r3, #1
 8009398:	6022      	str	r2, [r4, #0]
 800939a:	7019      	strb	r1, [r3, #0]
 800939c:	3601      	adds	r6, #1
 800939e:	e7eb      	b.n	8009378 <_fwrite_r+0x40>
 80093a0:	4b13      	ldr	r3, [pc, #76]	; (80093f0 <_fwrite_r+0xb8>)
 80093a2:	429c      	cmp	r4, r3
 80093a4:	d101      	bne.n	80093aa <_fwrite_r+0x72>
 80093a6:	68ac      	ldr	r4, [r5, #8]
 80093a8:	e7d7      	b.n	800935a <_fwrite_r+0x22>
 80093aa:	4b12      	ldr	r3, [pc, #72]	; (80093f4 <_fwrite_r+0xbc>)
 80093ac:	429c      	cmp	r4, r3
 80093ae:	bf08      	it	eq
 80093b0:	68ec      	ldreq	r4, [r5, #12]
 80093b2:	e7d2      	b.n	800935a <_fwrite_r+0x22>
 80093b4:	4621      	mov	r1, r4
 80093b6:	4628      	mov	r0, r5
 80093b8:	f000 fa42 	bl	8009840 <__swsetup_r>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d0da      	beq.n	8009376 <_fwrite_r+0x3e>
 80093c0:	2600      	movs	r6, #0
 80093c2:	e005      	b.n	80093d0 <_fwrite_r+0x98>
 80093c4:	4622      	mov	r2, r4
 80093c6:	4628      	mov	r0, r5
 80093c8:	f000 f9e8 	bl	800979c <__swbuf_r>
 80093cc:	3001      	adds	r0, #1
 80093ce:	d1e5      	bne.n	800939c <_fwrite_r+0x64>
 80093d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093d2:	07da      	lsls	r2, r3, #31
 80093d4:	d405      	bmi.n	80093e2 <_fwrite_r+0xaa>
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	059b      	lsls	r3, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_fwrite_r+0xaa>
 80093dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093de:	f000 f83f 	bl	8009460 <__retarget_lock_release_recursive>
 80093e2:	fbb6 f0f8 	udiv	r0, r6, r8
 80093e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ea:	bf00      	nop
 80093ec:	0800b81c 	.word	0x0800b81c
 80093f0:	0800b83c 	.word	0x0800b83c
 80093f4:	0800b7fc 	.word	0x0800b7fc

080093f8 <fwrite>:
 80093f8:	b507      	push	{r0, r1, r2, lr}
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	4613      	mov	r3, r2
 80093fe:	460a      	mov	r2, r1
 8009400:	4601      	mov	r1, r0
 8009402:	4803      	ldr	r0, [pc, #12]	; (8009410 <fwrite+0x18>)
 8009404:	6800      	ldr	r0, [r0, #0]
 8009406:	f7ff ff97 	bl	8009338 <_fwrite_r>
 800940a:	b003      	add	sp, #12
 800940c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009410:	20000010 	.word	0x20000010

08009414 <__libc_init_array>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	4d0d      	ldr	r5, [pc, #52]	; (800944c <__libc_init_array+0x38>)
 8009418:	4c0d      	ldr	r4, [pc, #52]	; (8009450 <__libc_init_array+0x3c>)
 800941a:	1b64      	subs	r4, r4, r5
 800941c:	10a4      	asrs	r4, r4, #2
 800941e:	2600      	movs	r6, #0
 8009420:	42a6      	cmp	r6, r4
 8009422:	d109      	bne.n	8009438 <__libc_init_array+0x24>
 8009424:	4d0b      	ldr	r5, [pc, #44]	; (8009454 <__libc_init_array+0x40>)
 8009426:	4c0c      	ldr	r4, [pc, #48]	; (8009458 <__libc_init_array+0x44>)
 8009428:	f001 ffec 	bl	800b404 <_init>
 800942c:	1b64      	subs	r4, r4, r5
 800942e:	10a4      	asrs	r4, r4, #2
 8009430:	2600      	movs	r6, #0
 8009432:	42a6      	cmp	r6, r4
 8009434:	d105      	bne.n	8009442 <__libc_init_array+0x2e>
 8009436:	bd70      	pop	{r4, r5, r6, pc}
 8009438:	f855 3b04 	ldr.w	r3, [r5], #4
 800943c:	4798      	blx	r3
 800943e:	3601      	adds	r6, #1
 8009440:	e7ee      	b.n	8009420 <__libc_init_array+0xc>
 8009442:	f855 3b04 	ldr.w	r3, [r5], #4
 8009446:	4798      	blx	r3
 8009448:	3601      	adds	r6, #1
 800944a:	e7f2      	b.n	8009432 <__libc_init_array+0x1e>
 800944c:	0800b8c8 	.word	0x0800b8c8
 8009450:	0800b8c8 	.word	0x0800b8c8
 8009454:	0800b8c8 	.word	0x0800b8c8
 8009458:	0800b8cc 	.word	0x0800b8cc

0800945c <__retarget_lock_init_recursive>:
 800945c:	4770      	bx	lr

0800945e <__retarget_lock_acquire_recursive>:
 800945e:	4770      	bx	lr

08009460 <__retarget_lock_release_recursive>:
 8009460:	4770      	bx	lr
	...

08009464 <malloc>:
 8009464:	4b02      	ldr	r3, [pc, #8]	; (8009470 <malloc+0xc>)
 8009466:	4601      	mov	r1, r0
 8009468:	6818      	ldr	r0, [r3, #0]
 800946a:	f000 b88d 	b.w	8009588 <_malloc_r>
 800946e:	bf00      	nop
 8009470:	20000010 	.word	0x20000010

08009474 <free>:
 8009474:	4b02      	ldr	r3, [pc, #8]	; (8009480 <free+0xc>)
 8009476:	4601      	mov	r1, r0
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	f000 b819 	b.w	80094b0 <_free_r>
 800947e:	bf00      	nop
 8009480:	20000010 	.word	0x20000010

08009484 <memcpy>:
 8009484:	440a      	add	r2, r1
 8009486:	4291      	cmp	r1, r2
 8009488:	f100 33ff 	add.w	r3, r0, #4294967295
 800948c:	d100      	bne.n	8009490 <memcpy+0xc>
 800948e:	4770      	bx	lr
 8009490:	b510      	push	{r4, lr}
 8009492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800949a:	4291      	cmp	r1, r2
 800949c:	d1f9      	bne.n	8009492 <memcpy+0xe>
 800949e:	bd10      	pop	{r4, pc}

080094a0 <memset>:
 80094a0:	4402      	add	r2, r0
 80094a2:	4603      	mov	r3, r0
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d100      	bne.n	80094aa <memset+0xa>
 80094a8:	4770      	bx	lr
 80094aa:	f803 1b01 	strb.w	r1, [r3], #1
 80094ae:	e7f9      	b.n	80094a4 <memset+0x4>

080094b0 <_free_r>:
 80094b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094b2:	2900      	cmp	r1, #0
 80094b4:	d044      	beq.n	8009540 <_free_r+0x90>
 80094b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ba:	9001      	str	r0, [sp, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f1a1 0404 	sub.w	r4, r1, #4
 80094c2:	bfb8      	it	lt
 80094c4:	18e4      	addlt	r4, r4, r3
 80094c6:	f000 fc89 	bl	8009ddc <__malloc_lock>
 80094ca:	4a1e      	ldr	r2, [pc, #120]	; (8009544 <_free_r+0x94>)
 80094cc:	9801      	ldr	r0, [sp, #4]
 80094ce:	6813      	ldr	r3, [r2, #0]
 80094d0:	b933      	cbnz	r3, 80094e0 <_free_r+0x30>
 80094d2:	6063      	str	r3, [r4, #4]
 80094d4:	6014      	str	r4, [r2, #0]
 80094d6:	b003      	add	sp, #12
 80094d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094dc:	f000 bc84 	b.w	8009de8 <__malloc_unlock>
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	d908      	bls.n	80094f6 <_free_r+0x46>
 80094e4:	6825      	ldr	r5, [r4, #0]
 80094e6:	1961      	adds	r1, r4, r5
 80094e8:	428b      	cmp	r3, r1
 80094ea:	bf01      	itttt	eq
 80094ec:	6819      	ldreq	r1, [r3, #0]
 80094ee:	685b      	ldreq	r3, [r3, #4]
 80094f0:	1949      	addeq	r1, r1, r5
 80094f2:	6021      	streq	r1, [r4, #0]
 80094f4:	e7ed      	b.n	80094d2 <_free_r+0x22>
 80094f6:	461a      	mov	r2, r3
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	b10b      	cbz	r3, 8009500 <_free_r+0x50>
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d9fa      	bls.n	80094f6 <_free_r+0x46>
 8009500:	6811      	ldr	r1, [r2, #0]
 8009502:	1855      	adds	r5, r2, r1
 8009504:	42a5      	cmp	r5, r4
 8009506:	d10b      	bne.n	8009520 <_free_r+0x70>
 8009508:	6824      	ldr	r4, [r4, #0]
 800950a:	4421      	add	r1, r4
 800950c:	1854      	adds	r4, r2, r1
 800950e:	42a3      	cmp	r3, r4
 8009510:	6011      	str	r1, [r2, #0]
 8009512:	d1e0      	bne.n	80094d6 <_free_r+0x26>
 8009514:	681c      	ldr	r4, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	6053      	str	r3, [r2, #4]
 800951a:	4421      	add	r1, r4
 800951c:	6011      	str	r1, [r2, #0]
 800951e:	e7da      	b.n	80094d6 <_free_r+0x26>
 8009520:	d902      	bls.n	8009528 <_free_r+0x78>
 8009522:	230c      	movs	r3, #12
 8009524:	6003      	str	r3, [r0, #0]
 8009526:	e7d6      	b.n	80094d6 <_free_r+0x26>
 8009528:	6825      	ldr	r5, [r4, #0]
 800952a:	1961      	adds	r1, r4, r5
 800952c:	428b      	cmp	r3, r1
 800952e:	bf04      	itt	eq
 8009530:	6819      	ldreq	r1, [r3, #0]
 8009532:	685b      	ldreq	r3, [r3, #4]
 8009534:	6063      	str	r3, [r4, #4]
 8009536:	bf04      	itt	eq
 8009538:	1949      	addeq	r1, r1, r5
 800953a:	6021      	streq	r1, [r4, #0]
 800953c:	6054      	str	r4, [r2, #4]
 800953e:	e7ca      	b.n	80094d6 <_free_r+0x26>
 8009540:	b003      	add	sp, #12
 8009542:	bd30      	pop	{r4, r5, pc}
 8009544:	20008ca4 	.word	0x20008ca4

08009548 <sbrk_aligned>:
 8009548:	b570      	push	{r4, r5, r6, lr}
 800954a:	4e0e      	ldr	r6, [pc, #56]	; (8009584 <sbrk_aligned+0x3c>)
 800954c:	460c      	mov	r4, r1
 800954e:	6831      	ldr	r1, [r6, #0]
 8009550:	4605      	mov	r5, r0
 8009552:	b911      	cbnz	r1, 800955a <sbrk_aligned+0x12>
 8009554:	f000 f8f8 	bl	8009748 <_sbrk_r>
 8009558:	6030      	str	r0, [r6, #0]
 800955a:	4621      	mov	r1, r4
 800955c:	4628      	mov	r0, r5
 800955e:	f000 f8f3 	bl	8009748 <_sbrk_r>
 8009562:	1c43      	adds	r3, r0, #1
 8009564:	d00a      	beq.n	800957c <sbrk_aligned+0x34>
 8009566:	1cc4      	adds	r4, r0, #3
 8009568:	f024 0403 	bic.w	r4, r4, #3
 800956c:	42a0      	cmp	r0, r4
 800956e:	d007      	beq.n	8009580 <sbrk_aligned+0x38>
 8009570:	1a21      	subs	r1, r4, r0
 8009572:	4628      	mov	r0, r5
 8009574:	f000 f8e8 	bl	8009748 <_sbrk_r>
 8009578:	3001      	adds	r0, #1
 800957a:	d101      	bne.n	8009580 <sbrk_aligned+0x38>
 800957c:	f04f 34ff 	mov.w	r4, #4294967295
 8009580:	4620      	mov	r0, r4
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	20008ca8 	.word	0x20008ca8

08009588 <_malloc_r>:
 8009588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800958c:	1ccd      	adds	r5, r1, #3
 800958e:	f025 0503 	bic.w	r5, r5, #3
 8009592:	3508      	adds	r5, #8
 8009594:	2d0c      	cmp	r5, #12
 8009596:	bf38      	it	cc
 8009598:	250c      	movcc	r5, #12
 800959a:	2d00      	cmp	r5, #0
 800959c:	4607      	mov	r7, r0
 800959e:	db01      	blt.n	80095a4 <_malloc_r+0x1c>
 80095a0:	42a9      	cmp	r1, r5
 80095a2:	d905      	bls.n	80095b0 <_malloc_r+0x28>
 80095a4:	230c      	movs	r3, #12
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	2600      	movs	r6, #0
 80095aa:	4630      	mov	r0, r6
 80095ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b0:	4e2e      	ldr	r6, [pc, #184]	; (800966c <_malloc_r+0xe4>)
 80095b2:	f000 fc13 	bl	8009ddc <__malloc_lock>
 80095b6:	6833      	ldr	r3, [r6, #0]
 80095b8:	461c      	mov	r4, r3
 80095ba:	bb34      	cbnz	r4, 800960a <_malloc_r+0x82>
 80095bc:	4629      	mov	r1, r5
 80095be:	4638      	mov	r0, r7
 80095c0:	f7ff ffc2 	bl	8009548 <sbrk_aligned>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	4604      	mov	r4, r0
 80095c8:	d14d      	bne.n	8009666 <_malloc_r+0xde>
 80095ca:	6834      	ldr	r4, [r6, #0]
 80095cc:	4626      	mov	r6, r4
 80095ce:	2e00      	cmp	r6, #0
 80095d0:	d140      	bne.n	8009654 <_malloc_r+0xcc>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	4631      	mov	r1, r6
 80095d6:	4638      	mov	r0, r7
 80095d8:	eb04 0803 	add.w	r8, r4, r3
 80095dc:	f000 f8b4 	bl	8009748 <_sbrk_r>
 80095e0:	4580      	cmp	r8, r0
 80095e2:	d13a      	bne.n	800965a <_malloc_r+0xd2>
 80095e4:	6821      	ldr	r1, [r4, #0]
 80095e6:	3503      	adds	r5, #3
 80095e8:	1a6d      	subs	r5, r5, r1
 80095ea:	f025 0503 	bic.w	r5, r5, #3
 80095ee:	3508      	adds	r5, #8
 80095f0:	2d0c      	cmp	r5, #12
 80095f2:	bf38      	it	cc
 80095f4:	250c      	movcc	r5, #12
 80095f6:	4629      	mov	r1, r5
 80095f8:	4638      	mov	r0, r7
 80095fa:	f7ff ffa5 	bl	8009548 <sbrk_aligned>
 80095fe:	3001      	adds	r0, #1
 8009600:	d02b      	beq.n	800965a <_malloc_r+0xd2>
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	442b      	add	r3, r5
 8009606:	6023      	str	r3, [r4, #0]
 8009608:	e00e      	b.n	8009628 <_malloc_r+0xa0>
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	1b52      	subs	r2, r2, r5
 800960e:	d41e      	bmi.n	800964e <_malloc_r+0xc6>
 8009610:	2a0b      	cmp	r2, #11
 8009612:	d916      	bls.n	8009642 <_malloc_r+0xba>
 8009614:	1961      	adds	r1, r4, r5
 8009616:	42a3      	cmp	r3, r4
 8009618:	6025      	str	r5, [r4, #0]
 800961a:	bf18      	it	ne
 800961c:	6059      	strne	r1, [r3, #4]
 800961e:	6863      	ldr	r3, [r4, #4]
 8009620:	bf08      	it	eq
 8009622:	6031      	streq	r1, [r6, #0]
 8009624:	5162      	str	r2, [r4, r5]
 8009626:	604b      	str	r3, [r1, #4]
 8009628:	4638      	mov	r0, r7
 800962a:	f104 060b 	add.w	r6, r4, #11
 800962e:	f000 fbdb 	bl	8009de8 <__malloc_unlock>
 8009632:	f026 0607 	bic.w	r6, r6, #7
 8009636:	1d23      	adds	r3, r4, #4
 8009638:	1af2      	subs	r2, r6, r3
 800963a:	d0b6      	beq.n	80095aa <_malloc_r+0x22>
 800963c:	1b9b      	subs	r3, r3, r6
 800963e:	50a3      	str	r3, [r4, r2]
 8009640:	e7b3      	b.n	80095aa <_malloc_r+0x22>
 8009642:	6862      	ldr	r2, [r4, #4]
 8009644:	42a3      	cmp	r3, r4
 8009646:	bf0c      	ite	eq
 8009648:	6032      	streq	r2, [r6, #0]
 800964a:	605a      	strne	r2, [r3, #4]
 800964c:	e7ec      	b.n	8009628 <_malloc_r+0xa0>
 800964e:	4623      	mov	r3, r4
 8009650:	6864      	ldr	r4, [r4, #4]
 8009652:	e7b2      	b.n	80095ba <_malloc_r+0x32>
 8009654:	4634      	mov	r4, r6
 8009656:	6876      	ldr	r6, [r6, #4]
 8009658:	e7b9      	b.n	80095ce <_malloc_r+0x46>
 800965a:	230c      	movs	r3, #12
 800965c:	603b      	str	r3, [r7, #0]
 800965e:	4638      	mov	r0, r7
 8009660:	f000 fbc2 	bl	8009de8 <__malloc_unlock>
 8009664:	e7a1      	b.n	80095aa <_malloc_r+0x22>
 8009666:	6025      	str	r5, [r4, #0]
 8009668:	e7de      	b.n	8009628 <_malloc_r+0xa0>
 800966a:	bf00      	nop
 800966c:	20008ca4 	.word	0x20008ca4

08009670 <srand>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4b10      	ldr	r3, [pc, #64]	; (80096b4 <srand+0x44>)
 8009674:	681d      	ldr	r5, [r3, #0]
 8009676:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009678:	4604      	mov	r4, r0
 800967a:	b9b3      	cbnz	r3, 80096aa <srand+0x3a>
 800967c:	2018      	movs	r0, #24
 800967e:	f7ff fef1 	bl	8009464 <malloc>
 8009682:	4602      	mov	r2, r0
 8009684:	63a8      	str	r0, [r5, #56]	; 0x38
 8009686:	b920      	cbnz	r0, 8009692 <srand+0x22>
 8009688:	4b0b      	ldr	r3, [pc, #44]	; (80096b8 <srand+0x48>)
 800968a:	480c      	ldr	r0, [pc, #48]	; (80096bc <srand+0x4c>)
 800968c:	2142      	movs	r1, #66	; 0x42
 800968e:	f000 f945 	bl	800991c <__assert_func>
 8009692:	490b      	ldr	r1, [pc, #44]	; (80096c0 <srand+0x50>)
 8009694:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <srand+0x54>)
 8009696:	e9c0 1300 	strd	r1, r3, [r0]
 800969a:	4b0b      	ldr	r3, [pc, #44]	; (80096c8 <srand+0x58>)
 800969c:	6083      	str	r3, [r0, #8]
 800969e:	230b      	movs	r3, #11
 80096a0:	8183      	strh	r3, [r0, #12]
 80096a2:	2100      	movs	r1, #0
 80096a4:	2001      	movs	r0, #1
 80096a6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80096aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80096ac:	2200      	movs	r2, #0
 80096ae:	611c      	str	r4, [r3, #16]
 80096b0:	615a      	str	r2, [r3, #20]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	20000010 	.word	0x20000010
 80096b8:	0800b74c 	.word	0x0800b74c
 80096bc:	0800b763 	.word	0x0800b763
 80096c0:	abcd330e 	.word	0xabcd330e
 80096c4:	e66d1234 	.word	0xe66d1234
 80096c8:	0005deec 	.word	0x0005deec

080096cc <rand>:
 80096cc:	4b16      	ldr	r3, [pc, #88]	; (8009728 <rand+0x5c>)
 80096ce:	b510      	push	{r4, lr}
 80096d0:	681c      	ldr	r4, [r3, #0]
 80096d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096d4:	b9b3      	cbnz	r3, 8009704 <rand+0x38>
 80096d6:	2018      	movs	r0, #24
 80096d8:	f7ff fec4 	bl	8009464 <malloc>
 80096dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80096de:	b928      	cbnz	r0, 80096ec <rand+0x20>
 80096e0:	4602      	mov	r2, r0
 80096e2:	4b12      	ldr	r3, [pc, #72]	; (800972c <rand+0x60>)
 80096e4:	4812      	ldr	r0, [pc, #72]	; (8009730 <rand+0x64>)
 80096e6:	214e      	movs	r1, #78	; 0x4e
 80096e8:	f000 f918 	bl	800991c <__assert_func>
 80096ec:	4a11      	ldr	r2, [pc, #68]	; (8009734 <rand+0x68>)
 80096ee:	4b12      	ldr	r3, [pc, #72]	; (8009738 <rand+0x6c>)
 80096f0:	e9c0 2300 	strd	r2, r3, [r0]
 80096f4:	4b11      	ldr	r3, [pc, #68]	; (800973c <rand+0x70>)
 80096f6:	6083      	str	r3, [r0, #8]
 80096f8:	230b      	movs	r3, #11
 80096fa:	8183      	strh	r3, [r0, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	2300      	movs	r3, #0
 8009700:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009704:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009706:	4a0e      	ldr	r2, [pc, #56]	; (8009740 <rand+0x74>)
 8009708:	6920      	ldr	r0, [r4, #16]
 800970a:	6963      	ldr	r3, [r4, #20]
 800970c:	490d      	ldr	r1, [pc, #52]	; (8009744 <rand+0x78>)
 800970e:	4342      	muls	r2, r0
 8009710:	fb01 2203 	mla	r2, r1, r3, r2
 8009714:	fba0 0101 	umull	r0, r1, r0, r1
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	eb42 0001 	adc.w	r0, r2, r1
 800971e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009722:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009726:	bd10      	pop	{r4, pc}
 8009728:	20000010 	.word	0x20000010
 800972c:	0800b74c 	.word	0x0800b74c
 8009730:	0800b763 	.word	0x0800b763
 8009734:	abcd330e 	.word	0xabcd330e
 8009738:	e66d1234 	.word	0xe66d1234
 800973c:	0005deec 	.word	0x0005deec
 8009740:	5851f42d 	.word	0x5851f42d
 8009744:	4c957f2d 	.word	0x4c957f2d

08009748 <_sbrk_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4d06      	ldr	r5, [pc, #24]	; (8009764 <_sbrk_r+0x1c>)
 800974c:	2300      	movs	r3, #0
 800974e:	4604      	mov	r4, r0
 8009750:	4608      	mov	r0, r1
 8009752:	602b      	str	r3, [r5, #0]
 8009754:	f7f9 fb96 	bl	8002e84 <_sbrk>
 8009758:	1c43      	adds	r3, r0, #1
 800975a:	d102      	bne.n	8009762 <_sbrk_r+0x1a>
 800975c:	682b      	ldr	r3, [r5, #0]
 800975e:	b103      	cbz	r3, 8009762 <_sbrk_r+0x1a>
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	bd38      	pop	{r3, r4, r5, pc}
 8009764:	20008cac 	.word	0x20008cac

08009768 <time>:
 8009768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800976a:	4b0b      	ldr	r3, [pc, #44]	; (8009798 <time+0x30>)
 800976c:	2200      	movs	r2, #0
 800976e:	4669      	mov	r1, sp
 8009770:	4604      	mov	r4, r0
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	f000 faba 	bl	8009cec <_gettimeofday_r>
 8009778:	2800      	cmp	r0, #0
 800977a:	bfbe      	ittt	lt
 800977c:	f04f 32ff 	movlt.w	r2, #4294967295
 8009780:	f04f 33ff 	movlt.w	r3, #4294967295
 8009784:	e9cd 2300 	strdlt	r2, r3, [sp]
 8009788:	e9dd 0100 	ldrd	r0, r1, [sp]
 800978c:	b10c      	cbz	r4, 8009792 <time+0x2a>
 800978e:	e9c4 0100 	strd	r0, r1, [r4]
 8009792:	b004      	add	sp, #16
 8009794:	bd10      	pop	{r4, pc}
 8009796:	bf00      	nop
 8009798:	20000010 	.word	0x20000010

0800979c <__swbuf_r>:
 800979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979e:	460e      	mov	r6, r1
 80097a0:	4614      	mov	r4, r2
 80097a2:	4605      	mov	r5, r0
 80097a4:	b118      	cbz	r0, 80097ae <__swbuf_r+0x12>
 80097a6:	6983      	ldr	r3, [r0, #24]
 80097a8:	b90b      	cbnz	r3, 80097ae <__swbuf_r+0x12>
 80097aa:	f000 f9ef 	bl	8009b8c <__sinit>
 80097ae:	4b21      	ldr	r3, [pc, #132]	; (8009834 <__swbuf_r+0x98>)
 80097b0:	429c      	cmp	r4, r3
 80097b2:	d12b      	bne.n	800980c <__swbuf_r+0x70>
 80097b4:	686c      	ldr	r4, [r5, #4]
 80097b6:	69a3      	ldr	r3, [r4, #24]
 80097b8:	60a3      	str	r3, [r4, #8]
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	071a      	lsls	r2, r3, #28
 80097be:	d52f      	bpl.n	8009820 <__swbuf_r+0x84>
 80097c0:	6923      	ldr	r3, [r4, #16]
 80097c2:	b36b      	cbz	r3, 8009820 <__swbuf_r+0x84>
 80097c4:	6923      	ldr	r3, [r4, #16]
 80097c6:	6820      	ldr	r0, [r4, #0]
 80097c8:	1ac0      	subs	r0, r0, r3
 80097ca:	6963      	ldr	r3, [r4, #20]
 80097cc:	b2f6      	uxtb	r6, r6
 80097ce:	4283      	cmp	r3, r0
 80097d0:	4637      	mov	r7, r6
 80097d2:	dc04      	bgt.n	80097de <__swbuf_r+0x42>
 80097d4:	4621      	mov	r1, r4
 80097d6:	4628      	mov	r0, r5
 80097d8:	f000 f944 	bl	8009a64 <_fflush_r>
 80097dc:	bb30      	cbnz	r0, 800982c <__swbuf_r+0x90>
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	60a3      	str	r3, [r4, #8]
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	1c5a      	adds	r2, r3, #1
 80097e8:	6022      	str	r2, [r4, #0]
 80097ea:	701e      	strb	r6, [r3, #0]
 80097ec:	6963      	ldr	r3, [r4, #20]
 80097ee:	3001      	adds	r0, #1
 80097f0:	4283      	cmp	r3, r0
 80097f2:	d004      	beq.n	80097fe <__swbuf_r+0x62>
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	07db      	lsls	r3, r3, #31
 80097f8:	d506      	bpl.n	8009808 <__swbuf_r+0x6c>
 80097fa:	2e0a      	cmp	r6, #10
 80097fc:	d104      	bne.n	8009808 <__swbuf_r+0x6c>
 80097fe:	4621      	mov	r1, r4
 8009800:	4628      	mov	r0, r5
 8009802:	f000 f92f 	bl	8009a64 <_fflush_r>
 8009806:	b988      	cbnz	r0, 800982c <__swbuf_r+0x90>
 8009808:	4638      	mov	r0, r7
 800980a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800980c:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <__swbuf_r+0x9c>)
 800980e:	429c      	cmp	r4, r3
 8009810:	d101      	bne.n	8009816 <__swbuf_r+0x7a>
 8009812:	68ac      	ldr	r4, [r5, #8]
 8009814:	e7cf      	b.n	80097b6 <__swbuf_r+0x1a>
 8009816:	4b09      	ldr	r3, [pc, #36]	; (800983c <__swbuf_r+0xa0>)
 8009818:	429c      	cmp	r4, r3
 800981a:	bf08      	it	eq
 800981c:	68ec      	ldreq	r4, [r5, #12]
 800981e:	e7ca      	b.n	80097b6 <__swbuf_r+0x1a>
 8009820:	4621      	mov	r1, r4
 8009822:	4628      	mov	r0, r5
 8009824:	f000 f80c 	bl	8009840 <__swsetup_r>
 8009828:	2800      	cmp	r0, #0
 800982a:	d0cb      	beq.n	80097c4 <__swbuf_r+0x28>
 800982c:	f04f 37ff 	mov.w	r7, #4294967295
 8009830:	e7ea      	b.n	8009808 <__swbuf_r+0x6c>
 8009832:	bf00      	nop
 8009834:	0800b81c 	.word	0x0800b81c
 8009838:	0800b83c 	.word	0x0800b83c
 800983c:	0800b7fc 	.word	0x0800b7fc

08009840 <__swsetup_r>:
 8009840:	4b32      	ldr	r3, [pc, #200]	; (800990c <__swsetup_r+0xcc>)
 8009842:	b570      	push	{r4, r5, r6, lr}
 8009844:	681d      	ldr	r5, [r3, #0]
 8009846:	4606      	mov	r6, r0
 8009848:	460c      	mov	r4, r1
 800984a:	b125      	cbz	r5, 8009856 <__swsetup_r+0x16>
 800984c:	69ab      	ldr	r3, [r5, #24]
 800984e:	b913      	cbnz	r3, 8009856 <__swsetup_r+0x16>
 8009850:	4628      	mov	r0, r5
 8009852:	f000 f99b 	bl	8009b8c <__sinit>
 8009856:	4b2e      	ldr	r3, [pc, #184]	; (8009910 <__swsetup_r+0xd0>)
 8009858:	429c      	cmp	r4, r3
 800985a:	d10f      	bne.n	800987c <__swsetup_r+0x3c>
 800985c:	686c      	ldr	r4, [r5, #4]
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009864:	0719      	lsls	r1, r3, #28
 8009866:	d42c      	bmi.n	80098c2 <__swsetup_r+0x82>
 8009868:	06dd      	lsls	r5, r3, #27
 800986a:	d411      	bmi.n	8009890 <__swsetup_r+0x50>
 800986c:	2309      	movs	r3, #9
 800986e:	6033      	str	r3, [r6, #0]
 8009870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009874:	81a3      	strh	r3, [r4, #12]
 8009876:	f04f 30ff 	mov.w	r0, #4294967295
 800987a:	e03e      	b.n	80098fa <__swsetup_r+0xba>
 800987c:	4b25      	ldr	r3, [pc, #148]	; (8009914 <__swsetup_r+0xd4>)
 800987e:	429c      	cmp	r4, r3
 8009880:	d101      	bne.n	8009886 <__swsetup_r+0x46>
 8009882:	68ac      	ldr	r4, [r5, #8]
 8009884:	e7eb      	b.n	800985e <__swsetup_r+0x1e>
 8009886:	4b24      	ldr	r3, [pc, #144]	; (8009918 <__swsetup_r+0xd8>)
 8009888:	429c      	cmp	r4, r3
 800988a:	bf08      	it	eq
 800988c:	68ec      	ldreq	r4, [r5, #12]
 800988e:	e7e6      	b.n	800985e <__swsetup_r+0x1e>
 8009890:	0758      	lsls	r0, r3, #29
 8009892:	d512      	bpl.n	80098ba <__swsetup_r+0x7a>
 8009894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009896:	b141      	cbz	r1, 80098aa <__swsetup_r+0x6a>
 8009898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800989c:	4299      	cmp	r1, r3
 800989e:	d002      	beq.n	80098a6 <__swsetup_r+0x66>
 80098a0:	4630      	mov	r0, r6
 80098a2:	f7ff fe05 	bl	80094b0 <_free_r>
 80098a6:	2300      	movs	r3, #0
 80098a8:	6363      	str	r3, [r4, #52]	; 0x34
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098b0:	81a3      	strh	r3, [r4, #12]
 80098b2:	2300      	movs	r3, #0
 80098b4:	6063      	str	r3, [r4, #4]
 80098b6:	6923      	ldr	r3, [r4, #16]
 80098b8:	6023      	str	r3, [r4, #0]
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	f043 0308 	orr.w	r3, r3, #8
 80098c0:	81a3      	strh	r3, [r4, #12]
 80098c2:	6923      	ldr	r3, [r4, #16]
 80098c4:	b94b      	cbnz	r3, 80098da <__swsetup_r+0x9a>
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098d0:	d003      	beq.n	80098da <__swsetup_r+0x9a>
 80098d2:	4621      	mov	r1, r4
 80098d4:	4630      	mov	r0, r6
 80098d6:	f000 fa41 	bl	8009d5c <__smakebuf_r>
 80098da:	89a0      	ldrh	r0, [r4, #12]
 80098dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098e0:	f010 0301 	ands.w	r3, r0, #1
 80098e4:	d00a      	beq.n	80098fc <__swsetup_r+0xbc>
 80098e6:	2300      	movs	r3, #0
 80098e8:	60a3      	str	r3, [r4, #8]
 80098ea:	6963      	ldr	r3, [r4, #20]
 80098ec:	425b      	negs	r3, r3
 80098ee:	61a3      	str	r3, [r4, #24]
 80098f0:	6923      	ldr	r3, [r4, #16]
 80098f2:	b943      	cbnz	r3, 8009906 <__swsetup_r+0xc6>
 80098f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098f8:	d1ba      	bne.n	8009870 <__swsetup_r+0x30>
 80098fa:	bd70      	pop	{r4, r5, r6, pc}
 80098fc:	0781      	lsls	r1, r0, #30
 80098fe:	bf58      	it	pl
 8009900:	6963      	ldrpl	r3, [r4, #20]
 8009902:	60a3      	str	r3, [r4, #8]
 8009904:	e7f4      	b.n	80098f0 <__swsetup_r+0xb0>
 8009906:	2000      	movs	r0, #0
 8009908:	e7f7      	b.n	80098fa <__swsetup_r+0xba>
 800990a:	bf00      	nop
 800990c:	20000010 	.word	0x20000010
 8009910:	0800b81c 	.word	0x0800b81c
 8009914:	0800b83c 	.word	0x0800b83c
 8009918:	0800b7fc 	.word	0x0800b7fc

0800991c <__assert_func>:
 800991c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800991e:	4614      	mov	r4, r2
 8009920:	461a      	mov	r2, r3
 8009922:	4b09      	ldr	r3, [pc, #36]	; (8009948 <__assert_func+0x2c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4605      	mov	r5, r0
 8009928:	68d8      	ldr	r0, [r3, #12]
 800992a:	b14c      	cbz	r4, 8009940 <__assert_func+0x24>
 800992c:	4b07      	ldr	r3, [pc, #28]	; (800994c <__assert_func+0x30>)
 800992e:	9100      	str	r1, [sp, #0]
 8009930:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009934:	4906      	ldr	r1, [pc, #24]	; (8009950 <__assert_func+0x34>)
 8009936:	462b      	mov	r3, r5
 8009938:	f000 f9a6 	bl	8009c88 <fiprintf>
 800993c:	f000 fd9e 	bl	800a47c <abort>
 8009940:	4b04      	ldr	r3, [pc, #16]	; (8009954 <__assert_func+0x38>)
 8009942:	461c      	mov	r4, r3
 8009944:	e7f3      	b.n	800992e <__assert_func+0x12>
 8009946:	bf00      	nop
 8009948:	20000010 	.word	0x20000010
 800994c:	0800b7be 	.word	0x0800b7be
 8009950:	0800b7cb 	.word	0x0800b7cb
 8009954:	0800b7f9 	.word	0x0800b7f9

08009958 <__sflush_r>:
 8009958:	898a      	ldrh	r2, [r1, #12]
 800995a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800995e:	4605      	mov	r5, r0
 8009960:	0710      	lsls	r0, r2, #28
 8009962:	460c      	mov	r4, r1
 8009964:	d458      	bmi.n	8009a18 <__sflush_r+0xc0>
 8009966:	684b      	ldr	r3, [r1, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	dc05      	bgt.n	8009978 <__sflush_r+0x20>
 800996c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800996e:	2b00      	cmp	r3, #0
 8009970:	dc02      	bgt.n	8009978 <__sflush_r+0x20>
 8009972:	2000      	movs	r0, #0
 8009974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800997a:	2e00      	cmp	r6, #0
 800997c:	d0f9      	beq.n	8009972 <__sflush_r+0x1a>
 800997e:	2300      	movs	r3, #0
 8009980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009984:	682f      	ldr	r7, [r5, #0]
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	d032      	beq.n	80099f0 <__sflush_r+0x98>
 800998a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	075a      	lsls	r2, r3, #29
 8009990:	d505      	bpl.n	800999e <__sflush_r+0x46>
 8009992:	6863      	ldr	r3, [r4, #4]
 8009994:	1ac0      	subs	r0, r0, r3
 8009996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009998:	b10b      	cbz	r3, 800999e <__sflush_r+0x46>
 800999a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800999c:	1ac0      	subs	r0, r0, r3
 800999e:	2300      	movs	r3, #0
 80099a0:	4602      	mov	r2, r0
 80099a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099a4:	6a21      	ldr	r1, [r4, #32]
 80099a6:	4628      	mov	r0, r5
 80099a8:	47b0      	blx	r6
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	d106      	bne.n	80099be <__sflush_r+0x66>
 80099b0:	6829      	ldr	r1, [r5, #0]
 80099b2:	291d      	cmp	r1, #29
 80099b4:	d82c      	bhi.n	8009a10 <__sflush_r+0xb8>
 80099b6:	4a2a      	ldr	r2, [pc, #168]	; (8009a60 <__sflush_r+0x108>)
 80099b8:	40ca      	lsrs	r2, r1
 80099ba:	07d6      	lsls	r6, r2, #31
 80099bc:	d528      	bpl.n	8009a10 <__sflush_r+0xb8>
 80099be:	2200      	movs	r2, #0
 80099c0:	6062      	str	r2, [r4, #4]
 80099c2:	04d9      	lsls	r1, r3, #19
 80099c4:	6922      	ldr	r2, [r4, #16]
 80099c6:	6022      	str	r2, [r4, #0]
 80099c8:	d504      	bpl.n	80099d4 <__sflush_r+0x7c>
 80099ca:	1c42      	adds	r2, r0, #1
 80099cc:	d101      	bne.n	80099d2 <__sflush_r+0x7a>
 80099ce:	682b      	ldr	r3, [r5, #0]
 80099d0:	b903      	cbnz	r3, 80099d4 <__sflush_r+0x7c>
 80099d2:	6560      	str	r0, [r4, #84]	; 0x54
 80099d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099d6:	602f      	str	r7, [r5, #0]
 80099d8:	2900      	cmp	r1, #0
 80099da:	d0ca      	beq.n	8009972 <__sflush_r+0x1a>
 80099dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099e0:	4299      	cmp	r1, r3
 80099e2:	d002      	beq.n	80099ea <__sflush_r+0x92>
 80099e4:	4628      	mov	r0, r5
 80099e6:	f7ff fd63 	bl	80094b0 <_free_r>
 80099ea:	2000      	movs	r0, #0
 80099ec:	6360      	str	r0, [r4, #52]	; 0x34
 80099ee:	e7c1      	b.n	8009974 <__sflush_r+0x1c>
 80099f0:	6a21      	ldr	r1, [r4, #32]
 80099f2:	2301      	movs	r3, #1
 80099f4:	4628      	mov	r0, r5
 80099f6:	47b0      	blx	r6
 80099f8:	1c41      	adds	r1, r0, #1
 80099fa:	d1c7      	bne.n	800998c <__sflush_r+0x34>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0c4      	beq.n	800998c <__sflush_r+0x34>
 8009a02:	2b1d      	cmp	r3, #29
 8009a04:	d001      	beq.n	8009a0a <__sflush_r+0xb2>
 8009a06:	2b16      	cmp	r3, #22
 8009a08:	d101      	bne.n	8009a0e <__sflush_r+0xb6>
 8009a0a:	602f      	str	r7, [r5, #0]
 8009a0c:	e7b1      	b.n	8009972 <__sflush_r+0x1a>
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	e7ad      	b.n	8009974 <__sflush_r+0x1c>
 8009a18:	690f      	ldr	r7, [r1, #16]
 8009a1a:	2f00      	cmp	r7, #0
 8009a1c:	d0a9      	beq.n	8009972 <__sflush_r+0x1a>
 8009a1e:	0793      	lsls	r3, r2, #30
 8009a20:	680e      	ldr	r6, [r1, #0]
 8009a22:	bf08      	it	eq
 8009a24:	694b      	ldreq	r3, [r1, #20]
 8009a26:	600f      	str	r7, [r1, #0]
 8009a28:	bf18      	it	ne
 8009a2a:	2300      	movne	r3, #0
 8009a2c:	eba6 0807 	sub.w	r8, r6, r7
 8009a30:	608b      	str	r3, [r1, #8]
 8009a32:	f1b8 0f00 	cmp.w	r8, #0
 8009a36:	dd9c      	ble.n	8009972 <__sflush_r+0x1a>
 8009a38:	6a21      	ldr	r1, [r4, #32]
 8009a3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a3c:	4643      	mov	r3, r8
 8009a3e:	463a      	mov	r2, r7
 8009a40:	4628      	mov	r0, r5
 8009a42:	47b0      	blx	r6
 8009a44:	2800      	cmp	r0, #0
 8009a46:	dc06      	bgt.n	8009a56 <__sflush_r+0xfe>
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a4e:	81a3      	strh	r3, [r4, #12]
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	e78e      	b.n	8009974 <__sflush_r+0x1c>
 8009a56:	4407      	add	r7, r0
 8009a58:	eba8 0800 	sub.w	r8, r8, r0
 8009a5c:	e7e9      	b.n	8009a32 <__sflush_r+0xda>
 8009a5e:	bf00      	nop
 8009a60:	20400001 	.word	0x20400001

08009a64 <_fflush_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	690b      	ldr	r3, [r1, #16]
 8009a68:	4605      	mov	r5, r0
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	b913      	cbnz	r3, 8009a74 <_fflush_r+0x10>
 8009a6e:	2500      	movs	r5, #0
 8009a70:	4628      	mov	r0, r5
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	b118      	cbz	r0, 8009a7e <_fflush_r+0x1a>
 8009a76:	6983      	ldr	r3, [r0, #24]
 8009a78:	b90b      	cbnz	r3, 8009a7e <_fflush_r+0x1a>
 8009a7a:	f000 f887 	bl	8009b8c <__sinit>
 8009a7e:	4b14      	ldr	r3, [pc, #80]	; (8009ad0 <_fflush_r+0x6c>)
 8009a80:	429c      	cmp	r4, r3
 8009a82:	d11b      	bne.n	8009abc <_fflush_r+0x58>
 8009a84:	686c      	ldr	r4, [r5, #4]
 8009a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0ef      	beq.n	8009a6e <_fflush_r+0xa>
 8009a8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a90:	07d0      	lsls	r0, r2, #31
 8009a92:	d404      	bmi.n	8009a9e <_fflush_r+0x3a>
 8009a94:	0599      	lsls	r1, r3, #22
 8009a96:	d402      	bmi.n	8009a9e <_fflush_r+0x3a>
 8009a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a9a:	f7ff fce0 	bl	800945e <__retarget_lock_acquire_recursive>
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	f7ff ff59 	bl	8009958 <__sflush_r>
 8009aa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aa8:	07da      	lsls	r2, r3, #31
 8009aaa:	4605      	mov	r5, r0
 8009aac:	d4e0      	bmi.n	8009a70 <_fflush_r+0xc>
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	059b      	lsls	r3, r3, #22
 8009ab2:	d4dd      	bmi.n	8009a70 <_fflush_r+0xc>
 8009ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ab6:	f7ff fcd3 	bl	8009460 <__retarget_lock_release_recursive>
 8009aba:	e7d9      	b.n	8009a70 <_fflush_r+0xc>
 8009abc:	4b05      	ldr	r3, [pc, #20]	; (8009ad4 <_fflush_r+0x70>)
 8009abe:	429c      	cmp	r4, r3
 8009ac0:	d101      	bne.n	8009ac6 <_fflush_r+0x62>
 8009ac2:	68ac      	ldr	r4, [r5, #8]
 8009ac4:	e7df      	b.n	8009a86 <_fflush_r+0x22>
 8009ac6:	4b04      	ldr	r3, [pc, #16]	; (8009ad8 <_fflush_r+0x74>)
 8009ac8:	429c      	cmp	r4, r3
 8009aca:	bf08      	it	eq
 8009acc:	68ec      	ldreq	r4, [r5, #12]
 8009ace:	e7da      	b.n	8009a86 <_fflush_r+0x22>
 8009ad0:	0800b81c 	.word	0x0800b81c
 8009ad4:	0800b83c 	.word	0x0800b83c
 8009ad8:	0800b7fc 	.word	0x0800b7fc

08009adc <std>:
 8009adc:	2300      	movs	r3, #0
 8009ade:	b510      	push	{r4, lr}
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aea:	6083      	str	r3, [r0, #8]
 8009aec:	8181      	strh	r1, [r0, #12]
 8009aee:	6643      	str	r3, [r0, #100]	; 0x64
 8009af0:	81c2      	strh	r2, [r0, #14]
 8009af2:	6183      	str	r3, [r0, #24]
 8009af4:	4619      	mov	r1, r3
 8009af6:	2208      	movs	r2, #8
 8009af8:	305c      	adds	r0, #92	; 0x5c
 8009afa:	f7ff fcd1 	bl	80094a0 <memset>
 8009afe:	4b05      	ldr	r3, [pc, #20]	; (8009b14 <std+0x38>)
 8009b00:	6263      	str	r3, [r4, #36]	; 0x24
 8009b02:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <std+0x3c>)
 8009b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b06:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <std+0x40>)
 8009b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b0a:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <std+0x44>)
 8009b0c:	6224      	str	r4, [r4, #32]
 8009b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8009b10:	bd10      	pop	{r4, pc}
 8009b12:	bf00      	nop
 8009b14:	0800a3d1 	.word	0x0800a3d1
 8009b18:	0800a3f3 	.word	0x0800a3f3
 8009b1c:	0800a42b 	.word	0x0800a42b
 8009b20:	0800a44f 	.word	0x0800a44f

08009b24 <_cleanup_r>:
 8009b24:	4901      	ldr	r1, [pc, #4]	; (8009b2c <_cleanup_r+0x8>)
 8009b26:	f000 b8c1 	b.w	8009cac <_fwalk_reent>
 8009b2a:	bf00      	nop
 8009b2c:	08009a65 	.word	0x08009a65

08009b30 <__sfmoreglue>:
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	2268      	movs	r2, #104	; 0x68
 8009b34:	1e4d      	subs	r5, r1, #1
 8009b36:	4355      	muls	r5, r2
 8009b38:	460e      	mov	r6, r1
 8009b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b3e:	f7ff fd23 	bl	8009588 <_malloc_r>
 8009b42:	4604      	mov	r4, r0
 8009b44:	b140      	cbz	r0, 8009b58 <__sfmoreglue+0x28>
 8009b46:	2100      	movs	r1, #0
 8009b48:	e9c0 1600 	strd	r1, r6, [r0]
 8009b4c:	300c      	adds	r0, #12
 8009b4e:	60a0      	str	r0, [r4, #8]
 8009b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b54:	f7ff fca4 	bl	80094a0 <memset>
 8009b58:	4620      	mov	r0, r4
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}

08009b5c <__sfp_lock_acquire>:
 8009b5c:	4801      	ldr	r0, [pc, #4]	; (8009b64 <__sfp_lock_acquire+0x8>)
 8009b5e:	f7ff bc7e 	b.w	800945e <__retarget_lock_acquire_recursive>
 8009b62:	bf00      	nop
 8009b64:	20008ca1 	.word	0x20008ca1

08009b68 <__sfp_lock_release>:
 8009b68:	4801      	ldr	r0, [pc, #4]	; (8009b70 <__sfp_lock_release+0x8>)
 8009b6a:	f7ff bc79 	b.w	8009460 <__retarget_lock_release_recursive>
 8009b6e:	bf00      	nop
 8009b70:	20008ca1 	.word	0x20008ca1

08009b74 <__sinit_lock_acquire>:
 8009b74:	4801      	ldr	r0, [pc, #4]	; (8009b7c <__sinit_lock_acquire+0x8>)
 8009b76:	f7ff bc72 	b.w	800945e <__retarget_lock_acquire_recursive>
 8009b7a:	bf00      	nop
 8009b7c:	20008ca2 	.word	0x20008ca2

08009b80 <__sinit_lock_release>:
 8009b80:	4801      	ldr	r0, [pc, #4]	; (8009b88 <__sinit_lock_release+0x8>)
 8009b82:	f7ff bc6d 	b.w	8009460 <__retarget_lock_release_recursive>
 8009b86:	bf00      	nop
 8009b88:	20008ca2 	.word	0x20008ca2

08009b8c <__sinit>:
 8009b8c:	b510      	push	{r4, lr}
 8009b8e:	4604      	mov	r4, r0
 8009b90:	f7ff fff0 	bl	8009b74 <__sinit_lock_acquire>
 8009b94:	69a3      	ldr	r3, [r4, #24]
 8009b96:	b11b      	cbz	r3, 8009ba0 <__sinit+0x14>
 8009b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b9c:	f7ff bff0 	b.w	8009b80 <__sinit_lock_release>
 8009ba0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ba4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ba6:	4b13      	ldr	r3, [pc, #76]	; (8009bf4 <__sinit+0x68>)
 8009ba8:	4a13      	ldr	r2, [pc, #76]	; (8009bf8 <__sinit+0x6c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bae:	42a3      	cmp	r3, r4
 8009bb0:	bf04      	itt	eq
 8009bb2:	2301      	moveq	r3, #1
 8009bb4:	61a3      	streq	r3, [r4, #24]
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f000 f820 	bl	8009bfc <__sfp>
 8009bbc:	6060      	str	r0, [r4, #4]
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f000 f81c 	bl	8009bfc <__sfp>
 8009bc4:	60a0      	str	r0, [r4, #8]
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 f818 	bl	8009bfc <__sfp>
 8009bcc:	2200      	movs	r2, #0
 8009bce:	60e0      	str	r0, [r4, #12]
 8009bd0:	2104      	movs	r1, #4
 8009bd2:	6860      	ldr	r0, [r4, #4]
 8009bd4:	f7ff ff82 	bl	8009adc <std>
 8009bd8:	68a0      	ldr	r0, [r4, #8]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	2109      	movs	r1, #9
 8009bde:	f7ff ff7d 	bl	8009adc <std>
 8009be2:	68e0      	ldr	r0, [r4, #12]
 8009be4:	2202      	movs	r2, #2
 8009be6:	2112      	movs	r1, #18
 8009be8:	f7ff ff78 	bl	8009adc <std>
 8009bec:	2301      	movs	r3, #1
 8009bee:	61a3      	str	r3, [r4, #24]
 8009bf0:	e7d2      	b.n	8009b98 <__sinit+0xc>
 8009bf2:	bf00      	nop
 8009bf4:	0800b748 	.word	0x0800b748
 8009bf8:	08009b25 	.word	0x08009b25

08009bfc <__sfp>:
 8009bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfe:	4607      	mov	r7, r0
 8009c00:	f7ff ffac 	bl	8009b5c <__sfp_lock_acquire>
 8009c04:	4b1e      	ldr	r3, [pc, #120]	; (8009c80 <__sfp+0x84>)
 8009c06:	681e      	ldr	r6, [r3, #0]
 8009c08:	69b3      	ldr	r3, [r6, #24]
 8009c0a:	b913      	cbnz	r3, 8009c12 <__sfp+0x16>
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	f7ff ffbd 	bl	8009b8c <__sinit>
 8009c12:	3648      	adds	r6, #72	; 0x48
 8009c14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	d503      	bpl.n	8009c24 <__sfp+0x28>
 8009c1c:	6833      	ldr	r3, [r6, #0]
 8009c1e:	b30b      	cbz	r3, 8009c64 <__sfp+0x68>
 8009c20:	6836      	ldr	r6, [r6, #0]
 8009c22:	e7f7      	b.n	8009c14 <__sfp+0x18>
 8009c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c28:	b9d5      	cbnz	r5, 8009c60 <__sfp+0x64>
 8009c2a:	4b16      	ldr	r3, [pc, #88]	; (8009c84 <__sfp+0x88>)
 8009c2c:	60e3      	str	r3, [r4, #12]
 8009c2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c32:	6665      	str	r5, [r4, #100]	; 0x64
 8009c34:	f7ff fc12 	bl	800945c <__retarget_lock_init_recursive>
 8009c38:	f7ff ff96 	bl	8009b68 <__sfp_lock_release>
 8009c3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c44:	6025      	str	r5, [r4, #0]
 8009c46:	61a5      	str	r5, [r4, #24]
 8009c48:	2208      	movs	r2, #8
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c50:	f7ff fc26 	bl	80094a0 <memset>
 8009c54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c60:	3468      	adds	r4, #104	; 0x68
 8009c62:	e7d9      	b.n	8009c18 <__sfp+0x1c>
 8009c64:	2104      	movs	r1, #4
 8009c66:	4638      	mov	r0, r7
 8009c68:	f7ff ff62 	bl	8009b30 <__sfmoreglue>
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	6030      	str	r0, [r6, #0]
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d1d5      	bne.n	8009c20 <__sfp+0x24>
 8009c74:	f7ff ff78 	bl	8009b68 <__sfp_lock_release>
 8009c78:	230c      	movs	r3, #12
 8009c7a:	603b      	str	r3, [r7, #0]
 8009c7c:	e7ee      	b.n	8009c5c <__sfp+0x60>
 8009c7e:	bf00      	nop
 8009c80:	0800b748 	.word	0x0800b748
 8009c84:	ffff0001 	.word	0xffff0001

08009c88 <fiprintf>:
 8009c88:	b40e      	push	{r1, r2, r3}
 8009c8a:	b503      	push	{r0, r1, lr}
 8009c8c:	4601      	mov	r1, r0
 8009c8e:	ab03      	add	r3, sp, #12
 8009c90:	4805      	ldr	r0, [pc, #20]	; (8009ca8 <fiprintf+0x20>)
 8009c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c96:	6800      	ldr	r0, [r0, #0]
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	f000 f8d5 	bl	8009e48 <_vfiprintf_r>
 8009c9e:	b002      	add	sp, #8
 8009ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ca4:	b003      	add	sp, #12
 8009ca6:	4770      	bx	lr
 8009ca8:	20000010 	.word	0x20000010

08009cac <_fwalk_reent>:
 8009cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	4688      	mov	r8, r1
 8009cb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cb8:	2700      	movs	r7, #0
 8009cba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cbe:	f1b9 0901 	subs.w	r9, r9, #1
 8009cc2:	d505      	bpl.n	8009cd0 <_fwalk_reent+0x24>
 8009cc4:	6824      	ldr	r4, [r4, #0]
 8009cc6:	2c00      	cmp	r4, #0
 8009cc8:	d1f7      	bne.n	8009cba <_fwalk_reent+0xe>
 8009cca:	4638      	mov	r0, r7
 8009ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd0:	89ab      	ldrh	r3, [r5, #12]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d907      	bls.n	8009ce6 <_fwalk_reent+0x3a>
 8009cd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	d003      	beq.n	8009ce6 <_fwalk_reent+0x3a>
 8009cde:	4629      	mov	r1, r5
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	47c0      	blx	r8
 8009ce4:	4307      	orrs	r7, r0
 8009ce6:	3568      	adds	r5, #104	; 0x68
 8009ce8:	e7e9      	b.n	8009cbe <_fwalk_reent+0x12>
	...

08009cec <_gettimeofday_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4d07      	ldr	r5, [pc, #28]	; (8009d0c <_gettimeofday_r+0x20>)
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	602b      	str	r3, [r5, #0]
 8009cfa:	f001 fb7b 	bl	800b3f4 <_gettimeofday>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	d102      	bne.n	8009d08 <_gettimeofday_r+0x1c>
 8009d02:	682b      	ldr	r3, [r5, #0]
 8009d04:	b103      	cbz	r3, 8009d08 <_gettimeofday_r+0x1c>
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20008cac 	.word	0x20008cac

08009d10 <__swhatbuf_r>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	460e      	mov	r6, r1
 8009d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	b096      	sub	sp, #88	; 0x58
 8009d1c:	4614      	mov	r4, r2
 8009d1e:	461d      	mov	r5, r3
 8009d20:	da08      	bge.n	8009d34 <__swhatbuf_r+0x24>
 8009d22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	602a      	str	r2, [r5, #0]
 8009d2a:	061a      	lsls	r2, r3, #24
 8009d2c:	d410      	bmi.n	8009d50 <__swhatbuf_r+0x40>
 8009d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d32:	e00e      	b.n	8009d52 <__swhatbuf_r+0x42>
 8009d34:	466a      	mov	r2, sp
 8009d36:	f000 fbb9 	bl	800a4ac <_fstat_r>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	dbf1      	blt.n	8009d22 <__swhatbuf_r+0x12>
 8009d3e:	9a01      	ldr	r2, [sp, #4]
 8009d40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d48:	425a      	negs	r2, r3
 8009d4a:	415a      	adcs	r2, r3
 8009d4c:	602a      	str	r2, [r5, #0]
 8009d4e:	e7ee      	b.n	8009d2e <__swhatbuf_r+0x1e>
 8009d50:	2340      	movs	r3, #64	; 0x40
 8009d52:	2000      	movs	r0, #0
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	b016      	add	sp, #88	; 0x58
 8009d58:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d5c <__smakebuf_r>:
 8009d5c:	898b      	ldrh	r3, [r1, #12]
 8009d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d60:	079d      	lsls	r5, r3, #30
 8009d62:	4606      	mov	r6, r0
 8009d64:	460c      	mov	r4, r1
 8009d66:	d507      	bpl.n	8009d78 <__smakebuf_r+0x1c>
 8009d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	6123      	str	r3, [r4, #16]
 8009d70:	2301      	movs	r3, #1
 8009d72:	6163      	str	r3, [r4, #20]
 8009d74:	b002      	add	sp, #8
 8009d76:	bd70      	pop	{r4, r5, r6, pc}
 8009d78:	ab01      	add	r3, sp, #4
 8009d7a:	466a      	mov	r2, sp
 8009d7c:	f7ff ffc8 	bl	8009d10 <__swhatbuf_r>
 8009d80:	9900      	ldr	r1, [sp, #0]
 8009d82:	4605      	mov	r5, r0
 8009d84:	4630      	mov	r0, r6
 8009d86:	f7ff fbff 	bl	8009588 <_malloc_r>
 8009d8a:	b948      	cbnz	r0, 8009da0 <__smakebuf_r+0x44>
 8009d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d90:	059a      	lsls	r2, r3, #22
 8009d92:	d4ef      	bmi.n	8009d74 <__smakebuf_r+0x18>
 8009d94:	f023 0303 	bic.w	r3, r3, #3
 8009d98:	f043 0302 	orr.w	r3, r3, #2
 8009d9c:	81a3      	strh	r3, [r4, #12]
 8009d9e:	e7e3      	b.n	8009d68 <__smakebuf_r+0xc>
 8009da0:	4b0d      	ldr	r3, [pc, #52]	; (8009dd8 <__smakebuf_r+0x7c>)
 8009da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	6020      	str	r0, [r4, #0]
 8009da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	9b00      	ldr	r3, [sp, #0]
 8009db0:	6163      	str	r3, [r4, #20]
 8009db2:	9b01      	ldr	r3, [sp, #4]
 8009db4:	6120      	str	r0, [r4, #16]
 8009db6:	b15b      	cbz	r3, 8009dd0 <__smakebuf_r+0x74>
 8009db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f000 fb87 	bl	800a4d0 <_isatty_r>
 8009dc2:	b128      	cbz	r0, 8009dd0 <__smakebuf_r+0x74>
 8009dc4:	89a3      	ldrh	r3, [r4, #12]
 8009dc6:	f023 0303 	bic.w	r3, r3, #3
 8009dca:	f043 0301 	orr.w	r3, r3, #1
 8009dce:	81a3      	strh	r3, [r4, #12]
 8009dd0:	89a0      	ldrh	r0, [r4, #12]
 8009dd2:	4305      	orrs	r5, r0
 8009dd4:	81a5      	strh	r5, [r4, #12]
 8009dd6:	e7cd      	b.n	8009d74 <__smakebuf_r+0x18>
 8009dd8:	08009b25 	.word	0x08009b25

08009ddc <__malloc_lock>:
 8009ddc:	4801      	ldr	r0, [pc, #4]	; (8009de4 <__malloc_lock+0x8>)
 8009dde:	f7ff bb3e 	b.w	800945e <__retarget_lock_acquire_recursive>
 8009de2:	bf00      	nop
 8009de4:	20008ca0 	.word	0x20008ca0

08009de8 <__malloc_unlock>:
 8009de8:	4801      	ldr	r0, [pc, #4]	; (8009df0 <__malloc_unlock+0x8>)
 8009dea:	f7ff bb39 	b.w	8009460 <__retarget_lock_release_recursive>
 8009dee:	bf00      	nop
 8009df0:	20008ca0 	.word	0x20008ca0

08009df4 <__sfputc_r>:
 8009df4:	6893      	ldr	r3, [r2, #8]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	b410      	push	{r4}
 8009dfc:	6093      	str	r3, [r2, #8]
 8009dfe:	da08      	bge.n	8009e12 <__sfputc_r+0x1e>
 8009e00:	6994      	ldr	r4, [r2, #24]
 8009e02:	42a3      	cmp	r3, r4
 8009e04:	db01      	blt.n	8009e0a <__sfputc_r+0x16>
 8009e06:	290a      	cmp	r1, #10
 8009e08:	d103      	bne.n	8009e12 <__sfputc_r+0x1e>
 8009e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e0e:	f7ff bcc5 	b.w	800979c <__swbuf_r>
 8009e12:	6813      	ldr	r3, [r2, #0]
 8009e14:	1c58      	adds	r0, r3, #1
 8009e16:	6010      	str	r0, [r2, #0]
 8009e18:	7019      	strb	r1, [r3, #0]
 8009e1a:	4608      	mov	r0, r1
 8009e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <__sfputs_r>:
 8009e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e24:	4606      	mov	r6, r0
 8009e26:	460f      	mov	r7, r1
 8009e28:	4614      	mov	r4, r2
 8009e2a:	18d5      	adds	r5, r2, r3
 8009e2c:	42ac      	cmp	r4, r5
 8009e2e:	d101      	bne.n	8009e34 <__sfputs_r+0x12>
 8009e30:	2000      	movs	r0, #0
 8009e32:	e007      	b.n	8009e44 <__sfputs_r+0x22>
 8009e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e38:	463a      	mov	r2, r7
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f7ff ffda 	bl	8009df4 <__sfputc_r>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d1f3      	bne.n	8009e2c <__sfputs_r+0xa>
 8009e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e48 <_vfiprintf_r>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	b09d      	sub	sp, #116	; 0x74
 8009e50:	4614      	mov	r4, r2
 8009e52:	4698      	mov	r8, r3
 8009e54:	4606      	mov	r6, r0
 8009e56:	b118      	cbz	r0, 8009e60 <_vfiprintf_r+0x18>
 8009e58:	6983      	ldr	r3, [r0, #24]
 8009e5a:	b90b      	cbnz	r3, 8009e60 <_vfiprintf_r+0x18>
 8009e5c:	f7ff fe96 	bl	8009b8c <__sinit>
 8009e60:	4b89      	ldr	r3, [pc, #548]	; (800a088 <_vfiprintf_r+0x240>)
 8009e62:	429d      	cmp	r5, r3
 8009e64:	d11b      	bne.n	8009e9e <_vfiprintf_r+0x56>
 8009e66:	6875      	ldr	r5, [r6, #4]
 8009e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e6a:	07d9      	lsls	r1, r3, #31
 8009e6c:	d405      	bmi.n	8009e7a <_vfiprintf_r+0x32>
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	059a      	lsls	r2, r3, #22
 8009e72:	d402      	bmi.n	8009e7a <_vfiprintf_r+0x32>
 8009e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e76:	f7ff faf2 	bl	800945e <__retarget_lock_acquire_recursive>
 8009e7a:	89ab      	ldrh	r3, [r5, #12]
 8009e7c:	071b      	lsls	r3, r3, #28
 8009e7e:	d501      	bpl.n	8009e84 <_vfiprintf_r+0x3c>
 8009e80:	692b      	ldr	r3, [r5, #16]
 8009e82:	b9eb      	cbnz	r3, 8009ec0 <_vfiprintf_r+0x78>
 8009e84:	4629      	mov	r1, r5
 8009e86:	4630      	mov	r0, r6
 8009e88:	f7ff fcda 	bl	8009840 <__swsetup_r>
 8009e8c:	b1c0      	cbz	r0, 8009ec0 <_vfiprintf_r+0x78>
 8009e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e90:	07dc      	lsls	r4, r3, #31
 8009e92:	d50e      	bpl.n	8009eb2 <_vfiprintf_r+0x6a>
 8009e94:	f04f 30ff 	mov.w	r0, #4294967295
 8009e98:	b01d      	add	sp, #116	; 0x74
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	4b7b      	ldr	r3, [pc, #492]	; (800a08c <_vfiprintf_r+0x244>)
 8009ea0:	429d      	cmp	r5, r3
 8009ea2:	d101      	bne.n	8009ea8 <_vfiprintf_r+0x60>
 8009ea4:	68b5      	ldr	r5, [r6, #8]
 8009ea6:	e7df      	b.n	8009e68 <_vfiprintf_r+0x20>
 8009ea8:	4b79      	ldr	r3, [pc, #484]	; (800a090 <_vfiprintf_r+0x248>)
 8009eaa:	429d      	cmp	r5, r3
 8009eac:	bf08      	it	eq
 8009eae:	68f5      	ldreq	r5, [r6, #12]
 8009eb0:	e7da      	b.n	8009e68 <_vfiprintf_r+0x20>
 8009eb2:	89ab      	ldrh	r3, [r5, #12]
 8009eb4:	0598      	lsls	r0, r3, #22
 8009eb6:	d4ed      	bmi.n	8009e94 <_vfiprintf_r+0x4c>
 8009eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eba:	f7ff fad1 	bl	8009460 <__retarget_lock_release_recursive>
 8009ebe:	e7e9      	b.n	8009e94 <_vfiprintf_r+0x4c>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec4:	2320      	movs	r3, #32
 8009ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ece:	2330      	movs	r3, #48	; 0x30
 8009ed0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a094 <_vfiprintf_r+0x24c>
 8009ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ed8:	f04f 0901 	mov.w	r9, #1
 8009edc:	4623      	mov	r3, r4
 8009ede:	469a      	mov	sl, r3
 8009ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ee4:	b10a      	cbz	r2, 8009eea <_vfiprintf_r+0xa2>
 8009ee6:	2a25      	cmp	r2, #37	; 0x25
 8009ee8:	d1f9      	bne.n	8009ede <_vfiprintf_r+0x96>
 8009eea:	ebba 0b04 	subs.w	fp, sl, r4
 8009eee:	d00b      	beq.n	8009f08 <_vfiprintf_r+0xc0>
 8009ef0:	465b      	mov	r3, fp
 8009ef2:	4622      	mov	r2, r4
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f7ff ff93 	bl	8009e22 <__sfputs_r>
 8009efc:	3001      	adds	r0, #1
 8009efe:	f000 80aa 	beq.w	800a056 <_vfiprintf_r+0x20e>
 8009f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f04:	445a      	add	r2, fp
 8009f06:	9209      	str	r2, [sp, #36]	; 0x24
 8009f08:	f89a 3000 	ldrb.w	r3, [sl]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80a2 	beq.w	800a056 <_vfiprintf_r+0x20e>
 8009f12:	2300      	movs	r3, #0
 8009f14:	f04f 32ff 	mov.w	r2, #4294967295
 8009f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f1c:	f10a 0a01 	add.w	sl, sl, #1
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	9307      	str	r3, [sp, #28]
 8009f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f28:	931a      	str	r3, [sp, #104]	; 0x68
 8009f2a:	4654      	mov	r4, sl
 8009f2c:	2205      	movs	r2, #5
 8009f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f32:	4858      	ldr	r0, [pc, #352]	; (800a094 <_vfiprintf_r+0x24c>)
 8009f34:	f7f6 f94c 	bl	80001d0 <memchr>
 8009f38:	9a04      	ldr	r2, [sp, #16]
 8009f3a:	b9d8      	cbnz	r0, 8009f74 <_vfiprintf_r+0x12c>
 8009f3c:	06d1      	lsls	r1, r2, #27
 8009f3e:	bf44      	itt	mi
 8009f40:	2320      	movmi	r3, #32
 8009f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f46:	0713      	lsls	r3, r2, #28
 8009f48:	bf44      	itt	mi
 8009f4a:	232b      	movmi	r3, #43	; 0x2b
 8009f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f50:	f89a 3000 	ldrb.w	r3, [sl]
 8009f54:	2b2a      	cmp	r3, #42	; 0x2a
 8009f56:	d015      	beq.n	8009f84 <_vfiprintf_r+0x13c>
 8009f58:	9a07      	ldr	r2, [sp, #28]
 8009f5a:	4654      	mov	r4, sl
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f04f 0c0a 	mov.w	ip, #10
 8009f62:	4621      	mov	r1, r4
 8009f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f68:	3b30      	subs	r3, #48	; 0x30
 8009f6a:	2b09      	cmp	r3, #9
 8009f6c:	d94e      	bls.n	800a00c <_vfiprintf_r+0x1c4>
 8009f6e:	b1b0      	cbz	r0, 8009f9e <_vfiprintf_r+0x156>
 8009f70:	9207      	str	r2, [sp, #28]
 8009f72:	e014      	b.n	8009f9e <_vfiprintf_r+0x156>
 8009f74:	eba0 0308 	sub.w	r3, r0, r8
 8009f78:	fa09 f303 	lsl.w	r3, r9, r3
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	9304      	str	r3, [sp, #16]
 8009f80:	46a2      	mov	sl, r4
 8009f82:	e7d2      	b.n	8009f2a <_vfiprintf_r+0xe2>
 8009f84:	9b03      	ldr	r3, [sp, #12]
 8009f86:	1d19      	adds	r1, r3, #4
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	9103      	str	r1, [sp, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	bfbb      	ittet	lt
 8009f90:	425b      	neglt	r3, r3
 8009f92:	f042 0202 	orrlt.w	r2, r2, #2
 8009f96:	9307      	strge	r3, [sp, #28]
 8009f98:	9307      	strlt	r3, [sp, #28]
 8009f9a:	bfb8      	it	lt
 8009f9c:	9204      	strlt	r2, [sp, #16]
 8009f9e:	7823      	ldrb	r3, [r4, #0]
 8009fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8009fa2:	d10c      	bne.n	8009fbe <_vfiprintf_r+0x176>
 8009fa4:	7863      	ldrb	r3, [r4, #1]
 8009fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa8:	d135      	bne.n	800a016 <_vfiprintf_r+0x1ce>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	1d1a      	adds	r2, r3, #4
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	9203      	str	r2, [sp, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	bfb8      	it	lt
 8009fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fba:	3402      	adds	r4, #2
 8009fbc:	9305      	str	r3, [sp, #20]
 8009fbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0a4 <_vfiprintf_r+0x25c>
 8009fc2:	7821      	ldrb	r1, [r4, #0]
 8009fc4:	2203      	movs	r2, #3
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	f7f6 f902 	bl	80001d0 <memchr>
 8009fcc:	b140      	cbz	r0, 8009fe0 <_vfiprintf_r+0x198>
 8009fce:	2340      	movs	r3, #64	; 0x40
 8009fd0:	eba0 000a 	sub.w	r0, r0, sl
 8009fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8009fd8:	9b04      	ldr	r3, [sp, #16]
 8009fda:	4303      	orrs	r3, r0
 8009fdc:	3401      	adds	r4, #1
 8009fde:	9304      	str	r3, [sp, #16]
 8009fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe4:	482c      	ldr	r0, [pc, #176]	; (800a098 <_vfiprintf_r+0x250>)
 8009fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fea:	2206      	movs	r2, #6
 8009fec:	f7f6 f8f0 	bl	80001d0 <memchr>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d03f      	beq.n	800a074 <_vfiprintf_r+0x22c>
 8009ff4:	4b29      	ldr	r3, [pc, #164]	; (800a09c <_vfiprintf_r+0x254>)
 8009ff6:	bb1b      	cbnz	r3, 800a040 <_vfiprintf_r+0x1f8>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	3307      	adds	r3, #7
 8009ffc:	f023 0307 	bic.w	r3, r3, #7
 800a000:	3308      	adds	r3, #8
 800a002:	9303      	str	r3, [sp, #12]
 800a004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a006:	443b      	add	r3, r7
 800a008:	9309      	str	r3, [sp, #36]	; 0x24
 800a00a:	e767      	b.n	8009edc <_vfiprintf_r+0x94>
 800a00c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a010:	460c      	mov	r4, r1
 800a012:	2001      	movs	r0, #1
 800a014:	e7a5      	b.n	8009f62 <_vfiprintf_r+0x11a>
 800a016:	2300      	movs	r3, #0
 800a018:	3401      	adds	r4, #1
 800a01a:	9305      	str	r3, [sp, #20]
 800a01c:	4619      	mov	r1, r3
 800a01e:	f04f 0c0a 	mov.w	ip, #10
 800a022:	4620      	mov	r0, r4
 800a024:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a028:	3a30      	subs	r2, #48	; 0x30
 800a02a:	2a09      	cmp	r2, #9
 800a02c:	d903      	bls.n	800a036 <_vfiprintf_r+0x1ee>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0c5      	beq.n	8009fbe <_vfiprintf_r+0x176>
 800a032:	9105      	str	r1, [sp, #20]
 800a034:	e7c3      	b.n	8009fbe <_vfiprintf_r+0x176>
 800a036:	fb0c 2101 	mla	r1, ip, r1, r2
 800a03a:	4604      	mov	r4, r0
 800a03c:	2301      	movs	r3, #1
 800a03e:	e7f0      	b.n	800a022 <_vfiprintf_r+0x1da>
 800a040:	ab03      	add	r3, sp, #12
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	462a      	mov	r2, r5
 800a046:	4b16      	ldr	r3, [pc, #88]	; (800a0a0 <_vfiprintf_r+0x258>)
 800a048:	a904      	add	r1, sp, #16
 800a04a:	4630      	mov	r0, r6
 800a04c:	f3af 8000 	nop.w
 800a050:	4607      	mov	r7, r0
 800a052:	1c78      	adds	r0, r7, #1
 800a054:	d1d6      	bne.n	800a004 <_vfiprintf_r+0x1bc>
 800a056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a058:	07d9      	lsls	r1, r3, #31
 800a05a:	d405      	bmi.n	800a068 <_vfiprintf_r+0x220>
 800a05c:	89ab      	ldrh	r3, [r5, #12]
 800a05e:	059a      	lsls	r2, r3, #22
 800a060:	d402      	bmi.n	800a068 <_vfiprintf_r+0x220>
 800a062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a064:	f7ff f9fc 	bl	8009460 <__retarget_lock_release_recursive>
 800a068:	89ab      	ldrh	r3, [r5, #12]
 800a06a:	065b      	lsls	r3, r3, #25
 800a06c:	f53f af12 	bmi.w	8009e94 <_vfiprintf_r+0x4c>
 800a070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a072:	e711      	b.n	8009e98 <_vfiprintf_r+0x50>
 800a074:	ab03      	add	r3, sp, #12
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	462a      	mov	r2, r5
 800a07a:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <_vfiprintf_r+0x258>)
 800a07c:	a904      	add	r1, sp, #16
 800a07e:	4630      	mov	r0, r6
 800a080:	f000 f880 	bl	800a184 <_printf_i>
 800a084:	e7e4      	b.n	800a050 <_vfiprintf_r+0x208>
 800a086:	bf00      	nop
 800a088:	0800b81c 	.word	0x0800b81c
 800a08c:	0800b83c 	.word	0x0800b83c
 800a090:	0800b7fc 	.word	0x0800b7fc
 800a094:	0800b85c 	.word	0x0800b85c
 800a098:	0800b866 	.word	0x0800b866
 800a09c:	00000000 	.word	0x00000000
 800a0a0:	08009e23 	.word	0x08009e23
 800a0a4:	0800b862 	.word	0x0800b862

0800a0a8 <_printf_common>:
 800a0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ac:	4616      	mov	r6, r2
 800a0ae:	4699      	mov	r9, r3
 800a0b0:	688a      	ldr	r2, [r1, #8]
 800a0b2:	690b      	ldr	r3, [r1, #16]
 800a0b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	bfb8      	it	lt
 800a0bc:	4613      	movlt	r3, r2
 800a0be:	6033      	str	r3, [r6, #0]
 800a0c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	b10a      	cbz	r2, 800a0ce <_printf_common+0x26>
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	6033      	str	r3, [r6, #0]
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	0699      	lsls	r1, r3, #26
 800a0d2:	bf42      	ittt	mi
 800a0d4:	6833      	ldrmi	r3, [r6, #0]
 800a0d6:	3302      	addmi	r3, #2
 800a0d8:	6033      	strmi	r3, [r6, #0]
 800a0da:	6825      	ldr	r5, [r4, #0]
 800a0dc:	f015 0506 	ands.w	r5, r5, #6
 800a0e0:	d106      	bne.n	800a0f0 <_printf_common+0x48>
 800a0e2:	f104 0a19 	add.w	sl, r4, #25
 800a0e6:	68e3      	ldr	r3, [r4, #12]
 800a0e8:	6832      	ldr	r2, [r6, #0]
 800a0ea:	1a9b      	subs	r3, r3, r2
 800a0ec:	42ab      	cmp	r3, r5
 800a0ee:	dc26      	bgt.n	800a13e <_printf_common+0x96>
 800a0f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0f4:	1e13      	subs	r3, r2, #0
 800a0f6:	6822      	ldr	r2, [r4, #0]
 800a0f8:	bf18      	it	ne
 800a0fa:	2301      	movne	r3, #1
 800a0fc:	0692      	lsls	r2, r2, #26
 800a0fe:	d42b      	bmi.n	800a158 <_printf_common+0xb0>
 800a100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a104:	4649      	mov	r1, r9
 800a106:	4638      	mov	r0, r7
 800a108:	47c0      	blx	r8
 800a10a:	3001      	adds	r0, #1
 800a10c:	d01e      	beq.n	800a14c <_printf_common+0xa4>
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	68e5      	ldr	r5, [r4, #12]
 800a112:	6832      	ldr	r2, [r6, #0]
 800a114:	f003 0306 	and.w	r3, r3, #6
 800a118:	2b04      	cmp	r3, #4
 800a11a:	bf08      	it	eq
 800a11c:	1aad      	subeq	r5, r5, r2
 800a11e:	68a3      	ldr	r3, [r4, #8]
 800a120:	6922      	ldr	r2, [r4, #16]
 800a122:	bf0c      	ite	eq
 800a124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a128:	2500      	movne	r5, #0
 800a12a:	4293      	cmp	r3, r2
 800a12c:	bfc4      	itt	gt
 800a12e:	1a9b      	subgt	r3, r3, r2
 800a130:	18ed      	addgt	r5, r5, r3
 800a132:	2600      	movs	r6, #0
 800a134:	341a      	adds	r4, #26
 800a136:	42b5      	cmp	r5, r6
 800a138:	d11a      	bne.n	800a170 <_printf_common+0xc8>
 800a13a:	2000      	movs	r0, #0
 800a13c:	e008      	b.n	800a150 <_printf_common+0xa8>
 800a13e:	2301      	movs	r3, #1
 800a140:	4652      	mov	r2, sl
 800a142:	4649      	mov	r1, r9
 800a144:	4638      	mov	r0, r7
 800a146:	47c0      	blx	r8
 800a148:	3001      	adds	r0, #1
 800a14a:	d103      	bne.n	800a154 <_printf_common+0xac>
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295
 800a150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a154:	3501      	adds	r5, #1
 800a156:	e7c6      	b.n	800a0e6 <_printf_common+0x3e>
 800a158:	18e1      	adds	r1, r4, r3
 800a15a:	1c5a      	adds	r2, r3, #1
 800a15c:	2030      	movs	r0, #48	; 0x30
 800a15e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a162:	4422      	add	r2, r4
 800a164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a16c:	3302      	adds	r3, #2
 800a16e:	e7c7      	b.n	800a100 <_printf_common+0x58>
 800a170:	2301      	movs	r3, #1
 800a172:	4622      	mov	r2, r4
 800a174:	4649      	mov	r1, r9
 800a176:	4638      	mov	r0, r7
 800a178:	47c0      	blx	r8
 800a17a:	3001      	adds	r0, #1
 800a17c:	d0e6      	beq.n	800a14c <_printf_common+0xa4>
 800a17e:	3601      	adds	r6, #1
 800a180:	e7d9      	b.n	800a136 <_printf_common+0x8e>
	...

0800a184 <_printf_i>:
 800a184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a188:	7e0f      	ldrb	r7, [r1, #24]
 800a18a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a18c:	2f78      	cmp	r7, #120	; 0x78
 800a18e:	4691      	mov	r9, r2
 800a190:	4680      	mov	r8, r0
 800a192:	460c      	mov	r4, r1
 800a194:	469a      	mov	sl, r3
 800a196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a19a:	d807      	bhi.n	800a1ac <_printf_i+0x28>
 800a19c:	2f62      	cmp	r7, #98	; 0x62
 800a19e:	d80a      	bhi.n	800a1b6 <_printf_i+0x32>
 800a1a0:	2f00      	cmp	r7, #0
 800a1a2:	f000 80d8 	beq.w	800a356 <_printf_i+0x1d2>
 800a1a6:	2f58      	cmp	r7, #88	; 0x58
 800a1a8:	f000 80a3 	beq.w	800a2f2 <_printf_i+0x16e>
 800a1ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1b4:	e03a      	b.n	800a22c <_printf_i+0xa8>
 800a1b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1ba:	2b15      	cmp	r3, #21
 800a1bc:	d8f6      	bhi.n	800a1ac <_printf_i+0x28>
 800a1be:	a101      	add	r1, pc, #4	; (adr r1, 800a1c4 <_printf_i+0x40>)
 800a1c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1c4:	0800a21d 	.word	0x0800a21d
 800a1c8:	0800a231 	.word	0x0800a231
 800a1cc:	0800a1ad 	.word	0x0800a1ad
 800a1d0:	0800a1ad 	.word	0x0800a1ad
 800a1d4:	0800a1ad 	.word	0x0800a1ad
 800a1d8:	0800a1ad 	.word	0x0800a1ad
 800a1dc:	0800a231 	.word	0x0800a231
 800a1e0:	0800a1ad 	.word	0x0800a1ad
 800a1e4:	0800a1ad 	.word	0x0800a1ad
 800a1e8:	0800a1ad 	.word	0x0800a1ad
 800a1ec:	0800a1ad 	.word	0x0800a1ad
 800a1f0:	0800a33d 	.word	0x0800a33d
 800a1f4:	0800a261 	.word	0x0800a261
 800a1f8:	0800a31f 	.word	0x0800a31f
 800a1fc:	0800a1ad 	.word	0x0800a1ad
 800a200:	0800a1ad 	.word	0x0800a1ad
 800a204:	0800a35f 	.word	0x0800a35f
 800a208:	0800a1ad 	.word	0x0800a1ad
 800a20c:	0800a261 	.word	0x0800a261
 800a210:	0800a1ad 	.word	0x0800a1ad
 800a214:	0800a1ad 	.word	0x0800a1ad
 800a218:	0800a327 	.word	0x0800a327
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	1d1a      	adds	r2, r3, #4
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	602a      	str	r2, [r5, #0]
 800a224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a22c:	2301      	movs	r3, #1
 800a22e:	e0a3      	b.n	800a378 <_printf_i+0x1f4>
 800a230:	6820      	ldr	r0, [r4, #0]
 800a232:	6829      	ldr	r1, [r5, #0]
 800a234:	0606      	lsls	r6, r0, #24
 800a236:	f101 0304 	add.w	r3, r1, #4
 800a23a:	d50a      	bpl.n	800a252 <_printf_i+0xce>
 800a23c:	680e      	ldr	r6, [r1, #0]
 800a23e:	602b      	str	r3, [r5, #0]
 800a240:	2e00      	cmp	r6, #0
 800a242:	da03      	bge.n	800a24c <_printf_i+0xc8>
 800a244:	232d      	movs	r3, #45	; 0x2d
 800a246:	4276      	negs	r6, r6
 800a248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a24c:	485e      	ldr	r0, [pc, #376]	; (800a3c8 <_printf_i+0x244>)
 800a24e:	230a      	movs	r3, #10
 800a250:	e019      	b.n	800a286 <_printf_i+0x102>
 800a252:	680e      	ldr	r6, [r1, #0]
 800a254:	602b      	str	r3, [r5, #0]
 800a256:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a25a:	bf18      	it	ne
 800a25c:	b236      	sxthne	r6, r6
 800a25e:	e7ef      	b.n	800a240 <_printf_i+0xbc>
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	6820      	ldr	r0, [r4, #0]
 800a264:	1d19      	adds	r1, r3, #4
 800a266:	6029      	str	r1, [r5, #0]
 800a268:	0601      	lsls	r1, r0, #24
 800a26a:	d501      	bpl.n	800a270 <_printf_i+0xec>
 800a26c:	681e      	ldr	r6, [r3, #0]
 800a26e:	e002      	b.n	800a276 <_printf_i+0xf2>
 800a270:	0646      	lsls	r6, r0, #25
 800a272:	d5fb      	bpl.n	800a26c <_printf_i+0xe8>
 800a274:	881e      	ldrh	r6, [r3, #0]
 800a276:	4854      	ldr	r0, [pc, #336]	; (800a3c8 <_printf_i+0x244>)
 800a278:	2f6f      	cmp	r7, #111	; 0x6f
 800a27a:	bf0c      	ite	eq
 800a27c:	2308      	moveq	r3, #8
 800a27e:	230a      	movne	r3, #10
 800a280:	2100      	movs	r1, #0
 800a282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a286:	6865      	ldr	r5, [r4, #4]
 800a288:	60a5      	str	r5, [r4, #8]
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	bfa2      	ittt	ge
 800a28e:	6821      	ldrge	r1, [r4, #0]
 800a290:	f021 0104 	bicge.w	r1, r1, #4
 800a294:	6021      	strge	r1, [r4, #0]
 800a296:	b90e      	cbnz	r6, 800a29c <_printf_i+0x118>
 800a298:	2d00      	cmp	r5, #0
 800a29a:	d04d      	beq.n	800a338 <_printf_i+0x1b4>
 800a29c:	4615      	mov	r5, r2
 800a29e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2a2:	fb03 6711 	mls	r7, r3, r1, r6
 800a2a6:	5dc7      	ldrb	r7, [r0, r7]
 800a2a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2ac:	4637      	mov	r7, r6
 800a2ae:	42bb      	cmp	r3, r7
 800a2b0:	460e      	mov	r6, r1
 800a2b2:	d9f4      	bls.n	800a29e <_printf_i+0x11a>
 800a2b4:	2b08      	cmp	r3, #8
 800a2b6:	d10b      	bne.n	800a2d0 <_printf_i+0x14c>
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	07de      	lsls	r6, r3, #31
 800a2bc:	d508      	bpl.n	800a2d0 <_printf_i+0x14c>
 800a2be:	6923      	ldr	r3, [r4, #16]
 800a2c0:	6861      	ldr	r1, [r4, #4]
 800a2c2:	4299      	cmp	r1, r3
 800a2c4:	bfde      	ittt	le
 800a2c6:	2330      	movle	r3, #48	; 0x30
 800a2c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a2d0:	1b52      	subs	r2, r2, r5
 800a2d2:	6122      	str	r2, [r4, #16]
 800a2d4:	f8cd a000 	str.w	sl, [sp]
 800a2d8:	464b      	mov	r3, r9
 800a2da:	aa03      	add	r2, sp, #12
 800a2dc:	4621      	mov	r1, r4
 800a2de:	4640      	mov	r0, r8
 800a2e0:	f7ff fee2 	bl	800a0a8 <_printf_common>
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	d14c      	bne.n	800a382 <_printf_i+0x1fe>
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ec:	b004      	add	sp, #16
 800a2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f2:	4835      	ldr	r0, [pc, #212]	; (800a3c8 <_printf_i+0x244>)
 800a2f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a2f8:	6829      	ldr	r1, [r5, #0]
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a300:	6029      	str	r1, [r5, #0]
 800a302:	061d      	lsls	r5, r3, #24
 800a304:	d514      	bpl.n	800a330 <_printf_i+0x1ac>
 800a306:	07df      	lsls	r7, r3, #31
 800a308:	bf44      	itt	mi
 800a30a:	f043 0320 	orrmi.w	r3, r3, #32
 800a30e:	6023      	strmi	r3, [r4, #0]
 800a310:	b91e      	cbnz	r6, 800a31a <_printf_i+0x196>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	f023 0320 	bic.w	r3, r3, #32
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	2310      	movs	r3, #16
 800a31c:	e7b0      	b.n	800a280 <_printf_i+0xfc>
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	f043 0320 	orr.w	r3, r3, #32
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	2378      	movs	r3, #120	; 0x78
 800a328:	4828      	ldr	r0, [pc, #160]	; (800a3cc <_printf_i+0x248>)
 800a32a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a32e:	e7e3      	b.n	800a2f8 <_printf_i+0x174>
 800a330:	0659      	lsls	r1, r3, #25
 800a332:	bf48      	it	mi
 800a334:	b2b6      	uxthmi	r6, r6
 800a336:	e7e6      	b.n	800a306 <_printf_i+0x182>
 800a338:	4615      	mov	r5, r2
 800a33a:	e7bb      	b.n	800a2b4 <_printf_i+0x130>
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	6826      	ldr	r6, [r4, #0]
 800a340:	6961      	ldr	r1, [r4, #20]
 800a342:	1d18      	adds	r0, r3, #4
 800a344:	6028      	str	r0, [r5, #0]
 800a346:	0635      	lsls	r5, r6, #24
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	d501      	bpl.n	800a350 <_printf_i+0x1cc>
 800a34c:	6019      	str	r1, [r3, #0]
 800a34e:	e002      	b.n	800a356 <_printf_i+0x1d2>
 800a350:	0670      	lsls	r0, r6, #25
 800a352:	d5fb      	bpl.n	800a34c <_printf_i+0x1c8>
 800a354:	8019      	strh	r1, [r3, #0]
 800a356:	2300      	movs	r3, #0
 800a358:	6123      	str	r3, [r4, #16]
 800a35a:	4615      	mov	r5, r2
 800a35c:	e7ba      	b.n	800a2d4 <_printf_i+0x150>
 800a35e:	682b      	ldr	r3, [r5, #0]
 800a360:	1d1a      	adds	r2, r3, #4
 800a362:	602a      	str	r2, [r5, #0]
 800a364:	681d      	ldr	r5, [r3, #0]
 800a366:	6862      	ldr	r2, [r4, #4]
 800a368:	2100      	movs	r1, #0
 800a36a:	4628      	mov	r0, r5
 800a36c:	f7f5 ff30 	bl	80001d0 <memchr>
 800a370:	b108      	cbz	r0, 800a376 <_printf_i+0x1f2>
 800a372:	1b40      	subs	r0, r0, r5
 800a374:	6060      	str	r0, [r4, #4]
 800a376:	6863      	ldr	r3, [r4, #4]
 800a378:	6123      	str	r3, [r4, #16]
 800a37a:	2300      	movs	r3, #0
 800a37c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a380:	e7a8      	b.n	800a2d4 <_printf_i+0x150>
 800a382:	6923      	ldr	r3, [r4, #16]
 800a384:	462a      	mov	r2, r5
 800a386:	4649      	mov	r1, r9
 800a388:	4640      	mov	r0, r8
 800a38a:	47d0      	blx	sl
 800a38c:	3001      	adds	r0, #1
 800a38e:	d0ab      	beq.n	800a2e8 <_printf_i+0x164>
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	079b      	lsls	r3, r3, #30
 800a394:	d413      	bmi.n	800a3be <_printf_i+0x23a>
 800a396:	68e0      	ldr	r0, [r4, #12]
 800a398:	9b03      	ldr	r3, [sp, #12]
 800a39a:	4298      	cmp	r0, r3
 800a39c:	bfb8      	it	lt
 800a39e:	4618      	movlt	r0, r3
 800a3a0:	e7a4      	b.n	800a2ec <_printf_i+0x168>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	4632      	mov	r2, r6
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	4640      	mov	r0, r8
 800a3aa:	47d0      	blx	sl
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d09b      	beq.n	800a2e8 <_printf_i+0x164>
 800a3b0:	3501      	adds	r5, #1
 800a3b2:	68e3      	ldr	r3, [r4, #12]
 800a3b4:	9903      	ldr	r1, [sp, #12]
 800a3b6:	1a5b      	subs	r3, r3, r1
 800a3b8:	42ab      	cmp	r3, r5
 800a3ba:	dcf2      	bgt.n	800a3a2 <_printf_i+0x21e>
 800a3bc:	e7eb      	b.n	800a396 <_printf_i+0x212>
 800a3be:	2500      	movs	r5, #0
 800a3c0:	f104 0619 	add.w	r6, r4, #25
 800a3c4:	e7f5      	b.n	800a3b2 <_printf_i+0x22e>
 800a3c6:	bf00      	nop
 800a3c8:	0800b86d 	.word	0x0800b86d
 800a3cc:	0800b87e 	.word	0x0800b87e

0800a3d0 <__sread>:
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d8:	f000 f89c 	bl	800a514 <_read_r>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	bfab      	itete	ge
 800a3e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3e4:	181b      	addge	r3, r3, r0
 800a3e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3ea:	bfac      	ite	ge
 800a3ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3ee:	81a3      	strhlt	r3, [r4, #12]
 800a3f0:	bd10      	pop	{r4, pc}

0800a3f2 <__swrite>:
 800a3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f6:	461f      	mov	r7, r3
 800a3f8:	898b      	ldrh	r3, [r1, #12]
 800a3fa:	05db      	lsls	r3, r3, #23
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	460c      	mov	r4, r1
 800a400:	4616      	mov	r6, r2
 800a402:	d505      	bpl.n	800a410 <__swrite+0x1e>
 800a404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a408:	2302      	movs	r3, #2
 800a40a:	2200      	movs	r2, #0
 800a40c:	f000 f870 	bl	800a4f0 <_lseek_r>
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a41a:	81a3      	strh	r3, [r4, #12]
 800a41c:	4632      	mov	r2, r6
 800a41e:	463b      	mov	r3, r7
 800a420:	4628      	mov	r0, r5
 800a422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a426:	f000 b817 	b.w	800a458 <_write_r>

0800a42a <__sseek>:
 800a42a:	b510      	push	{r4, lr}
 800a42c:	460c      	mov	r4, r1
 800a42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a432:	f000 f85d 	bl	800a4f0 <_lseek_r>
 800a436:	1c43      	adds	r3, r0, #1
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	bf15      	itete	ne
 800a43c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a43e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a446:	81a3      	strheq	r3, [r4, #12]
 800a448:	bf18      	it	ne
 800a44a:	81a3      	strhne	r3, [r4, #12]
 800a44c:	bd10      	pop	{r4, pc}

0800a44e <__sclose>:
 800a44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a452:	f000 b81b 	b.w	800a48c <_close_r>
	...

0800a458 <_write_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4d07      	ldr	r5, [pc, #28]	; (800a478 <_write_r+0x20>)
 800a45c:	4604      	mov	r4, r0
 800a45e:	4608      	mov	r0, r1
 800a460:	4611      	mov	r1, r2
 800a462:	2200      	movs	r2, #0
 800a464:	602a      	str	r2, [r5, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	f7f8 fcbb 	bl	8002de2 <_write>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_write_r+0x1e>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_write_r+0x1e>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20008cac 	.word	0x20008cac

0800a47c <abort>:
 800a47c:	b508      	push	{r3, lr}
 800a47e:	2006      	movs	r0, #6
 800a480:	f000 f882 	bl	800a588 <raise>
 800a484:	2001      	movs	r0, #1
 800a486:	f7f8 fc85 	bl	8002d94 <_exit>
	...

0800a48c <_close_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4d06      	ldr	r5, [pc, #24]	; (800a4a8 <_close_r+0x1c>)
 800a490:	2300      	movs	r3, #0
 800a492:	4604      	mov	r4, r0
 800a494:	4608      	mov	r0, r1
 800a496:	602b      	str	r3, [r5, #0]
 800a498:	f7f8 fcbf 	bl	8002e1a <_close>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_close_r+0x1a>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_close_r+0x1a>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	20008cac 	.word	0x20008cac

0800a4ac <_fstat_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d07      	ldr	r5, [pc, #28]	; (800a4cc <_fstat_r+0x20>)
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	4608      	mov	r0, r1
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	602b      	str	r3, [r5, #0]
 800a4ba:	f7f8 fcba 	bl	8002e32 <_fstat>
 800a4be:	1c43      	adds	r3, r0, #1
 800a4c0:	d102      	bne.n	800a4c8 <_fstat_r+0x1c>
 800a4c2:	682b      	ldr	r3, [r5, #0]
 800a4c4:	b103      	cbz	r3, 800a4c8 <_fstat_r+0x1c>
 800a4c6:	6023      	str	r3, [r4, #0]
 800a4c8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ca:	bf00      	nop
 800a4cc:	20008cac 	.word	0x20008cac

0800a4d0 <_isatty_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4d06      	ldr	r5, [pc, #24]	; (800a4ec <_isatty_r+0x1c>)
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	4608      	mov	r0, r1
 800a4da:	602b      	str	r3, [r5, #0]
 800a4dc:	f7f8 fcb9 	bl	8002e52 <_isatty>
 800a4e0:	1c43      	adds	r3, r0, #1
 800a4e2:	d102      	bne.n	800a4ea <_isatty_r+0x1a>
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	b103      	cbz	r3, 800a4ea <_isatty_r+0x1a>
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	bd38      	pop	{r3, r4, r5, pc}
 800a4ec:	20008cac 	.word	0x20008cac

0800a4f0 <_lseek_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	4d07      	ldr	r5, [pc, #28]	; (800a510 <_lseek_r+0x20>)
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	4608      	mov	r0, r1
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	602a      	str	r2, [r5, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	f7f8 fcb2 	bl	8002e68 <_lseek>
 800a504:	1c43      	adds	r3, r0, #1
 800a506:	d102      	bne.n	800a50e <_lseek_r+0x1e>
 800a508:	682b      	ldr	r3, [r5, #0]
 800a50a:	b103      	cbz	r3, 800a50e <_lseek_r+0x1e>
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	bd38      	pop	{r3, r4, r5, pc}
 800a510:	20008cac 	.word	0x20008cac

0800a514 <_read_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	4d07      	ldr	r5, [pc, #28]	; (800a534 <_read_r+0x20>)
 800a518:	4604      	mov	r4, r0
 800a51a:	4608      	mov	r0, r1
 800a51c:	4611      	mov	r1, r2
 800a51e:	2200      	movs	r2, #0
 800a520:	602a      	str	r2, [r5, #0]
 800a522:	461a      	mov	r2, r3
 800a524:	f7f8 fc40 	bl	8002da8 <_read>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	d102      	bne.n	800a532 <_read_r+0x1e>
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	b103      	cbz	r3, 800a532 <_read_r+0x1e>
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	20008cac 	.word	0x20008cac

0800a538 <_raise_r>:
 800a538:	291f      	cmp	r1, #31
 800a53a:	b538      	push	{r3, r4, r5, lr}
 800a53c:	4604      	mov	r4, r0
 800a53e:	460d      	mov	r5, r1
 800a540:	d904      	bls.n	800a54c <_raise_r+0x14>
 800a542:	2316      	movs	r3, #22
 800a544:	6003      	str	r3, [r0, #0]
 800a546:	f04f 30ff 	mov.w	r0, #4294967295
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a54e:	b112      	cbz	r2, 800a556 <_raise_r+0x1e>
 800a550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a554:	b94b      	cbnz	r3, 800a56a <_raise_r+0x32>
 800a556:	4620      	mov	r0, r4
 800a558:	f000 f830 	bl	800a5bc <_getpid_r>
 800a55c:	462a      	mov	r2, r5
 800a55e:	4601      	mov	r1, r0
 800a560:	4620      	mov	r0, r4
 800a562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a566:	f000 b817 	b.w	800a598 <_kill_r>
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d00a      	beq.n	800a584 <_raise_r+0x4c>
 800a56e:	1c59      	adds	r1, r3, #1
 800a570:	d103      	bne.n	800a57a <_raise_r+0x42>
 800a572:	2316      	movs	r3, #22
 800a574:	6003      	str	r3, [r0, #0]
 800a576:	2001      	movs	r0, #1
 800a578:	e7e7      	b.n	800a54a <_raise_r+0x12>
 800a57a:	2400      	movs	r4, #0
 800a57c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a580:	4628      	mov	r0, r5
 800a582:	4798      	blx	r3
 800a584:	2000      	movs	r0, #0
 800a586:	e7e0      	b.n	800a54a <_raise_r+0x12>

0800a588 <raise>:
 800a588:	4b02      	ldr	r3, [pc, #8]	; (800a594 <raise+0xc>)
 800a58a:	4601      	mov	r1, r0
 800a58c:	6818      	ldr	r0, [r3, #0]
 800a58e:	f7ff bfd3 	b.w	800a538 <_raise_r>
 800a592:	bf00      	nop
 800a594:	20000010 	.word	0x20000010

0800a598 <_kill_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4d07      	ldr	r5, [pc, #28]	; (800a5b8 <_kill_r+0x20>)
 800a59c:	2300      	movs	r3, #0
 800a59e:	4604      	mov	r4, r0
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	602b      	str	r3, [r5, #0]
 800a5a6:	f7f8 fbe5 	bl	8002d74 <_kill>
 800a5aa:	1c43      	adds	r3, r0, #1
 800a5ac:	d102      	bne.n	800a5b4 <_kill_r+0x1c>
 800a5ae:	682b      	ldr	r3, [r5, #0]
 800a5b0:	b103      	cbz	r3, 800a5b4 <_kill_r+0x1c>
 800a5b2:	6023      	str	r3, [r4, #0]
 800a5b4:	bd38      	pop	{r3, r4, r5, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20008cac 	.word	0x20008cac

0800a5bc <_getpid_r>:
 800a5bc:	f7f8 bbd2 	b.w	8002d64 <_getpid>

0800a5c0 <pow>:
 800a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c2:	ed2d 8b02 	vpush	{d8}
 800a5c6:	eeb0 8a40 	vmov.f32	s16, s0
 800a5ca:	eef0 8a60 	vmov.f32	s17, s1
 800a5ce:	ec55 4b11 	vmov	r4, r5, d1
 800a5d2:	f000 f865 	bl	800a6a0 <__ieee754_pow>
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	462b      	mov	r3, r5
 800a5da:	4620      	mov	r0, r4
 800a5dc:	4629      	mov	r1, r5
 800a5de:	ec57 6b10 	vmov	r6, r7, d0
 800a5e2:	f7f6 fa9b 	bl	8000b1c <__aeabi_dcmpun>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d13b      	bne.n	800a662 <pow+0xa2>
 800a5ea:	ec51 0b18 	vmov	r0, r1, d8
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f7f6 fa61 	bl	8000ab8 <__aeabi_dcmpeq>
 800a5f6:	b1b8      	cbz	r0, 800a628 <pow+0x68>
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	4629      	mov	r1, r5
 800a600:	f7f6 fa5a 	bl	8000ab8 <__aeabi_dcmpeq>
 800a604:	2800      	cmp	r0, #0
 800a606:	d146      	bne.n	800a696 <pow+0xd6>
 800a608:	ec45 4b10 	vmov	d0, r4, r5
 800a60c:	f000 fe61 	bl	800b2d2 <finite>
 800a610:	b338      	cbz	r0, 800a662 <pow+0xa2>
 800a612:	2200      	movs	r2, #0
 800a614:	2300      	movs	r3, #0
 800a616:	4620      	mov	r0, r4
 800a618:	4629      	mov	r1, r5
 800a61a:	f7f6 fa57 	bl	8000acc <__aeabi_dcmplt>
 800a61e:	b300      	cbz	r0, 800a662 <pow+0xa2>
 800a620:	f7fe fe84 	bl	800932c <__errno>
 800a624:	2322      	movs	r3, #34	; 0x22
 800a626:	e01b      	b.n	800a660 <pow+0xa0>
 800a628:	ec47 6b10 	vmov	d0, r6, r7
 800a62c:	f000 fe51 	bl	800b2d2 <finite>
 800a630:	b9e0      	cbnz	r0, 800a66c <pow+0xac>
 800a632:	eeb0 0a48 	vmov.f32	s0, s16
 800a636:	eef0 0a68 	vmov.f32	s1, s17
 800a63a:	f000 fe4a 	bl	800b2d2 <finite>
 800a63e:	b1a8      	cbz	r0, 800a66c <pow+0xac>
 800a640:	ec45 4b10 	vmov	d0, r4, r5
 800a644:	f000 fe45 	bl	800b2d2 <finite>
 800a648:	b180      	cbz	r0, 800a66c <pow+0xac>
 800a64a:	4632      	mov	r2, r6
 800a64c:	463b      	mov	r3, r7
 800a64e:	4630      	mov	r0, r6
 800a650:	4639      	mov	r1, r7
 800a652:	f7f6 fa63 	bl	8000b1c <__aeabi_dcmpun>
 800a656:	2800      	cmp	r0, #0
 800a658:	d0e2      	beq.n	800a620 <pow+0x60>
 800a65a:	f7fe fe67 	bl	800932c <__errno>
 800a65e:	2321      	movs	r3, #33	; 0x21
 800a660:	6003      	str	r3, [r0, #0]
 800a662:	ecbd 8b02 	vpop	{d8}
 800a666:	ec47 6b10 	vmov	d0, r6, r7
 800a66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a66c:	2200      	movs	r2, #0
 800a66e:	2300      	movs	r3, #0
 800a670:	4630      	mov	r0, r6
 800a672:	4639      	mov	r1, r7
 800a674:	f7f6 fa20 	bl	8000ab8 <__aeabi_dcmpeq>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d0f2      	beq.n	800a662 <pow+0xa2>
 800a67c:	eeb0 0a48 	vmov.f32	s0, s16
 800a680:	eef0 0a68 	vmov.f32	s1, s17
 800a684:	f000 fe25 	bl	800b2d2 <finite>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d0ea      	beq.n	800a662 <pow+0xa2>
 800a68c:	ec45 4b10 	vmov	d0, r4, r5
 800a690:	f000 fe1f 	bl	800b2d2 <finite>
 800a694:	e7c3      	b.n	800a61e <pow+0x5e>
 800a696:	4f01      	ldr	r7, [pc, #4]	; (800a69c <pow+0xdc>)
 800a698:	2600      	movs	r6, #0
 800a69a:	e7e2      	b.n	800a662 <pow+0xa2>
 800a69c:	3ff00000 	.word	0x3ff00000

0800a6a0 <__ieee754_pow>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	ed2d 8b06 	vpush	{d8-d10}
 800a6a8:	b089      	sub	sp, #36	; 0x24
 800a6aa:	ed8d 1b00 	vstr	d1, [sp]
 800a6ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a6b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a6b6:	ea58 0102 	orrs.w	r1, r8, r2
 800a6ba:	ec57 6b10 	vmov	r6, r7, d0
 800a6be:	d115      	bne.n	800a6ec <__ieee754_pow+0x4c>
 800a6c0:	19b3      	adds	r3, r6, r6
 800a6c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a6c6:	4152      	adcs	r2, r2
 800a6c8:	4299      	cmp	r1, r3
 800a6ca:	4b89      	ldr	r3, [pc, #548]	; (800a8f0 <__ieee754_pow+0x250>)
 800a6cc:	4193      	sbcs	r3, r2
 800a6ce:	f080 84d2 	bcs.w	800b076 <__ieee754_pow+0x9d6>
 800a6d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	4639      	mov	r1, r7
 800a6da:	f7f5 fdcf 	bl	800027c <__adddf3>
 800a6de:	ec41 0b10 	vmov	d0, r0, r1
 800a6e2:	b009      	add	sp, #36	; 0x24
 800a6e4:	ecbd 8b06 	vpop	{d8-d10}
 800a6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ec:	4b81      	ldr	r3, [pc, #516]	; (800a8f4 <__ieee754_pow+0x254>)
 800a6ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a6f2:	429c      	cmp	r4, r3
 800a6f4:	ee10 aa10 	vmov	sl, s0
 800a6f8:	463d      	mov	r5, r7
 800a6fa:	dc06      	bgt.n	800a70a <__ieee754_pow+0x6a>
 800a6fc:	d101      	bne.n	800a702 <__ieee754_pow+0x62>
 800a6fe:	2e00      	cmp	r6, #0
 800a700:	d1e7      	bne.n	800a6d2 <__ieee754_pow+0x32>
 800a702:	4598      	cmp	r8, r3
 800a704:	dc01      	bgt.n	800a70a <__ieee754_pow+0x6a>
 800a706:	d10f      	bne.n	800a728 <__ieee754_pow+0x88>
 800a708:	b172      	cbz	r2, 800a728 <__ieee754_pow+0x88>
 800a70a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a70e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a712:	ea55 050a 	orrs.w	r5, r5, sl
 800a716:	d1dc      	bne.n	800a6d2 <__ieee754_pow+0x32>
 800a718:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a71c:	18db      	adds	r3, r3, r3
 800a71e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a722:	4152      	adcs	r2, r2
 800a724:	429d      	cmp	r5, r3
 800a726:	e7d0      	b.n	800a6ca <__ieee754_pow+0x2a>
 800a728:	2d00      	cmp	r5, #0
 800a72a:	da3b      	bge.n	800a7a4 <__ieee754_pow+0x104>
 800a72c:	4b72      	ldr	r3, [pc, #456]	; (800a8f8 <__ieee754_pow+0x258>)
 800a72e:	4598      	cmp	r8, r3
 800a730:	dc51      	bgt.n	800a7d6 <__ieee754_pow+0x136>
 800a732:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a736:	4598      	cmp	r8, r3
 800a738:	f340 84ac 	ble.w	800b094 <__ieee754_pow+0x9f4>
 800a73c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a740:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a744:	2b14      	cmp	r3, #20
 800a746:	dd0f      	ble.n	800a768 <__ieee754_pow+0xc8>
 800a748:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a74c:	fa22 f103 	lsr.w	r1, r2, r3
 800a750:	fa01 f303 	lsl.w	r3, r1, r3
 800a754:	4293      	cmp	r3, r2
 800a756:	f040 849d 	bne.w	800b094 <__ieee754_pow+0x9f4>
 800a75a:	f001 0101 	and.w	r1, r1, #1
 800a75e:	f1c1 0302 	rsb	r3, r1, #2
 800a762:	9304      	str	r3, [sp, #16]
 800a764:	b182      	cbz	r2, 800a788 <__ieee754_pow+0xe8>
 800a766:	e05f      	b.n	800a828 <__ieee754_pow+0x188>
 800a768:	2a00      	cmp	r2, #0
 800a76a:	d15b      	bne.n	800a824 <__ieee754_pow+0x184>
 800a76c:	f1c3 0314 	rsb	r3, r3, #20
 800a770:	fa48 f103 	asr.w	r1, r8, r3
 800a774:	fa01 f303 	lsl.w	r3, r1, r3
 800a778:	4543      	cmp	r3, r8
 800a77a:	f040 8488 	bne.w	800b08e <__ieee754_pow+0x9ee>
 800a77e:	f001 0101 	and.w	r1, r1, #1
 800a782:	f1c1 0302 	rsb	r3, r1, #2
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	4b5c      	ldr	r3, [pc, #368]	; (800a8fc <__ieee754_pow+0x25c>)
 800a78a:	4598      	cmp	r8, r3
 800a78c:	d132      	bne.n	800a7f4 <__ieee754_pow+0x154>
 800a78e:	f1b9 0f00 	cmp.w	r9, #0
 800a792:	f280 8478 	bge.w	800b086 <__ieee754_pow+0x9e6>
 800a796:	4959      	ldr	r1, [pc, #356]	; (800a8fc <__ieee754_pow+0x25c>)
 800a798:	4632      	mov	r2, r6
 800a79a:	463b      	mov	r3, r7
 800a79c:	2000      	movs	r0, #0
 800a79e:	f7f6 f84d 	bl	800083c <__aeabi_ddiv>
 800a7a2:	e79c      	b.n	800a6de <__ieee754_pow+0x3e>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	9304      	str	r3, [sp, #16]
 800a7a8:	2a00      	cmp	r2, #0
 800a7aa:	d13d      	bne.n	800a828 <__ieee754_pow+0x188>
 800a7ac:	4b51      	ldr	r3, [pc, #324]	; (800a8f4 <__ieee754_pow+0x254>)
 800a7ae:	4598      	cmp	r8, r3
 800a7b0:	d1ea      	bne.n	800a788 <__ieee754_pow+0xe8>
 800a7b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a7b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a7ba:	ea53 030a 	orrs.w	r3, r3, sl
 800a7be:	f000 845a 	beq.w	800b076 <__ieee754_pow+0x9d6>
 800a7c2:	4b4f      	ldr	r3, [pc, #316]	; (800a900 <__ieee754_pow+0x260>)
 800a7c4:	429c      	cmp	r4, r3
 800a7c6:	dd08      	ble.n	800a7da <__ieee754_pow+0x13a>
 800a7c8:	f1b9 0f00 	cmp.w	r9, #0
 800a7cc:	f2c0 8457 	blt.w	800b07e <__ieee754_pow+0x9de>
 800a7d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7d4:	e783      	b.n	800a6de <__ieee754_pow+0x3e>
 800a7d6:	2302      	movs	r3, #2
 800a7d8:	e7e5      	b.n	800a7a6 <__ieee754_pow+0x106>
 800a7da:	f1b9 0f00 	cmp.w	r9, #0
 800a7de:	f04f 0000 	mov.w	r0, #0
 800a7e2:	f04f 0100 	mov.w	r1, #0
 800a7e6:	f6bf af7a 	bge.w	800a6de <__ieee754_pow+0x3e>
 800a7ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a7ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a7f2:	e774      	b.n	800a6de <__ieee754_pow+0x3e>
 800a7f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a7f8:	d106      	bne.n	800a808 <__ieee754_pow+0x168>
 800a7fa:	4632      	mov	r2, r6
 800a7fc:	463b      	mov	r3, r7
 800a7fe:	4630      	mov	r0, r6
 800a800:	4639      	mov	r1, r7
 800a802:	f7f5 fef1 	bl	80005e8 <__aeabi_dmul>
 800a806:	e76a      	b.n	800a6de <__ieee754_pow+0x3e>
 800a808:	4b3e      	ldr	r3, [pc, #248]	; (800a904 <__ieee754_pow+0x264>)
 800a80a:	4599      	cmp	r9, r3
 800a80c:	d10c      	bne.n	800a828 <__ieee754_pow+0x188>
 800a80e:	2d00      	cmp	r5, #0
 800a810:	db0a      	blt.n	800a828 <__ieee754_pow+0x188>
 800a812:	ec47 6b10 	vmov	d0, r6, r7
 800a816:	b009      	add	sp, #36	; 0x24
 800a818:	ecbd 8b06 	vpop	{d8-d10}
 800a81c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a820:	f000 bc6c 	b.w	800b0fc <__ieee754_sqrt>
 800a824:	2300      	movs	r3, #0
 800a826:	9304      	str	r3, [sp, #16]
 800a828:	ec47 6b10 	vmov	d0, r6, r7
 800a82c:	f000 fd48 	bl	800b2c0 <fabs>
 800a830:	ec51 0b10 	vmov	r0, r1, d0
 800a834:	f1ba 0f00 	cmp.w	sl, #0
 800a838:	d129      	bne.n	800a88e <__ieee754_pow+0x1ee>
 800a83a:	b124      	cbz	r4, 800a846 <__ieee754_pow+0x1a6>
 800a83c:	4b2f      	ldr	r3, [pc, #188]	; (800a8fc <__ieee754_pow+0x25c>)
 800a83e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a842:	429a      	cmp	r2, r3
 800a844:	d123      	bne.n	800a88e <__ieee754_pow+0x1ee>
 800a846:	f1b9 0f00 	cmp.w	r9, #0
 800a84a:	da05      	bge.n	800a858 <__ieee754_pow+0x1b8>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	2000      	movs	r0, #0
 800a852:	492a      	ldr	r1, [pc, #168]	; (800a8fc <__ieee754_pow+0x25c>)
 800a854:	f7f5 fff2 	bl	800083c <__aeabi_ddiv>
 800a858:	2d00      	cmp	r5, #0
 800a85a:	f6bf af40 	bge.w	800a6de <__ieee754_pow+0x3e>
 800a85e:	9b04      	ldr	r3, [sp, #16]
 800a860:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a864:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a868:	4323      	orrs	r3, r4
 800a86a:	d108      	bne.n	800a87e <__ieee754_pow+0x1de>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4610      	mov	r0, r2
 800a872:	4619      	mov	r1, r3
 800a874:	f7f5 fd00 	bl	8000278 <__aeabi_dsub>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	e78f      	b.n	800a79e <__ieee754_pow+0xfe>
 800a87e:	9b04      	ldr	r3, [sp, #16]
 800a880:	2b01      	cmp	r3, #1
 800a882:	f47f af2c 	bne.w	800a6de <__ieee754_pow+0x3e>
 800a886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a88a:	4619      	mov	r1, r3
 800a88c:	e727      	b.n	800a6de <__ieee754_pow+0x3e>
 800a88e:	0feb      	lsrs	r3, r5, #31
 800a890:	3b01      	subs	r3, #1
 800a892:	9306      	str	r3, [sp, #24]
 800a894:	9a06      	ldr	r2, [sp, #24]
 800a896:	9b04      	ldr	r3, [sp, #16]
 800a898:	4313      	orrs	r3, r2
 800a89a:	d102      	bne.n	800a8a2 <__ieee754_pow+0x202>
 800a89c:	4632      	mov	r2, r6
 800a89e:	463b      	mov	r3, r7
 800a8a0:	e7e6      	b.n	800a870 <__ieee754_pow+0x1d0>
 800a8a2:	4b19      	ldr	r3, [pc, #100]	; (800a908 <__ieee754_pow+0x268>)
 800a8a4:	4598      	cmp	r8, r3
 800a8a6:	f340 80fb 	ble.w	800aaa0 <__ieee754_pow+0x400>
 800a8aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a8ae:	4598      	cmp	r8, r3
 800a8b0:	4b13      	ldr	r3, [pc, #76]	; (800a900 <__ieee754_pow+0x260>)
 800a8b2:	dd0c      	ble.n	800a8ce <__ieee754_pow+0x22e>
 800a8b4:	429c      	cmp	r4, r3
 800a8b6:	dc0f      	bgt.n	800a8d8 <__ieee754_pow+0x238>
 800a8b8:	f1b9 0f00 	cmp.w	r9, #0
 800a8bc:	da0f      	bge.n	800a8de <__ieee754_pow+0x23e>
 800a8be:	2000      	movs	r0, #0
 800a8c0:	b009      	add	sp, #36	; 0x24
 800a8c2:	ecbd 8b06 	vpop	{d8-d10}
 800a8c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ca:	f000 bcf0 	b.w	800b2ae <__math_oflow>
 800a8ce:	429c      	cmp	r4, r3
 800a8d0:	dbf2      	blt.n	800a8b8 <__ieee754_pow+0x218>
 800a8d2:	4b0a      	ldr	r3, [pc, #40]	; (800a8fc <__ieee754_pow+0x25c>)
 800a8d4:	429c      	cmp	r4, r3
 800a8d6:	dd19      	ble.n	800a90c <__ieee754_pow+0x26c>
 800a8d8:	f1b9 0f00 	cmp.w	r9, #0
 800a8dc:	dcef      	bgt.n	800a8be <__ieee754_pow+0x21e>
 800a8de:	2000      	movs	r0, #0
 800a8e0:	b009      	add	sp, #36	; 0x24
 800a8e2:	ecbd 8b06 	vpop	{d8-d10}
 800a8e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ea:	f000 bcd7 	b.w	800b29c <__math_uflow>
 800a8ee:	bf00      	nop
 800a8f0:	fff00000 	.word	0xfff00000
 800a8f4:	7ff00000 	.word	0x7ff00000
 800a8f8:	433fffff 	.word	0x433fffff
 800a8fc:	3ff00000 	.word	0x3ff00000
 800a900:	3fefffff 	.word	0x3fefffff
 800a904:	3fe00000 	.word	0x3fe00000
 800a908:	41e00000 	.word	0x41e00000
 800a90c:	4b60      	ldr	r3, [pc, #384]	; (800aa90 <__ieee754_pow+0x3f0>)
 800a90e:	2200      	movs	r2, #0
 800a910:	f7f5 fcb2 	bl	8000278 <__aeabi_dsub>
 800a914:	a354      	add	r3, pc, #336	; (adr r3, 800aa68 <__ieee754_pow+0x3c8>)
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	4604      	mov	r4, r0
 800a91c:	460d      	mov	r5, r1
 800a91e:	f7f5 fe63 	bl	80005e8 <__aeabi_dmul>
 800a922:	a353      	add	r3, pc, #332	; (adr r3, 800aa70 <__ieee754_pow+0x3d0>)
 800a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a928:	4606      	mov	r6, r0
 800a92a:	460f      	mov	r7, r1
 800a92c:	4620      	mov	r0, r4
 800a92e:	4629      	mov	r1, r5
 800a930:	f7f5 fe5a 	bl	80005e8 <__aeabi_dmul>
 800a934:	4b57      	ldr	r3, [pc, #348]	; (800aa94 <__ieee754_pow+0x3f4>)
 800a936:	4682      	mov	sl, r0
 800a938:	468b      	mov	fp, r1
 800a93a:	2200      	movs	r2, #0
 800a93c:	4620      	mov	r0, r4
 800a93e:	4629      	mov	r1, r5
 800a940:	f7f5 fe52 	bl	80005e8 <__aeabi_dmul>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	a14b      	add	r1, pc, #300	; (adr r1, 800aa78 <__ieee754_pow+0x3d8>)
 800a94a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a94e:	f7f5 fc93 	bl	8000278 <__aeabi_dsub>
 800a952:	4622      	mov	r2, r4
 800a954:	462b      	mov	r3, r5
 800a956:	f7f5 fe47 	bl	80005e8 <__aeabi_dmul>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	2000      	movs	r0, #0
 800a960:	494d      	ldr	r1, [pc, #308]	; (800aa98 <__ieee754_pow+0x3f8>)
 800a962:	f7f5 fc89 	bl	8000278 <__aeabi_dsub>
 800a966:	4622      	mov	r2, r4
 800a968:	4680      	mov	r8, r0
 800a96a:	4689      	mov	r9, r1
 800a96c:	462b      	mov	r3, r5
 800a96e:	4620      	mov	r0, r4
 800a970:	4629      	mov	r1, r5
 800a972:	f7f5 fe39 	bl	80005e8 <__aeabi_dmul>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4640      	mov	r0, r8
 800a97c:	4649      	mov	r1, r9
 800a97e:	f7f5 fe33 	bl	80005e8 <__aeabi_dmul>
 800a982:	a33f      	add	r3, pc, #252	; (adr r3, 800aa80 <__ieee754_pow+0x3e0>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	f7f5 fe2e 	bl	80005e8 <__aeabi_dmul>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	4650      	mov	r0, sl
 800a992:	4659      	mov	r1, fp
 800a994:	f7f5 fc70 	bl	8000278 <__aeabi_dsub>
 800a998:	4602      	mov	r2, r0
 800a99a:	460b      	mov	r3, r1
 800a99c:	4680      	mov	r8, r0
 800a99e:	4689      	mov	r9, r1
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	f7f5 fc6a 	bl	800027c <__adddf3>
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	4632      	mov	r2, r6
 800a9ac:	463b      	mov	r3, r7
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	f7f5 fc61 	bl	8000278 <__aeabi_dsub>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	4649      	mov	r1, r9
 800a9be:	f7f5 fc5b 	bl	8000278 <__aeabi_dsub>
 800a9c2:	9b04      	ldr	r3, [sp, #16]
 800a9c4:	9a06      	ldr	r2, [sp, #24]
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	4682      	mov	sl, r0
 800a9cc:	468b      	mov	fp, r1
 800a9ce:	f040 81e7 	bne.w	800ada0 <__ieee754_pow+0x700>
 800a9d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800aa88 <__ieee754_pow+0x3e8>
 800a9d6:	eeb0 8a47 	vmov.f32	s16, s14
 800a9da:	eef0 8a67 	vmov.f32	s17, s15
 800a9de:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a9e2:	2600      	movs	r6, #0
 800a9e4:	4632      	mov	r2, r6
 800a9e6:	463b      	mov	r3, r7
 800a9e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ec:	f7f5 fc44 	bl	8000278 <__aeabi_dsub>
 800a9f0:	4622      	mov	r2, r4
 800a9f2:	462b      	mov	r3, r5
 800a9f4:	f7f5 fdf8 	bl	80005e8 <__aeabi_dmul>
 800a9f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9fc:	4680      	mov	r8, r0
 800a9fe:	4689      	mov	r9, r1
 800aa00:	4650      	mov	r0, sl
 800aa02:	4659      	mov	r1, fp
 800aa04:	f7f5 fdf0 	bl	80005e8 <__aeabi_dmul>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4640      	mov	r0, r8
 800aa0e:	4649      	mov	r1, r9
 800aa10:	f7f5 fc34 	bl	800027c <__adddf3>
 800aa14:	4632      	mov	r2, r6
 800aa16:	463b      	mov	r3, r7
 800aa18:	4680      	mov	r8, r0
 800aa1a:	4689      	mov	r9, r1
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	4629      	mov	r1, r5
 800aa20:	f7f5 fde2 	bl	80005e8 <__aeabi_dmul>
 800aa24:	460b      	mov	r3, r1
 800aa26:	4604      	mov	r4, r0
 800aa28:	460d      	mov	r5, r1
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	4649      	mov	r1, r9
 800aa2e:	4640      	mov	r0, r8
 800aa30:	f7f5 fc24 	bl	800027c <__adddf3>
 800aa34:	4b19      	ldr	r3, [pc, #100]	; (800aa9c <__ieee754_pow+0x3fc>)
 800aa36:	4299      	cmp	r1, r3
 800aa38:	ec45 4b19 	vmov	d9, r4, r5
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	460f      	mov	r7, r1
 800aa40:	468b      	mov	fp, r1
 800aa42:	f340 82f1 	ble.w	800b028 <__ieee754_pow+0x988>
 800aa46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aa4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aa4e:	4303      	orrs	r3, r0
 800aa50:	f000 81e4 	beq.w	800ae1c <__ieee754_pow+0x77c>
 800aa54:	ec51 0b18 	vmov	r0, r1, d8
 800aa58:	2200      	movs	r2, #0
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f7f6 f836 	bl	8000acc <__aeabi_dcmplt>
 800aa60:	3800      	subs	r0, #0
 800aa62:	bf18      	it	ne
 800aa64:	2001      	movne	r0, #1
 800aa66:	e72b      	b.n	800a8c0 <__ieee754_pow+0x220>
 800aa68:	60000000 	.word	0x60000000
 800aa6c:	3ff71547 	.word	0x3ff71547
 800aa70:	f85ddf44 	.word	0xf85ddf44
 800aa74:	3e54ae0b 	.word	0x3e54ae0b
 800aa78:	55555555 	.word	0x55555555
 800aa7c:	3fd55555 	.word	0x3fd55555
 800aa80:	652b82fe 	.word	0x652b82fe
 800aa84:	3ff71547 	.word	0x3ff71547
 800aa88:	00000000 	.word	0x00000000
 800aa8c:	bff00000 	.word	0xbff00000
 800aa90:	3ff00000 	.word	0x3ff00000
 800aa94:	3fd00000 	.word	0x3fd00000
 800aa98:	3fe00000 	.word	0x3fe00000
 800aa9c:	408fffff 	.word	0x408fffff
 800aaa0:	4bd5      	ldr	r3, [pc, #852]	; (800adf8 <__ieee754_pow+0x758>)
 800aaa2:	402b      	ands	r3, r5
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	b92b      	cbnz	r3, 800aab4 <__ieee754_pow+0x414>
 800aaa8:	4bd4      	ldr	r3, [pc, #848]	; (800adfc <__ieee754_pow+0x75c>)
 800aaaa:	f7f5 fd9d 	bl	80005e8 <__aeabi_dmul>
 800aaae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aab2:	460c      	mov	r4, r1
 800aab4:	1523      	asrs	r3, r4, #20
 800aab6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aaba:	4413      	add	r3, r2
 800aabc:	9305      	str	r3, [sp, #20]
 800aabe:	4bd0      	ldr	r3, [pc, #832]	; (800ae00 <__ieee754_pow+0x760>)
 800aac0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aac4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aac8:	429c      	cmp	r4, r3
 800aaca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aace:	dd08      	ble.n	800aae2 <__ieee754_pow+0x442>
 800aad0:	4bcc      	ldr	r3, [pc, #816]	; (800ae04 <__ieee754_pow+0x764>)
 800aad2:	429c      	cmp	r4, r3
 800aad4:	f340 8162 	ble.w	800ad9c <__ieee754_pow+0x6fc>
 800aad8:	9b05      	ldr	r3, [sp, #20]
 800aada:	3301      	adds	r3, #1
 800aadc:	9305      	str	r3, [sp, #20]
 800aade:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aae2:	2400      	movs	r4, #0
 800aae4:	00e3      	lsls	r3, r4, #3
 800aae6:	9307      	str	r3, [sp, #28]
 800aae8:	4bc7      	ldr	r3, [pc, #796]	; (800ae08 <__ieee754_pow+0x768>)
 800aaea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aaee:	ed93 7b00 	vldr	d7, [r3]
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	ec53 2b17 	vmov	r2, r3, d7
 800aaf8:	eeb0 9a47 	vmov.f32	s18, s14
 800aafc:	eef0 9a67 	vmov.f32	s19, s15
 800ab00:	4682      	mov	sl, r0
 800ab02:	f7f5 fbb9 	bl	8000278 <__aeabi_dsub>
 800ab06:	4652      	mov	r2, sl
 800ab08:	4606      	mov	r6, r0
 800ab0a:	460f      	mov	r7, r1
 800ab0c:	462b      	mov	r3, r5
 800ab0e:	ec51 0b19 	vmov	r0, r1, d9
 800ab12:	f7f5 fbb3 	bl	800027c <__adddf3>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	49bb      	ldr	r1, [pc, #748]	; (800ae0c <__ieee754_pow+0x76c>)
 800ab1e:	f7f5 fe8d 	bl	800083c <__aeabi_ddiv>
 800ab22:	ec41 0b1a 	vmov	d10, r0, r1
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	f7f5 fd5b 	bl	80005e8 <__aeabi_dmul>
 800ab32:	2300      	movs	r3, #0
 800ab34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab38:	9302      	str	r3, [sp, #8]
 800ab3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab3e:	46ab      	mov	fp, r5
 800ab40:	106d      	asrs	r5, r5, #1
 800ab42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ab46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ab4a:	ec41 0b18 	vmov	d8, r0, r1
 800ab4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ab52:	2200      	movs	r2, #0
 800ab54:	4640      	mov	r0, r8
 800ab56:	4649      	mov	r1, r9
 800ab58:	4614      	mov	r4, r2
 800ab5a:	461d      	mov	r5, r3
 800ab5c:	f7f5 fd44 	bl	80005e8 <__aeabi_dmul>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4630      	mov	r0, r6
 800ab66:	4639      	mov	r1, r7
 800ab68:	f7f5 fb86 	bl	8000278 <__aeabi_dsub>
 800ab6c:	ec53 2b19 	vmov	r2, r3, d9
 800ab70:	4606      	mov	r6, r0
 800ab72:	460f      	mov	r7, r1
 800ab74:	4620      	mov	r0, r4
 800ab76:	4629      	mov	r1, r5
 800ab78:	f7f5 fb7e 	bl	8000278 <__aeabi_dsub>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4650      	mov	r0, sl
 800ab82:	4659      	mov	r1, fp
 800ab84:	f7f5 fb78 	bl	8000278 <__aeabi_dsub>
 800ab88:	4642      	mov	r2, r8
 800ab8a:	464b      	mov	r3, r9
 800ab8c:	f7f5 fd2c 	bl	80005e8 <__aeabi_dmul>
 800ab90:	4602      	mov	r2, r0
 800ab92:	460b      	mov	r3, r1
 800ab94:	4630      	mov	r0, r6
 800ab96:	4639      	mov	r1, r7
 800ab98:	f7f5 fb6e 	bl	8000278 <__aeabi_dsub>
 800ab9c:	ec53 2b1a 	vmov	r2, r3, d10
 800aba0:	f7f5 fd22 	bl	80005e8 <__aeabi_dmul>
 800aba4:	ec53 2b18 	vmov	r2, r3, d8
 800aba8:	ec41 0b19 	vmov	d9, r0, r1
 800abac:	ec51 0b18 	vmov	r0, r1, d8
 800abb0:	f7f5 fd1a 	bl	80005e8 <__aeabi_dmul>
 800abb4:	a37c      	add	r3, pc, #496	; (adr r3, 800ada8 <__ieee754_pow+0x708>)
 800abb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abba:	4604      	mov	r4, r0
 800abbc:	460d      	mov	r5, r1
 800abbe:	f7f5 fd13 	bl	80005e8 <__aeabi_dmul>
 800abc2:	a37b      	add	r3, pc, #492	; (adr r3, 800adb0 <__ieee754_pow+0x710>)
 800abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc8:	f7f5 fb58 	bl	800027c <__adddf3>
 800abcc:	4622      	mov	r2, r4
 800abce:	462b      	mov	r3, r5
 800abd0:	f7f5 fd0a 	bl	80005e8 <__aeabi_dmul>
 800abd4:	a378      	add	r3, pc, #480	; (adr r3, 800adb8 <__ieee754_pow+0x718>)
 800abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abda:	f7f5 fb4f 	bl	800027c <__adddf3>
 800abde:	4622      	mov	r2, r4
 800abe0:	462b      	mov	r3, r5
 800abe2:	f7f5 fd01 	bl	80005e8 <__aeabi_dmul>
 800abe6:	a376      	add	r3, pc, #472	; (adr r3, 800adc0 <__ieee754_pow+0x720>)
 800abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abec:	f7f5 fb46 	bl	800027c <__adddf3>
 800abf0:	4622      	mov	r2, r4
 800abf2:	462b      	mov	r3, r5
 800abf4:	f7f5 fcf8 	bl	80005e8 <__aeabi_dmul>
 800abf8:	a373      	add	r3, pc, #460	; (adr r3, 800adc8 <__ieee754_pow+0x728>)
 800abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfe:	f7f5 fb3d 	bl	800027c <__adddf3>
 800ac02:	4622      	mov	r2, r4
 800ac04:	462b      	mov	r3, r5
 800ac06:	f7f5 fcef 	bl	80005e8 <__aeabi_dmul>
 800ac0a:	a371      	add	r3, pc, #452	; (adr r3, 800add0 <__ieee754_pow+0x730>)
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f7f5 fb34 	bl	800027c <__adddf3>
 800ac14:	4622      	mov	r2, r4
 800ac16:	4606      	mov	r6, r0
 800ac18:	460f      	mov	r7, r1
 800ac1a:	462b      	mov	r3, r5
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	4629      	mov	r1, r5
 800ac20:	f7f5 fce2 	bl	80005e8 <__aeabi_dmul>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4630      	mov	r0, r6
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	f7f5 fcdc 	bl	80005e8 <__aeabi_dmul>
 800ac30:	4642      	mov	r2, r8
 800ac32:	4604      	mov	r4, r0
 800ac34:	460d      	mov	r5, r1
 800ac36:	464b      	mov	r3, r9
 800ac38:	ec51 0b18 	vmov	r0, r1, d8
 800ac3c:	f7f5 fb1e 	bl	800027c <__adddf3>
 800ac40:	ec53 2b19 	vmov	r2, r3, d9
 800ac44:	f7f5 fcd0 	bl	80005e8 <__aeabi_dmul>
 800ac48:	4622      	mov	r2, r4
 800ac4a:	462b      	mov	r3, r5
 800ac4c:	f7f5 fb16 	bl	800027c <__adddf3>
 800ac50:	4642      	mov	r2, r8
 800ac52:	4682      	mov	sl, r0
 800ac54:	468b      	mov	fp, r1
 800ac56:	464b      	mov	r3, r9
 800ac58:	4640      	mov	r0, r8
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	f7f5 fcc4 	bl	80005e8 <__aeabi_dmul>
 800ac60:	4b6b      	ldr	r3, [pc, #428]	; (800ae10 <__ieee754_pow+0x770>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	4606      	mov	r6, r0
 800ac66:	460f      	mov	r7, r1
 800ac68:	f7f5 fb08 	bl	800027c <__adddf3>
 800ac6c:	4652      	mov	r2, sl
 800ac6e:	465b      	mov	r3, fp
 800ac70:	f7f5 fb04 	bl	800027c <__adddf3>
 800ac74:	2000      	movs	r0, #0
 800ac76:	4604      	mov	r4, r0
 800ac78:	460d      	mov	r5, r1
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4640      	mov	r0, r8
 800ac80:	4649      	mov	r1, r9
 800ac82:	f7f5 fcb1 	bl	80005e8 <__aeabi_dmul>
 800ac86:	4b62      	ldr	r3, [pc, #392]	; (800ae10 <__ieee754_pow+0x770>)
 800ac88:	4680      	mov	r8, r0
 800ac8a:	4689      	mov	r9, r1
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4620      	mov	r0, r4
 800ac90:	4629      	mov	r1, r5
 800ac92:	f7f5 faf1 	bl	8000278 <__aeabi_dsub>
 800ac96:	4632      	mov	r2, r6
 800ac98:	463b      	mov	r3, r7
 800ac9a:	f7f5 faed 	bl	8000278 <__aeabi_dsub>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	460b      	mov	r3, r1
 800aca2:	4650      	mov	r0, sl
 800aca4:	4659      	mov	r1, fp
 800aca6:	f7f5 fae7 	bl	8000278 <__aeabi_dsub>
 800acaa:	ec53 2b18 	vmov	r2, r3, d8
 800acae:	f7f5 fc9b 	bl	80005e8 <__aeabi_dmul>
 800acb2:	4622      	mov	r2, r4
 800acb4:	4606      	mov	r6, r0
 800acb6:	460f      	mov	r7, r1
 800acb8:	462b      	mov	r3, r5
 800acba:	ec51 0b19 	vmov	r0, r1, d9
 800acbe:	f7f5 fc93 	bl	80005e8 <__aeabi_dmul>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	4630      	mov	r0, r6
 800acc8:	4639      	mov	r1, r7
 800acca:	f7f5 fad7 	bl	800027c <__adddf3>
 800acce:	4606      	mov	r6, r0
 800acd0:	460f      	mov	r7, r1
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
 800acd6:	4640      	mov	r0, r8
 800acd8:	4649      	mov	r1, r9
 800acda:	f7f5 facf 	bl	800027c <__adddf3>
 800acde:	a33e      	add	r3, pc, #248	; (adr r3, 800add8 <__ieee754_pow+0x738>)
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	2000      	movs	r0, #0
 800ace6:	4604      	mov	r4, r0
 800ace8:	460d      	mov	r5, r1
 800acea:	f7f5 fc7d 	bl	80005e8 <__aeabi_dmul>
 800acee:	4642      	mov	r2, r8
 800acf0:	ec41 0b18 	vmov	d8, r0, r1
 800acf4:	464b      	mov	r3, r9
 800acf6:	4620      	mov	r0, r4
 800acf8:	4629      	mov	r1, r5
 800acfa:	f7f5 fabd 	bl	8000278 <__aeabi_dsub>
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	4630      	mov	r0, r6
 800ad04:	4639      	mov	r1, r7
 800ad06:	f7f5 fab7 	bl	8000278 <__aeabi_dsub>
 800ad0a:	a335      	add	r3, pc, #212	; (adr r3, 800ade0 <__ieee754_pow+0x740>)
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f7f5 fc6a 	bl	80005e8 <__aeabi_dmul>
 800ad14:	a334      	add	r3, pc, #208	; (adr r3, 800ade8 <__ieee754_pow+0x748>)
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	460f      	mov	r7, r1
 800ad1e:	4620      	mov	r0, r4
 800ad20:	4629      	mov	r1, r5
 800ad22:	f7f5 fc61 	bl	80005e8 <__aeabi_dmul>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	f7f5 faa5 	bl	800027c <__adddf3>
 800ad32:	9a07      	ldr	r2, [sp, #28]
 800ad34:	4b37      	ldr	r3, [pc, #220]	; (800ae14 <__ieee754_pow+0x774>)
 800ad36:	4413      	add	r3, r2
 800ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3c:	f7f5 fa9e 	bl	800027c <__adddf3>
 800ad40:	4682      	mov	sl, r0
 800ad42:	9805      	ldr	r0, [sp, #20]
 800ad44:	468b      	mov	fp, r1
 800ad46:	f7f5 fbe5 	bl	8000514 <__aeabi_i2d>
 800ad4a:	9a07      	ldr	r2, [sp, #28]
 800ad4c:	4b32      	ldr	r3, [pc, #200]	; (800ae18 <__ieee754_pow+0x778>)
 800ad4e:	4413      	add	r3, r2
 800ad50:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad54:	4606      	mov	r6, r0
 800ad56:	460f      	mov	r7, r1
 800ad58:	4652      	mov	r2, sl
 800ad5a:	465b      	mov	r3, fp
 800ad5c:	ec51 0b18 	vmov	r0, r1, d8
 800ad60:	f7f5 fa8c 	bl	800027c <__adddf3>
 800ad64:	4642      	mov	r2, r8
 800ad66:	464b      	mov	r3, r9
 800ad68:	f7f5 fa88 	bl	800027c <__adddf3>
 800ad6c:	4632      	mov	r2, r6
 800ad6e:	463b      	mov	r3, r7
 800ad70:	f7f5 fa84 	bl	800027c <__adddf3>
 800ad74:	2000      	movs	r0, #0
 800ad76:	4632      	mov	r2, r6
 800ad78:	463b      	mov	r3, r7
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	460d      	mov	r5, r1
 800ad7e:	f7f5 fa7b 	bl	8000278 <__aeabi_dsub>
 800ad82:	4642      	mov	r2, r8
 800ad84:	464b      	mov	r3, r9
 800ad86:	f7f5 fa77 	bl	8000278 <__aeabi_dsub>
 800ad8a:	ec53 2b18 	vmov	r2, r3, d8
 800ad8e:	f7f5 fa73 	bl	8000278 <__aeabi_dsub>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	4650      	mov	r0, sl
 800ad98:	4659      	mov	r1, fp
 800ad9a:	e610      	b.n	800a9be <__ieee754_pow+0x31e>
 800ad9c:	2401      	movs	r4, #1
 800ad9e:	e6a1      	b.n	800aae4 <__ieee754_pow+0x444>
 800ada0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800adf0 <__ieee754_pow+0x750>
 800ada4:	e617      	b.n	800a9d6 <__ieee754_pow+0x336>
 800ada6:	bf00      	nop
 800ada8:	4a454eef 	.word	0x4a454eef
 800adac:	3fca7e28 	.word	0x3fca7e28
 800adb0:	93c9db65 	.word	0x93c9db65
 800adb4:	3fcd864a 	.word	0x3fcd864a
 800adb8:	a91d4101 	.word	0xa91d4101
 800adbc:	3fd17460 	.word	0x3fd17460
 800adc0:	518f264d 	.word	0x518f264d
 800adc4:	3fd55555 	.word	0x3fd55555
 800adc8:	db6fabff 	.word	0xdb6fabff
 800adcc:	3fdb6db6 	.word	0x3fdb6db6
 800add0:	33333303 	.word	0x33333303
 800add4:	3fe33333 	.word	0x3fe33333
 800add8:	e0000000 	.word	0xe0000000
 800addc:	3feec709 	.word	0x3feec709
 800ade0:	dc3a03fd 	.word	0xdc3a03fd
 800ade4:	3feec709 	.word	0x3feec709
 800ade8:	145b01f5 	.word	0x145b01f5
 800adec:	be3e2fe0 	.word	0xbe3e2fe0
 800adf0:	00000000 	.word	0x00000000
 800adf4:	3ff00000 	.word	0x3ff00000
 800adf8:	7ff00000 	.word	0x7ff00000
 800adfc:	43400000 	.word	0x43400000
 800ae00:	0003988e 	.word	0x0003988e
 800ae04:	000bb679 	.word	0x000bb679
 800ae08:	0800b890 	.word	0x0800b890
 800ae0c:	3ff00000 	.word	0x3ff00000
 800ae10:	40080000 	.word	0x40080000
 800ae14:	0800b8b0 	.word	0x0800b8b0
 800ae18:	0800b8a0 	.word	0x0800b8a0
 800ae1c:	a3b5      	add	r3, pc, #724	; (adr r3, 800b0f4 <__ieee754_pow+0xa54>)
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	4640      	mov	r0, r8
 800ae24:	4649      	mov	r1, r9
 800ae26:	f7f5 fa29 	bl	800027c <__adddf3>
 800ae2a:	4622      	mov	r2, r4
 800ae2c:	ec41 0b1a 	vmov	d10, r0, r1
 800ae30:	462b      	mov	r3, r5
 800ae32:	4630      	mov	r0, r6
 800ae34:	4639      	mov	r1, r7
 800ae36:	f7f5 fa1f 	bl	8000278 <__aeabi_dsub>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	ec51 0b1a 	vmov	r0, r1, d10
 800ae42:	f7f5 fe61 	bl	8000b08 <__aeabi_dcmpgt>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	f47f ae04 	bne.w	800aa54 <__ieee754_pow+0x3b4>
 800ae4c:	4aa4      	ldr	r2, [pc, #656]	; (800b0e0 <__ieee754_pow+0xa40>)
 800ae4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae52:	4293      	cmp	r3, r2
 800ae54:	f340 8108 	ble.w	800b068 <__ieee754_pow+0x9c8>
 800ae58:	151b      	asrs	r3, r3, #20
 800ae5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ae5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ae62:	fa4a f303 	asr.w	r3, sl, r3
 800ae66:	445b      	add	r3, fp
 800ae68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ae6c:	4e9d      	ldr	r6, [pc, #628]	; (800b0e4 <__ieee754_pow+0xa44>)
 800ae6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ae72:	4116      	asrs	r6, r2
 800ae74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ae78:	2000      	movs	r0, #0
 800ae7a:	ea23 0106 	bic.w	r1, r3, r6
 800ae7e:	f1c2 0214 	rsb	r2, r2, #20
 800ae82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ae86:	fa4a fa02 	asr.w	sl, sl, r2
 800ae8a:	f1bb 0f00 	cmp.w	fp, #0
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	4620      	mov	r0, r4
 800ae94:	4629      	mov	r1, r5
 800ae96:	bfb8      	it	lt
 800ae98:	f1ca 0a00 	rsblt	sl, sl, #0
 800ae9c:	f7f5 f9ec 	bl	8000278 <__aeabi_dsub>
 800aea0:	ec41 0b19 	vmov	d9, r0, r1
 800aea4:	4642      	mov	r2, r8
 800aea6:	464b      	mov	r3, r9
 800aea8:	ec51 0b19 	vmov	r0, r1, d9
 800aeac:	f7f5 f9e6 	bl	800027c <__adddf3>
 800aeb0:	a37b      	add	r3, pc, #492	; (adr r3, 800b0a0 <__ieee754_pow+0xa00>)
 800aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	4604      	mov	r4, r0
 800aeba:	460d      	mov	r5, r1
 800aebc:	f7f5 fb94 	bl	80005e8 <__aeabi_dmul>
 800aec0:	ec53 2b19 	vmov	r2, r3, d9
 800aec4:	4606      	mov	r6, r0
 800aec6:	460f      	mov	r7, r1
 800aec8:	4620      	mov	r0, r4
 800aeca:	4629      	mov	r1, r5
 800aecc:	f7f5 f9d4 	bl	8000278 <__aeabi_dsub>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	4640      	mov	r0, r8
 800aed6:	4649      	mov	r1, r9
 800aed8:	f7f5 f9ce 	bl	8000278 <__aeabi_dsub>
 800aedc:	a372      	add	r3, pc, #456	; (adr r3, 800b0a8 <__ieee754_pow+0xa08>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	f7f5 fb81 	bl	80005e8 <__aeabi_dmul>
 800aee6:	a372      	add	r3, pc, #456	; (adr r3, 800b0b0 <__ieee754_pow+0xa10>)
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	4680      	mov	r8, r0
 800aeee:	4689      	mov	r9, r1
 800aef0:	4620      	mov	r0, r4
 800aef2:	4629      	mov	r1, r5
 800aef4:	f7f5 fb78 	bl	80005e8 <__aeabi_dmul>
 800aef8:	4602      	mov	r2, r0
 800aefa:	460b      	mov	r3, r1
 800aefc:	4640      	mov	r0, r8
 800aefe:	4649      	mov	r1, r9
 800af00:	f7f5 f9bc 	bl	800027c <__adddf3>
 800af04:	4604      	mov	r4, r0
 800af06:	460d      	mov	r5, r1
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4630      	mov	r0, r6
 800af0e:	4639      	mov	r1, r7
 800af10:	f7f5 f9b4 	bl	800027c <__adddf3>
 800af14:	4632      	mov	r2, r6
 800af16:	463b      	mov	r3, r7
 800af18:	4680      	mov	r8, r0
 800af1a:	4689      	mov	r9, r1
 800af1c:	f7f5 f9ac 	bl	8000278 <__aeabi_dsub>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 f9a6 	bl	8000278 <__aeabi_dsub>
 800af2c:	4642      	mov	r2, r8
 800af2e:	4606      	mov	r6, r0
 800af30:	460f      	mov	r7, r1
 800af32:	464b      	mov	r3, r9
 800af34:	4640      	mov	r0, r8
 800af36:	4649      	mov	r1, r9
 800af38:	f7f5 fb56 	bl	80005e8 <__aeabi_dmul>
 800af3c:	a35e      	add	r3, pc, #376	; (adr r3, 800b0b8 <__ieee754_pow+0xa18>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	4604      	mov	r4, r0
 800af44:	460d      	mov	r5, r1
 800af46:	f7f5 fb4f 	bl	80005e8 <__aeabi_dmul>
 800af4a:	a35d      	add	r3, pc, #372	; (adr r3, 800b0c0 <__ieee754_pow+0xa20>)
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	f7f5 f992 	bl	8000278 <__aeabi_dsub>
 800af54:	4622      	mov	r2, r4
 800af56:	462b      	mov	r3, r5
 800af58:	f7f5 fb46 	bl	80005e8 <__aeabi_dmul>
 800af5c:	a35a      	add	r3, pc, #360	; (adr r3, 800b0c8 <__ieee754_pow+0xa28>)
 800af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af62:	f7f5 f98b 	bl	800027c <__adddf3>
 800af66:	4622      	mov	r2, r4
 800af68:	462b      	mov	r3, r5
 800af6a:	f7f5 fb3d 	bl	80005e8 <__aeabi_dmul>
 800af6e:	a358      	add	r3, pc, #352	; (adr r3, 800b0d0 <__ieee754_pow+0xa30>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 f980 	bl	8000278 <__aeabi_dsub>
 800af78:	4622      	mov	r2, r4
 800af7a:	462b      	mov	r3, r5
 800af7c:	f7f5 fb34 	bl	80005e8 <__aeabi_dmul>
 800af80:	a355      	add	r3, pc, #340	; (adr r3, 800b0d8 <__ieee754_pow+0xa38>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	f7f5 f979 	bl	800027c <__adddf3>
 800af8a:	4622      	mov	r2, r4
 800af8c:	462b      	mov	r3, r5
 800af8e:	f7f5 fb2b 	bl	80005e8 <__aeabi_dmul>
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	4640      	mov	r0, r8
 800af98:	4649      	mov	r1, r9
 800af9a:	f7f5 f96d 	bl	8000278 <__aeabi_dsub>
 800af9e:	4604      	mov	r4, r0
 800afa0:	460d      	mov	r5, r1
 800afa2:	4602      	mov	r2, r0
 800afa4:	460b      	mov	r3, r1
 800afa6:	4640      	mov	r0, r8
 800afa8:	4649      	mov	r1, r9
 800afaa:	f7f5 fb1d 	bl	80005e8 <__aeabi_dmul>
 800afae:	2200      	movs	r2, #0
 800afb0:	ec41 0b19 	vmov	d9, r0, r1
 800afb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800afb8:	4620      	mov	r0, r4
 800afba:	4629      	mov	r1, r5
 800afbc:	f7f5 f95c 	bl	8000278 <__aeabi_dsub>
 800afc0:	4602      	mov	r2, r0
 800afc2:	460b      	mov	r3, r1
 800afc4:	ec51 0b19 	vmov	r0, r1, d9
 800afc8:	f7f5 fc38 	bl	800083c <__aeabi_ddiv>
 800afcc:	4632      	mov	r2, r6
 800afce:	4604      	mov	r4, r0
 800afd0:	460d      	mov	r5, r1
 800afd2:	463b      	mov	r3, r7
 800afd4:	4640      	mov	r0, r8
 800afd6:	4649      	mov	r1, r9
 800afd8:	f7f5 fb06 	bl	80005e8 <__aeabi_dmul>
 800afdc:	4632      	mov	r2, r6
 800afde:	463b      	mov	r3, r7
 800afe0:	f7f5 f94c 	bl	800027c <__adddf3>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4620      	mov	r0, r4
 800afea:	4629      	mov	r1, r5
 800afec:	f7f5 f944 	bl	8000278 <__aeabi_dsub>
 800aff0:	4642      	mov	r2, r8
 800aff2:	464b      	mov	r3, r9
 800aff4:	f7f5 f940 	bl	8000278 <__aeabi_dsub>
 800aff8:	460b      	mov	r3, r1
 800affa:	4602      	mov	r2, r0
 800affc:	493a      	ldr	r1, [pc, #232]	; (800b0e8 <__ieee754_pow+0xa48>)
 800affe:	2000      	movs	r0, #0
 800b000:	f7f5 f93a 	bl	8000278 <__aeabi_dsub>
 800b004:	ec41 0b10 	vmov	d0, r0, r1
 800b008:	ee10 3a90 	vmov	r3, s1
 800b00c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b014:	da2b      	bge.n	800b06e <__ieee754_pow+0x9ce>
 800b016:	4650      	mov	r0, sl
 800b018:	f000 f966 	bl	800b2e8 <scalbn>
 800b01c:	ec51 0b10 	vmov	r0, r1, d0
 800b020:	ec53 2b18 	vmov	r2, r3, d8
 800b024:	f7ff bbed 	b.w	800a802 <__ieee754_pow+0x162>
 800b028:	4b30      	ldr	r3, [pc, #192]	; (800b0ec <__ieee754_pow+0xa4c>)
 800b02a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b02e:	429e      	cmp	r6, r3
 800b030:	f77f af0c 	ble.w	800ae4c <__ieee754_pow+0x7ac>
 800b034:	4b2e      	ldr	r3, [pc, #184]	; (800b0f0 <__ieee754_pow+0xa50>)
 800b036:	440b      	add	r3, r1
 800b038:	4303      	orrs	r3, r0
 800b03a:	d009      	beq.n	800b050 <__ieee754_pow+0x9b0>
 800b03c:	ec51 0b18 	vmov	r0, r1, d8
 800b040:	2200      	movs	r2, #0
 800b042:	2300      	movs	r3, #0
 800b044:	f7f5 fd42 	bl	8000acc <__aeabi_dcmplt>
 800b048:	3800      	subs	r0, #0
 800b04a:	bf18      	it	ne
 800b04c:	2001      	movne	r0, #1
 800b04e:	e447      	b.n	800a8e0 <__ieee754_pow+0x240>
 800b050:	4622      	mov	r2, r4
 800b052:	462b      	mov	r3, r5
 800b054:	f7f5 f910 	bl	8000278 <__aeabi_dsub>
 800b058:	4642      	mov	r2, r8
 800b05a:	464b      	mov	r3, r9
 800b05c:	f7f5 fd4a 	bl	8000af4 <__aeabi_dcmpge>
 800b060:	2800      	cmp	r0, #0
 800b062:	f43f aef3 	beq.w	800ae4c <__ieee754_pow+0x7ac>
 800b066:	e7e9      	b.n	800b03c <__ieee754_pow+0x99c>
 800b068:	f04f 0a00 	mov.w	sl, #0
 800b06c:	e71a      	b.n	800aea4 <__ieee754_pow+0x804>
 800b06e:	ec51 0b10 	vmov	r0, r1, d0
 800b072:	4619      	mov	r1, r3
 800b074:	e7d4      	b.n	800b020 <__ieee754_pow+0x980>
 800b076:	491c      	ldr	r1, [pc, #112]	; (800b0e8 <__ieee754_pow+0xa48>)
 800b078:	2000      	movs	r0, #0
 800b07a:	f7ff bb30 	b.w	800a6de <__ieee754_pow+0x3e>
 800b07e:	2000      	movs	r0, #0
 800b080:	2100      	movs	r1, #0
 800b082:	f7ff bb2c 	b.w	800a6de <__ieee754_pow+0x3e>
 800b086:	4630      	mov	r0, r6
 800b088:	4639      	mov	r1, r7
 800b08a:	f7ff bb28 	b.w	800a6de <__ieee754_pow+0x3e>
 800b08e:	9204      	str	r2, [sp, #16]
 800b090:	f7ff bb7a 	b.w	800a788 <__ieee754_pow+0xe8>
 800b094:	2300      	movs	r3, #0
 800b096:	f7ff bb64 	b.w	800a762 <__ieee754_pow+0xc2>
 800b09a:	bf00      	nop
 800b09c:	f3af 8000 	nop.w
 800b0a0:	00000000 	.word	0x00000000
 800b0a4:	3fe62e43 	.word	0x3fe62e43
 800b0a8:	fefa39ef 	.word	0xfefa39ef
 800b0ac:	3fe62e42 	.word	0x3fe62e42
 800b0b0:	0ca86c39 	.word	0x0ca86c39
 800b0b4:	be205c61 	.word	0xbe205c61
 800b0b8:	72bea4d0 	.word	0x72bea4d0
 800b0bc:	3e663769 	.word	0x3e663769
 800b0c0:	c5d26bf1 	.word	0xc5d26bf1
 800b0c4:	3ebbbd41 	.word	0x3ebbbd41
 800b0c8:	af25de2c 	.word	0xaf25de2c
 800b0cc:	3f11566a 	.word	0x3f11566a
 800b0d0:	16bebd93 	.word	0x16bebd93
 800b0d4:	3f66c16c 	.word	0x3f66c16c
 800b0d8:	5555553e 	.word	0x5555553e
 800b0dc:	3fc55555 	.word	0x3fc55555
 800b0e0:	3fe00000 	.word	0x3fe00000
 800b0e4:	000fffff 	.word	0x000fffff
 800b0e8:	3ff00000 	.word	0x3ff00000
 800b0ec:	4090cbff 	.word	0x4090cbff
 800b0f0:	3f6f3400 	.word	0x3f6f3400
 800b0f4:	652b82fe 	.word	0x652b82fe
 800b0f8:	3c971547 	.word	0x3c971547

0800b0fc <__ieee754_sqrt>:
 800b0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b100:	ec55 4b10 	vmov	r4, r5, d0
 800b104:	4e55      	ldr	r6, [pc, #340]	; (800b25c <__ieee754_sqrt+0x160>)
 800b106:	43ae      	bics	r6, r5
 800b108:	ee10 0a10 	vmov	r0, s0
 800b10c:	ee10 3a10 	vmov	r3, s0
 800b110:	462a      	mov	r2, r5
 800b112:	4629      	mov	r1, r5
 800b114:	d110      	bne.n	800b138 <__ieee754_sqrt+0x3c>
 800b116:	ee10 2a10 	vmov	r2, s0
 800b11a:	462b      	mov	r3, r5
 800b11c:	f7f5 fa64 	bl	80005e8 <__aeabi_dmul>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4620      	mov	r0, r4
 800b126:	4629      	mov	r1, r5
 800b128:	f7f5 f8a8 	bl	800027c <__adddf3>
 800b12c:	4604      	mov	r4, r0
 800b12e:	460d      	mov	r5, r1
 800b130:	ec45 4b10 	vmov	d0, r4, r5
 800b134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b138:	2d00      	cmp	r5, #0
 800b13a:	dc10      	bgt.n	800b15e <__ieee754_sqrt+0x62>
 800b13c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b140:	4330      	orrs	r0, r6
 800b142:	d0f5      	beq.n	800b130 <__ieee754_sqrt+0x34>
 800b144:	b15d      	cbz	r5, 800b15e <__ieee754_sqrt+0x62>
 800b146:	ee10 2a10 	vmov	r2, s0
 800b14a:	462b      	mov	r3, r5
 800b14c:	ee10 0a10 	vmov	r0, s0
 800b150:	f7f5 f892 	bl	8000278 <__aeabi_dsub>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	f7f5 fb70 	bl	800083c <__aeabi_ddiv>
 800b15c:	e7e6      	b.n	800b12c <__ieee754_sqrt+0x30>
 800b15e:	1512      	asrs	r2, r2, #20
 800b160:	d074      	beq.n	800b24c <__ieee754_sqrt+0x150>
 800b162:	07d4      	lsls	r4, r2, #31
 800b164:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b168:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b16c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b170:	bf5e      	ittt	pl
 800b172:	0fda      	lsrpl	r2, r3, #31
 800b174:	005b      	lslpl	r3, r3, #1
 800b176:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b17a:	2400      	movs	r4, #0
 800b17c:	0fda      	lsrs	r2, r3, #31
 800b17e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b182:	107f      	asrs	r7, r7, #1
 800b184:	005b      	lsls	r3, r3, #1
 800b186:	2516      	movs	r5, #22
 800b188:	4620      	mov	r0, r4
 800b18a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b18e:	1886      	adds	r6, r0, r2
 800b190:	428e      	cmp	r6, r1
 800b192:	bfde      	ittt	le
 800b194:	1b89      	suble	r1, r1, r6
 800b196:	18b0      	addle	r0, r6, r2
 800b198:	18a4      	addle	r4, r4, r2
 800b19a:	0049      	lsls	r1, r1, #1
 800b19c:	3d01      	subs	r5, #1
 800b19e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b1a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b1a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b1aa:	d1f0      	bne.n	800b18e <__ieee754_sqrt+0x92>
 800b1ac:	462a      	mov	r2, r5
 800b1ae:	f04f 0e20 	mov.w	lr, #32
 800b1b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b1b6:	4281      	cmp	r1, r0
 800b1b8:	eb06 0c05 	add.w	ip, r6, r5
 800b1bc:	dc02      	bgt.n	800b1c4 <__ieee754_sqrt+0xc8>
 800b1be:	d113      	bne.n	800b1e8 <__ieee754_sqrt+0xec>
 800b1c0:	459c      	cmp	ip, r3
 800b1c2:	d811      	bhi.n	800b1e8 <__ieee754_sqrt+0xec>
 800b1c4:	f1bc 0f00 	cmp.w	ip, #0
 800b1c8:	eb0c 0506 	add.w	r5, ip, r6
 800b1cc:	da43      	bge.n	800b256 <__ieee754_sqrt+0x15a>
 800b1ce:	2d00      	cmp	r5, #0
 800b1d0:	db41      	blt.n	800b256 <__ieee754_sqrt+0x15a>
 800b1d2:	f100 0801 	add.w	r8, r0, #1
 800b1d6:	1a09      	subs	r1, r1, r0
 800b1d8:	459c      	cmp	ip, r3
 800b1da:	bf88      	it	hi
 800b1dc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b1e0:	eba3 030c 	sub.w	r3, r3, ip
 800b1e4:	4432      	add	r2, r6
 800b1e6:	4640      	mov	r0, r8
 800b1e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b1ec:	f1be 0e01 	subs.w	lr, lr, #1
 800b1f0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b1f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b1f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b1fc:	d1db      	bne.n	800b1b6 <__ieee754_sqrt+0xba>
 800b1fe:	430b      	orrs	r3, r1
 800b200:	d006      	beq.n	800b210 <__ieee754_sqrt+0x114>
 800b202:	1c50      	adds	r0, r2, #1
 800b204:	bf13      	iteet	ne
 800b206:	3201      	addne	r2, #1
 800b208:	3401      	addeq	r4, #1
 800b20a:	4672      	moveq	r2, lr
 800b20c:	f022 0201 	bicne.w	r2, r2, #1
 800b210:	1063      	asrs	r3, r4, #1
 800b212:	0852      	lsrs	r2, r2, #1
 800b214:	07e1      	lsls	r1, r4, #31
 800b216:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b21a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b21e:	bf48      	it	mi
 800b220:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b224:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b228:	4614      	mov	r4, r2
 800b22a:	e781      	b.n	800b130 <__ieee754_sqrt+0x34>
 800b22c:	0ad9      	lsrs	r1, r3, #11
 800b22e:	3815      	subs	r0, #21
 800b230:	055b      	lsls	r3, r3, #21
 800b232:	2900      	cmp	r1, #0
 800b234:	d0fa      	beq.n	800b22c <__ieee754_sqrt+0x130>
 800b236:	02cd      	lsls	r5, r1, #11
 800b238:	d50a      	bpl.n	800b250 <__ieee754_sqrt+0x154>
 800b23a:	f1c2 0420 	rsb	r4, r2, #32
 800b23e:	fa23 f404 	lsr.w	r4, r3, r4
 800b242:	1e55      	subs	r5, r2, #1
 800b244:	4093      	lsls	r3, r2
 800b246:	4321      	orrs	r1, r4
 800b248:	1b42      	subs	r2, r0, r5
 800b24a:	e78a      	b.n	800b162 <__ieee754_sqrt+0x66>
 800b24c:	4610      	mov	r0, r2
 800b24e:	e7f0      	b.n	800b232 <__ieee754_sqrt+0x136>
 800b250:	0049      	lsls	r1, r1, #1
 800b252:	3201      	adds	r2, #1
 800b254:	e7ef      	b.n	800b236 <__ieee754_sqrt+0x13a>
 800b256:	4680      	mov	r8, r0
 800b258:	e7bd      	b.n	800b1d6 <__ieee754_sqrt+0xda>
 800b25a:	bf00      	nop
 800b25c:	7ff00000 	.word	0x7ff00000

0800b260 <with_errno>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	4604      	mov	r4, r0
 800b264:	460d      	mov	r5, r1
 800b266:	4616      	mov	r6, r2
 800b268:	f7fe f860 	bl	800932c <__errno>
 800b26c:	4629      	mov	r1, r5
 800b26e:	6006      	str	r6, [r0, #0]
 800b270:	4620      	mov	r0, r4
 800b272:	bd70      	pop	{r4, r5, r6, pc}

0800b274 <xflow>:
 800b274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b276:	4614      	mov	r4, r2
 800b278:	461d      	mov	r5, r3
 800b27a:	b108      	cbz	r0, 800b280 <xflow+0xc>
 800b27c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b280:	e9cd 2300 	strd	r2, r3, [sp]
 800b284:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b288:	4620      	mov	r0, r4
 800b28a:	4629      	mov	r1, r5
 800b28c:	f7f5 f9ac 	bl	80005e8 <__aeabi_dmul>
 800b290:	2222      	movs	r2, #34	; 0x22
 800b292:	b003      	add	sp, #12
 800b294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b298:	f7ff bfe2 	b.w	800b260 <with_errno>

0800b29c <__math_uflow>:
 800b29c:	b508      	push	{r3, lr}
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b2a4:	f7ff ffe6 	bl	800b274 <xflow>
 800b2a8:	ec41 0b10 	vmov	d0, r0, r1
 800b2ac:	bd08      	pop	{r3, pc}

0800b2ae <__math_oflow>:
 800b2ae:	b508      	push	{r3, lr}
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b2b6:	f7ff ffdd 	bl	800b274 <xflow>
 800b2ba:	ec41 0b10 	vmov	d0, r0, r1
 800b2be:	bd08      	pop	{r3, pc}

0800b2c0 <fabs>:
 800b2c0:	ec51 0b10 	vmov	r0, r1, d0
 800b2c4:	ee10 2a10 	vmov	r2, s0
 800b2c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b2cc:	ec43 2b10 	vmov	d0, r2, r3
 800b2d0:	4770      	bx	lr

0800b2d2 <finite>:
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	ed8d 0b00 	vstr	d0, [sp]
 800b2d8:	9801      	ldr	r0, [sp, #4]
 800b2da:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b2de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b2e2:	0fc0      	lsrs	r0, r0, #31
 800b2e4:	b002      	add	sp, #8
 800b2e6:	4770      	bx	lr

0800b2e8 <scalbn>:
 800b2e8:	b570      	push	{r4, r5, r6, lr}
 800b2ea:	ec55 4b10 	vmov	r4, r5, d0
 800b2ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b2f2:	4606      	mov	r6, r0
 800b2f4:	462b      	mov	r3, r5
 800b2f6:	b99a      	cbnz	r2, 800b320 <scalbn+0x38>
 800b2f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b2fc:	4323      	orrs	r3, r4
 800b2fe:	d036      	beq.n	800b36e <scalbn+0x86>
 800b300:	4b39      	ldr	r3, [pc, #228]	; (800b3e8 <scalbn+0x100>)
 800b302:	4629      	mov	r1, r5
 800b304:	ee10 0a10 	vmov	r0, s0
 800b308:	2200      	movs	r2, #0
 800b30a:	f7f5 f96d 	bl	80005e8 <__aeabi_dmul>
 800b30e:	4b37      	ldr	r3, [pc, #220]	; (800b3ec <scalbn+0x104>)
 800b310:	429e      	cmp	r6, r3
 800b312:	4604      	mov	r4, r0
 800b314:	460d      	mov	r5, r1
 800b316:	da10      	bge.n	800b33a <scalbn+0x52>
 800b318:	a32b      	add	r3, pc, #172	; (adr r3, 800b3c8 <scalbn+0xe0>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	e03a      	b.n	800b396 <scalbn+0xae>
 800b320:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b324:	428a      	cmp	r2, r1
 800b326:	d10c      	bne.n	800b342 <scalbn+0x5a>
 800b328:	ee10 2a10 	vmov	r2, s0
 800b32c:	4620      	mov	r0, r4
 800b32e:	4629      	mov	r1, r5
 800b330:	f7f4 ffa4 	bl	800027c <__adddf3>
 800b334:	4604      	mov	r4, r0
 800b336:	460d      	mov	r5, r1
 800b338:	e019      	b.n	800b36e <scalbn+0x86>
 800b33a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b33e:	460b      	mov	r3, r1
 800b340:	3a36      	subs	r2, #54	; 0x36
 800b342:	4432      	add	r2, r6
 800b344:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b348:	428a      	cmp	r2, r1
 800b34a:	dd08      	ble.n	800b35e <scalbn+0x76>
 800b34c:	2d00      	cmp	r5, #0
 800b34e:	a120      	add	r1, pc, #128	; (adr r1, 800b3d0 <scalbn+0xe8>)
 800b350:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b354:	da1c      	bge.n	800b390 <scalbn+0xa8>
 800b356:	a120      	add	r1, pc, #128	; (adr r1, 800b3d8 <scalbn+0xf0>)
 800b358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b35c:	e018      	b.n	800b390 <scalbn+0xa8>
 800b35e:	2a00      	cmp	r2, #0
 800b360:	dd08      	ble.n	800b374 <scalbn+0x8c>
 800b362:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b366:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b36a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b36e:	ec45 4b10 	vmov	d0, r4, r5
 800b372:	bd70      	pop	{r4, r5, r6, pc}
 800b374:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b378:	da19      	bge.n	800b3ae <scalbn+0xc6>
 800b37a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b37e:	429e      	cmp	r6, r3
 800b380:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b384:	dd0a      	ble.n	800b39c <scalbn+0xb4>
 800b386:	a112      	add	r1, pc, #72	; (adr r1, 800b3d0 <scalbn+0xe8>)
 800b388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1e2      	bne.n	800b356 <scalbn+0x6e>
 800b390:	a30f      	add	r3, pc, #60	; (adr r3, 800b3d0 <scalbn+0xe8>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f5 f927 	bl	80005e8 <__aeabi_dmul>
 800b39a:	e7cb      	b.n	800b334 <scalbn+0x4c>
 800b39c:	a10a      	add	r1, pc, #40	; (adr r1, 800b3c8 <scalbn+0xe0>)
 800b39e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0b8      	beq.n	800b318 <scalbn+0x30>
 800b3a6:	a10e      	add	r1, pc, #56	; (adr r1, 800b3e0 <scalbn+0xf8>)
 800b3a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ac:	e7b4      	b.n	800b318 <scalbn+0x30>
 800b3ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3b2:	3236      	adds	r2, #54	; 0x36
 800b3b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b3b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b3bc:	4620      	mov	r0, r4
 800b3be:	4b0c      	ldr	r3, [pc, #48]	; (800b3f0 <scalbn+0x108>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	e7e8      	b.n	800b396 <scalbn+0xae>
 800b3c4:	f3af 8000 	nop.w
 800b3c8:	c2f8f359 	.word	0xc2f8f359
 800b3cc:	01a56e1f 	.word	0x01a56e1f
 800b3d0:	8800759c 	.word	0x8800759c
 800b3d4:	7e37e43c 	.word	0x7e37e43c
 800b3d8:	8800759c 	.word	0x8800759c
 800b3dc:	fe37e43c 	.word	0xfe37e43c
 800b3e0:	c2f8f359 	.word	0xc2f8f359
 800b3e4:	81a56e1f 	.word	0x81a56e1f
 800b3e8:	43500000 	.word	0x43500000
 800b3ec:	ffff3cb0 	.word	0xffff3cb0
 800b3f0:	3c900000 	.word	0x3c900000

0800b3f4 <_gettimeofday>:
 800b3f4:	4b02      	ldr	r3, [pc, #8]	; (800b400 <_gettimeofday+0xc>)
 800b3f6:	2258      	movs	r2, #88	; 0x58
 800b3f8:	601a      	str	r2, [r3, #0]
 800b3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fe:	4770      	bx	lr
 800b400:	20008cac 	.word	0x20008cac

0800b404 <_init>:
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	bf00      	nop
 800b408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40a:	bc08      	pop	{r3}
 800b40c:	469e      	mov	lr, r3
 800b40e:	4770      	bx	lr

0800b410 <_fini>:
 800b410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b412:	bf00      	nop
 800b414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b416:	bc08      	pop	{r3}
 800b418:	469e      	mov	lr, r3
 800b41a:	4770      	bx	lr
